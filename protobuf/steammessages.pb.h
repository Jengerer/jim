// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages.proto

#ifndef PROTOBUF_steammessages_2eproto__INCLUDED
#define PROTOBUF_steammessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_steammessages_2eproto();
void protobuf_AssignDesc_steammessages_2eproto();
void protobuf_ShutdownFile_steammessages_2eproto();

class CMsgProtoBufHeader;
class CMsgWebAPIKey;
class CMsgHttpRequest;
class CMsgHttpRequest_RequestHeader;
class CMsgHttpRequest_QueryParam;
class CMsgWebAPIRequest;
class CMsgHttpResponse;
class CMsgHttpResponse_ResponseHeader;
class CMsgAMFindAccounts;
class CMsgAMFindAccountsResponse;
class CMsgNotifyWatchdog;
class CMsgAMGetLicenses;
class CMsgPackageLicense;
class CMsgAMGetLicensesResponse;
class CMsgAMGetUserGameStats;
class CMsgAMGetUserGameStatsResponse;
class CMsgAMGetUserGameStatsResponse_Stats;
class CMsgAMGetUserGameStatsResponse_Achievement_Blocks;
class CMsgGCGetCommandList;
class CMsgGCGetCommandListResponse;
class CGCMsgMemCachedGet;
class CGCMsgMemCachedGetResponse;
class CGCMsgMemCachedGetResponse_ValueTag;
class CGCMsgMemCachedSet;
class CGCMsgMemCachedSet_KeyPair;
class CGCMsgMemCachedDelete;
class CMsgAMAddFreeLicense;
class CMsgAMAddFreeLicenseResponse;

// ===================================================================

class CMsgProtoBufHeader : public ::google::protobuf::Message {
 public:
  CMsgProtoBufHeader();
  virtual ~CMsgProtoBufHeader();
  
  CMsgProtoBufHeader(const CMsgProtoBufHeader& from);
  
  inline CMsgProtoBufHeader& operator=(const CMsgProtoBufHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgProtoBufHeader& default_instance();
  
  void Swap(CMsgProtoBufHeader* other);
  
  // implements Message ----------------------------------------------
  
  CMsgProtoBufHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgProtoBufHeader& from);
  void MergeFrom(const CMsgProtoBufHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 client_steam_id = 1;
  inline bool has_client_steam_id() const;
  inline void clear_client_steam_id();
  static const int kClientSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 client_steam_id() const;
  inline void set_client_steam_id(::google::protobuf::uint64 value);
  
  // optional int32 client_session_id = 2;
  inline bool has_client_session_id() const;
  inline void clear_client_session_id();
  static const int kClientSessionIdFieldNumber = 2;
  inline ::google::protobuf::int32 client_session_id() const;
  inline void set_client_session_id(::google::protobuf::int32 value);
  
  // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
  inline bool has_job_id_source() const;
  inline void clear_job_id_source();
  static const int kJobIdSourceFieldNumber = 10;
  inline ::google::protobuf::uint64 job_id_source() const;
  inline void set_job_id_source(::google::protobuf::uint64 value);
  
  // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
  inline bool has_job_id_target() const;
  inline void clear_job_id_target();
  static const int kJobIdTargetFieldNumber = 11;
  inline ::google::protobuf::uint64 job_id_target() const;
  inline void set_job_id_target(::google::protobuf::uint64 value);
  
  // optional string target_job_name = 12;
  inline bool has_target_job_name() const;
  inline void clear_target_job_name();
  static const int kTargetJobNameFieldNumber = 12;
  inline const ::std::string& target_job_name() const;
  inline void set_target_job_name(const ::std::string& value);
  inline void set_target_job_name(const char* value);
  inline void set_target_job_name(const char* value, size_t size);
  inline ::std::string* mutable_target_job_name();
  inline ::std::string* release_target_job_name();
  
  // @@protoc_insertion_point(class_scope:CMsgProtoBufHeader)
 private:
  inline void set_has_client_steam_id();
  inline void clear_has_client_steam_id();
  inline void set_has_client_session_id();
  inline void clear_has_client_session_id();
  inline void set_has_job_id_source();
  inline void clear_has_job_id_source();
  inline void set_has_job_id_target();
  inline void clear_has_job_id_target();
  inline void set_has_target_job_name();
  inline void clear_has_target_job_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 client_steam_id_;
  ::google::protobuf::uint64 job_id_source_;
  ::google::protobuf::uint64 job_id_target_;
  ::std::string* target_job_name_;
  ::google::protobuf::int32 client_session_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgProtoBufHeader* default_instance_;
};
// -------------------------------------------------------------------

class CMsgWebAPIKey : public ::google::protobuf::Message {
 public:
  CMsgWebAPIKey();
  virtual ~CMsgWebAPIKey();
  
  CMsgWebAPIKey(const CMsgWebAPIKey& from);
  
  inline CMsgWebAPIKey& operator=(const CMsgWebAPIKey& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgWebAPIKey& default_instance();
  
  void Swap(CMsgWebAPIKey* other);
  
  // implements Message ----------------------------------------------
  
  CMsgWebAPIKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgWebAPIKey& from);
  void MergeFrom(const CMsgWebAPIKey& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 status = 1 [default = 255];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // optional uint32 account_id = 2 [default = 0];
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);
  
  // optional uint32 publisher_group_id = 3 [default = 0];
  inline bool has_publisher_group_id() const;
  inline void clear_publisher_group_id();
  static const int kPublisherGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 publisher_group_id() const;
  inline void set_publisher_group_id(::google::protobuf::uint32 value);
  
  // optional uint32 key_id = 4;
  inline bool has_key_id() const;
  inline void clear_key_id();
  static const int kKeyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 key_id() const;
  inline void set_key_id(::google::protobuf::uint32 value);
  
  // optional string domain = 5;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 5;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  
  // @@protoc_insertion_point(class_scope:CMsgWebAPIKey)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_publisher_group_id();
  inline void clear_has_publisher_group_id();
  inline void set_has_key_id();
  inline void clear_has_key_id();
  inline void set_has_domain();
  inline void clear_has_domain();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 publisher_group_id_;
  ::google::protobuf::uint32 key_id_;
  ::std::string* domain_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgWebAPIKey* default_instance_;
};
// -------------------------------------------------------------------

class CMsgHttpRequest_RequestHeader : public ::google::protobuf::Message {
 public:
  CMsgHttpRequest_RequestHeader();
  virtual ~CMsgHttpRequest_RequestHeader();
  
  CMsgHttpRequest_RequestHeader(const CMsgHttpRequest_RequestHeader& from);
  
  inline CMsgHttpRequest_RequestHeader& operator=(const CMsgHttpRequest_RequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgHttpRequest_RequestHeader& default_instance();
  
  void Swap(CMsgHttpRequest_RequestHeader* other);
  
  // implements Message ----------------------------------------------
  
  CMsgHttpRequest_RequestHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgHttpRequest_RequestHeader& from);
  void MergeFrom(const CMsgHttpRequest_RequestHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:CMsgHttpRequest.RequestHeader)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgHttpRequest_RequestHeader* default_instance_;
};
// -------------------------------------------------------------------

class CMsgHttpRequest_QueryParam : public ::google::protobuf::Message {
 public:
  CMsgHttpRequest_QueryParam();
  virtual ~CMsgHttpRequest_QueryParam();
  
  CMsgHttpRequest_QueryParam(const CMsgHttpRequest_QueryParam& from);
  
  inline CMsgHttpRequest_QueryParam& operator=(const CMsgHttpRequest_QueryParam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgHttpRequest_QueryParam& default_instance();
  
  void Swap(CMsgHttpRequest_QueryParam* other);
  
  // implements Message ----------------------------------------------
  
  CMsgHttpRequest_QueryParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgHttpRequest_QueryParam& from);
  void MergeFrom(const CMsgHttpRequest_QueryParam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:CMsgHttpRequest.QueryParam)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgHttpRequest_QueryParam* default_instance_;
};
// -------------------------------------------------------------------

class CMsgHttpRequest : public ::google::protobuf::Message {
 public:
  CMsgHttpRequest();
  virtual ~CMsgHttpRequest();
  
  CMsgHttpRequest(const CMsgHttpRequest& from);
  
  inline CMsgHttpRequest& operator=(const CMsgHttpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgHttpRequest& default_instance();
  
  void Swap(CMsgHttpRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMsgHttpRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgHttpRequest& from);
  void MergeFrom(const CMsgHttpRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgHttpRequest_RequestHeader RequestHeader;
  typedef CMsgHttpRequest_QueryParam QueryParam;
  
  // accessors -------------------------------------------------------
  
  // optional uint32 request_method = 1;
  inline bool has_request_method() const;
  inline void clear_request_method();
  static const int kRequestMethodFieldNumber = 1;
  inline ::google::protobuf::uint32 request_method() const;
  inline void set_request_method(::google::protobuf::uint32 value);
  
  // optional string hostname = 2;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 2;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  
  // optional string url = 3;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 3;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // repeated .CMsgHttpRequest.RequestHeader headers = 4;
  inline int headers_size() const;
  inline void clear_headers();
  static const int kHeadersFieldNumber = 4;
  inline const ::CMsgHttpRequest_RequestHeader& headers(int index) const;
  inline ::CMsgHttpRequest_RequestHeader* mutable_headers(int index);
  inline ::CMsgHttpRequest_RequestHeader* add_headers();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgHttpRequest_RequestHeader >&
      headers() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgHttpRequest_RequestHeader >*
      mutable_headers();
  
  // repeated .CMsgHttpRequest.QueryParam get_params = 5;
  inline int get_params_size() const;
  inline void clear_get_params();
  static const int kGetParamsFieldNumber = 5;
  inline const ::CMsgHttpRequest_QueryParam& get_params(int index) const;
  inline ::CMsgHttpRequest_QueryParam* mutable_get_params(int index);
  inline ::CMsgHttpRequest_QueryParam* add_get_params();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >&
      get_params() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >*
      mutable_get_params();
  
  // repeated .CMsgHttpRequest.QueryParam post_params = 6;
  inline int post_params_size() const;
  inline void clear_post_params();
  static const int kPostParamsFieldNumber = 6;
  inline const ::CMsgHttpRequest_QueryParam& post_params(int index) const;
  inline ::CMsgHttpRequest_QueryParam* mutable_post_params(int index);
  inline ::CMsgHttpRequest_QueryParam* add_post_params();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >&
      post_params() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >*
      mutable_post_params();
  
  // optional bytes body = 7;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 7;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  
  // @@protoc_insertion_point(class_scope:CMsgHttpRequest)
 private:
  inline void set_has_request_method();
  inline void clear_has_request_method();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_body();
  inline void clear_has_body();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* hostname_;
  ::std::string* url_;
  ::google::protobuf::RepeatedPtrField< ::CMsgHttpRequest_RequestHeader > headers_;
  ::google::protobuf::RepeatedPtrField< ::CMsgHttpRequest_QueryParam > get_params_;
  ::google::protobuf::RepeatedPtrField< ::CMsgHttpRequest_QueryParam > post_params_;
  ::std::string* body_;
  ::google::protobuf::uint32 request_method_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgHttpRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgWebAPIRequest : public ::google::protobuf::Message {
 public:
  CMsgWebAPIRequest();
  virtual ~CMsgWebAPIRequest();
  
  CMsgWebAPIRequest(const CMsgWebAPIRequest& from);
  
  inline CMsgWebAPIRequest& operator=(const CMsgWebAPIRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgWebAPIRequest& default_instance();
  
  void Swap(CMsgWebAPIRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMsgWebAPIRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgWebAPIRequest& from);
  void MergeFrom(const CMsgWebAPIRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string UNUSED_job_name = 1;
  inline bool has_unused_job_name() const;
  inline void clear_unused_job_name();
  static const int kUNUSEDJobNameFieldNumber = 1;
  inline const ::std::string& unused_job_name() const;
  inline void set_unused_job_name(const ::std::string& value);
  inline void set_unused_job_name(const char* value);
  inline void set_unused_job_name(const char* value, size_t size);
  inline ::std::string* mutable_unused_job_name();
  inline ::std::string* release_unused_job_name();
  
  // optional string interface_name = 2;
  inline bool has_interface_name() const;
  inline void clear_interface_name();
  static const int kInterfaceNameFieldNumber = 2;
  inline const ::std::string& interface_name() const;
  inline void set_interface_name(const ::std::string& value);
  inline void set_interface_name(const char* value);
  inline void set_interface_name(const char* value, size_t size);
  inline ::std::string* mutable_interface_name();
  inline ::std::string* release_interface_name();
  
  // optional string method_name = 3;
  inline bool has_method_name() const;
  inline void clear_method_name();
  static const int kMethodNameFieldNumber = 3;
  inline const ::std::string& method_name() const;
  inline void set_method_name(const ::std::string& value);
  inline void set_method_name(const char* value);
  inline void set_method_name(const char* value, size_t size);
  inline ::std::string* mutable_method_name();
  inline ::std::string* release_method_name();
  
  // optional uint32 version = 4;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 4;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);
  
  // optional .CMsgWebAPIKey api_key = 5;
  inline bool has_api_key() const;
  inline void clear_api_key();
  static const int kApiKeyFieldNumber = 5;
  inline const ::CMsgWebAPIKey& api_key() const;
  inline ::CMsgWebAPIKey* mutable_api_key();
  inline ::CMsgWebAPIKey* release_api_key();
  
  // optional .CMsgHttpRequest request = 6;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 6;
  inline const ::CMsgHttpRequest& request() const;
  inline ::CMsgHttpRequest* mutable_request();
  inline ::CMsgHttpRequest* release_request();
  
  // optional uint32 routing_app_id = 7;
  inline bool has_routing_app_id() const;
  inline void clear_routing_app_id();
  static const int kRoutingAppIdFieldNumber = 7;
  inline ::google::protobuf::uint32 routing_app_id() const;
  inline void set_routing_app_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgWebAPIRequest)
 private:
  inline void set_has_unused_job_name();
  inline void clear_has_unused_job_name();
  inline void set_has_interface_name();
  inline void clear_has_interface_name();
  inline void set_has_method_name();
  inline void clear_has_method_name();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_api_key();
  inline void clear_has_api_key();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_routing_app_id();
  inline void clear_has_routing_app_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* unused_job_name_;
  ::std::string* interface_name_;
  ::std::string* method_name_;
  ::CMsgWebAPIKey* api_key_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 routing_app_id_;
  ::CMsgHttpRequest* request_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgWebAPIRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgHttpResponse_ResponseHeader : public ::google::protobuf::Message {
 public:
  CMsgHttpResponse_ResponseHeader();
  virtual ~CMsgHttpResponse_ResponseHeader();
  
  CMsgHttpResponse_ResponseHeader(const CMsgHttpResponse_ResponseHeader& from);
  
  inline CMsgHttpResponse_ResponseHeader& operator=(const CMsgHttpResponse_ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgHttpResponse_ResponseHeader& default_instance();
  
  void Swap(CMsgHttpResponse_ResponseHeader* other);
  
  // implements Message ----------------------------------------------
  
  CMsgHttpResponse_ResponseHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgHttpResponse_ResponseHeader& from);
  void MergeFrom(const CMsgHttpResponse_ResponseHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:CMsgHttpResponse.ResponseHeader)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgHttpResponse_ResponseHeader* default_instance_;
};
// -------------------------------------------------------------------

class CMsgHttpResponse : public ::google::protobuf::Message {
 public:
  CMsgHttpResponse();
  virtual ~CMsgHttpResponse();
  
  CMsgHttpResponse(const CMsgHttpResponse& from);
  
  inline CMsgHttpResponse& operator=(const CMsgHttpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgHttpResponse& default_instance();
  
  void Swap(CMsgHttpResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgHttpResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgHttpResponse& from);
  void MergeFrom(const CMsgHttpResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgHttpResponse_ResponseHeader ResponseHeader;
  
  // accessors -------------------------------------------------------
  
  // optional uint32 status_code = 1;
  inline bool has_status_code() const;
  inline void clear_status_code();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 status_code() const;
  inline void set_status_code(::google::protobuf::uint32 value);
  
  // repeated .CMsgHttpResponse.ResponseHeader headers = 2;
  inline int headers_size() const;
  inline void clear_headers();
  static const int kHeadersFieldNumber = 2;
  inline const ::CMsgHttpResponse_ResponseHeader& headers(int index) const;
  inline ::CMsgHttpResponse_ResponseHeader* mutable_headers(int index);
  inline ::CMsgHttpResponse_ResponseHeader* add_headers();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgHttpResponse_ResponseHeader >&
      headers() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgHttpResponse_ResponseHeader >*
      mutable_headers();
  
  // optional bytes body = 3;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 3;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  
  // @@protoc_insertion_point(class_scope:CMsgHttpResponse)
 private:
  inline void set_has_status_code();
  inline void clear_has_status_code();
  inline void set_has_body();
  inline void clear_has_body();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CMsgHttpResponse_ResponseHeader > headers_;
  ::std::string* body_;
  ::google::protobuf::uint32 status_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgHttpResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAMFindAccounts : public ::google::protobuf::Message {
 public:
  CMsgAMFindAccounts();
  virtual ~CMsgAMFindAccounts();
  
  CMsgAMFindAccounts(const CMsgAMFindAccounts& from);
  
  inline CMsgAMFindAccounts& operator=(const CMsgAMFindAccounts& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAMFindAccounts& default_instance();
  
  void Swap(CMsgAMFindAccounts* other);
  
  // implements Message ----------------------------------------------
  
  CMsgAMFindAccounts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAMFindAccounts& from);
  void MergeFrom(const CMsgAMFindAccounts& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 search_type = 1;
  inline bool has_search_type() const;
  inline void clear_search_type();
  static const int kSearchTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 search_type() const;
  inline void set_search_type(::google::protobuf::uint32 value);
  
  // optional string search_string = 2;
  inline bool has_search_string() const;
  inline void clear_search_string();
  static const int kSearchStringFieldNumber = 2;
  inline const ::std::string& search_string() const;
  inline void set_search_string(const ::std::string& value);
  inline void set_search_string(const char* value);
  inline void set_search_string(const char* value, size_t size);
  inline ::std::string* mutable_search_string();
  inline ::std::string* release_search_string();
  
  // @@protoc_insertion_point(class_scope:CMsgAMFindAccounts)
 private:
  inline void set_has_search_type();
  inline void clear_has_search_type();
  inline void set_has_search_string();
  inline void clear_has_search_string();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* search_string_;
  ::google::protobuf::uint32 search_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgAMFindAccounts* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAMFindAccountsResponse : public ::google::protobuf::Message {
 public:
  CMsgAMFindAccountsResponse();
  virtual ~CMsgAMFindAccountsResponse();
  
  CMsgAMFindAccountsResponse(const CMsgAMFindAccountsResponse& from);
  
  inline CMsgAMFindAccountsResponse& operator=(const CMsgAMFindAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAMFindAccountsResponse& default_instance();
  
  void Swap(CMsgAMFindAccountsResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgAMFindAccountsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAMFindAccountsResponse& from);
  void MergeFrom(const CMsgAMFindAccountsResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated fixed64 steam_id = 1;
  inline int steam_id_size() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id(int index) const;
  inline void set_steam_id(int index, ::google::protobuf::uint64 value);
  inline void add_steam_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      steam_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_steam_id();
  
  // @@protoc_insertion_point(class_scope:CMsgAMFindAccountsResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > steam_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgAMFindAccountsResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgNotifyWatchdog : public ::google::protobuf::Message {
 public:
  CMsgNotifyWatchdog();
  virtual ~CMsgNotifyWatchdog();
  
  CMsgNotifyWatchdog(const CMsgNotifyWatchdog& from);
  
  inline CMsgNotifyWatchdog& operator=(const CMsgNotifyWatchdog& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgNotifyWatchdog& default_instance();
  
  void Swap(CMsgNotifyWatchdog* other);
  
  // implements Message ----------------------------------------------
  
  CMsgNotifyWatchdog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgNotifyWatchdog& from);
  void MergeFrom(const CMsgNotifyWatchdog& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline ::google::protobuf::uint32 source() const;
  inline void set_source(::google::protobuf::uint32 value);
  
  // optional uint32 alert_type = 2;
  inline bool has_alert_type() const;
  inline void clear_alert_type();
  static const int kAlertTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 alert_type() const;
  inline void set_alert_type(::google::protobuf::uint32 value);
  
  // optional uint32 alert_destination = 3;
  inline bool has_alert_destination() const;
  inline void clear_alert_destination();
  static const int kAlertDestinationFieldNumber = 3;
  inline ::google::protobuf::uint32 alert_destination() const;
  inline void set_alert_destination(::google::protobuf::uint32 value);
  
  // optional bool critical = 4;
  inline bool has_critical() const;
  inline void clear_critical();
  static const int kCriticalFieldNumber = 4;
  inline bool critical() const;
  inline void set_critical(bool value);
  
  // optional uint32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // optional uint32 appid = 6;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 6;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);
  
  // optional string text = 7;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 7;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  
  // @@protoc_insertion_point(class_scope:CMsgNotifyWatchdog)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_alert_type();
  inline void clear_has_alert_type();
  inline void set_has_alert_destination();
  inline void clear_has_alert_destination();
  inline void set_has_critical();
  inline void clear_has_critical();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_text();
  inline void clear_has_text();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 source_;
  ::google::protobuf::uint32 alert_type_;
  ::google::protobuf::uint32 alert_destination_;
  bool critical_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 appid_;
  ::std::string* text_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgNotifyWatchdog* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAMGetLicenses : public ::google::protobuf::Message {
 public:
  CMsgAMGetLicenses();
  virtual ~CMsgAMGetLicenses();
  
  CMsgAMGetLicenses(const CMsgAMGetLicenses& from);
  
  inline CMsgAMGetLicenses& operator=(const CMsgAMGetLicenses& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAMGetLicenses& default_instance();
  
  void Swap(CMsgAMGetLicenses* other);
  
  // implements Message ----------------------------------------------
  
  CMsgAMGetLicenses* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAMGetLicenses& from);
  void MergeFrom(const CMsgAMGetLicenses& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 steamid = 1;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid() const;
  inline void set_steamid(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:CMsgAMGetLicenses)
 private:
  inline void set_has_steamid();
  inline void clear_has_steamid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 steamid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgAMGetLicenses* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPackageLicense : public ::google::protobuf::Message {
 public:
  CMsgPackageLicense();
  virtual ~CMsgPackageLicense();
  
  CMsgPackageLicense(const CMsgPackageLicense& from);
  
  inline CMsgPackageLicense& operator=(const CMsgPackageLicense& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPackageLicense& default_instance();
  
  void Swap(CMsgPackageLicense* other);
  
  // implements Message ----------------------------------------------
  
  CMsgPackageLicense* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPackageLicense& from);
  void MergeFrom(const CMsgPackageLicense& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 package_id = 1;
  inline bool has_package_id() const;
  inline void clear_package_id();
  static const int kPackageIdFieldNumber = 1;
  inline ::google::protobuf::uint32 package_id() const;
  inline void set_package_id(::google::protobuf::uint32 value);
  
  // optional uint32 time_created = 2;
  inline bool has_time_created() const;
  inline void clear_time_created();
  static const int kTimeCreatedFieldNumber = 2;
  inline ::google::protobuf::uint32 time_created() const;
  inline void set_time_created(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgPackageLicense)
 private:
  inline void set_has_package_id();
  inline void clear_has_package_id();
  inline void set_has_time_created();
  inline void clear_has_time_created();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 package_id_;
  ::google::protobuf::uint32 time_created_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgPackageLicense* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAMGetLicensesResponse : public ::google::protobuf::Message {
 public:
  CMsgAMGetLicensesResponse();
  virtual ~CMsgAMGetLicensesResponse();
  
  CMsgAMGetLicensesResponse(const CMsgAMGetLicensesResponse& from);
  
  inline CMsgAMGetLicensesResponse& operator=(const CMsgAMGetLicensesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAMGetLicensesResponse& default_instance();
  
  void Swap(CMsgAMGetLicensesResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgAMGetLicensesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAMGetLicensesResponse& from);
  void MergeFrom(const CMsgAMGetLicensesResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .CMsgPackageLicense license = 1;
  inline int license_size() const;
  inline void clear_license();
  static const int kLicenseFieldNumber = 1;
  inline const ::CMsgPackageLicense& license(int index) const;
  inline ::CMsgPackageLicense* mutable_license(int index);
  inline ::CMsgPackageLicense* add_license();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgPackageLicense >&
      license() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgPackageLicense >*
      mutable_license();
  
  // optional uint32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgAMGetLicensesResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CMsgPackageLicense > license_;
  ::google::protobuf::uint32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgAMGetLicensesResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAMGetUserGameStats : public ::google::protobuf::Message {
 public:
  CMsgAMGetUserGameStats();
  virtual ~CMsgAMGetUserGameStats();
  
  CMsgAMGetUserGameStats(const CMsgAMGetUserGameStats& from);
  
  inline CMsgAMGetUserGameStats& operator=(const CMsgAMGetUserGameStats& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAMGetUserGameStats& default_instance();
  
  void Swap(CMsgAMGetUserGameStats* other);
  
  // implements Message ----------------------------------------------
  
  CMsgAMGetUserGameStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAMGetUserGameStats& from);
  void MergeFrom(const CMsgAMGetUserGameStats& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 steam_id = 1;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);
  
  // optional fixed64 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::uint64 game_id() const;
  inline void set_game_id(::google::protobuf::uint64 value);
  
  // repeated uint32 stats = 3;
  inline int stats_size() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 3;
  inline ::google::protobuf::uint32 stats(int index) const;
  inline void set_stats(int index, ::google::protobuf::uint32 value);
  inline void add_stats(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stats() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stats();
  
  // @@protoc_insertion_point(class_scope:CMsgAMGetUserGameStats)
 private:
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint64 game_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stats_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgAMGetUserGameStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAMGetUserGameStatsResponse_Stats : public ::google::protobuf::Message {
 public:
  CMsgAMGetUserGameStatsResponse_Stats();
  virtual ~CMsgAMGetUserGameStatsResponse_Stats();
  
  CMsgAMGetUserGameStatsResponse_Stats(const CMsgAMGetUserGameStatsResponse_Stats& from);
  
  inline CMsgAMGetUserGameStatsResponse_Stats& operator=(const CMsgAMGetUserGameStatsResponse_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAMGetUserGameStatsResponse_Stats& default_instance();
  
  void Swap(CMsgAMGetUserGameStatsResponse_Stats* other);
  
  // implements Message ----------------------------------------------
  
  CMsgAMGetUserGameStatsResponse_Stats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAMGetUserGameStatsResponse_Stats& from);
  void MergeFrom(const CMsgAMGetUserGameStatsResponse_Stats& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 stat_id = 1;
  inline bool has_stat_id() const;
  inline void clear_stat_id();
  static const int kStatIdFieldNumber = 1;
  inline ::google::protobuf::uint32 stat_id() const;
  inline void set_stat_id(::google::protobuf::uint32 value);
  
  // optional uint32 stat_value = 2;
  inline bool has_stat_value() const;
  inline void clear_stat_value();
  static const int kStatValueFieldNumber = 2;
  inline ::google::protobuf::uint32 stat_value() const;
  inline void set_stat_value(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgAMGetUserGameStatsResponse.Stats)
 private:
  inline void set_has_stat_id();
  inline void clear_has_stat_id();
  inline void set_has_stat_value();
  inline void clear_has_stat_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 stat_id_;
  ::google::protobuf::uint32 stat_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgAMGetUserGameStatsResponse_Stats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAMGetUserGameStatsResponse_Achievement_Blocks : public ::google::protobuf::Message {
 public:
  CMsgAMGetUserGameStatsResponse_Achievement_Blocks();
  virtual ~CMsgAMGetUserGameStatsResponse_Achievement_Blocks();
  
  CMsgAMGetUserGameStatsResponse_Achievement_Blocks(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from);
  
  inline CMsgAMGetUserGameStatsResponse_Achievement_Blocks& operator=(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& default_instance();
  
  void Swap(CMsgAMGetUserGameStatsResponse_Achievement_Blocks* other);
  
  // implements Message ----------------------------------------------
  
  CMsgAMGetUserGameStatsResponse_Achievement_Blocks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from);
  void MergeFrom(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 achievement_id = 1;
  inline bool has_achievement_id() const;
  inline void clear_achievement_id();
  static const int kAchievementIdFieldNumber = 1;
  inline ::google::protobuf::uint32 achievement_id() const;
  inline void set_achievement_id(::google::protobuf::uint32 value);
  
  // optional uint32 achievement_bit_id = 2;
  inline bool has_achievement_bit_id() const;
  inline void clear_achievement_bit_id();
  static const int kAchievementBitIdFieldNumber = 2;
  inline ::google::protobuf::uint32 achievement_bit_id() const;
  inline void set_achievement_bit_id(::google::protobuf::uint32 value);
  
  // optional fixed32 unlock_time = 3;
  inline bool has_unlock_time() const;
  inline void clear_unlock_time();
  static const int kUnlockTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 unlock_time() const;
  inline void set_unlock_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
 private:
  inline void set_has_achievement_id();
  inline void clear_has_achievement_id();
  inline void set_has_achievement_bit_id();
  inline void clear_has_achievement_bit_id();
  inline void set_has_unlock_time();
  inline void clear_has_unlock_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 achievement_id_;
  ::google::protobuf::uint32 achievement_bit_id_;
  ::google::protobuf::uint32 unlock_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgAMGetUserGameStatsResponse_Achievement_Blocks* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAMGetUserGameStatsResponse : public ::google::protobuf::Message {
 public:
  CMsgAMGetUserGameStatsResponse();
  virtual ~CMsgAMGetUserGameStatsResponse();
  
  CMsgAMGetUserGameStatsResponse(const CMsgAMGetUserGameStatsResponse& from);
  
  inline CMsgAMGetUserGameStatsResponse& operator=(const CMsgAMGetUserGameStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAMGetUserGameStatsResponse& default_instance();
  
  void Swap(CMsgAMGetUserGameStatsResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgAMGetUserGameStatsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAMGetUserGameStatsResponse& from);
  void MergeFrom(const CMsgAMGetUserGameStatsResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgAMGetUserGameStatsResponse_Stats Stats;
  typedef CMsgAMGetUserGameStatsResponse_Achievement_Blocks Achievement_Blocks;
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 steam_id = 1;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);
  
  // optional fixed64 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::uint64 game_id() const;
  inline void set_game_id(::google::protobuf::uint64 value);
  
  // optional int32 eresult = 3 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 3;
  inline ::google::protobuf::int32 eresult() const;
  inline void set_eresult(::google::protobuf::int32 value);
  
  // repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
  inline int stats_size() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 4;
  inline const ::CMsgAMGetUserGameStatsResponse_Stats& stats(int index) const;
  inline ::CMsgAMGetUserGameStatsResponse_Stats* mutable_stats(int index);
  inline ::CMsgAMGetUserGameStatsResponse_Stats* add_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Stats >&
      stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Stats >*
      mutable_stats();
  
  // repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
  inline int achievement_blocks_size() const;
  inline void clear_achievement_blocks();
  static const int kAchievementBlocksFieldNumber = 5;
  inline const ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks& achievement_blocks(int index) const;
  inline ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* mutable_achievement_blocks(int index);
  inline ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* add_achievement_blocks();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >&
      achievement_blocks() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >*
      mutable_achievement_blocks();
  
  // @@protoc_insertion_point(class_scope:CMsgAMGetUserGameStatsResponse)
 private:
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_eresult();
  inline void clear_has_eresult();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint64 game_id_;
  ::google::protobuf::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Stats > stats_;
  ::google::protobuf::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks > achievement_blocks_;
  ::google::protobuf::int32 eresult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgAMGetUserGameStatsResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCGetCommandList : public ::google::protobuf::Message {
 public:
  CMsgGCGetCommandList();
  virtual ~CMsgGCGetCommandList();
  
  CMsgGCGetCommandList(const CMsgGCGetCommandList& from);
  
  inline CMsgGCGetCommandList& operator=(const CMsgGCGetCommandList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCGetCommandList& default_instance();
  
  void Swap(CMsgGCGetCommandList* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGCGetCommandList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCGetCommandList& from);
  void MergeFrom(const CMsgGCGetCommandList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 app_id = 1;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);
  
  // optional string command_prefix = 2;
  inline bool has_command_prefix() const;
  inline void clear_command_prefix();
  static const int kCommandPrefixFieldNumber = 2;
  inline const ::std::string& command_prefix() const;
  inline void set_command_prefix(const ::std::string& value);
  inline void set_command_prefix(const char* value);
  inline void set_command_prefix(const char* value, size_t size);
  inline ::std::string* mutable_command_prefix();
  inline ::std::string* release_command_prefix();
  
  // @@protoc_insertion_point(class_scope:CMsgGCGetCommandList)
 private:
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_command_prefix();
  inline void clear_has_command_prefix();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* command_prefix_;
  ::google::protobuf::uint32 app_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGCGetCommandList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCGetCommandListResponse : public ::google::protobuf::Message {
 public:
  CMsgGCGetCommandListResponse();
  virtual ~CMsgGCGetCommandListResponse();
  
  CMsgGCGetCommandListResponse(const CMsgGCGetCommandListResponse& from);
  
  inline CMsgGCGetCommandListResponse& operator=(const CMsgGCGetCommandListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCGetCommandListResponse& default_instance();
  
  void Swap(CMsgGCGetCommandListResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGCGetCommandListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCGetCommandListResponse& from);
  void MergeFrom(const CMsgGCGetCommandListResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string command_name = 1;
  inline int command_name_size() const;
  inline void clear_command_name();
  static const int kCommandNameFieldNumber = 1;
  inline const ::std::string& command_name(int index) const;
  inline ::std::string* mutable_command_name(int index);
  inline void set_command_name(int index, const ::std::string& value);
  inline void set_command_name(int index, const char* value);
  inline void set_command_name(int index, const char* value, size_t size);
  inline ::std::string* add_command_name();
  inline void add_command_name(const ::std::string& value);
  inline void add_command_name(const char* value);
  inline void add_command_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& command_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_command_name();
  
  // @@protoc_insertion_point(class_scope:CMsgGCGetCommandListResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> command_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGCGetCommandListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CGCMsgMemCachedGet : public ::google::protobuf::Message {
 public:
  CGCMsgMemCachedGet();
  virtual ~CGCMsgMemCachedGet();
  
  CGCMsgMemCachedGet(const CGCMsgMemCachedGet& from);
  
  inline CGCMsgMemCachedGet& operator=(const CGCMsgMemCachedGet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CGCMsgMemCachedGet& default_instance();
  
  void Swap(CGCMsgMemCachedGet* other);
  
  // implements Message ----------------------------------------------
  
  CGCMsgMemCachedGet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGCMsgMemCachedGet& from);
  void MergeFrom(const CGCMsgMemCachedGet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string keys = 1;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 1;
  inline const ::std::string& keys(int index) const;
  inline ::std::string* mutable_keys(int index);
  inline void set_keys(int index, const ::std::string& value);
  inline void set_keys(int index, const char* value);
  inline void set_keys(int index, const char* value, size_t size);
  inline ::std::string* add_keys();
  inline void add_keys(const ::std::string& value);
  inline void add_keys(const char* value);
  inline void add_keys(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();
  
  // @@protoc_insertion_point(class_scope:CGCMsgMemCachedGet)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CGCMsgMemCachedGet* default_instance_;
};
// -------------------------------------------------------------------

class CGCMsgMemCachedGetResponse_ValueTag : public ::google::protobuf::Message {
 public:
  CGCMsgMemCachedGetResponse_ValueTag();
  virtual ~CGCMsgMemCachedGetResponse_ValueTag();
  
  CGCMsgMemCachedGetResponse_ValueTag(const CGCMsgMemCachedGetResponse_ValueTag& from);
  
  inline CGCMsgMemCachedGetResponse_ValueTag& operator=(const CGCMsgMemCachedGetResponse_ValueTag& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CGCMsgMemCachedGetResponse_ValueTag& default_instance();
  
  void Swap(CGCMsgMemCachedGetResponse_ValueTag* other);
  
  // implements Message ----------------------------------------------
  
  CGCMsgMemCachedGetResponse_ValueTag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGCMsgMemCachedGetResponse_ValueTag& from);
  void MergeFrom(const CGCMsgMemCachedGetResponse_ValueTag& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool found = 1;
  inline bool has_found() const;
  inline void clear_found();
  static const int kFoundFieldNumber = 1;
  inline bool found() const;
  inline void set_found(bool value);
  
  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:CGCMsgMemCachedGetResponse.ValueTag)
 private:
  inline void set_has_found();
  inline void clear_has_found();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* value_;
  bool found_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CGCMsgMemCachedGetResponse_ValueTag* default_instance_;
};
// -------------------------------------------------------------------

class CGCMsgMemCachedGetResponse : public ::google::protobuf::Message {
 public:
  CGCMsgMemCachedGetResponse();
  virtual ~CGCMsgMemCachedGetResponse();
  
  CGCMsgMemCachedGetResponse(const CGCMsgMemCachedGetResponse& from);
  
  inline CGCMsgMemCachedGetResponse& operator=(const CGCMsgMemCachedGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CGCMsgMemCachedGetResponse& default_instance();
  
  void Swap(CGCMsgMemCachedGetResponse* other);
  
  // implements Message ----------------------------------------------
  
  CGCMsgMemCachedGetResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGCMsgMemCachedGetResponse& from);
  void MergeFrom(const CGCMsgMemCachedGetResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CGCMsgMemCachedGetResponse_ValueTag ValueTag;
  
  // accessors -------------------------------------------------------
  
  // repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline const ::CGCMsgMemCachedGetResponse_ValueTag& values(int index) const;
  inline ::CGCMsgMemCachedGetResponse_ValueTag* mutable_values(int index);
  inline ::CGCMsgMemCachedGetResponse_ValueTag* add_values();
  inline const ::google::protobuf::RepeatedPtrField< ::CGCMsgMemCachedGetResponse_ValueTag >&
      values() const;
  inline ::google::protobuf::RepeatedPtrField< ::CGCMsgMemCachedGetResponse_ValueTag >*
      mutable_values();
  
  // @@protoc_insertion_point(class_scope:CGCMsgMemCachedGetResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CGCMsgMemCachedGetResponse_ValueTag > values_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CGCMsgMemCachedGetResponse* default_instance_;
};
// -------------------------------------------------------------------

class CGCMsgMemCachedSet_KeyPair : public ::google::protobuf::Message {
 public:
  CGCMsgMemCachedSet_KeyPair();
  virtual ~CGCMsgMemCachedSet_KeyPair();
  
  CGCMsgMemCachedSet_KeyPair(const CGCMsgMemCachedSet_KeyPair& from);
  
  inline CGCMsgMemCachedSet_KeyPair& operator=(const CGCMsgMemCachedSet_KeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CGCMsgMemCachedSet_KeyPair& default_instance();
  
  void Swap(CGCMsgMemCachedSet_KeyPair* other);
  
  // implements Message ----------------------------------------------
  
  CGCMsgMemCachedSet_KeyPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGCMsgMemCachedSet_KeyPair& from);
  void MergeFrom(const CGCMsgMemCachedSet_KeyPair& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:CGCMsgMemCachedSet.KeyPair)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CGCMsgMemCachedSet_KeyPair* default_instance_;
};
// -------------------------------------------------------------------

class CGCMsgMemCachedSet : public ::google::protobuf::Message {
 public:
  CGCMsgMemCachedSet();
  virtual ~CGCMsgMemCachedSet();
  
  CGCMsgMemCachedSet(const CGCMsgMemCachedSet& from);
  
  inline CGCMsgMemCachedSet& operator=(const CGCMsgMemCachedSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CGCMsgMemCachedSet& default_instance();
  
  void Swap(CGCMsgMemCachedSet* other);
  
  // implements Message ----------------------------------------------
  
  CGCMsgMemCachedSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGCMsgMemCachedSet& from);
  void MergeFrom(const CGCMsgMemCachedSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CGCMsgMemCachedSet_KeyPair KeyPair;
  
  // accessors -------------------------------------------------------
  
  // repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 1;
  inline const ::CGCMsgMemCachedSet_KeyPair& keys(int index) const;
  inline ::CGCMsgMemCachedSet_KeyPair* mutable_keys(int index);
  inline ::CGCMsgMemCachedSet_KeyPair* add_keys();
  inline const ::google::protobuf::RepeatedPtrField< ::CGCMsgMemCachedSet_KeyPair >&
      keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::CGCMsgMemCachedSet_KeyPair >*
      mutable_keys();
  
  // @@protoc_insertion_point(class_scope:CGCMsgMemCachedSet)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CGCMsgMemCachedSet_KeyPair > keys_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CGCMsgMemCachedSet* default_instance_;
};
// -------------------------------------------------------------------

class CGCMsgMemCachedDelete : public ::google::protobuf::Message {
 public:
  CGCMsgMemCachedDelete();
  virtual ~CGCMsgMemCachedDelete();
  
  CGCMsgMemCachedDelete(const CGCMsgMemCachedDelete& from);
  
  inline CGCMsgMemCachedDelete& operator=(const CGCMsgMemCachedDelete& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CGCMsgMemCachedDelete& default_instance();
  
  void Swap(CGCMsgMemCachedDelete* other);
  
  // implements Message ----------------------------------------------
  
  CGCMsgMemCachedDelete* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGCMsgMemCachedDelete& from);
  void MergeFrom(const CGCMsgMemCachedDelete& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string keys = 1;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 1;
  inline const ::std::string& keys(int index) const;
  inline ::std::string* mutable_keys(int index);
  inline void set_keys(int index, const ::std::string& value);
  inline void set_keys(int index, const char* value);
  inline void set_keys(int index, const char* value, size_t size);
  inline ::std::string* add_keys();
  inline void add_keys(const ::std::string& value);
  inline void add_keys(const char* value);
  inline void add_keys(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();
  
  // @@protoc_insertion_point(class_scope:CGCMsgMemCachedDelete)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CGCMsgMemCachedDelete* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAMAddFreeLicense : public ::google::protobuf::Message {
 public:
  CMsgAMAddFreeLicense();
  virtual ~CMsgAMAddFreeLicense();
  
  CMsgAMAddFreeLicense(const CMsgAMAddFreeLicense& from);
  
  inline CMsgAMAddFreeLicense& operator=(const CMsgAMAddFreeLicense& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAMAddFreeLicense& default_instance();
  
  void Swap(CMsgAMAddFreeLicense* other);
  
  // implements Message ----------------------------------------------
  
  CMsgAMAddFreeLicense* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAMAddFreeLicense& from);
  void MergeFrom(const CMsgAMAddFreeLicense& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 steamid = 1;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid() const;
  inline void set_steamid(::google::protobuf::uint64 value);
  
  // optional uint32 ip_public = 2;
  inline bool has_ip_public() const;
  inline void clear_ip_public();
  static const int kIpPublicFieldNumber = 2;
  inline ::google::protobuf::uint32 ip_public() const;
  inline void set_ip_public(::google::protobuf::uint32 value);
  
  // optional uint32 packageid = 3;
  inline bool has_packageid() const;
  inline void clear_packageid();
  static const int kPackageidFieldNumber = 3;
  inline ::google::protobuf::uint32 packageid() const;
  inline void set_packageid(::google::protobuf::uint32 value);
  
  // optional string store_country_code = 4;
  inline bool has_store_country_code() const;
  inline void clear_store_country_code();
  static const int kStoreCountryCodeFieldNumber = 4;
  inline const ::std::string& store_country_code() const;
  inline void set_store_country_code(const ::std::string& value);
  inline void set_store_country_code(const char* value);
  inline void set_store_country_code(const char* value, size_t size);
  inline ::std::string* mutable_store_country_code();
  inline ::std::string* release_store_country_code();
  
  // @@protoc_insertion_point(class_scope:CMsgAMAddFreeLicense)
 private:
  inline void set_has_steamid();
  inline void clear_has_steamid();
  inline void set_has_ip_public();
  inline void clear_has_ip_public();
  inline void set_has_packageid();
  inline void clear_has_packageid();
  inline void set_has_store_country_code();
  inline void clear_has_store_country_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint32 ip_public_;
  ::google::protobuf::uint32 packageid_;
  ::std::string* store_country_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgAMAddFreeLicense* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAMAddFreeLicenseResponse : public ::google::protobuf::Message {
 public:
  CMsgAMAddFreeLicenseResponse();
  virtual ~CMsgAMAddFreeLicenseResponse();
  
  CMsgAMAddFreeLicenseResponse(const CMsgAMAddFreeLicenseResponse& from);
  
  inline CMsgAMAddFreeLicenseResponse& operator=(const CMsgAMAddFreeLicenseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAMAddFreeLicenseResponse& default_instance();
  
  void Swap(CMsgAMAddFreeLicenseResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgAMAddFreeLicenseResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAMAddFreeLicenseResponse& from);
  void MergeFrom(const CMsgAMAddFreeLicenseResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 eresult = 1 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 1;
  inline ::google::protobuf::int32 eresult() const;
  inline void set_eresult(::google::protobuf::int32 value);
  
  // optional int32 purchase_result_detail = 2;
  inline bool has_purchase_result_detail() const;
  inline void clear_purchase_result_detail();
  static const int kPurchaseResultDetailFieldNumber = 2;
  inline ::google::protobuf::int32 purchase_result_detail() const;
  inline void set_purchase_result_detail(::google::protobuf::int32 value);
  
  // optional fixed64 transid = 3;
  inline bool has_transid() const;
  inline void clear_transid();
  static const int kTransidFieldNumber = 3;
  inline ::google::protobuf::uint64 transid() const;
  inline void set_transid(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:CMsgAMAddFreeLicenseResponse)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();
  inline void set_has_purchase_result_detail();
  inline void clear_has_purchase_result_detail();
  inline void set_has_transid();
  inline void clear_has_transid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 eresult_;
  ::google::protobuf::int32 purchase_result_detail_;
  ::google::protobuf::uint64 transid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_steammessages_2eproto();
  friend void protobuf_AssignDesc_steammessages_2eproto();
  friend void protobuf_ShutdownFile_steammessages_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgAMAddFreeLicenseResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgProtoBufHeader

// optional fixed64 client_steam_id = 1;
inline bool CMsgProtoBufHeader::has_client_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgProtoBufHeader::set_has_client_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgProtoBufHeader::clear_has_client_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgProtoBufHeader::clear_client_steam_id() {
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_steam_id();
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::client_steam_id() const {
  return client_steam_id_;
}
inline void CMsgProtoBufHeader::set_client_steam_id(::google::protobuf::uint64 value) {
  set_has_client_steam_id();
  client_steam_id_ = value;
}

// optional int32 client_session_id = 2;
inline bool CMsgProtoBufHeader::has_client_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgProtoBufHeader::set_has_client_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgProtoBufHeader::clear_has_client_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgProtoBufHeader::clear_client_session_id() {
  client_session_id_ = 0;
  clear_has_client_session_id();
}
inline ::google::protobuf::int32 CMsgProtoBufHeader::client_session_id() const {
  return client_session_id_;
}
inline void CMsgProtoBufHeader::set_client_session_id(::google::protobuf::int32 value) {
  set_has_client_session_id();
  client_session_id_ = value;
}

// optional fixed64 job_id_source = 10 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::has_job_id_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgProtoBufHeader::set_has_job_id_source() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgProtoBufHeader::clear_has_job_id_source() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgProtoBufHeader::clear_job_id_source() {
  job_id_source_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_job_id_source();
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::job_id_source() const {
  return job_id_source_;
}
inline void CMsgProtoBufHeader::set_job_id_source(::google::protobuf::uint64 value) {
  set_has_job_id_source();
  job_id_source_ = value;
}

// optional fixed64 job_id_target = 11 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::has_job_id_target() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgProtoBufHeader::set_has_job_id_target() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgProtoBufHeader::clear_has_job_id_target() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgProtoBufHeader::clear_job_id_target() {
  job_id_target_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_job_id_target();
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::job_id_target() const {
  return job_id_target_;
}
inline void CMsgProtoBufHeader::set_job_id_target(::google::protobuf::uint64 value) {
  set_has_job_id_target();
  job_id_target_ = value;
}

// optional string target_job_name = 12;
inline bool CMsgProtoBufHeader::has_target_job_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgProtoBufHeader::set_has_target_job_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgProtoBufHeader::clear_has_target_job_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgProtoBufHeader::clear_target_job_name() {
  if (target_job_name_ != &::google::protobuf::internal::kEmptyString) {
    target_job_name_->clear();
  }
  clear_has_target_job_name();
}
inline const ::std::string& CMsgProtoBufHeader::target_job_name() const {
  return *target_job_name_;
}
inline void CMsgProtoBufHeader::set_target_job_name(const ::std::string& value) {
  set_has_target_job_name();
  if (target_job_name_ == &::google::protobuf::internal::kEmptyString) {
    target_job_name_ = new ::std::string;
  }
  target_job_name_->assign(value);
}
inline void CMsgProtoBufHeader::set_target_job_name(const char* value) {
  set_has_target_job_name();
  if (target_job_name_ == &::google::protobuf::internal::kEmptyString) {
    target_job_name_ = new ::std::string;
  }
  target_job_name_->assign(value);
}
inline void CMsgProtoBufHeader::set_target_job_name(const char* value, size_t size) {
  set_has_target_job_name();
  if (target_job_name_ == &::google::protobuf::internal::kEmptyString) {
    target_job_name_ = new ::std::string;
  }
  target_job_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgProtoBufHeader::mutable_target_job_name() {
  set_has_target_job_name();
  if (target_job_name_ == &::google::protobuf::internal::kEmptyString) {
    target_job_name_ = new ::std::string;
  }
  return target_job_name_;
}
inline ::std::string* CMsgProtoBufHeader::release_target_job_name() {
  clear_has_target_job_name();
  if (target_job_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_job_name_;
    target_job_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgWebAPIKey

// optional uint32 status = 1 [default = 255];
inline bool CMsgWebAPIKey::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgWebAPIKey::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgWebAPIKey::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgWebAPIKey::clear_status() {
  status_ = 255u;
  clear_has_status();
}
inline ::google::protobuf::uint32 CMsgWebAPIKey::status() const {
  return status_;
}
inline void CMsgWebAPIKey::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 account_id = 2 [default = 0];
inline bool CMsgWebAPIKey::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgWebAPIKey::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgWebAPIKey::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgWebAPIKey::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgWebAPIKey::account_id() const {
  return account_id_;
}
inline void CMsgWebAPIKey::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint32 publisher_group_id = 3 [default = 0];
inline bool CMsgWebAPIKey::has_publisher_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgWebAPIKey::set_has_publisher_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgWebAPIKey::clear_has_publisher_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgWebAPIKey::clear_publisher_group_id() {
  publisher_group_id_ = 0u;
  clear_has_publisher_group_id();
}
inline ::google::protobuf::uint32 CMsgWebAPIKey::publisher_group_id() const {
  return publisher_group_id_;
}
inline void CMsgWebAPIKey::set_publisher_group_id(::google::protobuf::uint32 value) {
  set_has_publisher_group_id();
  publisher_group_id_ = value;
}

// optional uint32 key_id = 4;
inline bool CMsgWebAPIKey::has_key_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgWebAPIKey::set_has_key_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgWebAPIKey::clear_has_key_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgWebAPIKey::clear_key_id() {
  key_id_ = 0u;
  clear_has_key_id();
}
inline ::google::protobuf::uint32 CMsgWebAPIKey::key_id() const {
  return key_id_;
}
inline void CMsgWebAPIKey::set_key_id(::google::protobuf::uint32 value) {
  set_has_key_id();
  key_id_ = value;
}

// optional string domain = 5;
inline bool CMsgWebAPIKey::has_domain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgWebAPIKey::set_has_domain() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgWebAPIKey::clear_has_domain() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgWebAPIKey::clear_domain() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& CMsgWebAPIKey::domain() const {
  return *domain_;
}
inline void CMsgWebAPIKey::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void CMsgWebAPIKey::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void CMsgWebAPIKey::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgWebAPIKey::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  return domain_;
}
inline ::std::string* CMsgWebAPIKey::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgHttpRequest_RequestHeader

// optional string name = 1;
inline bool CMsgHttpRequest_RequestHeader::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgHttpRequest_RequestHeader::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgHttpRequest_RequestHeader::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgHttpRequest_RequestHeader::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgHttpRequest_RequestHeader::name() const {
  return *name_;
}
inline void CMsgHttpRequest_RequestHeader::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgHttpRequest_RequestHeader::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgHttpRequest_RequestHeader::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgHttpRequest_RequestHeader::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CMsgHttpRequest_RequestHeader::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string value = 2;
inline bool CMsgHttpRequest_RequestHeader::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgHttpRequest_RequestHeader::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgHttpRequest_RequestHeader::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgHttpRequest_RequestHeader::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CMsgHttpRequest_RequestHeader::value() const {
  return *value_;
}
inline void CMsgHttpRequest_RequestHeader::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgHttpRequest_RequestHeader::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgHttpRequest_RequestHeader::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgHttpRequest_RequestHeader::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CMsgHttpRequest_RequestHeader::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgHttpRequest_QueryParam

// optional string name = 1;
inline bool CMsgHttpRequest_QueryParam::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgHttpRequest_QueryParam::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgHttpRequest_QueryParam::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgHttpRequest_QueryParam::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgHttpRequest_QueryParam::name() const {
  return *name_;
}
inline void CMsgHttpRequest_QueryParam::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgHttpRequest_QueryParam::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgHttpRequest_QueryParam::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgHttpRequest_QueryParam::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CMsgHttpRequest_QueryParam::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes value = 2;
inline bool CMsgHttpRequest_QueryParam::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgHttpRequest_QueryParam::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgHttpRequest_QueryParam::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgHttpRequest_QueryParam::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CMsgHttpRequest_QueryParam::value() const {
  return *value_;
}
inline void CMsgHttpRequest_QueryParam::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgHttpRequest_QueryParam::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgHttpRequest_QueryParam::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgHttpRequest_QueryParam::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CMsgHttpRequest_QueryParam::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgHttpRequest

// optional uint32 request_method = 1;
inline bool CMsgHttpRequest::has_request_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgHttpRequest::set_has_request_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgHttpRequest::clear_has_request_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgHttpRequest::clear_request_method() {
  request_method_ = 0u;
  clear_has_request_method();
}
inline ::google::protobuf::uint32 CMsgHttpRequest::request_method() const {
  return request_method_;
}
inline void CMsgHttpRequest::set_request_method(::google::protobuf::uint32 value) {
  set_has_request_method();
  request_method_ = value;
}

// optional string hostname = 2;
inline bool CMsgHttpRequest::has_hostname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgHttpRequest::set_has_hostname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgHttpRequest::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgHttpRequest::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& CMsgHttpRequest::hostname() const {
  return *hostname_;
}
inline void CMsgHttpRequest::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void CMsgHttpRequest::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void CMsgHttpRequest::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgHttpRequest::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* CMsgHttpRequest::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string url = 3;
inline bool CMsgHttpRequest::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgHttpRequest::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgHttpRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgHttpRequest::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& CMsgHttpRequest::url() const {
  return *url_;
}
inline void CMsgHttpRequest::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgHttpRequest::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgHttpRequest::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgHttpRequest::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* CMsgHttpRequest::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .CMsgHttpRequest.RequestHeader headers = 4;
inline int CMsgHttpRequest::headers_size() const {
  return headers_.size();
}
inline void CMsgHttpRequest::clear_headers() {
  headers_.Clear();
}
inline const ::CMsgHttpRequest_RequestHeader& CMsgHttpRequest::headers(int index) const {
  return headers_.Get(index);
}
inline ::CMsgHttpRequest_RequestHeader* CMsgHttpRequest::mutable_headers(int index) {
  return headers_.Mutable(index);
}
inline ::CMsgHttpRequest_RequestHeader* CMsgHttpRequest::add_headers() {
  return headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgHttpRequest_RequestHeader >&
CMsgHttpRequest::headers() const {
  return headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgHttpRequest_RequestHeader >*
CMsgHttpRequest::mutable_headers() {
  return &headers_;
}

// repeated .CMsgHttpRequest.QueryParam get_params = 5;
inline int CMsgHttpRequest::get_params_size() const {
  return get_params_.size();
}
inline void CMsgHttpRequest::clear_get_params() {
  get_params_.Clear();
}
inline const ::CMsgHttpRequest_QueryParam& CMsgHttpRequest::get_params(int index) const {
  return get_params_.Get(index);
}
inline ::CMsgHttpRequest_QueryParam* CMsgHttpRequest::mutable_get_params(int index) {
  return get_params_.Mutable(index);
}
inline ::CMsgHttpRequest_QueryParam* CMsgHttpRequest::add_get_params() {
  return get_params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >&
CMsgHttpRequest::get_params() const {
  return get_params_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >*
CMsgHttpRequest::mutable_get_params() {
  return &get_params_;
}

// repeated .CMsgHttpRequest.QueryParam post_params = 6;
inline int CMsgHttpRequest::post_params_size() const {
  return post_params_.size();
}
inline void CMsgHttpRequest::clear_post_params() {
  post_params_.Clear();
}
inline const ::CMsgHttpRequest_QueryParam& CMsgHttpRequest::post_params(int index) const {
  return post_params_.Get(index);
}
inline ::CMsgHttpRequest_QueryParam* CMsgHttpRequest::mutable_post_params(int index) {
  return post_params_.Mutable(index);
}
inline ::CMsgHttpRequest_QueryParam* CMsgHttpRequest::add_post_params() {
  return post_params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >&
CMsgHttpRequest::post_params() const {
  return post_params_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >*
CMsgHttpRequest::mutable_post_params() {
  return &post_params_;
}

// optional bytes body = 7;
inline bool CMsgHttpRequest::has_body() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgHttpRequest::set_has_body() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgHttpRequest::clear_has_body() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgHttpRequest::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& CMsgHttpRequest::body() const {
  return *body_;
}
inline void CMsgHttpRequest::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CMsgHttpRequest::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CMsgHttpRequest::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgHttpRequest::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* CMsgHttpRequest::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgWebAPIRequest

// optional string UNUSED_job_name = 1;
inline bool CMsgWebAPIRequest::has_unused_job_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgWebAPIRequest::set_has_unused_job_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgWebAPIRequest::clear_has_unused_job_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgWebAPIRequest::clear_unused_job_name() {
  if (unused_job_name_ != &::google::protobuf::internal::kEmptyString) {
    unused_job_name_->clear();
  }
  clear_has_unused_job_name();
}
inline const ::std::string& CMsgWebAPIRequest::unused_job_name() const {
  return *unused_job_name_;
}
inline void CMsgWebAPIRequest::set_unused_job_name(const ::std::string& value) {
  set_has_unused_job_name();
  if (unused_job_name_ == &::google::protobuf::internal::kEmptyString) {
    unused_job_name_ = new ::std::string;
  }
  unused_job_name_->assign(value);
}
inline void CMsgWebAPIRequest::set_unused_job_name(const char* value) {
  set_has_unused_job_name();
  if (unused_job_name_ == &::google::protobuf::internal::kEmptyString) {
    unused_job_name_ = new ::std::string;
  }
  unused_job_name_->assign(value);
}
inline void CMsgWebAPIRequest::set_unused_job_name(const char* value, size_t size) {
  set_has_unused_job_name();
  if (unused_job_name_ == &::google::protobuf::internal::kEmptyString) {
    unused_job_name_ = new ::std::string;
  }
  unused_job_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgWebAPIRequest::mutable_unused_job_name() {
  set_has_unused_job_name();
  if (unused_job_name_ == &::google::protobuf::internal::kEmptyString) {
    unused_job_name_ = new ::std::string;
  }
  return unused_job_name_;
}
inline ::std::string* CMsgWebAPIRequest::release_unused_job_name() {
  clear_has_unused_job_name();
  if (unused_job_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unused_job_name_;
    unused_job_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string interface_name = 2;
inline bool CMsgWebAPIRequest::has_interface_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgWebAPIRequest::set_has_interface_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgWebAPIRequest::clear_has_interface_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgWebAPIRequest::clear_interface_name() {
  if (interface_name_ != &::google::protobuf::internal::kEmptyString) {
    interface_name_->clear();
  }
  clear_has_interface_name();
}
inline const ::std::string& CMsgWebAPIRequest::interface_name() const {
  return *interface_name_;
}
inline void CMsgWebAPIRequest::set_interface_name(const ::std::string& value) {
  set_has_interface_name();
  if (interface_name_ == &::google::protobuf::internal::kEmptyString) {
    interface_name_ = new ::std::string;
  }
  interface_name_->assign(value);
}
inline void CMsgWebAPIRequest::set_interface_name(const char* value) {
  set_has_interface_name();
  if (interface_name_ == &::google::protobuf::internal::kEmptyString) {
    interface_name_ = new ::std::string;
  }
  interface_name_->assign(value);
}
inline void CMsgWebAPIRequest::set_interface_name(const char* value, size_t size) {
  set_has_interface_name();
  if (interface_name_ == &::google::protobuf::internal::kEmptyString) {
    interface_name_ = new ::std::string;
  }
  interface_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgWebAPIRequest::mutable_interface_name() {
  set_has_interface_name();
  if (interface_name_ == &::google::protobuf::internal::kEmptyString) {
    interface_name_ = new ::std::string;
  }
  return interface_name_;
}
inline ::std::string* CMsgWebAPIRequest::release_interface_name() {
  clear_has_interface_name();
  if (interface_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = interface_name_;
    interface_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string method_name = 3;
inline bool CMsgWebAPIRequest::has_method_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgWebAPIRequest::set_has_method_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgWebAPIRequest::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgWebAPIRequest::clear_method_name() {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    method_name_->clear();
  }
  clear_has_method_name();
}
inline const ::std::string& CMsgWebAPIRequest::method_name() const {
  return *method_name_;
}
inline void CMsgWebAPIRequest::set_method_name(const ::std::string& value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void CMsgWebAPIRequest::set_method_name(const char* value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void CMsgWebAPIRequest::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgWebAPIRequest::mutable_method_name() {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  return method_name_;
}
inline ::std::string* CMsgWebAPIRequest::release_method_name() {
  clear_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_name_;
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 version = 4;
inline bool CMsgWebAPIRequest::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgWebAPIRequest::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgWebAPIRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgWebAPIRequest::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 CMsgWebAPIRequest::version() const {
  return version_;
}
inline void CMsgWebAPIRequest::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// optional .CMsgWebAPIKey api_key = 5;
inline bool CMsgWebAPIRequest::has_api_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgWebAPIRequest::set_has_api_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgWebAPIRequest::clear_has_api_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgWebAPIRequest::clear_api_key() {
  if (api_key_ != NULL) api_key_->::CMsgWebAPIKey::Clear();
  clear_has_api_key();
}
inline const ::CMsgWebAPIKey& CMsgWebAPIRequest::api_key() const {
  return api_key_ != NULL ? *api_key_ : *default_instance_->api_key_;
}
inline ::CMsgWebAPIKey* CMsgWebAPIRequest::mutable_api_key() {
  set_has_api_key();
  if (api_key_ == NULL) api_key_ = new ::CMsgWebAPIKey;
  return api_key_;
}
inline ::CMsgWebAPIKey* CMsgWebAPIRequest::release_api_key() {
  clear_has_api_key();
  ::CMsgWebAPIKey* temp = api_key_;
  api_key_ = NULL;
  return temp;
}

// optional .CMsgHttpRequest request = 6;
inline bool CMsgWebAPIRequest::has_request() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgWebAPIRequest::set_has_request() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgWebAPIRequest::clear_has_request() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgWebAPIRequest::clear_request() {
  if (request_ != NULL) request_->::CMsgHttpRequest::Clear();
  clear_has_request();
}
inline const ::CMsgHttpRequest& CMsgWebAPIRequest::request() const {
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::CMsgHttpRequest* CMsgWebAPIRequest::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::CMsgHttpRequest;
  return request_;
}
inline ::CMsgHttpRequest* CMsgWebAPIRequest::release_request() {
  clear_has_request();
  ::CMsgHttpRequest* temp = request_;
  request_ = NULL;
  return temp;
}

// optional uint32 routing_app_id = 7;
inline bool CMsgWebAPIRequest::has_routing_app_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgWebAPIRequest::set_has_routing_app_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgWebAPIRequest::clear_has_routing_app_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgWebAPIRequest::clear_routing_app_id() {
  routing_app_id_ = 0u;
  clear_has_routing_app_id();
}
inline ::google::protobuf::uint32 CMsgWebAPIRequest::routing_app_id() const {
  return routing_app_id_;
}
inline void CMsgWebAPIRequest::set_routing_app_id(::google::protobuf::uint32 value) {
  set_has_routing_app_id();
  routing_app_id_ = value;
}

// -------------------------------------------------------------------

// CMsgHttpResponse_ResponseHeader

// optional string name = 1;
inline bool CMsgHttpResponse_ResponseHeader::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgHttpResponse_ResponseHeader::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgHttpResponse_ResponseHeader::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgHttpResponse_ResponseHeader::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgHttpResponse_ResponseHeader::name() const {
  return *name_;
}
inline void CMsgHttpResponse_ResponseHeader::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgHttpResponse_ResponseHeader::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgHttpResponse_ResponseHeader::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgHttpResponse_ResponseHeader::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CMsgHttpResponse_ResponseHeader::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string value = 2;
inline bool CMsgHttpResponse_ResponseHeader::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgHttpResponse_ResponseHeader::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgHttpResponse_ResponseHeader::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgHttpResponse_ResponseHeader::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CMsgHttpResponse_ResponseHeader::value() const {
  return *value_;
}
inline void CMsgHttpResponse_ResponseHeader::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgHttpResponse_ResponseHeader::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgHttpResponse_ResponseHeader::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgHttpResponse_ResponseHeader::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CMsgHttpResponse_ResponseHeader::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgHttpResponse

// optional uint32 status_code = 1;
inline bool CMsgHttpResponse::has_status_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgHttpResponse::set_has_status_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgHttpResponse::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgHttpResponse::clear_status_code() {
  status_code_ = 0u;
  clear_has_status_code();
}
inline ::google::protobuf::uint32 CMsgHttpResponse::status_code() const {
  return status_code_;
}
inline void CMsgHttpResponse::set_status_code(::google::protobuf::uint32 value) {
  set_has_status_code();
  status_code_ = value;
}

// repeated .CMsgHttpResponse.ResponseHeader headers = 2;
inline int CMsgHttpResponse::headers_size() const {
  return headers_.size();
}
inline void CMsgHttpResponse::clear_headers() {
  headers_.Clear();
}
inline const ::CMsgHttpResponse_ResponseHeader& CMsgHttpResponse::headers(int index) const {
  return headers_.Get(index);
}
inline ::CMsgHttpResponse_ResponseHeader* CMsgHttpResponse::mutable_headers(int index) {
  return headers_.Mutable(index);
}
inline ::CMsgHttpResponse_ResponseHeader* CMsgHttpResponse::add_headers() {
  return headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgHttpResponse_ResponseHeader >&
CMsgHttpResponse::headers() const {
  return headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgHttpResponse_ResponseHeader >*
CMsgHttpResponse::mutable_headers() {
  return &headers_;
}

// optional bytes body = 3;
inline bool CMsgHttpResponse::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgHttpResponse::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgHttpResponse::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgHttpResponse::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& CMsgHttpResponse::body() const {
  return *body_;
}
inline void CMsgHttpResponse::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CMsgHttpResponse::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CMsgHttpResponse::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgHttpResponse::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* CMsgHttpResponse::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgAMFindAccounts

// optional uint32 search_type = 1;
inline bool CMsgAMFindAccounts::has_search_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgAMFindAccounts::set_has_search_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgAMFindAccounts::clear_has_search_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgAMFindAccounts::clear_search_type() {
  search_type_ = 0u;
  clear_has_search_type();
}
inline ::google::protobuf::uint32 CMsgAMFindAccounts::search_type() const {
  return search_type_;
}
inline void CMsgAMFindAccounts::set_search_type(::google::protobuf::uint32 value) {
  set_has_search_type();
  search_type_ = value;
}

// optional string search_string = 2;
inline bool CMsgAMFindAccounts::has_search_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgAMFindAccounts::set_has_search_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgAMFindAccounts::clear_has_search_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgAMFindAccounts::clear_search_string() {
  if (search_string_ != &::google::protobuf::internal::kEmptyString) {
    search_string_->clear();
  }
  clear_has_search_string();
}
inline const ::std::string& CMsgAMFindAccounts::search_string() const {
  return *search_string_;
}
inline void CMsgAMFindAccounts::set_search_string(const ::std::string& value) {
  set_has_search_string();
  if (search_string_ == &::google::protobuf::internal::kEmptyString) {
    search_string_ = new ::std::string;
  }
  search_string_->assign(value);
}
inline void CMsgAMFindAccounts::set_search_string(const char* value) {
  set_has_search_string();
  if (search_string_ == &::google::protobuf::internal::kEmptyString) {
    search_string_ = new ::std::string;
  }
  search_string_->assign(value);
}
inline void CMsgAMFindAccounts::set_search_string(const char* value, size_t size) {
  set_has_search_string();
  if (search_string_ == &::google::protobuf::internal::kEmptyString) {
    search_string_ = new ::std::string;
  }
  search_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgAMFindAccounts::mutable_search_string() {
  set_has_search_string();
  if (search_string_ == &::google::protobuf::internal::kEmptyString) {
    search_string_ = new ::std::string;
  }
  return search_string_;
}
inline ::std::string* CMsgAMFindAccounts::release_search_string() {
  clear_has_search_string();
  if (search_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = search_string_;
    search_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgAMFindAccountsResponse

// repeated fixed64 steam_id = 1;
inline int CMsgAMFindAccountsResponse::steam_id_size() const {
  return steam_id_.size();
}
inline void CMsgAMFindAccountsResponse::clear_steam_id() {
  steam_id_.Clear();
}
inline ::google::protobuf::uint64 CMsgAMFindAccountsResponse::steam_id(int index) const {
  return steam_id_.Get(index);
}
inline void CMsgAMFindAccountsResponse::set_steam_id(int index, ::google::protobuf::uint64 value) {
  steam_id_.Set(index, value);
}
inline void CMsgAMFindAccountsResponse::add_steam_id(::google::protobuf::uint64 value) {
  steam_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgAMFindAccountsResponse::steam_id() const {
  return steam_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgAMFindAccountsResponse::mutable_steam_id() {
  return &steam_id_;
}

// -------------------------------------------------------------------

// CMsgNotifyWatchdog

// optional uint32 source = 1;
inline bool CMsgNotifyWatchdog::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgNotifyWatchdog::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgNotifyWatchdog::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgNotifyWatchdog::clear_source() {
  source_ = 0u;
  clear_has_source();
}
inline ::google::protobuf::uint32 CMsgNotifyWatchdog::source() const {
  return source_;
}
inline void CMsgNotifyWatchdog::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
}

// optional uint32 alert_type = 2;
inline bool CMsgNotifyWatchdog::has_alert_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgNotifyWatchdog::set_has_alert_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgNotifyWatchdog::clear_has_alert_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgNotifyWatchdog::clear_alert_type() {
  alert_type_ = 0u;
  clear_has_alert_type();
}
inline ::google::protobuf::uint32 CMsgNotifyWatchdog::alert_type() const {
  return alert_type_;
}
inline void CMsgNotifyWatchdog::set_alert_type(::google::protobuf::uint32 value) {
  set_has_alert_type();
  alert_type_ = value;
}

// optional uint32 alert_destination = 3;
inline bool CMsgNotifyWatchdog::has_alert_destination() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgNotifyWatchdog::set_has_alert_destination() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgNotifyWatchdog::clear_has_alert_destination() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgNotifyWatchdog::clear_alert_destination() {
  alert_destination_ = 0u;
  clear_has_alert_destination();
}
inline ::google::protobuf::uint32 CMsgNotifyWatchdog::alert_destination() const {
  return alert_destination_;
}
inline void CMsgNotifyWatchdog::set_alert_destination(::google::protobuf::uint32 value) {
  set_has_alert_destination();
  alert_destination_ = value;
}

// optional bool critical = 4;
inline bool CMsgNotifyWatchdog::has_critical() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgNotifyWatchdog::set_has_critical() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgNotifyWatchdog::clear_has_critical() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgNotifyWatchdog::clear_critical() {
  critical_ = false;
  clear_has_critical();
}
inline bool CMsgNotifyWatchdog::critical() const {
  return critical_;
}
inline void CMsgNotifyWatchdog::set_critical(bool value) {
  set_has_critical();
  critical_ = value;
}

// optional uint32 time = 5;
inline bool CMsgNotifyWatchdog::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgNotifyWatchdog::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgNotifyWatchdog::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgNotifyWatchdog::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CMsgNotifyWatchdog::time() const {
  return time_;
}
inline void CMsgNotifyWatchdog::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 appid = 6;
inline bool CMsgNotifyWatchdog::has_appid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgNotifyWatchdog::set_has_appid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgNotifyWatchdog::clear_has_appid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgNotifyWatchdog::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CMsgNotifyWatchdog::appid() const {
  return appid_;
}
inline void CMsgNotifyWatchdog::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// optional string text = 7;
inline bool CMsgNotifyWatchdog::has_text() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgNotifyWatchdog::set_has_text() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgNotifyWatchdog::clear_has_text() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgNotifyWatchdog::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& CMsgNotifyWatchdog::text() const {
  return *text_;
}
inline void CMsgNotifyWatchdog::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgNotifyWatchdog::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgNotifyWatchdog::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgNotifyWatchdog::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* CMsgNotifyWatchdog::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgAMGetLicenses

// optional fixed64 steamid = 1;
inline bool CMsgAMGetLicenses::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgAMGetLicenses::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgAMGetLicenses::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgAMGetLicenses::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CMsgAMGetLicenses::steamid() const {
  return steamid_;
}
inline void CMsgAMGetLicenses::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
}

// -------------------------------------------------------------------

// CMsgPackageLicense

// optional uint32 package_id = 1;
inline bool CMsgPackageLicense::has_package_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPackageLicense::set_has_package_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPackageLicense::clear_has_package_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPackageLicense::clear_package_id() {
  package_id_ = 0u;
  clear_has_package_id();
}
inline ::google::protobuf::uint32 CMsgPackageLicense::package_id() const {
  return package_id_;
}
inline void CMsgPackageLicense::set_package_id(::google::protobuf::uint32 value) {
  set_has_package_id();
  package_id_ = value;
}

// optional uint32 time_created = 2;
inline bool CMsgPackageLicense::has_time_created() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPackageLicense::set_has_time_created() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPackageLicense::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPackageLicense::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
inline ::google::protobuf::uint32 CMsgPackageLicense::time_created() const {
  return time_created_;
}
inline void CMsgPackageLicense::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
}

// -------------------------------------------------------------------

// CMsgAMGetLicensesResponse

// repeated .CMsgPackageLicense license = 1;
inline int CMsgAMGetLicensesResponse::license_size() const {
  return license_.size();
}
inline void CMsgAMGetLicensesResponse::clear_license() {
  license_.Clear();
}
inline const ::CMsgPackageLicense& CMsgAMGetLicensesResponse::license(int index) const {
  return license_.Get(index);
}
inline ::CMsgPackageLicense* CMsgAMGetLicensesResponse::mutable_license(int index) {
  return license_.Mutable(index);
}
inline ::CMsgPackageLicense* CMsgAMGetLicensesResponse::add_license() {
  return license_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPackageLicense >&
CMsgAMGetLicensesResponse::license() const {
  return license_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPackageLicense >*
CMsgAMGetLicensesResponse::mutable_license() {
  return &license_;
}

// optional uint32 result = 2;
inline bool CMsgAMGetLicensesResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgAMGetLicensesResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgAMGetLicensesResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgAMGetLicensesResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgAMGetLicensesResponse::result() const {
  return result_;
}
inline void CMsgAMGetLicensesResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// CMsgAMGetUserGameStats

// optional fixed64 steam_id = 1;
inline bool CMsgAMGetUserGameStats::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgAMGetUserGameStats::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgAMGetUserGameStats::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgAMGetUserGameStats::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgAMGetUserGameStats::steam_id() const {
  return steam_id_;
}
inline void CMsgAMGetUserGameStats::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
}

// optional fixed64 game_id = 2;
inline bool CMsgAMGetUserGameStats::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgAMGetUserGameStats::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgAMGetUserGameStats::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgAMGetUserGameStats::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
inline ::google::protobuf::uint64 CMsgAMGetUserGameStats::game_id() const {
  return game_id_;
}
inline void CMsgAMGetUserGameStats::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
}

// repeated uint32 stats = 3;
inline int CMsgAMGetUserGameStats::stats_size() const {
  return stats_.size();
}
inline void CMsgAMGetUserGameStats::clear_stats() {
  stats_.Clear();
}
inline ::google::protobuf::uint32 CMsgAMGetUserGameStats::stats(int index) const {
  return stats_.Get(index);
}
inline void CMsgAMGetUserGameStats::set_stats(int index, ::google::protobuf::uint32 value) {
  stats_.Set(index, value);
}
inline void CMsgAMGetUserGameStats::add_stats(::google::protobuf::uint32 value) {
  stats_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgAMGetUserGameStats::stats() const {
  return stats_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgAMGetUserGameStats::mutable_stats() {
  return &stats_;
}

// -------------------------------------------------------------------

// CMsgAMGetUserGameStatsResponse_Stats

// optional uint32 stat_id = 1;
inline bool CMsgAMGetUserGameStatsResponse_Stats::has_stat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgAMGetUserGameStatsResponse_Stats::set_has_stat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgAMGetUserGameStatsResponse_Stats::clear_has_stat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgAMGetUserGameStatsResponse_Stats::clear_stat_id() {
  stat_id_ = 0u;
  clear_has_stat_id();
}
inline ::google::protobuf::uint32 CMsgAMGetUserGameStatsResponse_Stats::stat_id() const {
  return stat_id_;
}
inline void CMsgAMGetUserGameStatsResponse_Stats::set_stat_id(::google::protobuf::uint32 value) {
  set_has_stat_id();
  stat_id_ = value;
}

// optional uint32 stat_value = 2;
inline bool CMsgAMGetUserGameStatsResponse_Stats::has_stat_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgAMGetUserGameStatsResponse_Stats::set_has_stat_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgAMGetUserGameStatsResponse_Stats::clear_has_stat_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgAMGetUserGameStatsResponse_Stats::clear_stat_value() {
  stat_value_ = 0u;
  clear_has_stat_value();
}
inline ::google::protobuf::uint32 CMsgAMGetUserGameStatsResponse_Stats::stat_value() const {
  return stat_value_;
}
inline void CMsgAMGetUserGameStatsResponse_Stats::set_stat_value(::google::protobuf::uint32 value) {
  set_has_stat_value();
  stat_value_ = value;
}

// -------------------------------------------------------------------

// CMsgAMGetUserGameStatsResponse_Achievement_Blocks

// optional uint32 achievement_id = 1;
inline bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::has_achievement_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::set_has_achievement_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::clear_has_achievement_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::clear_achievement_id() {
  achievement_id_ = 0u;
  clear_has_achievement_id();
}
inline ::google::protobuf::uint32 CMsgAMGetUserGameStatsResponse_Achievement_Blocks::achievement_id() const {
  return achievement_id_;
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::set_achievement_id(::google::protobuf::uint32 value) {
  set_has_achievement_id();
  achievement_id_ = value;
}

// optional uint32 achievement_bit_id = 2;
inline bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::has_achievement_bit_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::set_has_achievement_bit_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::clear_has_achievement_bit_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::clear_achievement_bit_id() {
  achievement_bit_id_ = 0u;
  clear_has_achievement_bit_id();
}
inline ::google::protobuf::uint32 CMsgAMGetUserGameStatsResponse_Achievement_Blocks::achievement_bit_id() const {
  return achievement_bit_id_;
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::set_achievement_bit_id(::google::protobuf::uint32 value) {
  set_has_achievement_bit_id();
  achievement_bit_id_ = value;
}

// optional fixed32 unlock_time = 3;
inline bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::has_unlock_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::set_has_unlock_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::clear_has_unlock_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::clear_unlock_time() {
  unlock_time_ = 0u;
  clear_has_unlock_time();
}
inline ::google::protobuf::uint32 CMsgAMGetUserGameStatsResponse_Achievement_Blocks::unlock_time() const {
  return unlock_time_;
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::set_unlock_time(::google::protobuf::uint32 value) {
  set_has_unlock_time();
  unlock_time_ = value;
}

// -------------------------------------------------------------------

// CMsgAMGetUserGameStatsResponse

// optional fixed64 steam_id = 1;
inline bool CMsgAMGetUserGameStatsResponse::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgAMGetUserGameStatsResponse::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgAMGetUserGameStatsResponse::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgAMGetUserGameStatsResponse::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgAMGetUserGameStatsResponse::steam_id() const {
  return steam_id_;
}
inline void CMsgAMGetUserGameStatsResponse::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
}

// optional fixed64 game_id = 2;
inline bool CMsgAMGetUserGameStatsResponse::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgAMGetUserGameStatsResponse::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgAMGetUserGameStatsResponse::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgAMGetUserGameStatsResponse::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
inline ::google::protobuf::uint64 CMsgAMGetUserGameStatsResponse::game_id() const {
  return game_id_;
}
inline void CMsgAMGetUserGameStatsResponse::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional int32 eresult = 3 [default = 2];
inline bool CMsgAMGetUserGameStatsResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgAMGetUserGameStatsResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgAMGetUserGameStatsResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgAMGetUserGameStatsResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
inline ::google::protobuf::int32 CMsgAMGetUserGameStatsResponse::eresult() const {
  return eresult_;
}
inline void CMsgAMGetUserGameStatsResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
}

// repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
inline int CMsgAMGetUserGameStatsResponse::stats_size() const {
  return stats_.size();
}
inline void CMsgAMGetUserGameStatsResponse::clear_stats() {
  stats_.Clear();
}
inline const ::CMsgAMGetUserGameStatsResponse_Stats& CMsgAMGetUserGameStatsResponse::stats(int index) const {
  return stats_.Get(index);
}
inline ::CMsgAMGetUserGameStatsResponse_Stats* CMsgAMGetUserGameStatsResponse::mutable_stats(int index) {
  return stats_.Mutable(index);
}
inline ::CMsgAMGetUserGameStatsResponse_Stats* CMsgAMGetUserGameStatsResponse::add_stats() {
  return stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Stats >&
CMsgAMGetUserGameStatsResponse::stats() const {
  return stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Stats >*
CMsgAMGetUserGameStatsResponse::mutable_stats() {
  return &stats_;
}

// repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
inline int CMsgAMGetUserGameStatsResponse::achievement_blocks_size() const {
  return achievement_blocks_.size();
}
inline void CMsgAMGetUserGameStatsResponse::clear_achievement_blocks() {
  achievement_blocks_.Clear();
}
inline const ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks& CMsgAMGetUserGameStatsResponse::achievement_blocks(int index) const {
  return achievement_blocks_.Get(index);
}
inline ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* CMsgAMGetUserGameStatsResponse::mutable_achievement_blocks(int index) {
  return achievement_blocks_.Mutable(index);
}
inline ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* CMsgAMGetUserGameStatsResponse::add_achievement_blocks() {
  return achievement_blocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >&
CMsgAMGetUserGameStatsResponse::achievement_blocks() const {
  return achievement_blocks_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >*
CMsgAMGetUserGameStatsResponse::mutable_achievement_blocks() {
  return &achievement_blocks_;
}

// -------------------------------------------------------------------

// CMsgGCGetCommandList

// optional uint32 app_id = 1;
inline bool CMsgGCGetCommandList::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCGetCommandList::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCGetCommandList::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCGetCommandList::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 CMsgGCGetCommandList::app_id() const {
  return app_id_;
}
inline void CMsgGCGetCommandList::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
}

// optional string command_prefix = 2;
inline bool CMsgGCGetCommandList::has_command_prefix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCGetCommandList::set_has_command_prefix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCGetCommandList::clear_has_command_prefix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCGetCommandList::clear_command_prefix() {
  if (command_prefix_ != &::google::protobuf::internal::kEmptyString) {
    command_prefix_->clear();
  }
  clear_has_command_prefix();
}
inline const ::std::string& CMsgGCGetCommandList::command_prefix() const {
  return *command_prefix_;
}
inline void CMsgGCGetCommandList::set_command_prefix(const ::std::string& value) {
  set_has_command_prefix();
  if (command_prefix_ == &::google::protobuf::internal::kEmptyString) {
    command_prefix_ = new ::std::string;
  }
  command_prefix_->assign(value);
}
inline void CMsgGCGetCommandList::set_command_prefix(const char* value) {
  set_has_command_prefix();
  if (command_prefix_ == &::google::protobuf::internal::kEmptyString) {
    command_prefix_ = new ::std::string;
  }
  command_prefix_->assign(value);
}
inline void CMsgGCGetCommandList::set_command_prefix(const char* value, size_t size) {
  set_has_command_prefix();
  if (command_prefix_ == &::google::protobuf::internal::kEmptyString) {
    command_prefix_ = new ::std::string;
  }
  command_prefix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCGetCommandList::mutable_command_prefix() {
  set_has_command_prefix();
  if (command_prefix_ == &::google::protobuf::internal::kEmptyString) {
    command_prefix_ = new ::std::string;
  }
  return command_prefix_;
}
inline ::std::string* CMsgGCGetCommandList::release_command_prefix() {
  clear_has_command_prefix();
  if (command_prefix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = command_prefix_;
    command_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgGCGetCommandListResponse

// repeated string command_name = 1;
inline int CMsgGCGetCommandListResponse::command_name_size() const {
  return command_name_.size();
}
inline void CMsgGCGetCommandListResponse::clear_command_name() {
  command_name_.Clear();
}
inline const ::std::string& CMsgGCGetCommandListResponse::command_name(int index) const {
  return command_name_.Get(index);
}
inline ::std::string* CMsgGCGetCommandListResponse::mutable_command_name(int index) {
  return command_name_.Mutable(index);
}
inline void CMsgGCGetCommandListResponse::set_command_name(int index, const ::std::string& value) {
  command_name_.Mutable(index)->assign(value);
}
inline void CMsgGCGetCommandListResponse::set_command_name(int index, const char* value) {
  command_name_.Mutable(index)->assign(value);
}
inline void CMsgGCGetCommandListResponse::set_command_name(int index, const char* value, size_t size) {
  command_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCGetCommandListResponse::add_command_name() {
  return command_name_.Add();
}
inline void CMsgGCGetCommandListResponse::add_command_name(const ::std::string& value) {
  command_name_.Add()->assign(value);
}
inline void CMsgGCGetCommandListResponse::add_command_name(const char* value) {
  command_name_.Add()->assign(value);
}
inline void CMsgGCGetCommandListResponse::add_command_name(const char* value, size_t size) {
  command_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgGCGetCommandListResponse::command_name() const {
  return command_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgGCGetCommandListResponse::mutable_command_name() {
  return &command_name_;
}

// -------------------------------------------------------------------

// CGCMsgMemCachedGet

// repeated string keys = 1;
inline int CGCMsgMemCachedGet::keys_size() const {
  return keys_.size();
}
inline void CGCMsgMemCachedGet::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& CGCMsgMemCachedGet::keys(int index) const {
  return keys_.Get(index);
}
inline ::std::string* CGCMsgMemCachedGet::mutable_keys(int index) {
  return keys_.Mutable(index);
}
inline void CGCMsgMemCachedGet::set_keys(int index, const ::std::string& value) {
  keys_.Mutable(index)->assign(value);
}
inline void CGCMsgMemCachedGet::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
}
inline void CGCMsgMemCachedGet::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CGCMsgMemCachedGet::add_keys() {
  return keys_.Add();
}
inline void CGCMsgMemCachedGet::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
}
inline void CGCMsgMemCachedGet::add_keys(const char* value) {
  keys_.Add()->assign(value);
}
inline void CGCMsgMemCachedGet::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CGCMsgMemCachedGet::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CGCMsgMemCachedGet::mutable_keys() {
  return &keys_;
}

// -------------------------------------------------------------------

// CGCMsgMemCachedGetResponse_ValueTag

// optional bool found = 1;
inline bool CGCMsgMemCachedGetResponse_ValueTag::has_found() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGCMsgMemCachedGetResponse_ValueTag::set_has_found() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGCMsgMemCachedGetResponse_ValueTag::clear_has_found() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGCMsgMemCachedGetResponse_ValueTag::clear_found() {
  found_ = false;
  clear_has_found();
}
inline bool CGCMsgMemCachedGetResponse_ValueTag::found() const {
  return found_;
}
inline void CGCMsgMemCachedGetResponse_ValueTag::set_found(bool value) {
  set_has_found();
  found_ = value;
}

// optional bytes value = 2;
inline bool CGCMsgMemCachedGetResponse_ValueTag::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGCMsgMemCachedGetResponse_ValueTag::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGCMsgMemCachedGetResponse_ValueTag::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGCMsgMemCachedGetResponse_ValueTag::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CGCMsgMemCachedGetResponse_ValueTag::value() const {
  return *value_;
}
inline void CGCMsgMemCachedGetResponse_ValueTag::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CGCMsgMemCachedGetResponse_ValueTag::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CGCMsgMemCachedGetResponse_ValueTag::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CGCMsgMemCachedGetResponse_ValueTag::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CGCMsgMemCachedGetResponse_ValueTag::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CGCMsgMemCachedGetResponse

// repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
inline int CGCMsgMemCachedGetResponse::values_size() const {
  return values_.size();
}
inline void CGCMsgMemCachedGetResponse::clear_values() {
  values_.Clear();
}
inline const ::CGCMsgMemCachedGetResponse_ValueTag& CGCMsgMemCachedGetResponse::values(int index) const {
  return values_.Get(index);
}
inline ::CGCMsgMemCachedGetResponse_ValueTag* CGCMsgMemCachedGetResponse::mutable_values(int index) {
  return values_.Mutable(index);
}
inline ::CGCMsgMemCachedGetResponse_ValueTag* CGCMsgMemCachedGetResponse::add_values() {
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CGCMsgMemCachedGetResponse_ValueTag >&
CGCMsgMemCachedGetResponse::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::CGCMsgMemCachedGetResponse_ValueTag >*
CGCMsgMemCachedGetResponse::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// CGCMsgMemCachedSet_KeyPair

// optional string name = 1;
inline bool CGCMsgMemCachedSet_KeyPair::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGCMsgMemCachedSet_KeyPair::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGCMsgMemCachedSet_KeyPair::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGCMsgMemCachedSet_KeyPair::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CGCMsgMemCachedSet_KeyPair::name() const {
  return *name_;
}
inline void CGCMsgMemCachedSet_KeyPair::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CGCMsgMemCachedSet_KeyPair::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CGCMsgMemCachedSet_KeyPair::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CGCMsgMemCachedSet_KeyPair::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CGCMsgMemCachedSet_KeyPair::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes value = 2;
inline bool CGCMsgMemCachedSet_KeyPair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGCMsgMemCachedSet_KeyPair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGCMsgMemCachedSet_KeyPair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGCMsgMemCachedSet_KeyPair::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CGCMsgMemCachedSet_KeyPair::value() const {
  return *value_;
}
inline void CGCMsgMemCachedSet_KeyPair::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CGCMsgMemCachedSet_KeyPair::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CGCMsgMemCachedSet_KeyPair::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CGCMsgMemCachedSet_KeyPair::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CGCMsgMemCachedSet_KeyPair::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CGCMsgMemCachedSet

// repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
inline int CGCMsgMemCachedSet::keys_size() const {
  return keys_.size();
}
inline void CGCMsgMemCachedSet::clear_keys() {
  keys_.Clear();
}
inline const ::CGCMsgMemCachedSet_KeyPair& CGCMsgMemCachedSet::keys(int index) const {
  return keys_.Get(index);
}
inline ::CGCMsgMemCachedSet_KeyPair* CGCMsgMemCachedSet::mutable_keys(int index) {
  return keys_.Mutable(index);
}
inline ::CGCMsgMemCachedSet_KeyPair* CGCMsgMemCachedSet::add_keys() {
  return keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CGCMsgMemCachedSet_KeyPair >&
CGCMsgMemCachedSet::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::CGCMsgMemCachedSet_KeyPair >*
CGCMsgMemCachedSet::mutable_keys() {
  return &keys_;
}

// -------------------------------------------------------------------

// CGCMsgMemCachedDelete

// repeated string keys = 1;
inline int CGCMsgMemCachedDelete::keys_size() const {
  return keys_.size();
}
inline void CGCMsgMemCachedDelete::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& CGCMsgMemCachedDelete::keys(int index) const {
  return keys_.Get(index);
}
inline ::std::string* CGCMsgMemCachedDelete::mutable_keys(int index) {
  return keys_.Mutable(index);
}
inline void CGCMsgMemCachedDelete::set_keys(int index, const ::std::string& value) {
  keys_.Mutable(index)->assign(value);
}
inline void CGCMsgMemCachedDelete::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
}
inline void CGCMsgMemCachedDelete::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CGCMsgMemCachedDelete::add_keys() {
  return keys_.Add();
}
inline void CGCMsgMemCachedDelete::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
}
inline void CGCMsgMemCachedDelete::add_keys(const char* value) {
  keys_.Add()->assign(value);
}
inline void CGCMsgMemCachedDelete::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CGCMsgMemCachedDelete::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CGCMsgMemCachedDelete::mutable_keys() {
  return &keys_;
}

// -------------------------------------------------------------------

// CMsgAMAddFreeLicense

// optional fixed64 steamid = 1;
inline bool CMsgAMAddFreeLicense::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgAMAddFreeLicense::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgAMAddFreeLicense::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgAMAddFreeLicense::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CMsgAMAddFreeLicense::steamid() const {
  return steamid_;
}
inline void CMsgAMAddFreeLicense::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
}

// optional uint32 ip_public = 2;
inline bool CMsgAMAddFreeLicense::has_ip_public() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgAMAddFreeLicense::set_has_ip_public() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgAMAddFreeLicense::clear_has_ip_public() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgAMAddFreeLicense::clear_ip_public() {
  ip_public_ = 0u;
  clear_has_ip_public();
}
inline ::google::protobuf::uint32 CMsgAMAddFreeLicense::ip_public() const {
  return ip_public_;
}
inline void CMsgAMAddFreeLicense::set_ip_public(::google::protobuf::uint32 value) {
  set_has_ip_public();
  ip_public_ = value;
}

// optional uint32 packageid = 3;
inline bool CMsgAMAddFreeLicense::has_packageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgAMAddFreeLicense::set_has_packageid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgAMAddFreeLicense::clear_has_packageid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgAMAddFreeLicense::clear_packageid() {
  packageid_ = 0u;
  clear_has_packageid();
}
inline ::google::protobuf::uint32 CMsgAMAddFreeLicense::packageid() const {
  return packageid_;
}
inline void CMsgAMAddFreeLicense::set_packageid(::google::protobuf::uint32 value) {
  set_has_packageid();
  packageid_ = value;
}

// optional string store_country_code = 4;
inline bool CMsgAMAddFreeLicense::has_store_country_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgAMAddFreeLicense::set_has_store_country_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgAMAddFreeLicense::clear_has_store_country_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgAMAddFreeLicense::clear_store_country_code() {
  if (store_country_code_ != &::google::protobuf::internal::kEmptyString) {
    store_country_code_->clear();
  }
  clear_has_store_country_code();
}
inline const ::std::string& CMsgAMAddFreeLicense::store_country_code() const {
  return *store_country_code_;
}
inline void CMsgAMAddFreeLicense::set_store_country_code(const ::std::string& value) {
  set_has_store_country_code();
  if (store_country_code_ == &::google::protobuf::internal::kEmptyString) {
    store_country_code_ = new ::std::string;
  }
  store_country_code_->assign(value);
}
inline void CMsgAMAddFreeLicense::set_store_country_code(const char* value) {
  set_has_store_country_code();
  if (store_country_code_ == &::google::protobuf::internal::kEmptyString) {
    store_country_code_ = new ::std::string;
  }
  store_country_code_->assign(value);
}
inline void CMsgAMAddFreeLicense::set_store_country_code(const char* value, size_t size) {
  set_has_store_country_code();
  if (store_country_code_ == &::google::protobuf::internal::kEmptyString) {
    store_country_code_ = new ::std::string;
  }
  store_country_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgAMAddFreeLicense::mutable_store_country_code() {
  set_has_store_country_code();
  if (store_country_code_ == &::google::protobuf::internal::kEmptyString) {
    store_country_code_ = new ::std::string;
  }
  return store_country_code_;
}
inline ::std::string* CMsgAMAddFreeLicense::release_store_country_code() {
  clear_has_store_country_code();
  if (store_country_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = store_country_code_;
    store_country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgAMAddFreeLicenseResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgAMAddFreeLicenseResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgAMAddFreeLicenseResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgAMAddFreeLicenseResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgAMAddFreeLicenseResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
inline ::google::protobuf::int32 CMsgAMAddFreeLicenseResponse::eresult() const {
  return eresult_;
}
inline void CMsgAMAddFreeLicenseResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
}

// optional int32 purchase_result_detail = 2;
inline bool CMsgAMAddFreeLicenseResponse::has_purchase_result_detail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgAMAddFreeLicenseResponse::set_has_purchase_result_detail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgAMAddFreeLicenseResponse::clear_has_purchase_result_detail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgAMAddFreeLicenseResponse::clear_purchase_result_detail() {
  purchase_result_detail_ = 0;
  clear_has_purchase_result_detail();
}
inline ::google::protobuf::int32 CMsgAMAddFreeLicenseResponse::purchase_result_detail() const {
  return purchase_result_detail_;
}
inline void CMsgAMAddFreeLicenseResponse::set_purchase_result_detail(::google::protobuf::int32 value) {
  set_has_purchase_result_detail();
  purchase_result_detail_ = value;
}

// optional fixed64 transid = 3;
inline bool CMsgAMAddFreeLicenseResponse::has_transid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgAMAddFreeLicenseResponse::set_has_transid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgAMAddFreeLicenseResponse::clear_has_transid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgAMAddFreeLicenseResponse::clear_transid() {
  transid_ = GOOGLE_ULONGLONG(0);
  clear_has_transid();
}
inline ::google::protobuf::uint64 CMsgAMAddFreeLicenseResponse::transid() const {
  return transid_;
}
inline void CMsgAMAddFreeLicenseResponse::set_transid(::google::protobuf::uint64 value) {
  set_has_transid();
  transid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steammessages_2eproto__INCLUDED
