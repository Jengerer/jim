// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tf_gcmessages.proto

#include "tf_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class CMsgTFGoldenWrenchBroadcastDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFGoldenWrenchBroadcast>
      _instance;
} _CMsgTFGoldenWrenchBroadcast_default_instance_;
class CMsgTFSaxxyBroadcastDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFSaxxyBroadcast>
      _instance;
} _CMsgTFSaxxyBroadcast_default_instance_;
class CMsgGCTFSpecificItemBroadcastDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCTFSpecificItemBroadcast>
      _instance;
} _CMsgGCTFSpecificItemBroadcast_default_instance_;
class CMsgTFWorldStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFWorldStatus>
      _instance;
} _CMsgTFWorldStatus_default_instance_;
class CSOTFDuelSummaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOTFDuelSummary>
      _instance;
} _CSOTFDuelSummary_default_instance_;
class CSOTFMapContributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOTFMapContribution>
      _instance;
} _CSOTFMapContribution_default_instance_;
class CMsgTFVoteKickBanPlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFVoteKickBanPlayer>
      _instance;
} _CMsgTFVoteKickBanPlayer_default_instance_;
class CMsgTFVoteKickBanPlayerResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFVoteKickBanPlayerResult>
      _instance;
} _CMsgTFVoteKickBanPlayerResult_default_instance_;
class CMsgTFFreeTrialChooseMostHelpfulFriendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFFreeTrialChooseMostHelpfulFriend>
      _instance;
} _CMsgTFFreeTrialChooseMostHelpfulFriend_default_instance_;
class CMsgTFRequestTF2FriendsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFRequestTF2Friends>
      _instance;
} _CMsgTFRequestTF2Friends_default_instance_;
class CMsgTFRequestTF2FriendsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFRequestTF2FriendsResponse>
      _instance;
} _CMsgTFRequestTF2FriendsResponse_default_instance_;
class CSOTFPlayerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOTFPlayerInfo>
      _instance;
} _CSOTFPlayerInfo_default_instance_;
class CMsgTFThankedBySomeoneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFThankedBySomeone>
      _instance;
} _CMsgTFThankedBySomeone_default_instance_;
class CMsgTFThankedSomeoneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFThankedSomeone>
      _instance;
} _CMsgTFThankedSomeone_default_instance_;
class CMsgTFFreeTrialConvertedToPremiumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFFreeTrialConvertedToPremium>
      _instance;
} _CMsgTFFreeTrialConvertedToPremium_default_instance_;
class CMsgSaxxyAwardedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSaxxyAwarded>
      _instance;
} _CMsgSaxxyAwarded_default_instance_;
class CMsgReplaySubmitContestEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgReplaySubmitContestEntry>
      _instance;
} _CMsgReplaySubmitContestEntry_default_instance_;
class CMsgReplaySubmitContestEntryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgReplaySubmitContestEntryResponse>
      _instance;
} _CMsgReplaySubmitContestEntryResponse_default_instance_;
class CReplayCachedContestDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CReplayCachedContestData>
      _instance;
} _CReplayCachedContestData_default_instance_;
class CMsgTFCoaching_AddToCoachesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFCoaching_AddToCoaches>
      _instance;
} _CMsgTFCoaching_AddToCoaches_default_instance_;
class CMsgTFCoaching_RemoveFromCoachesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFCoaching_RemoveFromCoaches>
      _instance;
} _CMsgTFCoaching_RemoveFromCoaches_default_instance_;
class CMsgTFCoaching_FindCoachDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFCoaching_FindCoach>
      _instance;
} _CMsgTFCoaching_FindCoach_default_instance_;
class CMsgTFCoaching_FindCoachResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFCoaching_FindCoachResponse>
      _instance;
} _CMsgTFCoaching_FindCoachResponse_default_instance_;
class CMsgTFCoaching_AskCoachDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFCoaching_AskCoach>
      _instance;
} _CMsgTFCoaching_AskCoach_default_instance_;
class CMsgTFCoaching_AskCoachResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFCoaching_AskCoachResponse>
      _instance;
} _CMsgTFCoaching_AskCoachResponse_default_instance_;
class CMsgTFCoaching_CoachJoinGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFCoaching_CoachJoinGame>
      _instance;
} _CMsgTFCoaching_CoachJoinGame_default_instance_;
class CMsgTFCoaching_CoachJoiningDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFCoaching_CoachJoining>
      _instance;
} _CMsgTFCoaching_CoachJoining_default_instance_;
class CMsgTFCoaching_CoachJoinedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFCoaching_CoachJoined>
      _instance;
} _CMsgTFCoaching_CoachJoined_default_instance_;
class CMsgTFCoaching_LikeCurrentCoachDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFCoaching_LikeCurrentCoach>
      _instance;
} _CMsgTFCoaching_LikeCurrentCoach_default_instance_;
class CMsgTFCoaching_RemoveCurrentCoachDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFCoaching_RemoveCurrentCoach>
      _instance;
} _CMsgTFCoaching_RemoveCurrentCoach_default_instance_;
class CMsgTFQuickplay_ScoreServers_ServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFQuickplay_ScoreServers_ServerInfo>
      _instance;
} _CMsgTFQuickplay_ScoreServers_ServerInfo_default_instance_;
class CMsgTFQuickplay_ScoreServersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFQuickplay_ScoreServers>
      _instance;
} _CMsgTFQuickplay_ScoreServers_default_instance_;
class CMsgTFQuickplay_ScoreServersResponse_ServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFQuickplay_ScoreServersResponse_ServerInfo>
      _instance;
} _CMsgTFQuickplay_ScoreServersResponse_ServerInfo_default_instance_;
class CMsgTFQuickplay_ScoreServersResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFQuickplay_ScoreServersResponse>
      _instance;
} _CMsgTFQuickplay_ScoreServersResponse_default_instance_;
class CMsgTFQuickplay_PlayerJoiningDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFQuickplay_PlayerJoining>
      _instance;
} _CMsgTFQuickplay_PlayerJoining_default_instance_;
class CMsgGC_GameServer_LevelInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_LevelInfo>
      _instance;
} _CMsgGC_GameServer_LevelInfo_default_instance_;
class CMsgGC_GameServer_AuthChallengeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_AuthChallenge>
      _instance;
} _CMsgGC_GameServer_AuthChallenge_default_instance_;
class CMsgGC_GameServer_AuthResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_AuthResult>
      _instance;
} _CMsgGC_GameServer_AuthResult_default_instance_;
class CMsgGC_GameServer_AuthChallengeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_AuthChallengeResponse>
      _instance;
} _CMsgGC_GameServer_AuthChallengeResponse_default_instance_;
class CMsgGC_GameServer_CreateIdentityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_CreateIdentity>
      _instance;
} _CMsgGC_GameServer_CreateIdentity_default_instance_;
class CMsgGC_GameServer_CreateIdentityResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_CreateIdentityResponse>
      _instance;
} _CMsgGC_GameServer_CreateIdentityResponse_default_instance_;
class CMsgGC_GameServer_ListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_List>
      _instance;
} _CMsgGC_GameServer_List_default_instance_;
class CMsgGC_GameServer_ListResponse_GameServerIdentityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_ListResponse_GameServerIdentity>
      _instance;
} _CMsgGC_GameServer_ListResponse_GameServerIdentity_default_instance_;
class CMsgGC_GameServer_ListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_ListResponse>
      _instance;
} _CMsgGC_GameServer_ListResponse_default_instance_;
class CMsgGC_GameServer_ResetIdentityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_ResetIdentity>
      _instance;
} _CMsgGC_GameServer_ResetIdentity_default_instance_;
class CMsgGC_GameServer_ResetIdentityResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_ResetIdentityResponse>
      _instance;
} _CMsgGC_GameServer_ResetIdentityResponse_default_instance_;
class CMsgGC_GameServer_AckPolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_AckPolicy>
      _instance;
} _CMsgGC_GameServer_AckPolicy_default_instance_;
class CMsgGC_GameServer_AckPolicyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_AckPolicyResponse>
      _instance;
} _CMsgGC_GameServer_AckPolicyResponse_default_instance_;
class CMsgGC_Client_UseServerModificationItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_Client_UseServerModificationItem>
      _instance;
} _CMsgGC_Client_UseServerModificationItem_default_instance_;
class CMsgGC_Client_UseServerModificationItem_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_Client_UseServerModificationItem_Response>
      _instance;
} _CMsgGC_Client_UseServerModificationItem_Response_default_instance_;
class CMsgGC_GameServer_UseServerModificationItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_UseServerModificationItem>
      _instance;
} _CMsgGC_GameServer_UseServerModificationItem_default_instance_;
class CMsgGC_GameServer_UseServerModificationItem_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_UseServerModificationItem_Response>
      _instance;
} _CMsgGC_GameServer_UseServerModificationItem_Response_default_instance_;
class CMsgGC_GameServer_ServerModificationItemExpiredDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_ServerModificationItemExpired>
      _instance;
} _CMsgGC_GameServer_ServerModificationItemExpired_default_instance_;
class CMsgGC_GameServer_ServerModificationItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_GameServer_ServerModificationItem>
      _instance;
} _CMsgGC_GameServer_ServerModificationItem_default_instance_;
class CMsgGC_Halloween_ReservedItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_Halloween_ReservedItem>
      _instance;
} _CMsgGC_Halloween_ReservedItem_default_instance_;
class CMsgGC_Halloween_GrantItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_Halloween_GrantItem>
      _instance;
} _CMsgGC_Halloween_GrantItem_default_instance_;
class CMsgGC_Halloween_GrantItemResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_Halloween_GrantItemResponse>
      _instance;
} _CMsgGC_Halloween_GrantItemResponse_default_instance_;
class CMsgGC_Halloween_ItemClaimedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_Halloween_ItemClaimed>
      _instance;
} _CMsgGC_Halloween_ItemClaimed_default_instance_;
class CMsgGC_PickupItemEligibility_QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_PickupItemEligibility_Query>
      _instance;
} _CMsgGC_PickupItemEligibility_Query_default_instance_;
class CMsgGC_PickupItemEligibility_QueryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_PickupItemEligibility_QueryResponse>
      _instance;
} _CMsgGC_PickupItemEligibility_QueryResponse_default_instance_;
class CSOTFPartyMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOTFPartyMember>
      _instance;
} _CSOTFPartyMember_default_instance_;
class CMsgMatchSearchCriteriaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMatchSearchCriteria>
      _instance;
} _CMsgMatchSearchCriteria_default_instance_;
class CMsgCasualMatchmakingSearchCriteriaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgCasualMatchmakingSearchCriteria>
      _instance;
} _CMsgCasualMatchmakingSearchCriteria_default_instance_;
class CMsgCreateOrUpdatePartyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgCreateOrUpdateParty>
      _instance;
} _CMsgCreateOrUpdateParty_default_instance_;
class CMsgCreateOrUpdatePartyReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgCreateOrUpdatePartyReply>
      _instance;
} _CMsgCreateOrUpdatePartyReply_default_instance_;
class CSOTFPartyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOTFParty>
      _instance;
} _CSOTFParty_default_instance_;
class CSOTFPartyInvite_PartyMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOTFPartyInvite_PartyMember>
      _instance;
} _CSOTFPartyInvite_PartyMember_default_instance_;
class CSOTFPartyInviteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOTFPartyInvite>
      _instance;
} _CSOTFPartyInvite_default_instance_;
class CTFLobbyMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTFLobbyMember>
      _instance;
} _CTFLobbyMember_default_instance_;
class CLobbyPendingPlayerReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CLobbyPendingPlayerReport>
      _instance;
} _CLobbyPendingPlayerReport_default_instance_;
class CSOTFGameServerLobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOTFGameServerLobby>
      _instance;
} _CSOTFGameServerLobby_default_instance_;
class CMsgExitMatchmakingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgExitMatchmaking>
      _instance;
} _CMsgExitMatchmaking_default_instance_;
class CMsgAcceptInviteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAcceptInvite>
      _instance;
} _CMsgAcceptInvite_default_instance_;
class CMsgAcceptInviteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAcceptInviteResponse>
      _instance;
} _CMsgAcceptInviteResponse_default_instance_;
class CMsgReadyUpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgReadyUp>
      _instance;
} _CMsgReadyUp_default_instance_;
class CMsgMatchmakingSearchCountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMatchmakingSearchCountRequest>
      _instance;
} _CMsgMatchmakingSearchCountRequest_default_instance_;
class CMsgMatchmakingSearchCountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMatchmakingSearchCountResponse>
      _instance;
} _CMsgMatchmakingSearchCountResponse_default_instance_;
class CMsgKickedFromMatchmakingQueueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgKickedFromMatchmakingQueue>
      _instance;
} _CMsgKickedFromMatchmakingQueue_default_instance_;
class CMsgTFJoinChatChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFJoinChatChannel>
      _instance;
} _CMsgTFJoinChatChannel_default_instance_;
class CMsgTFLeaveChatChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFLeaveChatChannel>
      _instance;
} _CMsgTFLeaveChatChannel_default_instance_;
class CMsgTFJoinChatChannelResponse_ChatMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFJoinChatChannelResponse_ChatMember>
      _instance;
} _CMsgTFJoinChatChannelResponse_ChatMember_default_instance_;
class CMsgTFJoinChatChannelResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFJoinChatChannelResponse>
      _instance;
} _CMsgTFJoinChatChannelResponse_default_instance_;
class CMsgTFOtherJoinedChatChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFOtherJoinedChatChannel>
      _instance;
} _CMsgTFOtherJoinedChatChannel_default_instance_;
class CMsgTFOtherLeftChatChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFOtherLeftChatChannel>
      _instance;
} _CMsgTFOtherLeftChatChannel_default_instance_;
class CMsgTFRequestDefaultChatChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFRequestDefaultChatChannel>
      _instance;
} _CMsgTFRequestDefaultChatChannel_default_instance_;
class CMsgTFRequestDefaultChatChannelResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFRequestDefaultChatChannelResponse>
      _instance;
} _CMsgTFRequestDefaultChatChannelResponse_default_instance_;
class CMsgTFRequestChatChannelListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFRequestChatChannelList>
      _instance;
} _CMsgTFRequestChatChannelList_default_instance_;
class CMsgTFRequestChatChannelListResponse_ChatChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFRequestChatChannelListResponse_ChatChannel>
      _instance;
} _CMsgTFRequestChatChannelListResponse_ChatChannel_default_instance_;
class CMsgTFRequestChatChannelListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFRequestChatChannelListResponse>
      _instance;
} _CMsgTFRequestChatChannelListResponse_default_instance_;
class CMsgGameServerMatchmakingStatus_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameServerMatchmakingStatus_Player>
      _instance;
} _CMsgGameServerMatchmakingStatus_Player_default_instance_;
class CMsgGameServerMatchmakingStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameServerMatchmakingStatus>
      _instance;
} _CMsgGameServerMatchmakingStatus_default_instance_;
class CMsgMatchmakingProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMatchmakingProgress>
      _instance;
} _CMsgMatchmakingProgress_default_instance_;
class CMsgMvMVictoryInfo_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMvMVictoryInfo_Item>
      _instance;
} _CMsgMvMVictoryInfo_Item_default_instance_;
class CMsgMvMVictoryInfo_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMvMVictoryInfo_Player>
      _instance;
} _CMsgMvMVictoryInfo_Player_default_instance_;
class CMsgMvMVictoryInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMvMVictoryInfo>
      _instance;
} _CMsgMvMVictoryInfo_default_instance_;
class CGCMsgTFHelloResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgTFHelloResponse>
      _instance;
} _CGCMsgTFHelloResponse_default_instance_;
class CGCMsgTFSyncDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgTFSync>
      _instance;
} _CGCMsgTFSync_default_instance_;
class CGCMsgTFSyncExDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgTFSyncEx>
      _instance;
} _CGCMsgTFSyncEx_default_instance_;
class CMsgMvMVictory_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMvMVictory_Player>
      _instance;
} _CMsgMvMVictory_Player_default_instance_;
class CMsgMvMVictoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMvMVictory>
      _instance;
} _CMsgMvMVictory_default_instance_;
class CMsgMvMMannUpVictoryReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMvMMannUpVictoryReply>
      _instance;
} _CMsgMvMMannUpVictoryReply_default_instance_;
class CMsgGameServerKickingLobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameServerKickingLobby>
      _instance;
} _CMsgGameServerKickingLobby_default_instance_;
class CMsgGameServerKickingLobbyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameServerKickingLobbyResponse>
      _instance;
} _CMsgGameServerKickingLobbyResponse_default_instance_;
class CMsgLeaveGameAndPrepareToJoinPartyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLeaveGameAndPrepareToJoinParty>
      _instance;
} _CMsgLeaveGameAndPrepareToJoinParty_default_instance_;
class CMsgPlayerLeftMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPlayerLeftMatch>
      _instance;
} _CMsgPlayerLeftMatch_default_instance_;
class CMsgPlayerLeftMatchResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPlayerLeftMatchResponse>
      _instance;
} _CMsgPlayerLeftMatchResponse_default_instance_;
class CMsgPlayerVoteKickedAfterLeavingMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPlayerVoteKickedAfterLeavingMatch>
      _instance;
} _CMsgPlayerVoteKickedAfterLeavingMatch_default_instance_;
class CMsgPlayerVoteKickedAfterLeavingMatchResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPlayerVoteKickedAfterLeavingMatchResponse>
      _instance;
} _CMsgPlayerVoteKickedAfterLeavingMatchResponse_default_instance_;
class CMsgHalloween_ServerBossEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgHalloween_ServerBossEvent>
      _instance;
} _CMsgHalloween_ServerBossEvent_default_instance_;
class CMsgHalloween_Merasmus2012DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgHalloween_Merasmus2012>
      _instance;
} _CMsgHalloween_Merasmus2012_default_instance_;
class CMsgUpdateHalloweenMerasmusLootLevel_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgUpdateHalloweenMerasmusLootLevel_Player>
      _instance;
} _CMsgUpdateHalloweenMerasmusLootLevel_Player_default_instance_;
class CMsgUpdateHalloweenMerasmusLootLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgUpdateHalloweenMerasmusLootLevel>
      _instance;
} _CMsgUpdateHalloweenMerasmusLootLevel_default_instance_;
class CAttribute_StringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAttribute_String>
      _instance;
} _CAttribute_String_default_instance_;
class CAttribute_DynamicRecipeComponentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAttribute_DynamicRecipeComponent>
      _instance;
} _CAttribute_DynamicRecipeComponent_default_instance_;
class CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT>
      _instance;
} _CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_default_instance_;
class CAttribute_ItemSlotCriteriaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAttribute_ItemSlotCriteria>
      _instance;
} _CAttribute_ItemSlotCriteria_default_instance_;
class CMsgSetItemSlotAttributeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetItemSlotAttribute>
      _instance;
} _CMsgSetItemSlotAttribute_default_instance_;
class CSOWarDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOWarData>
      _instance;
} _CSOWarData_default_instance_;
class CGCMsgGC_War_IndividualUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGC_War_IndividualUpdate>
      _instance;
} _CGCMsgGC_War_IndividualUpdate_default_instance_;
class CGCMsgGC_War_JoinWarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGC_War_JoinWar>
      _instance;
} _CGCMsgGC_War_JoinWar_default_instance_;
class CGCMsgGC_War_RequestGlobalStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGC_War_RequestGlobalStats>
      _instance;
} _CGCMsgGC_War_RequestGlobalStats_default_instance_;
class CGCMsgGC_War_GlobalStatsResponse_SideScoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGC_War_GlobalStatsResponse_SideScore>
      _instance;
} _CGCMsgGC_War_GlobalStatsResponse_SideScore_default_instance_;
class CGCMsgGC_War_GlobalStatsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGC_War_GlobalStatsResponse>
      _instance;
} _CGCMsgGC_War_GlobalStatsResponse_default_instance_;
class CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate>
      _instance;
} _CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_default_instance_;
class CAttribute_WorldItemPlacementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAttribute_WorldItemPlacement>
      _instance;
} _CAttribute_WorldItemPlacement_default_instance_;
class CGCMsg_WorldItemPlacement_UpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCMsg_WorldItemPlacement_Update>
      _instance;
} _CGCMsg_WorldItemPlacement_Update_default_instance_;
class CMsgAcknowledgeXPDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAcknowledgeXP>
      _instance;
} _CMsgAcknowledgeXP_default_instance_;
class CMsgTFXPSourceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFXPSource>
      _instance;
} _CMsgTFXPSource_default_instance_;
class CMsgTFXPSourceBreakdownDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFXPSourceBreakdown>
      _instance;
} _CMsgTFXPSourceBreakdown_default_instance_;
class CMsgTFClientInitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgTFClientInit>
      _instance;
} _CMsgTFClientInit_default_instance_;
class CMsgGCNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCNotification>
      _instance;
} _CMsgGCNotification_default_instance_;
class CMsgGCNotificationQueueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCNotificationQueue>
      _instance;
} _CMsgGCNotificationQueue_default_instance_;
class CMsgNotificationAcknowledgeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgNotificationAcknowledge>
      _instance;
} _CMsgNotificationAcknowledge_default_instance_;
class CMsgNotificationAcknowledgeReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgNotificationAcknowledgeReply>
      _instance;
} _CMsgNotificationAcknowledgeReply_default_instance_;
class CMsgGC_Match_Result_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_Match_Result_Player>
      _instance;
} _CMsgGC_Match_Result_Player_default_instance_;
class CMsgGC_Match_ResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_Match_Result>
      _instance;
} _CMsgGC_Match_Result_default_instance_;
class CMsgGC_Match_ResultResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_Match_ResultResponse>
      _instance;
} _CMsgGC_Match_ResultResponse_default_instance_;
class CEconItemPreviewDataBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CEconItemPreviewDataBlock>
      _instance;
} _CEconItemPreviewDataBlock_default_instance_;
class CMsgGC_Client2GCEconPreviewDataBlockRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_Client2GCEconPreviewDataBlockRequest>
      _instance;
} _CMsgGC_Client2GCEconPreviewDataBlockRequest_default_instance_;
class CMsgGC_Client2GCEconPreviewDataBlockResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_Client2GCEconPreviewDataBlockResponse>
      _instance;
} _CMsgGC_Client2GCEconPreviewDataBlockResponse_default_instance_;
class CSOTFLadderPlayerStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOTFLadderPlayerStats>
      _instance;
} _CSOTFLadderPlayerStats_default_instance_;
class CSOTFRatingDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOTFRatingData>
      _instance;
} _CSOTFRatingData_default_instance_;
class CMsgGC_TFVoteKickPlayerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_TFVoteKickPlayerRequest>
      _instance;
} _CMsgGC_TFVoteKickPlayerRequest_default_instance_;
class CMsgGC_VoteKickPlayerRequestResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_VoteKickPlayerRequestResponse>
      _instance;
} _CMsgGC_VoteKickPlayerRequestResponse_default_instance_;
class CMsgGC_DailyCompetitiveStatsRollupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_DailyCompetitiveStatsRollup>
      _instance;
} _CMsgGC_DailyCompetitiveStatsRollup_default_instance_;
class CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry>
      _instance;
} _CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_default_instance_;
class CMsgGC_DailyCompetitiveStatsRollup_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_DailyCompetitiveStatsRollup_Response>
      _instance;
} _CMsgGC_DailyCompetitiveStatsRollup_Response_default_instance_;
class CMsgGC_ReportPlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_ReportPlayer>
      _instance;
} _CMsgGC_ReportPlayer_default_instance_;
class CSOTFMatchResultPlayerStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOTFMatchResultPlayerStats>
      _instance;
} _CSOTFMatchResultPlayerStats_default_instance_;
class CMsgGCRequestMatchMakerStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCRequestMatchMakerStats>
      _instance;
} _CMsgGCRequestMatchMakerStats_default_instance_;
class CMsgGCDataCenterPopulationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCDataCenterPopulation>
      _instance;
} _CMsgGCDataCenterPopulation_default_instance_;
class CMsgGCMatchGroupDataCenterPopulationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMatchGroupDataCenterPopulation>
      _instance;
} _CMsgGCMatchGroupDataCenterPopulation_default_instance_;
class CMsgGCMatchMakerStatsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMatchMakerStatsResponse>
      _instance;
} _CMsgGCMatchMakerStatsResponse_default_instance_;
class CMsgGCMatchHistoryLoadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMatchHistoryLoad>
      _instance;
} _CMsgGCMatchHistoryLoad_default_instance_;
class CMsgGCDataCenterPing_Update_PingEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCDataCenterPing_Update_PingEntry>
      _instance;
} _CMsgGCDataCenterPing_Update_PingEntry_default_instance_;
class CMsgGCDataCenterPing_UpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCDataCenterPing_Update>
      _instance;
} _CMsgGCDataCenterPing_Update_default_instance_;
class CMsgGC_KickPlayerFromLobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGC_KickPlayerFromLobby>
      _instance;
} _CMsgGC_KickPlayerFromLobby_default_instance_;
class CMsgGCSurveyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCSurveyRequest>
      _instance;
} _CMsgGCSurveyRequest_default_instance_;
class CMsgGCSurveyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCSurveyResponse>
      _instance;
} _CMsgGCSurveyResponse_default_instance_;
class CMsgGCNewMatchForLobbyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCNewMatchForLobbyRequest>
      _instance;
} _CMsgGCNewMatchForLobbyRequest_default_instance_;
class CMsgGCNewMatchForLobbyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCNewMatchForLobbyResponse>
      _instance;
} _CMsgGCNewMatchForLobbyResponse_default_instance_;
class CMsgGCChangeMatchPlayerTeamsRequest_MemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCChangeMatchPlayerTeamsRequest_Member>
      _instance;
} _CMsgGCChangeMatchPlayerTeamsRequest_Member_default_instance_;
class CMsgGCChangeMatchPlayerTeamsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCChangeMatchPlayerTeamsRequest>
      _instance;
} _CMsgGCChangeMatchPlayerTeamsRequest_default_instance_;
class CMsgGCChangeMatchPlayerTeamsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCChangeMatchPlayerTeamsResponse>
      _instance;
} _CMsgGCChangeMatchPlayerTeamsResponse_default_instance_;
namespace protobuf_tf_5fgcmessages_2eproto {
void InitDefaultsCMsgTFGoldenWrenchBroadcastImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFGoldenWrenchBroadcast_default_instance_;
    new (ptr) ::CMsgTFGoldenWrenchBroadcast();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFGoldenWrenchBroadcast::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFGoldenWrenchBroadcast() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFGoldenWrenchBroadcastImpl);
}

void InitDefaultsCMsgTFSaxxyBroadcastImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFSaxxyBroadcast_default_instance_;
    new (ptr) ::CMsgTFSaxxyBroadcast();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFSaxxyBroadcast::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFSaxxyBroadcast() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFSaxxyBroadcastImpl);
}

void InitDefaultsCMsgGCTFSpecificItemBroadcastImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCTFSpecificItemBroadcast_default_instance_;
    new (ptr) ::CMsgGCTFSpecificItemBroadcast();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCTFSpecificItemBroadcast::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCTFSpecificItemBroadcast() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCTFSpecificItemBroadcastImpl);
}

void InitDefaultsCMsgTFWorldStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFWorldStatus_default_instance_;
    new (ptr) ::CMsgTFWorldStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFWorldStatus::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFWorldStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFWorldStatusImpl);
}

void InitDefaultsCSOTFDuelSummaryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSOTFDuelSummary_default_instance_;
    new (ptr) ::CSOTFDuelSummary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOTFDuelSummary::InitAsDefaultInstance();
}

void InitDefaultsCSOTFDuelSummary() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSOTFDuelSummaryImpl);
}

void InitDefaultsCSOTFMapContributionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSOTFMapContribution_default_instance_;
    new (ptr) ::CSOTFMapContribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOTFMapContribution::InitAsDefaultInstance();
}

void InitDefaultsCSOTFMapContribution() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSOTFMapContributionImpl);
}

void InitDefaultsCMsgTFVoteKickBanPlayerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFVoteKickBanPlayer_default_instance_;
    new (ptr) ::CMsgTFVoteKickBanPlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFVoteKickBanPlayer::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFVoteKickBanPlayer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFVoteKickBanPlayerImpl);
}

void InitDefaultsCMsgTFVoteKickBanPlayerResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFVoteKickBanPlayerResult_default_instance_;
    new (ptr) ::CMsgTFVoteKickBanPlayerResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFVoteKickBanPlayerResult::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFVoteKickBanPlayerResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFVoteKickBanPlayerResultImpl);
}

void InitDefaultsCMsgTFFreeTrialChooseMostHelpfulFriendImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFFreeTrialChooseMostHelpfulFriend_default_instance_;
    new (ptr) ::CMsgTFFreeTrialChooseMostHelpfulFriend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFFreeTrialChooseMostHelpfulFriend::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFFreeTrialChooseMostHelpfulFriend() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFFreeTrialChooseMostHelpfulFriendImpl);
}

void InitDefaultsCMsgTFRequestTF2FriendsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFRequestTF2Friends_default_instance_;
    new (ptr) ::CMsgTFRequestTF2Friends();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFRequestTF2Friends::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFRequestTF2Friends() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFRequestTF2FriendsImpl);
}

void InitDefaultsCMsgTFRequestTF2FriendsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFRequestTF2FriendsResponse_default_instance_;
    new (ptr) ::CMsgTFRequestTF2FriendsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFRequestTF2FriendsResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFRequestTF2FriendsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFRequestTF2FriendsResponseImpl);
}

void InitDefaultsCSOTFPlayerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSOTFPlayerInfo_default_instance_;
    new (ptr) ::CSOTFPlayerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOTFPlayerInfo::InitAsDefaultInstance();
}

void InitDefaultsCSOTFPlayerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSOTFPlayerInfoImpl);
}

void InitDefaultsCMsgTFThankedBySomeoneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFThankedBySomeone_default_instance_;
    new (ptr) ::CMsgTFThankedBySomeone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFThankedBySomeone::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFThankedBySomeone() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFThankedBySomeoneImpl);
}

void InitDefaultsCMsgTFThankedSomeoneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFThankedSomeone_default_instance_;
    new (ptr) ::CMsgTFThankedSomeone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFThankedSomeone::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFThankedSomeone() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFThankedSomeoneImpl);
}

void InitDefaultsCMsgTFFreeTrialConvertedToPremiumImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFFreeTrialConvertedToPremium_default_instance_;
    new (ptr) ::CMsgTFFreeTrialConvertedToPremium();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFFreeTrialConvertedToPremium::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFFreeTrialConvertedToPremium() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFFreeTrialConvertedToPremiumImpl);
}

void InitDefaultsCMsgSaxxyAwardedImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSaxxyAwarded_default_instance_;
    new (ptr) ::CMsgSaxxyAwarded();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSaxxyAwarded::InitAsDefaultInstance();
}

void InitDefaultsCMsgSaxxyAwarded() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSaxxyAwardedImpl);
}

void InitDefaultsCMsgReplaySubmitContestEntryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgReplaySubmitContestEntry_default_instance_;
    new (ptr) ::CMsgReplaySubmitContestEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgReplaySubmitContestEntry::InitAsDefaultInstance();
}

void InitDefaultsCMsgReplaySubmitContestEntry() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgReplaySubmitContestEntryImpl);
}

void InitDefaultsCMsgReplaySubmitContestEntryResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgReplaySubmitContestEntryResponse_default_instance_;
    new (ptr) ::CMsgReplaySubmitContestEntryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgReplaySubmitContestEntryResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgReplaySubmitContestEntryResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgReplaySubmitContestEntryResponseImpl);
}

void InitDefaultsCReplayCachedContestDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CReplayCachedContestData_default_instance_;
    new (ptr) ::CReplayCachedContestData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CReplayCachedContestData::InitAsDefaultInstance();
}

void InitDefaultsCReplayCachedContestData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCReplayCachedContestDataImpl);
}

void InitDefaultsCMsgTFCoaching_AddToCoachesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFCoaching_AddToCoaches_default_instance_;
    new (ptr) ::CMsgTFCoaching_AddToCoaches();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFCoaching_AddToCoaches::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFCoaching_AddToCoaches() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFCoaching_AddToCoachesImpl);
}

void InitDefaultsCMsgTFCoaching_RemoveFromCoachesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFCoaching_RemoveFromCoaches_default_instance_;
    new (ptr) ::CMsgTFCoaching_RemoveFromCoaches();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFCoaching_RemoveFromCoaches::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFCoaching_RemoveFromCoaches() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFCoaching_RemoveFromCoachesImpl);
}

void InitDefaultsCMsgTFCoaching_FindCoachImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFCoaching_FindCoach_default_instance_;
    new (ptr) ::CMsgTFCoaching_FindCoach();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFCoaching_FindCoach::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFCoaching_FindCoach() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFCoaching_FindCoachImpl);
}

void InitDefaultsCMsgTFCoaching_FindCoachResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFCoaching_FindCoachResponse_default_instance_;
    new (ptr) ::CMsgTFCoaching_FindCoachResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFCoaching_FindCoachResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFCoaching_FindCoachResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFCoaching_FindCoachResponseImpl);
}

void InitDefaultsCMsgTFCoaching_AskCoachImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFCoaching_AskCoach_default_instance_;
    new (ptr) ::CMsgTFCoaching_AskCoach();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFCoaching_AskCoach::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFCoaching_AskCoach() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFCoaching_AskCoachImpl);
}

void InitDefaultsCMsgTFCoaching_AskCoachResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFCoaching_AskCoachResponse_default_instance_;
    new (ptr) ::CMsgTFCoaching_AskCoachResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFCoaching_AskCoachResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFCoaching_AskCoachResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFCoaching_AskCoachResponseImpl);
}

void InitDefaultsCMsgTFCoaching_CoachJoinGameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFCoaching_CoachJoinGame_default_instance_;
    new (ptr) ::CMsgTFCoaching_CoachJoinGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFCoaching_CoachJoinGame::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFCoaching_CoachJoinGame() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFCoaching_CoachJoinGameImpl);
}

void InitDefaultsCMsgTFCoaching_CoachJoiningImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFCoaching_CoachJoining_default_instance_;
    new (ptr) ::CMsgTFCoaching_CoachJoining();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFCoaching_CoachJoining::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFCoaching_CoachJoining() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFCoaching_CoachJoiningImpl);
}

void InitDefaultsCMsgTFCoaching_CoachJoinedImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFCoaching_CoachJoined_default_instance_;
    new (ptr) ::CMsgTFCoaching_CoachJoined();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFCoaching_CoachJoined::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFCoaching_CoachJoined() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFCoaching_CoachJoinedImpl);
}

void InitDefaultsCMsgTFCoaching_LikeCurrentCoachImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFCoaching_LikeCurrentCoach_default_instance_;
    new (ptr) ::CMsgTFCoaching_LikeCurrentCoach();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFCoaching_LikeCurrentCoach::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFCoaching_LikeCurrentCoach() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFCoaching_LikeCurrentCoachImpl);
}

void InitDefaultsCMsgTFCoaching_RemoveCurrentCoachImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFCoaching_RemoveCurrentCoach_default_instance_;
    new (ptr) ::CMsgTFCoaching_RemoveCurrentCoach();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFCoaching_RemoveCurrentCoach::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFCoaching_RemoveCurrentCoach() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFCoaching_RemoveCurrentCoachImpl);
}

void InitDefaultsCMsgTFQuickplay_ScoreServers_ServerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFQuickplay_ScoreServers_ServerInfo_default_instance_;
    new (ptr) ::CMsgTFQuickplay_ScoreServers_ServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFQuickplay_ScoreServers_ServerInfo::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFQuickplay_ScoreServers_ServerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFQuickplay_ScoreServers_ServerInfoImpl);
}

void InitDefaultsCMsgTFQuickplay_ScoreServersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFQuickplay_ScoreServers_ServerInfo();
  {
    void* ptr = &::_CMsgTFQuickplay_ScoreServers_default_instance_;
    new (ptr) ::CMsgTFQuickplay_ScoreServers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFQuickplay_ScoreServers::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFQuickplay_ScoreServers() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFQuickplay_ScoreServersImpl);
}

void InitDefaultsCMsgTFQuickplay_ScoreServersResponse_ServerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFQuickplay_ScoreServersResponse_ServerInfo_default_instance_;
    new (ptr) ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFQuickplay_ScoreServersResponse_ServerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFQuickplay_ScoreServersResponse_ServerInfoImpl);
}

void InitDefaultsCMsgTFQuickplay_ScoreServersResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFQuickplay_ScoreServersResponse_ServerInfo();
  {
    void* ptr = &::_CMsgTFQuickplay_ScoreServersResponse_default_instance_;
    new (ptr) ::CMsgTFQuickplay_ScoreServersResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFQuickplay_ScoreServersResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFQuickplay_ScoreServersResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFQuickplay_ScoreServersResponseImpl);
}

void InitDefaultsCMsgTFQuickplay_PlayerJoiningImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFQuickplay_PlayerJoining_default_instance_;
    new (ptr) ::CMsgTFQuickplay_PlayerJoining();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFQuickplay_PlayerJoining::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFQuickplay_PlayerJoining() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFQuickplay_PlayerJoiningImpl);
}

void InitDefaultsCMsgGC_GameServer_LevelInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_LevelInfo_default_instance_;
    new (ptr) ::CMsgGC_GameServer_LevelInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_LevelInfo::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_LevelInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_LevelInfoImpl);
}

void InitDefaultsCMsgGC_GameServer_AuthChallengeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_AuthChallenge_default_instance_;
    new (ptr) ::CMsgGC_GameServer_AuthChallenge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_AuthChallenge::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_AuthChallenge() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_AuthChallengeImpl);
}

void InitDefaultsCMsgGC_GameServer_AuthResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_AuthResult_default_instance_;
    new (ptr) ::CMsgGC_GameServer_AuthResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_AuthResult::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_AuthResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_AuthResultImpl);
}

void InitDefaultsCMsgGC_GameServer_AuthChallengeResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_AuthChallengeResponse_default_instance_;
    new (ptr) ::CMsgGC_GameServer_AuthChallengeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_AuthChallengeResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_AuthChallengeResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_AuthChallengeResponseImpl);
}

void InitDefaultsCMsgGC_GameServer_CreateIdentityImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_CreateIdentity_default_instance_;
    new (ptr) ::CMsgGC_GameServer_CreateIdentity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_CreateIdentity::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_CreateIdentity() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_CreateIdentityImpl);
}

void InitDefaultsCMsgGC_GameServer_CreateIdentityResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_CreateIdentityResponse_default_instance_;
    new (ptr) ::CMsgGC_GameServer_CreateIdentityResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_CreateIdentityResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_CreateIdentityResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_CreateIdentityResponseImpl);
}

void InitDefaultsCMsgGC_GameServer_ListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_List_default_instance_;
    new (ptr) ::CMsgGC_GameServer_List();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_List::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_List() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_ListImpl);
}

void InitDefaultsCMsgGC_GameServer_ListResponse_GameServerIdentityImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_ListResponse_GameServerIdentity_default_instance_;
    new (ptr) ::CMsgGC_GameServer_ListResponse_GameServerIdentity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_ListResponse_GameServerIdentity::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_ListResponse_GameServerIdentity() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_ListResponse_GameServerIdentityImpl);
}

void InitDefaultsCMsgGC_GameServer_ListResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_ListResponse_GameServerIdentity();
  {
    void* ptr = &::_CMsgGC_GameServer_ListResponse_default_instance_;
    new (ptr) ::CMsgGC_GameServer_ListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_ListResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_ListResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_ListResponseImpl);
}

void InitDefaultsCMsgGC_GameServer_ResetIdentityImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_ResetIdentity_default_instance_;
    new (ptr) ::CMsgGC_GameServer_ResetIdentity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_ResetIdentity::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_ResetIdentity() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_ResetIdentityImpl);
}

void InitDefaultsCMsgGC_GameServer_ResetIdentityResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_ResetIdentityResponse_default_instance_;
    new (ptr) ::CMsgGC_GameServer_ResetIdentityResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_ResetIdentityResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_ResetIdentityResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_ResetIdentityResponseImpl);
}

void InitDefaultsCMsgGC_GameServer_AckPolicyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_AckPolicy_default_instance_;
    new (ptr) ::CMsgGC_GameServer_AckPolicy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_AckPolicy::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_AckPolicy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_AckPolicyImpl);
}

void InitDefaultsCMsgGC_GameServer_AckPolicyResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_AckPolicyResponse_default_instance_;
    new (ptr) ::CMsgGC_GameServer_AckPolicyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_AckPolicyResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_AckPolicyResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_AckPolicyResponseImpl);
}

void InitDefaultsCMsgGC_Client_UseServerModificationItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_Client_UseServerModificationItem_default_instance_;
    new (ptr) ::CMsgGC_Client_UseServerModificationItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_Client_UseServerModificationItem::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_Client_UseServerModificationItem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_Client_UseServerModificationItemImpl);
}

void InitDefaultsCMsgGC_Client_UseServerModificationItem_ResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_Client_UseServerModificationItem_Response_default_instance_;
    new (ptr) ::CMsgGC_Client_UseServerModificationItem_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_Client_UseServerModificationItem_Response::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_Client_UseServerModificationItem_Response() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_Client_UseServerModificationItem_ResponseImpl);
}

void InitDefaultsCMsgGC_GameServer_UseServerModificationItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_UseServerModificationItem_default_instance_;
    new (ptr) ::CMsgGC_GameServer_UseServerModificationItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_UseServerModificationItem::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_UseServerModificationItem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_UseServerModificationItemImpl);
}

void InitDefaultsCMsgGC_GameServer_UseServerModificationItem_ResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_UseServerModificationItem_Response_default_instance_;
    new (ptr) ::CMsgGC_GameServer_UseServerModificationItem_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_UseServerModificationItem_Response::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_UseServerModificationItem_Response() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_UseServerModificationItem_ResponseImpl);
}

void InitDefaultsCMsgGC_GameServer_ServerModificationItemExpiredImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_ServerModificationItemExpired_default_instance_;
    new (ptr) ::CMsgGC_GameServer_ServerModificationItemExpired();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_ServerModificationItemExpired::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_ServerModificationItemExpired() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_ServerModificationItemExpiredImpl);
}

void InitDefaultsCMsgGC_GameServer_ServerModificationItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_GameServer_ServerModificationItem_default_instance_;
    new (ptr) ::CMsgGC_GameServer_ServerModificationItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GameServer_ServerModificationItem::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_GameServer_ServerModificationItem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_GameServer_ServerModificationItemImpl);
}

void InitDefaultsCMsgGC_Halloween_ReservedItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_Halloween_ReservedItem_default_instance_;
    new (ptr) ::CMsgGC_Halloween_ReservedItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_Halloween_ReservedItem::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_Halloween_ReservedItem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_Halloween_ReservedItemImpl);
}

void InitDefaultsCMsgGC_Halloween_GrantItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_Halloween_GrantItem_default_instance_;
    new (ptr) ::CMsgGC_Halloween_GrantItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_Halloween_GrantItem::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_Halloween_GrantItem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_Halloween_GrantItemImpl);
}

void InitDefaultsCMsgGC_Halloween_GrantItemResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_Halloween_GrantItemResponse_default_instance_;
    new (ptr) ::CMsgGC_Halloween_GrantItemResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_Halloween_GrantItemResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_Halloween_GrantItemResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_Halloween_GrantItemResponseImpl);
}

void InitDefaultsCMsgGC_Halloween_ItemClaimedImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_Halloween_ItemClaimed_default_instance_;
    new (ptr) ::CMsgGC_Halloween_ItemClaimed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_Halloween_ItemClaimed::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_Halloween_ItemClaimed() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_Halloween_ItemClaimedImpl);
}

void InitDefaultsCMsgGC_PickupItemEligibility_QueryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_PickupItemEligibility_Query_default_instance_;
    new (ptr) ::CMsgGC_PickupItemEligibility_Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_PickupItemEligibility_Query::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_PickupItemEligibility_Query() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_PickupItemEligibility_QueryImpl);
}

void InitDefaultsCMsgGC_PickupItemEligibility_QueryResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_PickupItemEligibility_QueryResponse_default_instance_;
    new (ptr) ::CMsgGC_PickupItemEligibility_QueryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_PickupItemEligibility_QueryResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_PickupItemEligibility_QueryResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_PickupItemEligibility_QueryResponseImpl);
}

void InitDefaultsCSOTFPartyMemberImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSOTFPartyMember_default_instance_;
    new (ptr) ::CSOTFPartyMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOTFPartyMember::InitAsDefaultInstance();
}

void InitDefaultsCSOTFPartyMember() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSOTFPartyMemberImpl);
}

void InitDefaultsCMsgMatchSearchCriteriaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgCasualMatchmakingSearchCriteria();
  {
    void* ptr = &::_CMsgMatchSearchCriteria_default_instance_;
    new (ptr) ::CMsgMatchSearchCriteria();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgMatchSearchCriteria::InitAsDefaultInstance();
}

void InitDefaultsCMsgMatchSearchCriteria() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgMatchSearchCriteriaImpl);
}

void InitDefaultsCMsgCasualMatchmakingSearchCriteriaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgCasualMatchmakingSearchCriteria_default_instance_;
    new (ptr) ::CMsgCasualMatchmakingSearchCriteria();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgCasualMatchmakingSearchCriteria::InitAsDefaultInstance();
}

void InitDefaultsCMsgCasualMatchmakingSearchCriteria() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgCasualMatchmakingSearchCriteriaImpl);
}

void InitDefaultsCMsgCreateOrUpdatePartyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMatchSearchCriteria();
  {
    void* ptr = &::_CMsgCreateOrUpdateParty_default_instance_;
    new (ptr) ::CMsgCreateOrUpdateParty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgCreateOrUpdateParty::InitAsDefaultInstance();
}

void InitDefaultsCMsgCreateOrUpdateParty() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgCreateOrUpdatePartyImpl);
}

void InitDefaultsCMsgCreateOrUpdatePartyReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgCreateOrUpdatePartyReply_default_instance_;
    new (ptr) ::CMsgCreateOrUpdatePartyReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgCreateOrUpdatePartyReply::InitAsDefaultInstance();
}

void InitDefaultsCMsgCreateOrUpdatePartyReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgCreateOrUpdatePartyReplyImpl);
}

void InitDefaultsCSOTFPartyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFPartyMember();
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgCasualMatchmakingSearchCriteria();
  {
    void* ptr = &::_CSOTFParty_default_instance_;
    new (ptr) ::CSOTFParty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOTFParty::InitAsDefaultInstance();
}

void InitDefaultsCSOTFParty() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSOTFPartyImpl);
}

void InitDefaultsCSOTFPartyInvite_PartyMemberImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSOTFPartyInvite_PartyMember_default_instance_;
    new (ptr) ::CSOTFPartyInvite_PartyMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOTFPartyInvite_PartyMember::InitAsDefaultInstance();
}

void InitDefaultsCSOTFPartyInvite_PartyMember() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSOTFPartyInvite_PartyMemberImpl);
}

void InitDefaultsCSOTFPartyInviteImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFPartyInvite_PartyMember();
  {
    void* ptr = &::_CSOTFPartyInvite_default_instance_;
    new (ptr) ::CSOTFPartyInvite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOTFPartyInvite::InitAsDefaultInstance();
}

void InitDefaultsCSOTFPartyInvite() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSOTFPartyInviteImpl);
}

void InitDefaultsCTFLobbyMemberImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CTFLobbyMember_default_instance_;
    new (ptr) ::CTFLobbyMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CTFLobbyMember::InitAsDefaultInstance();
}

void InitDefaultsCTFLobbyMember() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCTFLobbyMemberImpl);
}

void InitDefaultsCLobbyPendingPlayerReportImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CLobbyPendingPlayerReport_default_instance_;
    new (ptr) ::CLobbyPendingPlayerReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CLobbyPendingPlayerReport::InitAsDefaultInstance();
}

void InitDefaultsCLobbyPendingPlayerReport() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCLobbyPendingPlayerReportImpl);
}

void InitDefaultsCSOTFGameServerLobbyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCTFLobbyMember();
  {
    void* ptr = &::_CSOTFGameServerLobby_default_instance_;
    new (ptr) ::CSOTFGameServerLobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOTFGameServerLobby::InitAsDefaultInstance();
}

void InitDefaultsCSOTFGameServerLobby() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSOTFGameServerLobbyImpl);
}

void InitDefaultsCMsgExitMatchmakingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgExitMatchmaking_default_instance_;
    new (ptr) ::CMsgExitMatchmaking();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgExitMatchmaking::InitAsDefaultInstance();
}

void InitDefaultsCMsgExitMatchmaking() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgExitMatchmakingImpl);
}

void InitDefaultsCMsgAcceptInviteImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgAcceptInvite_default_instance_;
    new (ptr) ::CMsgAcceptInvite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgAcceptInvite::InitAsDefaultInstance();
}

void InitDefaultsCMsgAcceptInvite() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgAcceptInviteImpl);
}

void InitDefaultsCMsgAcceptInviteResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgAcceptInviteResponse_default_instance_;
    new (ptr) ::CMsgAcceptInviteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgAcceptInviteResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgAcceptInviteResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgAcceptInviteResponseImpl);
}

void InitDefaultsCMsgReadyUpImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgReadyUp_default_instance_;
    new (ptr) ::CMsgReadyUp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgReadyUp::InitAsDefaultInstance();
}

void InitDefaultsCMsgReadyUp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgReadyUpImpl);
}

void InitDefaultsCMsgMatchmakingSearchCountRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgMatchmakingSearchCountRequest_default_instance_;
    new (ptr) ::CMsgMatchmakingSearchCountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgMatchmakingSearchCountRequest::InitAsDefaultInstance();
}

void InitDefaultsCMsgMatchmakingSearchCountRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgMatchmakingSearchCountRequestImpl);
}

void InitDefaultsCMsgMatchmakingSearchCountResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgMatchmakingSearchCountResponse_default_instance_;
    new (ptr) ::CMsgMatchmakingSearchCountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgMatchmakingSearchCountResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgMatchmakingSearchCountResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgMatchmakingSearchCountResponseImpl);
}

void InitDefaultsCMsgKickedFromMatchmakingQueueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgKickedFromMatchmakingQueue_default_instance_;
    new (ptr) ::CMsgKickedFromMatchmakingQueue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgKickedFromMatchmakingQueue::InitAsDefaultInstance();
}

void InitDefaultsCMsgKickedFromMatchmakingQueue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgKickedFromMatchmakingQueueImpl);
}

void InitDefaultsCMsgTFJoinChatChannelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFJoinChatChannel_default_instance_;
    new (ptr) ::CMsgTFJoinChatChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFJoinChatChannel::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFJoinChatChannel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFJoinChatChannelImpl);
}

void InitDefaultsCMsgTFLeaveChatChannelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFLeaveChatChannel_default_instance_;
    new (ptr) ::CMsgTFLeaveChatChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFLeaveChatChannel::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFLeaveChatChannel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFLeaveChatChannelImpl);
}

void InitDefaultsCMsgTFJoinChatChannelResponse_ChatMemberImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFJoinChatChannelResponse_ChatMember_default_instance_;
    new (ptr) ::CMsgTFJoinChatChannelResponse_ChatMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFJoinChatChannelResponse_ChatMember::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFJoinChatChannelResponse_ChatMember() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFJoinChatChannelResponse_ChatMemberImpl);
}

void InitDefaultsCMsgTFJoinChatChannelResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFJoinChatChannelResponse_ChatMember();
  {
    void* ptr = &::_CMsgTFJoinChatChannelResponse_default_instance_;
    new (ptr) ::CMsgTFJoinChatChannelResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFJoinChatChannelResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFJoinChatChannelResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFJoinChatChannelResponseImpl);
}

void InitDefaultsCMsgTFOtherJoinedChatChannelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFOtherJoinedChatChannel_default_instance_;
    new (ptr) ::CMsgTFOtherJoinedChatChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFOtherJoinedChatChannel::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFOtherJoinedChatChannel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFOtherJoinedChatChannelImpl);
}

void InitDefaultsCMsgTFOtherLeftChatChannelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFOtherLeftChatChannel_default_instance_;
    new (ptr) ::CMsgTFOtherLeftChatChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFOtherLeftChatChannel::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFOtherLeftChatChannel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFOtherLeftChatChannelImpl);
}

void InitDefaultsCMsgTFRequestDefaultChatChannelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFRequestDefaultChatChannel_default_instance_;
    new (ptr) ::CMsgTFRequestDefaultChatChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFRequestDefaultChatChannel::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFRequestDefaultChatChannel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFRequestDefaultChatChannelImpl);
}

void InitDefaultsCMsgTFRequestDefaultChatChannelResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFRequestDefaultChatChannelResponse_default_instance_;
    new (ptr) ::CMsgTFRequestDefaultChatChannelResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFRequestDefaultChatChannelResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFRequestDefaultChatChannelResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFRequestDefaultChatChannelResponseImpl);
}

void InitDefaultsCMsgTFRequestChatChannelListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFRequestChatChannelList_default_instance_;
    new (ptr) ::CMsgTFRequestChatChannelList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFRequestChatChannelList::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFRequestChatChannelList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFRequestChatChannelListImpl);
}

void InitDefaultsCMsgTFRequestChatChannelListResponse_ChatChannelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFRequestChatChannelListResponse_ChatChannel_default_instance_;
    new (ptr) ::CMsgTFRequestChatChannelListResponse_ChatChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFRequestChatChannelListResponse_ChatChannel::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFRequestChatChannelListResponse_ChatChannel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFRequestChatChannelListResponse_ChatChannelImpl);
}

void InitDefaultsCMsgTFRequestChatChannelListResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFRequestChatChannelListResponse_ChatChannel();
  {
    void* ptr = &::_CMsgTFRequestChatChannelListResponse_default_instance_;
    new (ptr) ::CMsgTFRequestChatChannelListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFRequestChatChannelListResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFRequestChatChannelListResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFRequestChatChannelListResponseImpl);
}

void InitDefaultsCMsgGameServerMatchmakingStatus_PlayerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGameServerMatchmakingStatus_Player_default_instance_;
    new (ptr) ::CMsgGameServerMatchmakingStatus_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGameServerMatchmakingStatus_Player::InitAsDefaultInstance();
}

void InitDefaultsCMsgGameServerMatchmakingStatus_Player() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGameServerMatchmakingStatus_PlayerImpl);
}

void InitDefaultsCMsgGameServerMatchmakingStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGameServerMatchmakingStatus_Player();
  {
    void* ptr = &::_CMsgGameServerMatchmakingStatus_default_instance_;
    new (ptr) ::CMsgGameServerMatchmakingStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGameServerMatchmakingStatus::InitAsDefaultInstance();
}

void InitDefaultsCMsgGameServerMatchmakingStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGameServerMatchmakingStatusImpl);
}

void InitDefaultsCMsgMatchmakingProgressImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgMatchmakingProgress_default_instance_;
    new (ptr) ::CMsgMatchmakingProgress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgMatchmakingProgress::InitAsDefaultInstance();
}

void InitDefaultsCMsgMatchmakingProgress() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgMatchmakingProgressImpl);
}

void InitDefaultsCMsgMvMVictoryInfo_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgMvMVictoryInfo_Item_default_instance_;
    new (ptr) ::CMsgMvMVictoryInfo_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgMvMVictoryInfo_Item::InitAsDefaultInstance();
}

void InitDefaultsCMsgMvMVictoryInfo_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgMvMVictoryInfo_ItemImpl);
}

void InitDefaultsCMsgMvMVictoryInfo_PlayerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMvMVictoryInfo_Item();
  {
    void* ptr = &::_CMsgMvMVictoryInfo_Player_default_instance_;
    new (ptr) ::CMsgMvMVictoryInfo_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgMvMVictoryInfo_Player::InitAsDefaultInstance();
}

void InitDefaultsCMsgMvMVictoryInfo_Player() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgMvMVictoryInfo_PlayerImpl);
}

void InitDefaultsCMsgMvMVictoryInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMvMVictoryInfo_Player();
  {
    void* ptr = &::_CMsgMvMVictoryInfo_default_instance_;
    new (ptr) ::CMsgMvMVictoryInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgMvMVictoryInfo::InitAsDefaultInstance();
}

void InitDefaultsCMsgMvMVictoryInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgMvMVictoryInfoImpl);
}

void InitDefaultsCGCMsgTFHelloResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CGCMsgTFHelloResponse_default_instance_;
    new (ptr) ::CGCMsgTFHelloResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCMsgTFHelloResponse::InitAsDefaultInstance();
}

void InitDefaultsCGCMsgTFHelloResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCMsgTFHelloResponseImpl);
}

void InitDefaultsCGCMsgTFSyncImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CGCMsgTFSync_default_instance_;
    new (ptr) ::CGCMsgTFSync();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCMsgTFSync::InitAsDefaultInstance();
}

void InitDefaultsCGCMsgTFSync() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCMsgTFSyncImpl);
}

void InitDefaultsCGCMsgTFSyncExImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CGCMsgTFSyncEx_default_instance_;
    new (ptr) ::CGCMsgTFSyncEx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCMsgTFSyncEx::InitAsDefaultInstance();
}

void InitDefaultsCGCMsgTFSyncEx() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCMsgTFSyncExImpl);
}

void InitDefaultsCMsgMvMVictory_PlayerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgMvMVictory_Player_default_instance_;
    new (ptr) ::CMsgMvMVictory_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgMvMVictory_Player::InitAsDefaultInstance();
}

void InitDefaultsCMsgMvMVictory_Player() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgMvMVictory_PlayerImpl);
}

void InitDefaultsCMsgMvMVictoryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMvMVictory_Player();
  {
    void* ptr = &::_CMsgMvMVictory_default_instance_;
    new (ptr) ::CMsgMvMVictory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgMvMVictory::InitAsDefaultInstance();
}

void InitDefaultsCMsgMvMVictory() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgMvMVictoryImpl);
}

void InitDefaultsCMsgMvMMannUpVictoryReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgMvMMannUpVictoryReply_default_instance_;
    new (ptr) ::CMsgMvMMannUpVictoryReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgMvMMannUpVictoryReply::InitAsDefaultInstance();
}

void InitDefaultsCMsgMvMMannUpVictoryReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgMvMMannUpVictoryReplyImpl);
}

void InitDefaultsCMsgGameServerKickingLobbyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGameServerKickingLobby_default_instance_;
    new (ptr) ::CMsgGameServerKickingLobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGameServerKickingLobby::InitAsDefaultInstance();
}

void InitDefaultsCMsgGameServerKickingLobby() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGameServerKickingLobbyImpl);
}

void InitDefaultsCMsgGameServerKickingLobbyResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGameServerKickingLobbyResponse_default_instance_;
    new (ptr) ::CMsgGameServerKickingLobbyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGameServerKickingLobbyResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGameServerKickingLobbyResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGameServerKickingLobbyResponseImpl);
}

void InitDefaultsCMsgLeaveGameAndPrepareToJoinPartyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgLeaveGameAndPrepareToJoinParty_default_instance_;
    new (ptr) ::CMsgLeaveGameAndPrepareToJoinParty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgLeaveGameAndPrepareToJoinParty::InitAsDefaultInstance();
}

void InitDefaultsCMsgLeaveGameAndPrepareToJoinParty() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgLeaveGameAndPrepareToJoinPartyImpl);
}

void InitDefaultsCMsgPlayerLeftMatchImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFXPSource();
  {
    void* ptr = &::_CMsgPlayerLeftMatch_default_instance_;
    new (ptr) ::CMsgPlayerLeftMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgPlayerLeftMatch::InitAsDefaultInstance();
}

void InitDefaultsCMsgPlayerLeftMatch() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgPlayerLeftMatchImpl);
}

void InitDefaultsCMsgPlayerLeftMatchResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgPlayerLeftMatchResponse_default_instance_;
    new (ptr) ::CMsgPlayerLeftMatchResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgPlayerLeftMatchResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgPlayerLeftMatchResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgPlayerLeftMatchResponseImpl);
}

void InitDefaultsCMsgPlayerVoteKickedAfterLeavingMatchImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgPlayerVoteKickedAfterLeavingMatch_default_instance_;
    new (ptr) ::CMsgPlayerVoteKickedAfterLeavingMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgPlayerVoteKickedAfterLeavingMatch::InitAsDefaultInstance();
}

void InitDefaultsCMsgPlayerVoteKickedAfterLeavingMatch() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgPlayerVoteKickedAfterLeavingMatchImpl);
}

void InitDefaultsCMsgPlayerVoteKickedAfterLeavingMatchResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgPlayerVoteKickedAfterLeavingMatchResponse_default_instance_;
    new (ptr) ::CMsgPlayerVoteKickedAfterLeavingMatchResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgPlayerVoteKickedAfterLeavingMatchResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgPlayerVoteKickedAfterLeavingMatchResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgPlayerVoteKickedAfterLeavingMatchResponseImpl);
}

void InitDefaultsCMsgHalloween_ServerBossEventImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgHalloween_ServerBossEvent_default_instance_;
    new (ptr) ::CMsgHalloween_ServerBossEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgHalloween_ServerBossEvent::InitAsDefaultInstance();
}

void InitDefaultsCMsgHalloween_ServerBossEvent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgHalloween_ServerBossEventImpl);
}

void InitDefaultsCMsgHalloween_Merasmus2012Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgHalloween_Merasmus2012_default_instance_;
    new (ptr) ::CMsgHalloween_Merasmus2012();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgHalloween_Merasmus2012::InitAsDefaultInstance();
}

void InitDefaultsCMsgHalloween_Merasmus2012() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgHalloween_Merasmus2012Impl);
}

void InitDefaultsCMsgUpdateHalloweenMerasmusLootLevel_PlayerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgUpdateHalloweenMerasmusLootLevel_Player_default_instance_;
    new (ptr) ::CMsgUpdateHalloweenMerasmusLootLevel_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgUpdateHalloweenMerasmusLootLevel_Player::InitAsDefaultInstance();
}

void InitDefaultsCMsgUpdateHalloweenMerasmusLootLevel_Player() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgUpdateHalloweenMerasmusLootLevel_PlayerImpl);
}

void InitDefaultsCMsgUpdateHalloweenMerasmusLootLevelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgUpdateHalloweenMerasmusLootLevel_Player();
  {
    void* ptr = &::_CMsgUpdateHalloweenMerasmusLootLevel_default_instance_;
    new (ptr) ::CMsgUpdateHalloweenMerasmusLootLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgUpdateHalloweenMerasmusLootLevel::InitAsDefaultInstance();
}

void InitDefaultsCMsgUpdateHalloweenMerasmusLootLevel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgUpdateHalloweenMerasmusLootLevelImpl);
}

void InitDefaultsCAttribute_StringImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CAttribute_String_default_instance_;
    new (ptr) ::CAttribute_String();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAttribute_String::InitAsDefaultInstance();
}

void InitDefaultsCAttribute_String() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCAttribute_StringImpl);
}

void InitDefaultsCAttribute_DynamicRecipeComponentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CAttribute_DynamicRecipeComponent_default_instance_;
    new (ptr) ::CAttribute_DynamicRecipeComponent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAttribute_DynamicRecipeComponent::InitAsDefaultInstance();
}

void InitDefaultsCAttribute_DynamicRecipeComponent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCAttribute_DynamicRecipeComponentImpl);
}

void InitDefaultsCAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUTImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_default_instance_;
    new (ptr) ::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::InitAsDefaultInstance();
}

void InitDefaultsCAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUTImpl);
}

void InitDefaultsCAttribute_ItemSlotCriteriaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CAttribute_ItemSlotCriteria_default_instance_;
    new (ptr) ::CAttribute_ItemSlotCriteria();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAttribute_ItemSlotCriteria::InitAsDefaultInstance();
}

void InitDefaultsCAttribute_ItemSlotCriteria() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCAttribute_ItemSlotCriteriaImpl);
}

void InitDefaultsCMsgSetItemSlotAttributeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSetItemSlotAttribute_default_instance_;
    new (ptr) ::CMsgSetItemSlotAttribute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSetItemSlotAttribute::InitAsDefaultInstance();
}

void InitDefaultsCMsgSetItemSlotAttribute() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSetItemSlotAttributeImpl);
}

void InitDefaultsCSOWarDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSOWarData_default_instance_;
    new (ptr) ::CSOWarData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOWarData::InitAsDefaultInstance();
}

void InitDefaultsCSOWarData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSOWarDataImpl);
}

void InitDefaultsCGCMsgGC_War_IndividualUpdateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CGCMsgGC_War_IndividualUpdate_default_instance_;
    new (ptr) ::CGCMsgGC_War_IndividualUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCMsgGC_War_IndividualUpdate::InitAsDefaultInstance();
}

void InitDefaultsCGCMsgGC_War_IndividualUpdate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCMsgGC_War_IndividualUpdateImpl);
}

void InitDefaultsCGCMsgGC_War_JoinWarImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CGCMsgGC_War_JoinWar_default_instance_;
    new (ptr) ::CGCMsgGC_War_JoinWar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCMsgGC_War_JoinWar::InitAsDefaultInstance();
}

void InitDefaultsCGCMsgGC_War_JoinWar() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCMsgGC_War_JoinWarImpl);
}

void InitDefaultsCGCMsgGC_War_RequestGlobalStatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CGCMsgGC_War_RequestGlobalStats_default_instance_;
    new (ptr) ::CGCMsgGC_War_RequestGlobalStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCMsgGC_War_RequestGlobalStats::InitAsDefaultInstance();
}

void InitDefaultsCGCMsgGC_War_RequestGlobalStats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCMsgGC_War_RequestGlobalStatsImpl);
}

void InitDefaultsCGCMsgGC_War_GlobalStatsResponse_SideScoreImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CGCMsgGC_War_GlobalStatsResponse_SideScore_default_instance_;
    new (ptr) ::CGCMsgGC_War_GlobalStatsResponse_SideScore();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCMsgGC_War_GlobalStatsResponse_SideScore::InitAsDefaultInstance();
}

void InitDefaultsCGCMsgGC_War_GlobalStatsResponse_SideScore() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCMsgGC_War_GlobalStatsResponse_SideScoreImpl);
}

void InitDefaultsCGCMsgGC_War_GlobalStatsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgGC_War_GlobalStatsResponse_SideScore();
  {
    void* ptr = &::_CGCMsgGC_War_GlobalStatsResponse_default_instance_;
    new (ptr) ::CGCMsgGC_War_GlobalStatsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCMsgGC_War_GlobalStatsResponse::InitAsDefaultInstance();
}

void InitDefaultsCGCMsgGC_War_GlobalStatsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCMsgGC_War_GlobalStatsResponseImpl);
}

void InitDefaultsCGCMsgGC_PlayerDuckLeaderboard_IndividualUpdateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_default_instance_;
    new (ptr) ::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::InitAsDefaultInstance();
}

void InitDefaultsCGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCMsgGC_PlayerDuckLeaderboard_IndividualUpdateImpl);
}

void InitDefaultsCAttribute_WorldItemPlacementImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CAttribute_WorldItemPlacement_default_instance_;
    new (ptr) ::CAttribute_WorldItemPlacement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAttribute_WorldItemPlacement::InitAsDefaultInstance();
}

void InitDefaultsCAttribute_WorldItemPlacement() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCAttribute_WorldItemPlacementImpl);
}

void InitDefaultsCGCMsg_WorldItemPlacement_UpdateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CGCMsg_WorldItemPlacement_Update_default_instance_;
    new (ptr) ::CGCMsg_WorldItemPlacement_Update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCMsg_WorldItemPlacement_Update::InitAsDefaultInstance();
}

void InitDefaultsCGCMsg_WorldItemPlacement_Update() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCMsg_WorldItemPlacement_UpdateImpl);
}

void InitDefaultsCMsgAcknowledgeXPImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgAcknowledgeXP_default_instance_;
    new (ptr) ::CMsgAcknowledgeXP();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgAcknowledgeXP::InitAsDefaultInstance();
}

void InitDefaultsCMsgAcknowledgeXP() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgAcknowledgeXPImpl);
}

void InitDefaultsCMsgTFXPSourceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFXPSource_default_instance_;
    new (ptr) ::CMsgTFXPSource();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFXPSource::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFXPSource() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFXPSourceImpl);
}

void InitDefaultsCMsgTFXPSourceBreakdownImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFXPSource();
  {
    void* ptr = &::_CMsgTFXPSourceBreakdown_default_instance_;
    new (ptr) ::CMsgTFXPSourceBreakdown();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFXPSourceBreakdown::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFXPSourceBreakdown() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFXPSourceBreakdownImpl);
}

void InitDefaultsCMsgTFClientInitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgTFClientInit_default_instance_;
    new (ptr) ::CMsgTFClientInit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgTFClientInit::InitAsDefaultInstance();
}

void InitDefaultsCMsgTFClientInit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgTFClientInitImpl);
}

void InitDefaultsCMsgGCNotificationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCNotification_default_instance_;
    new (ptr) ::CMsgGCNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCNotification::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCNotification() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCNotificationImpl);
}

void InitDefaultsCMsgGCNotificationQueueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCNotification();
  {
    void* ptr = &::_CMsgGCNotificationQueue_default_instance_;
    new (ptr) ::CMsgGCNotificationQueue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCNotificationQueue::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCNotificationQueue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCNotificationQueueImpl);
}

void InitDefaultsCMsgNotificationAcknowledgeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgNotificationAcknowledge_default_instance_;
    new (ptr) ::CMsgNotificationAcknowledge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgNotificationAcknowledge::InitAsDefaultInstance();
}

void InitDefaultsCMsgNotificationAcknowledge() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgNotificationAcknowledgeImpl);
}

void InitDefaultsCMsgNotificationAcknowledgeReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgNotificationAcknowledgeReply_default_instance_;
    new (ptr) ::CMsgNotificationAcknowledgeReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgNotificationAcknowledgeReply::InitAsDefaultInstance();
}

void InitDefaultsCMsgNotificationAcknowledgeReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgNotificationAcknowledgeReplyImpl);
}

void InitDefaultsCMsgGC_Match_Result_PlayerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFXPSource();
  {
    void* ptr = &::_CMsgGC_Match_Result_Player_default_instance_;
    new (ptr) ::CMsgGC_Match_Result_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_Match_Result_Player::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_Match_Result_Player() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_Match_Result_PlayerImpl);
}

void InitDefaultsCMsgGC_Match_ResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Match_Result_Player();
  {
    void* ptr = &::_CMsgGC_Match_Result_default_instance_;
    new (ptr) ::CMsgGC_Match_Result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_Match_Result::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_Match_Result() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_Match_ResultImpl);
}

void InitDefaultsCMsgGC_Match_ResultResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_Match_ResultResponse_default_instance_;
    new (ptr) ::CMsgGC_Match_ResultResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_Match_ResultResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_Match_ResultResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_Match_ResultResponseImpl);
}

void InitDefaultsCEconItemPreviewDataBlockImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_5fgcmessages_2eproto::InitDefaultsCSOEconItem();
  {
    void* ptr = &::_CEconItemPreviewDataBlock_default_instance_;
    new (ptr) ::CEconItemPreviewDataBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CEconItemPreviewDataBlock::InitAsDefaultInstance();
}

void InitDefaultsCEconItemPreviewDataBlock() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCEconItemPreviewDataBlockImpl);
}

void InitDefaultsCMsgGC_Client2GCEconPreviewDataBlockRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_Client2GCEconPreviewDataBlockRequest_default_instance_;
    new (ptr) ::CMsgGC_Client2GCEconPreviewDataBlockRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_Client2GCEconPreviewDataBlockRequest::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_Client2GCEconPreviewDataBlockRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_Client2GCEconPreviewDataBlockRequestImpl);
}

void InitDefaultsCMsgGC_Client2GCEconPreviewDataBlockResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCEconItemPreviewDataBlock();
  {
    void* ptr = &::_CMsgGC_Client2GCEconPreviewDataBlockResponse_default_instance_;
    new (ptr) ::CMsgGC_Client2GCEconPreviewDataBlockResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_Client2GCEconPreviewDataBlockResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_Client2GCEconPreviewDataBlockResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_Client2GCEconPreviewDataBlockResponseImpl);
}

void InitDefaultsCSOTFLadderPlayerStatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSOTFLadderPlayerStats_default_instance_;
    new (ptr) ::CSOTFLadderPlayerStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOTFLadderPlayerStats::InitAsDefaultInstance();
}

void InitDefaultsCSOTFLadderPlayerStats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSOTFLadderPlayerStatsImpl);
}

void InitDefaultsCSOTFRatingDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSOTFRatingData_default_instance_;
    new (ptr) ::CSOTFRatingData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOTFRatingData::InitAsDefaultInstance();
}

void InitDefaultsCSOTFRatingData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSOTFRatingDataImpl);
}

void InitDefaultsCMsgGC_TFVoteKickPlayerRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_TFVoteKickPlayerRequest_default_instance_;
    new (ptr) ::CMsgGC_TFVoteKickPlayerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_TFVoteKickPlayerRequest::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_TFVoteKickPlayerRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_TFVoteKickPlayerRequestImpl);
}

void InitDefaultsCMsgGC_VoteKickPlayerRequestResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_VoteKickPlayerRequestResponse_default_instance_;
    new (ptr) ::CMsgGC_VoteKickPlayerRequestResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_VoteKickPlayerRequestResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_VoteKickPlayerRequestResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_VoteKickPlayerRequestResponseImpl);
}

void InitDefaultsCMsgGC_DailyCompetitiveStatsRollupImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_DailyCompetitiveStatsRollup_default_instance_;
    new (ptr) ::CMsgGC_DailyCompetitiveStatsRollup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_DailyCompetitiveStatsRollup::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_DailyCompetitiveStatsRollup() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_DailyCompetitiveStatsRollupImpl);
}

void InitDefaultsCMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_default_instance_;
    new (ptr) ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntryImpl);
}

void InitDefaultsCMsgGC_DailyCompetitiveStatsRollup_ResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry();
  {
    void* ptr = &::_CMsgGC_DailyCompetitiveStatsRollup_Response_default_instance_;
    new (ptr) ::CMsgGC_DailyCompetitiveStatsRollup_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_DailyCompetitiveStatsRollup_Response::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_DailyCompetitiveStatsRollup_Response() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_DailyCompetitiveStatsRollup_ResponseImpl);
}

void InitDefaultsCMsgGC_ReportPlayerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_ReportPlayer_default_instance_;
    new (ptr) ::CMsgGC_ReportPlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_ReportPlayer::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_ReportPlayer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_ReportPlayerImpl);
}

void InitDefaultsCSOTFMatchResultPlayerStatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSOTFMatchResultPlayerStats_default_instance_;
    new (ptr) ::CSOTFMatchResultPlayerStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOTFMatchResultPlayerStats::InitAsDefaultInstance();
}

void InitDefaultsCSOTFMatchResultPlayerStats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSOTFMatchResultPlayerStatsImpl);
}

void InitDefaultsCMsgGCRequestMatchMakerStatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCRequestMatchMakerStats_default_instance_;
    new (ptr) ::CMsgGCRequestMatchMakerStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCRequestMatchMakerStats::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCRequestMatchMakerStats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCRequestMatchMakerStatsImpl);
}

void InitDefaultsCMsgGCDataCenterPopulationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCDataCenterPopulation_default_instance_;
    new (ptr) ::CMsgGCDataCenterPopulation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCDataCenterPopulation::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCDataCenterPopulation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCDataCenterPopulationImpl);
}

void InitDefaultsCMsgGCMatchGroupDataCenterPopulationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCDataCenterPopulation();
  {
    void* ptr = &::_CMsgGCMatchGroupDataCenterPopulation_default_instance_;
    new (ptr) ::CMsgGCMatchGroupDataCenterPopulation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCMatchGroupDataCenterPopulation::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCMatchGroupDataCenterPopulation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCMatchGroupDataCenterPopulationImpl);
}

void InitDefaultsCMsgGCMatchMakerStatsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCMatchGroupDataCenterPopulation();
  {
    void* ptr = &::_CMsgGCMatchMakerStatsResponse_default_instance_;
    new (ptr) ::CMsgGCMatchMakerStatsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCMatchMakerStatsResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCMatchMakerStatsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCMatchMakerStatsResponseImpl);
}

void InitDefaultsCMsgGCMatchHistoryLoadImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCMatchHistoryLoad_default_instance_;
    new (ptr) ::CMsgGCMatchHistoryLoad();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCMatchHistoryLoad::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCMatchHistoryLoad() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCMatchHistoryLoadImpl);
}

void InitDefaultsCMsgGCDataCenterPing_Update_PingEntryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCDataCenterPing_Update_PingEntry_default_instance_;
    new (ptr) ::CMsgGCDataCenterPing_Update_PingEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCDataCenterPing_Update_PingEntry::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCDataCenterPing_Update_PingEntry() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCDataCenterPing_Update_PingEntryImpl);
}

void InitDefaultsCMsgGCDataCenterPing_UpdateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCDataCenterPing_Update_PingEntry();
  {
    void* ptr = &::_CMsgGCDataCenterPing_Update_default_instance_;
    new (ptr) ::CMsgGCDataCenterPing_Update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCDataCenterPing_Update::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCDataCenterPing_Update() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCDataCenterPing_UpdateImpl);
}

void InitDefaultsCMsgGC_KickPlayerFromLobbyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGC_KickPlayerFromLobby_default_instance_;
    new (ptr) ::CMsgGC_KickPlayerFromLobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_KickPlayerFromLobby::InitAsDefaultInstance();
}

void InitDefaultsCMsgGC_KickPlayerFromLobby() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGC_KickPlayerFromLobbyImpl);
}

void InitDefaultsCMsgGCSurveyRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCSurveyRequest_default_instance_;
    new (ptr) ::CMsgGCSurveyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCSurveyRequest::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCSurveyRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCSurveyRequestImpl);
}

void InitDefaultsCMsgGCSurveyResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCSurveyResponse_default_instance_;
    new (ptr) ::CMsgGCSurveyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCSurveyResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCSurveyResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCSurveyResponseImpl);
}

void InitDefaultsCMsgGCNewMatchForLobbyRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCNewMatchForLobbyRequest_default_instance_;
    new (ptr) ::CMsgGCNewMatchForLobbyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCNewMatchForLobbyRequest::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCNewMatchForLobbyRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCNewMatchForLobbyRequestImpl);
}

void InitDefaultsCMsgGCNewMatchForLobbyResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCNewMatchForLobbyResponse_default_instance_;
    new (ptr) ::CMsgGCNewMatchForLobbyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCNewMatchForLobbyResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCNewMatchForLobbyResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCNewMatchForLobbyResponseImpl);
}

void InitDefaultsCMsgGCChangeMatchPlayerTeamsRequest_MemberImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCChangeMatchPlayerTeamsRequest_Member_default_instance_;
    new (ptr) ::CMsgGCChangeMatchPlayerTeamsRequest_Member();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCChangeMatchPlayerTeamsRequest_Member::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCChangeMatchPlayerTeamsRequest_Member() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCChangeMatchPlayerTeamsRequest_MemberImpl);
}

void InitDefaultsCMsgGCChangeMatchPlayerTeamsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCChangeMatchPlayerTeamsRequest_Member();
  {
    void* ptr = &::_CMsgGCChangeMatchPlayerTeamsRequest_default_instance_;
    new (ptr) ::CMsgGCChangeMatchPlayerTeamsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCChangeMatchPlayerTeamsRequest::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCChangeMatchPlayerTeamsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCChangeMatchPlayerTeamsRequestImpl);
}

void InitDefaultsCMsgGCChangeMatchPlayerTeamsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCChangeMatchPlayerTeamsResponse_default_instance_;
    new (ptr) ::CMsgGCChangeMatchPlayerTeamsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCChangeMatchPlayerTeamsResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCChangeMatchPlayerTeamsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCChangeMatchPlayerTeamsResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[164];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[27];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFGoldenWrenchBroadcast, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFGoldenWrenchBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFGoldenWrenchBroadcast, wrench_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFGoldenWrenchBroadcast, deleted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFGoldenWrenchBroadcast, user_name_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFSaxxyBroadcast, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFSaxxyBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFSaxxyBroadcast, category_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFSaxxyBroadcast, user_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCTFSpecificItemBroadcast, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCTFSpecificItemBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCTFSpecificItemBroadcast, item_def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCTFSpecificItemBroadcast, was_destruction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCTFSpecificItemBroadcast, user_name_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFWorldStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFWorldStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFWorldStatus, beta_stress_test_event_active_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFDuelSummary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFDuelSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFDuelSummary, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFDuelSummary, duel_wins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFDuelSummary, duel_losses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFDuelSummary, last_duel_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFDuelSummary, last_duel_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFDuelSummary, last_duel_status_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMapContribution, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMapContribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMapContribution, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMapContribution, def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMapContribution, contribution_level_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFVoteKickBanPlayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFVoteKickBanPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFVoteKickBanPlayer, account_id_subject_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFVoteKickBanPlayer, kick_reason_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFVoteKickBanPlayerResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFVoteKickBanPlayerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFVoteKickBanPlayerResult, account_id_initiator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFVoteKickBanPlayerResult, account_id_subject_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFVoteKickBanPlayerResult, kick_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFVoteKickBanPlayerResult, kick_successful_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFVoteKickBanPlayerResult, num_yes_votes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFVoteKickBanPlayerResult, num_no_votes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFVoteKickBanPlayerResult, num_possible_votes_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFFreeTrialChooseMostHelpfulFriend, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFFreeTrialChooseMostHelpfulFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFFreeTrialChooseMostHelpfulFriend, account_id_friend_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestTF2Friends, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestTF2Friends, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestTF2Friends, account_ids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestTF2FriendsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestTF2FriendsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestTF2FriendsResponse, account_ids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPlayerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPlayerInfo, num_new_users_helped_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFThankedBySomeone, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFThankedBySomeone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFThankedBySomeone, thanker_steam_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFThankedSomeone, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFThankedSomeone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFFreeTrialConvertedToPremium, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFFreeTrialConvertedToPremium, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSaxxyAwarded, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSaxxyAwarded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSaxxyAwarded, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSaxxyAwarded, winner_names_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgReplaySubmitContestEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgReplaySubmitContestEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgReplaySubmitContestEntry, youtube_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgReplaySubmitContestEntry, category_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgReplaySubmitContestEntryResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgReplaySubmitContestEntryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgReplaySubmitContestEntryResponse, success_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CReplayCachedContestData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CReplayCachedContestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CReplayCachedContestData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CReplayCachedContestData, num_votes_last_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CReplayCachedContestData, video_entry_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CReplayCachedContestData, num_flags_last_day_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_AddToCoaches, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_AddToCoaches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_RemoveFromCoaches, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_RemoveFromCoaches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_FindCoach, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_FindCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_FindCoach, account_id_friend_as_coach_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_FindCoachResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_FindCoachResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_FindCoachResponse, found_coach_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_FindCoachResponse, num_likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_FindCoachResponse, coach_name_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_AskCoach, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_AskCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_AskCoach, account_id_student_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_AskCoach, student_is_friend_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_AskCoachResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_AskCoachResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_AskCoachResponse, accept_coaching_assignment_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_CoachJoinGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_CoachJoinGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_CoachJoinGame, join_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_CoachJoinGame, server_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_CoachJoinGame, server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_CoachJoinGame, account_id_student_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_CoachJoining, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_CoachJoining, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_CoachJoining, account_id_coach_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_CoachJoining, account_id_student_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_CoachJoined, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_CoachJoined, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_CoachJoined, account_id_coach_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_LikeCurrentCoach, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_LikeCurrentCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_LikeCurrentCoach, like_coach_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_RemoveCurrentCoach, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_RemoveCurrentCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFCoaching_RemoveCurrentCoach, account_id_coach_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, server_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, num_users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, max_users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, user_score_),
  0,
  1,
  3,
  2,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers, servers_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo, server_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo, server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo, total_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo, options_score_),
  0,
  1,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse, servers_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_PlayerJoining, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_PlayerJoining, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFQuickplay_PlayerJoining, account_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_LevelInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_LevelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_LevelInfo, level_loaded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_LevelInfo, level_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AuthChallenge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AuthChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AuthChallenge, challenge_string_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AuthResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AuthResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AuthResult, authenticated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AuthResult, game_server_standing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AuthResult, game_server_standing_trend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AuthResult, is_valve_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AuthResult, message_),
  2,
  1,
  4,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AuthChallengeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AuthChallengeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AuthChallengeResponse, game_server_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AuthChallengeResponse, hashed_challenge_string_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentity, account_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentityResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentityResponse, account_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentityResponse, game_server_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentityResponse, game_server_identity_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentityResponse, status_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_List, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_List, account_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse_GameServerIdentity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse_GameServerIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_identity_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_standing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_standing_trend_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse, owned_game_servers_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentity, game_server_account_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentityResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentityResponse, game_server_identity_token_reset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentityResponse, game_server_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentityResponse, game_server_identity_token_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AckPolicy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AckPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AckPolicyResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AckPolicyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AckPolicyResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_AckPolicyResponse, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Client_UseServerModificationItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Client_UseServerModificationItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Client_UseServerModificationItem, item_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Client_UseServerModificationItem_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Client_UseServerModificationItem_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Client_UseServerModificationItem_Response, response_code_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_UseServerModificationItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_UseServerModificationItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_UseServerModificationItem, modification_type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_UseServerModificationItem_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_UseServerModificationItem_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_UseServerModificationItem_Response, modification_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_UseServerModificationItem_Response, server_response_code_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ServerModificationItemExpired, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ServerModificationItemExpired, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ServerModificationItemExpired, modification_type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ServerModificationItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ServerModificationItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ServerModificationItem, modification_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_GameServer_ServerModificationItem, active_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_ReservedItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_ReservedItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_ReservedItem, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_ReservedItem, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_ReservedItem, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_ReservedItem, spawn_meta_info_),
  ~0u,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_GrantItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_GrantItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_GrantItem, recipient_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_GrantItem, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_GrantItem, flagged_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_GrantItemResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_GrantItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_GrantItemResponse, recipient_account_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_ItemClaimed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Halloween_ItemClaimed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_Query, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_Query, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_Query, seconds_ago_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_QueryResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_QueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_QueryResponse, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_QueryResponse, was_eligible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_QueryResponse, level_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyMember, owns_ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyMember, completed_missions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyMember, badge_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyMember, squad_surplus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyMember, is_banned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyMember, competitive_access_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyMember, ladder_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyMember, is_low_priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyMember, experience_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyMember, skillrating_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchSearchCriteria, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchSearchCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchSearchCriteria, matchmaking_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchSearchCriteria, late_join_ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchSearchCriteria, custom_ping_tolerance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchSearchCriteria, mvm_mannup_tour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchSearchCriteria, mvm_missions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchSearchCriteria, play_for_bragging_rights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchSearchCriteria, quickplay_game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchSearchCriteria, ladder_game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchSearchCriteria, casual_criteria_),
  4,
  2,
  7,
  0,
  ~0u,
  3,
  5,
  6,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCasualMatchmakingSearchCriteria, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCasualMatchmakingSearchCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCasualMatchmakingSearchCriteria, selected_maps_bits_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCreateOrUpdateParty, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCreateOrUpdateParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCreateOrUpdateParty, search_criteria_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCreateOrUpdateParty, steam_lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCreateOrUpdateParty, squad_surplus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCreateOrUpdateParty, wizard_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCreateOrUpdateParty, client_version_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCreateOrUpdatePartyReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCreateOrUpdatePartyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCreateOrUpdatePartyReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCreateOrUpdatePartyReply, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgCreateOrUpdatePartyReply, wizard_step_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, party_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, leader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, member_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, pending_invites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, associated_lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, wizard_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, started_matchmaking_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, searching_players_by_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, steam_lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, matchmaking_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, search_late_join_ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, search_mvm_mannup_tour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, search_mvm_missions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, search_play_for_bragging_rights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, search_quickplay_game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, search_ladder_game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, search_casual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, custom_ping_tolerance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, matchmaking_ban_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, matchmaking_ban_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFParty, matchmaking_low_priority_time_),
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  17,
  4,
  14,
  5,
  ~0u,
  12,
  15,
  9,
  0,
  ~0u,
  10,
  13,
  16,
  1,
  11,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyInvite_PartyMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyInvite_PartyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyInvite_PartyMember, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyInvite_PartyMember, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyInvite_PartyMember, avatar_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyInvite, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyInvite, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyInvite, sender_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyInvite, sender_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFPartyInvite, members_),
  1,
  2,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTFLobbyMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTFLobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTFLobbyMember, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTFLobbyMember, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTFLobbyMember, connect_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTFLobbyMember, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTFLobbyMember, ready_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTFLobbyMember, party_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTFLobbyMember, squad_surplus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTFLobbyMember, badge_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTFLobbyMember, skillrating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CTFLobbyMember, last_connect_time_),
  1,
  2,
  5,
  0,
  3,
  4,
  6,
  7,
  9,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLobbyPendingPlayerReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLobbyPendingPlayerReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLobbyPendingPlayerReport, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CLobbyPendingPlayerReport, date_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, leader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, pending_invites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, connect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, lobby_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, allow_cheats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, game_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, server_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, game_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, num_spectators_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, readyup_remaining_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, allow_spectating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, average_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, load_game_lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, load_game_save_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, mannup_tour_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, mission_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, match_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, replay_salt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, formed_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, late_join_eligible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, fixed_match_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, is_war_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, next_maps_for_vote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFGameServerLobby, lobby_mm_version_),
  5,
  ~0u,
  7,
  6,
  ~0u,
  8,
  0,
  26,
  13,
  1,
  9,
  10,
  11,
  12,
  27,
  18,
  17,
  19,
  4,
  2,
  3,
  22,
  15,
  20,
  21,
  23,
  14,
  24,
  25,
  ~0u,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExitMatchmaking, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExitMatchmaking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExitMatchmaking, explicit_abandon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExitMatchmaking, party_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgExitMatchmaking, lobby_id_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAcceptInvite, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAcceptInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAcceptInvite, party_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAcceptInvite, steamid_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAcceptInvite, client_version_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAcceptInviteResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAcceptInviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAcceptInviteResponse, result_code_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgReadyUp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgReadyUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgReadyUp, state_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingSearchCountRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingSearchCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingSearchCountResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingSearchCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingSearchCountResponse, searching_players_by_group_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgKickedFromMatchmakingQueue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgKickedFromMatchmakingQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannel, persona_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannel, channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannel, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannel, channel_type_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFLeaveChatChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFLeaveChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFLeaveChatChannel, channel_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannelResponse_ChatMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannelResponse_ChatMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannelResponse_ChatMember, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannelResponse_ChatMember, persona_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannelResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannelResponse, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannelResponse, channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannelResponse, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannelResponse, max_members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFJoinChatChannelResponse, members_),
  1,
  0,
  3,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFOtherJoinedChatChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFOtherJoinedChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFOtherJoinedChatChannel, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFOtherJoinedChatChannel, persona_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFOtherJoinedChatChannel, steam_id_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFOtherLeftChatChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFOtherLeftChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFOtherLeftChatChannel, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFOtherLeftChatChannel, steam_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestDefaultChatChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestDefaultChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestDefaultChatChannelResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestDefaultChatChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestDefaultChatChannelResponse, channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestDefaultChatChannelResponse, channel_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestChatChannelList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestChatChannelList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestChatChannelListResponse_ChatChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestChatChannelListResponse_ChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestChatChannelListResponse_ChatChannel, channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestChatChannelListResponse_ChatChannel, num_members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestChatChannelListResponse_ChatChannel, channel_type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestChatChannelListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestChatChannelListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFRequestChatChannelListResponse, channels_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus_Player, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus_Player, connect_state_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, server_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, matchmaking_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, matchmaking_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, bot_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, num_spectators_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, max_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, slots_free_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, server_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, server_loadavg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, server_trusted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, server_dedicated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, strict_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, game_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, mvm_wave_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, mvm_credits_acquired_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, mvm_credits_dropped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, match_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, lobby_mm_version_),
  19,
  2,
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  14,
  ~0u,
  12,
  13,
  15,
  16,
  17,
  20,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, avg_wait_time_new_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, avg_wait_time_join_late_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, your_wait_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, matching_worldwide_searching_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, matching_near_you_searching_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, total_worldwide_searching_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, total_near_you_searching_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, matching_worldwide_active_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, matching_near_you_active_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, total_worldwide_active_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, total_near_you_active_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, matching_worldwide_empty_gameservers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, matching_near_you_empty_gameservers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, total_worldwide_empty_gameservers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, total_near_you_empty_gameservers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMatchmakingProgress, urgency_pct_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Item, grant_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Item, item_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Item, squad_surplus_claimer_steam_id_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, badge_granted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, badge_progress_updated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, badge_leveled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, badge_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, badge_progress_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, voucher_missing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, badge_points_),
  0,
  1,
  2,
  3,
  5,
  6,
  ~0u,
  4,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo, tour_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictoryInfo, mission_name_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFHelloResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFHelloResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFHelloResponse, version_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFHelloResponse, version_checksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFHelloResponse, version_verbose_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFSync, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFSync, version_checksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFSync, version_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFSync, version_check_ex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFSync, version_check_ex2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFSync, version_checksum_ex_),
  0,
  2,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFSyncEx, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFSyncEx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFSyncEx, version_checksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFSyncEx, version_checksum_ex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgTFSyncEx, version_check_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictory_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictory_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictory_Player, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictory_Player, squad_surplus_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictory, legacy_mission_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictory, tour_name_mannup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictory, mission_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictory, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictory, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMVictory, event_time_),
  2,
  0,
  1,
  ~0u,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMMannUpVictoryReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgMvMMannUpVictoryReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerKickingLobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerKickingLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerKickingLobby, connected_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerKickingLobby, create_party_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerKickingLobby, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerKickingLobby, match_id_),
  ~0u,
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerKickingLobbyResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGameServerKickingLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgLeaveGameAndPrepareToJoinParty, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgLeaveGameAndPrepareToJoinParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgLeaveGameAndPrepareToJoinParty, party_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerLeftMatch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerLeftMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerLeftMatch, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerLeftMatch, leave_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerLeftMatch, was_abandon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerLeftMatch, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerLeftMatch, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerLeftMatch, xp_breakdown_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerLeftMatchResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerLeftMatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerVoteKickedAfterLeavingMatch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerVoteKickedAfterLeavingMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerVoteKickedAfterLeavingMatch, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerVoteKickedAfterLeavingMatch, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerVoteKickedAfterLeavingMatch, match_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerVoteKickedAfterLeavingMatchResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgPlayerVoteKickedAfterLeavingMatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, event_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, boss_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, boss_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, players_involved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, elapsed_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, event_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, time_submitted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, is_valve_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, boss_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, spawned_health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, remaining_health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, life_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, bomb_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, staff_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, pvp_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, prophunt_time1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, prophunt_time2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_scout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_sniper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_soldier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_demo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_medic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_heavy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_pyro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_spy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_engineer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, scout_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, sniper_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, solider_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, demo_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, medic_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, heavy_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, pyro_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, spy_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, engineer_count_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgUpdateHalloweenMerasmusLootLevel_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgUpdateHalloweenMerasmusLootLevel_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgUpdateHalloweenMerasmusLootLevel_Player, steam_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgUpdateHalloweenMerasmusLootLevel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgUpdateHalloweenMerasmusLootLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgUpdateHalloweenMerasmusLootLevel, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgUpdateHalloweenMerasmusLootLevel, merasmus_level_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_String, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_String, value_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, item_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, component_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, attributes_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, num_required_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, num_fulfilled_),
  1,
  2,
  3,
  0,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, item_def_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, item_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, component_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, item_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, attributes_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, num_required_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, item_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, num_fulfilled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, items_fulfilled_),
  1,
  2,
  3,
  4,
  5,
  0,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_ItemSlotCriteria, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_ItemSlotCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_ItemSlotCriteria, tags_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSetItemSlotAttribute, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSetItemSlotAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSetItemSlotAttribute, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSetItemSlotAttribute, slot_item_original_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSetItemSlotAttribute, slot_index_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOWarData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOWarData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOWarData, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOWarData, war_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOWarData, affiliation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOWarData, points_scored_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_IndividualUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_IndividualUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_IndividualUpdate, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_IndividualUpdate, war_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_IndividualUpdate, score_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_JoinWar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_JoinWar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_JoinWar, affiliation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_JoinWar, war_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_RequestGlobalStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_RequestGlobalStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_RequestGlobalStats, war_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse_SideScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse_SideScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse_SideScore, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse_SideScore, score_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse, side_scores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse, war_id_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, score_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, score_check_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_WorldItemPlacement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_WorldItemPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_WorldItemPlacement, original_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_WorldItemPlacement, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_WorldItemPlacement, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_WorldItemPlacement, pos_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_WorldItemPlacement, ang_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_WorldItemPlacement, ang_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAttribute_WorldItemPlacement, ang_z_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, original_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, pos_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, ang_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, ang_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, ang_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, force_remove_all_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, attrib_name_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAcknowledgeXP, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAcknowledgeXP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAcknowledgeXP, match_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgAcknowledgeXP, predicted_experience_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFXPSource, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFXPSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFXPSource, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFXPSource, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFXPSource, match_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFXPSource, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFXPSource, match_id_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFXPSourceBreakdown, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFXPSourceBreakdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFXPSourceBreakdown, sources_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFClientInit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFClientInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFClientInit, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgTFClientInit, language_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNotification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNotification, notification_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNotification, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNotification, expiration_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNotification, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNotification, notification_string_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNotificationQueue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNotificationQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNotificationQueue, notifications_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgNotificationAcknowledge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgNotificationAcknowledge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgNotificationAcknowledge, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgNotificationAcknowledge, notification_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgNotificationAcknowledgeReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgNotificationAcknowledgeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, party_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, ping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, classes_played_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, healing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, score_medal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, kills_medal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, damage_medal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, healing_medal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, support_medal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, xp_breakdown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, leave_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, leave_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result_Player, connect_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  ~0u,
  18,
  19,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result, match_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result, red_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result, blue_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result, winning_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result, map_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result, win_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_Result, bots_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_ResultResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Match_ResultResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CEconItemPreviewDataBlock, econitem_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockRequest, param_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockRequest, param_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockRequest, param_d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockRequest, param_m_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockResponse, iteminfo_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, match_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, season_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, highest_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, experience_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, last_ackd_experience_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, games_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, healing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, score_bronze_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, score_silver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, score_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, kills_bronze_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, kills_silver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, kills_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, damage_bronze_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, damage_silver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, damage_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, healing_bronze_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, healing_silver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, healing_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, support_bronze_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, support_silver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFLadderPlayerStats, support_gold_),
  0,
  1,
  2,
  3,
  4,
  5,
  28,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFRatingData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFRatingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFRatingData, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFRatingData, rating_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFRatingData, rating_primary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFRatingData, rating_secondary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFRatingData, rating_tertiary_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_TFVoteKickPlayerRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_TFVoteKickPlayerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_TFVoteKickPlayerRequest, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_TFVoteKickPlayerRequest, target_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_VoteKickPlayerRequestResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_VoteKickPlayerRequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_VoteKickPlayerRequestResponse, allowed_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, records_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, avg_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, avg_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, avg_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, avg_healing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_healing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, avg_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_support_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response, rankdata_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_ReportPlayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_ReportPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_ReportPlayer, account_id_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_ReportPlayer, reason_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, match_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, endtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, season_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, party_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, ping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, display_rating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, display_rating_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, classes_played_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, healing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, score_medal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, kills_medal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, damage_medal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, healing_medal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, support_medal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, map_index_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCRequestMatchMakerStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCRequestMatchMakerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCDataCenterPopulation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCDataCenterPopulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCDataCenterPopulation, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCDataCenterPopulation, health_ratio_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCMatchGroupDataCenterPopulation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCMatchGroupDataCenterPopulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCMatchGroupDataCenterPopulation, data_center_population_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCMatchMakerStatsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCMatchMakerStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCMatchMakerStatsResponse, map_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCMatchMakerStatsResponse, matchgroup_data_center_population_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCMatchHistoryLoad, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCMatchHistoryLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCDataCenterPing_Update_PingEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCDataCenterPing_Update_PingEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCDataCenterPing_Update_PingEntry, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCDataCenterPing_Update_PingEntry, ping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCDataCenterPing_Update_PingEntry, ping_status_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCDataCenterPing_Update, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCDataCenterPing_Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCDataCenterPing_Update, pingdata_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_KickPlayerFromLobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_KickPlayerFromLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGC_KickPlayerFromLobby, targetid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCSurveyRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCSurveyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCSurveyRequest, question_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCSurveyRequest, match_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCSurveyResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCSurveyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCSurveyResponse, question_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCSurveyResponse, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCSurveyResponse, response_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNewMatchForLobbyRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNewMatchForLobbyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNewMatchForLobbyRequest, current_match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNewMatchForLobbyRequest, next_map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNewMatchForLobbyRequest, lobby_id_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNewMatchForLobbyResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNewMatchForLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCNewMatchForLobbyResponse, success_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest_Member, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest_Member, member_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest_Member, new_team_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest, member_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsResponse, success_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CMsgTFGoldenWrenchBroadcast)},
  { 11, 18, sizeof(::CMsgTFSaxxyBroadcast)},
  { 20, 28, sizeof(::CMsgGCTFSpecificItemBroadcast)},
  { 31, 37, sizeof(::CMsgTFWorldStatus)},
  { 38, 49, sizeof(::CSOTFDuelSummary)},
  { 55, 63, sizeof(::CSOTFMapContribution)},
  { 66, 73, sizeof(::CMsgTFVoteKickBanPlayer)},
  { 75, 87, sizeof(::CMsgTFVoteKickBanPlayerResult)},
  { 94, 100, sizeof(::CMsgTFFreeTrialChooseMostHelpfulFriend)},
  { 101, 107, sizeof(::CMsgTFRequestTF2Friends)},
  { 108, 114, sizeof(::CMsgTFRequestTF2FriendsResponse)},
  { 115, 121, sizeof(::CSOTFPlayerInfo)},
  { 122, 128, sizeof(::CMsgTFThankedBySomeone)},
  { 129, 134, sizeof(::CMsgTFThankedSomeone)},
  { 134, 139, sizeof(::CMsgTFFreeTrialConvertedToPremium)},
  { 139, 146, sizeof(::CMsgSaxxyAwarded)},
  { 148, 155, sizeof(::CMsgReplaySubmitContestEntry)},
  { 157, 163, sizeof(::CMsgReplaySubmitContestEntryResponse)},
  { 164, 173, sizeof(::CReplayCachedContestData)},
  { 177, 182, sizeof(::CMsgTFCoaching_AddToCoaches)},
  { 182, 187, sizeof(::CMsgTFCoaching_RemoveFromCoaches)},
  { 187, 193, sizeof(::CMsgTFCoaching_FindCoach)},
  { 194, 202, sizeof(::CMsgTFCoaching_FindCoachResponse)},
  { 205, 212, sizeof(::CMsgTFCoaching_AskCoach)},
  { 214, 220, sizeof(::CMsgTFCoaching_AskCoachResponse)},
  { 221, 230, sizeof(::CMsgTFCoaching_CoachJoinGame)},
  { 234, 241, sizeof(::CMsgTFCoaching_CoachJoining)},
  { 243, 249, sizeof(::CMsgTFCoaching_CoachJoined)},
  { 250, 256, sizeof(::CMsgTFCoaching_LikeCurrentCoach)},
  { 257, 263, sizeof(::CMsgTFCoaching_RemoveCurrentCoach)},
  { 264, 275, sizeof(::CMsgTFQuickplay_ScoreServers_ServerInfo)},
  { 281, 287, sizeof(::CMsgTFQuickplay_ScoreServers)},
  { 288, 298, sizeof(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo)},
  { 303, 309, sizeof(::CMsgTFQuickplay_ScoreServersResponse)},
  { 310, 316, sizeof(::CMsgTFQuickplay_PlayerJoining)},
  { 317, 324, sizeof(::CMsgGC_GameServer_LevelInfo)},
  { 326, 332, sizeof(::CMsgGC_GameServer_AuthChallenge)},
  { 333, 343, sizeof(::CMsgGC_GameServer_AuthResult)},
  { 348, 355, sizeof(::CMsgGC_GameServer_AuthChallengeResponse)},
  { 357, 363, sizeof(::CMsgGC_GameServer_CreateIdentity)},
  { 364, 373, sizeof(::CMsgGC_GameServer_CreateIdentityResponse)},
  { 377, 383, sizeof(::CMsgGC_GameServer_List)},
  { 384, 393, sizeof(::CMsgGC_GameServer_ListResponse_GameServerIdentity)},
  { 397, 403, sizeof(::CMsgGC_GameServer_ListResponse)},
  { 404, 410, sizeof(::CMsgGC_GameServer_ResetIdentity)},
  { 411, 419, sizeof(::CMsgGC_GameServer_ResetIdentityResponse)},
  { 422, 427, sizeof(::CMsgGC_GameServer_AckPolicy)},
  { 427, 434, sizeof(::CMsgGC_GameServer_AckPolicyResponse)},
  { 436, 442, sizeof(::CMsgGC_Client_UseServerModificationItem)},
  { 443, 449, sizeof(::CMsgGC_Client_UseServerModificationItem_Response)},
  { 450, 456, sizeof(::CMsgGC_GameServer_UseServerModificationItem)},
  { 457, 464, sizeof(::CMsgGC_GameServer_UseServerModificationItem_Response)},
  { 466, 472, sizeof(::CMsgGC_GameServer_ServerModificationItemExpired)},
  { 473, 480, sizeof(::CMsgGC_GameServer_ServerModificationItem)},
  { 482, 491, sizeof(::CMsgGC_Halloween_ReservedItem)},
  { 495, 503, sizeof(::CMsgGC_Halloween_GrantItem)},
  { 506, 512, sizeof(::CMsgGC_Halloween_GrantItemResponse)},
  { 513, 518, sizeof(::CMsgGC_Halloween_ItemClaimed)},
  { 518, 525, sizeof(::CMsgGC_PickupItemEligibility_Query)},
  { 527, 535, sizeof(::CMsgGC_PickupItemEligibility_QueryResponse)},
  { 538, 553, sizeof(::CSOTFPartyMember)},
  { 563, 577, sizeof(::CMsgMatchSearchCriteria)},
  { 586, 592, sizeof(::CMsgCasualMatchmakingSearchCriteria)},
  { 593, 603, sizeof(::CMsgCreateOrUpdateParty)},
  { 608, 616, sizeof(::CMsgCreateOrUpdatePartyReply)},
  { 619, 647, sizeof(::CSOTFParty)},
  { 670, 678, sizeof(::CSOTFPartyInvite_PartyMember)},
  { 681, 690, sizeof(::CSOTFPartyInvite)},
  { 694, 709, sizeof(::CTFLobbyMember)},
  { 719, 726, sizeof(::CLobbyPendingPlayerReport)},
  { 728, 764, sizeof(::CSOTFGameServerLobby)},
  { 795, 803, sizeof(::CMsgExitMatchmaking)},
  { 806, 814, sizeof(::CMsgAcceptInvite)},
  { 817, 823, sizeof(::CMsgAcceptInviteResponse)},
  { 824, 830, sizeof(::CMsgReadyUp)},
  { 831, 836, sizeof(::CMsgMatchmakingSearchCountRequest)},
  { 836, 842, sizeof(::CMsgMatchmakingSearchCountResponse)},
  { 843, 848, sizeof(::CMsgKickedFromMatchmakingQueue)},
  { 848, 857, sizeof(::CMsgTFJoinChatChannel)},
  { 861, 867, sizeof(::CMsgTFLeaveChatChannel)},
  { 868, 875, sizeof(::CMsgTFJoinChatChannelResponse_ChatMember)},
  { 877, 887, sizeof(::CMsgTFJoinChatChannelResponse)},
  { 892, 900, sizeof(::CMsgTFOtherJoinedChatChannel)},
  { 903, 910, sizeof(::CMsgTFOtherLeftChatChannel)},
  { 912, 917, sizeof(::CMsgTFRequestDefaultChatChannel)},
  { 917, 924, sizeof(::CMsgTFRequestDefaultChatChannelResponse)},
  { 926, 931, sizeof(::CMsgTFRequestChatChannelList)},
  { 931, 939, sizeof(::CMsgTFRequestChatChannelListResponse_ChatChannel)},
  { 942, 948, sizeof(::CMsgTFRequestChatChannelListResponse)},
  { 949, 956, sizeof(::CMsgGameServerMatchmakingStatus_Player)},
  { 958, 985, sizeof(::CMsgGameServerMatchmakingStatus)},
  { 1007, 1028, sizeof(::CMsgMatchmakingProgress)},
  { 1044, 1052, sizeof(::CMsgMvMVictoryInfo_Item)},
  { 1055, 1069, sizeof(::CMsgMvMVictoryInfo_Player)},
  { 1078, 1086, sizeof(::CMsgMvMVictoryInfo)},
  { 1089, 1097, sizeof(::CGCMsgTFHelloResponse)},
  { 1100, 1110, sizeof(::CGCMsgTFSync)},
  { 1115, 1123, sizeof(::CGCMsgTFSyncEx)},
  { 1126, 1133, sizeof(::CMsgMvMVictory_Player)},
  { 1135, 1146, sizeof(::CMsgMvMVictory)},
  { 1152, 1157, sizeof(::CMsgMvMMannUpVictoryReply)},
  { 1157, 1166, sizeof(::CMsgGameServerKickingLobby)},
  { 1170, 1175, sizeof(::CMsgGameServerKickingLobbyResponse)},
  { 1175, 1181, sizeof(::CMsgLeaveGameAndPrepareToJoinParty)},
  { 1182, 1193, sizeof(::CMsgPlayerLeftMatch)},
  { 1199, 1204, sizeof(::CMsgPlayerLeftMatchResponse)},
  { 1204, 1212, sizeof(::CMsgPlayerVoteKickedAfterLeavingMatch)},
  { 1215, 1220, sizeof(::CMsgPlayerVoteKickedAfterLeavingMatchResponse)},
  { 1220, 1232, sizeof(::CMsgHalloween_ServerBossEvent)},
  { 1239, 1274, sizeof(::CMsgHalloween_Merasmus2012)},
  { 1304, 1310, sizeof(::CMsgUpdateHalloweenMerasmusLootLevel_Player)},
  { 1311, 1318, sizeof(::CMsgUpdateHalloweenMerasmusLootLevel)},
  { 1320, 1326, sizeof(::CAttribute_String)},
  { 1327, 1338, sizeof(::CAttribute_DynamicRecipeComponent)},
  { 1344, 1359, sizeof(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)},
  { 1369, 1375, sizeof(::CAttribute_ItemSlotCriteria)},
  { 1376, 1384, sizeof(::CMsgSetItemSlotAttribute)},
  { 1387, 1396, sizeof(::CSOWarData)},
  { 1400, 1408, sizeof(::CGCMsgGC_War_IndividualUpdate)},
  { 1411, 1418, sizeof(::CGCMsgGC_War_JoinWar)},
  { 1420, 1426, sizeof(::CGCMsgGC_War_RequestGlobalStats)},
  { 1427, 1434, sizeof(::CGCMsgGC_War_GlobalStatsResponse_SideScore)},
  { 1436, 1443, sizeof(::CGCMsgGC_War_GlobalStatsResponse)},
  { 1445, 1454, sizeof(::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)},
  { 1458, 1470, sizeof(::CAttribute_WorldItemPlacement)},
  { 1477, 1491, sizeof(::CGCMsg_WorldItemPlacement_Update)},
  { 1500, 1507, sizeof(::CMsgAcknowledgeXP)},
  { 1509, 1519, sizeof(::CMsgTFXPSource)},
  { 1524, 1530, sizeof(::CMsgTFXPSourceBreakdown)},
  { 1531, 1538, sizeof(::CMsgTFClientInit)},
  { 1540, 1550, sizeof(::CMsgGCNotification)},
  { 1555, 1561, sizeof(::CMsgGCNotificationQueue)},
  { 1562, 1569, sizeof(::CMsgNotificationAcknowledge)},
  { 1571, 1576, sizeof(::CMsgNotificationAcknowledgeReply)},
  { 1576, 1603, sizeof(::CMsgGC_Match_Result_Player)},
  { 1625, 1643, sizeof(::CMsgGC_Match_Result)},
  { 1656, 1661, sizeof(::CMsgGC_Match_ResultResponse)},
  { 1661, 1667, sizeof(::CEconItemPreviewDataBlock)},
  { 1668, 1677, sizeof(::CMsgGC_Client2GCEconPreviewDataBlockRequest)},
  { 1681, 1687, sizeof(::CMsgGC_Client2GCEconPreviewDataBlockResponse)},
  { 1688, 1722, sizeof(::CSOTFLadderPlayerStats)},
  { 1751, 1761, sizeof(::CSOTFRatingData)},
  { 1766, 1773, sizeof(::CMsgGC_TFVoteKickPlayerRequest)},
  { 1775, 1781, sizeof(::CMsgGC_VoteKickPlayerRequestResponse)},
  { 1782, 1787, sizeof(::CMsgGC_DailyCompetitiveStatsRollup)},
  { 1787, 1804, sizeof(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry)},
  { 1816, 1822, sizeof(::CMsgGC_DailyCompetitiveStatsRollup_Response)},
  { 1823, 1830, sizeof(::CMsgGC_ReportPlayer)},
  { 1832, 1863, sizeof(::CSOTFMatchResultPlayerStats)},
  { 1889, 1894, sizeof(::CMsgGCRequestMatchMakerStats)},
  { 1894, 1901, sizeof(::CMsgGCDataCenterPopulation)},
  { 1903, 1909, sizeof(::CMsgGCMatchGroupDataCenterPopulation)},
  { 1910, 1917, sizeof(::CMsgGCMatchMakerStatsResponse)},
  { 1919, 1924, sizeof(::CMsgGCMatchHistoryLoad)},
  { 1924, 1932, sizeof(::CMsgGCDataCenterPing_Update_PingEntry)},
  { 1935, 1941, sizeof(::CMsgGCDataCenterPing_Update)},
  { 1942, 1948, sizeof(::CMsgGC_KickPlayerFromLobby)},
  { 1949, 1956, sizeof(::CMsgGCSurveyRequest)},
  { 1958, 1966, sizeof(::CMsgGCSurveyResponse)},
  { 1969, 1977, sizeof(::CMsgGCNewMatchForLobbyRequest)},
  { 1980, 1986, sizeof(::CMsgGCNewMatchForLobbyResponse)},
  { 1987, 1994, sizeof(::CMsgGCChangeMatchPlayerTeamsRequest_Member)},
  { 1996, 2004, sizeof(::CMsgGCChangeMatchPlayerTeamsRequest)},
  { 2007, 2013, sizeof(::CMsgGCChangeMatchPlayerTeamsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFGoldenWrenchBroadcast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFSaxxyBroadcast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCTFSpecificItemBroadcast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFWorldStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSOTFDuelSummary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSOTFMapContribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFVoteKickBanPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFVoteKickBanPlayerResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFFreeTrialChooseMostHelpfulFriend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFRequestTF2Friends_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFRequestTF2FriendsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSOTFPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFThankedBySomeone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFThankedSomeone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFFreeTrialConvertedToPremium_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSaxxyAwarded_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgReplaySubmitContestEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgReplaySubmitContestEntryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CReplayCachedContestData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFCoaching_AddToCoaches_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFCoaching_RemoveFromCoaches_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFCoaching_FindCoach_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFCoaching_FindCoachResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFCoaching_AskCoach_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFCoaching_AskCoachResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFCoaching_CoachJoinGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFCoaching_CoachJoining_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFCoaching_CoachJoined_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFCoaching_LikeCurrentCoach_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFCoaching_RemoveCurrentCoach_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFQuickplay_ScoreServers_ServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFQuickplay_ScoreServers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFQuickplay_ScoreServersResponse_ServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFQuickplay_ScoreServersResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFQuickplay_PlayerJoining_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_LevelInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_AuthChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_AuthResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_AuthChallengeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_CreateIdentity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_CreateIdentityResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_List_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_ListResponse_GameServerIdentity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_ListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_ResetIdentity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_ResetIdentityResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_AckPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_AckPolicyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_Client_UseServerModificationItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_Client_UseServerModificationItem_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_UseServerModificationItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_UseServerModificationItem_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_ServerModificationItemExpired_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_GameServer_ServerModificationItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_Halloween_ReservedItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_Halloween_GrantItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_Halloween_GrantItemResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_Halloween_ItemClaimed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_PickupItemEligibility_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_PickupItemEligibility_QueryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSOTFPartyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgMatchSearchCriteria_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgCasualMatchmakingSearchCriteria_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgCreateOrUpdateParty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgCreateOrUpdatePartyReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSOTFParty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSOTFPartyInvite_PartyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSOTFPartyInvite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CTFLobbyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CLobbyPendingPlayerReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSOTFGameServerLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgExitMatchmaking_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgAcceptInvite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgAcceptInviteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgReadyUp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgMatchmakingSearchCountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgMatchmakingSearchCountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgKickedFromMatchmakingQueue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFJoinChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFLeaveChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFJoinChatChannelResponse_ChatMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFJoinChatChannelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFOtherJoinedChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFOtherLeftChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFRequestDefaultChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFRequestDefaultChatChannelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFRequestChatChannelList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFRequestChatChannelListResponse_ChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFRequestChatChannelListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGameServerMatchmakingStatus_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGameServerMatchmakingStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgMatchmakingProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgMvMVictoryInfo_Item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgMvMVictoryInfo_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgMvMVictoryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCMsgTFHelloResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCMsgTFSync_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCMsgTFSyncEx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgMvMVictory_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgMvMVictory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgMvMMannUpVictoryReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGameServerKickingLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGameServerKickingLobbyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgLeaveGameAndPrepareToJoinParty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgPlayerLeftMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgPlayerLeftMatchResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgPlayerVoteKickedAfterLeavingMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgPlayerVoteKickedAfterLeavingMatchResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgHalloween_ServerBossEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgHalloween_Merasmus2012_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgUpdateHalloweenMerasmusLootLevel_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgUpdateHalloweenMerasmusLootLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAttribute_String_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAttribute_DynamicRecipeComponent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAttribute_ItemSlotCriteria_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSetItemSlotAttribute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSOWarData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCMsgGC_War_IndividualUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCMsgGC_War_JoinWar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCMsgGC_War_RequestGlobalStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCMsgGC_War_GlobalStatsResponse_SideScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCMsgGC_War_GlobalStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAttribute_WorldItemPlacement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCMsg_WorldItemPlacement_Update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgAcknowledgeXP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFXPSource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFXPSourceBreakdown_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgTFClientInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCNotificationQueue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgNotificationAcknowledge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgNotificationAcknowledgeReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_Match_Result_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_Match_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_Match_ResultResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CEconItemPreviewDataBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_Client2GCEconPreviewDataBlockRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_Client2GCEconPreviewDataBlockResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSOTFLadderPlayerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSOTFRatingData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_TFVoteKickPlayerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_VoteKickPlayerRequestResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_DailyCompetitiveStatsRollup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_DailyCompetitiveStatsRollup_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_ReportPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSOTFMatchResultPlayerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCRequestMatchMakerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCDataCenterPopulation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCMatchGroupDataCenterPopulation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCMatchMakerStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCMatchHistoryLoad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCDataCenterPing_Update_PingEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCDataCenterPing_Update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGC_KickPlayerFromLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCSurveyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCSurveyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCNewMatchForLobbyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCNewMatchForLobbyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCChangeMatchPlayerTeamsRequest_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCChangeMatchPlayerTeamsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCChangeMatchPlayerTeamsResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tf_gcmessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 164);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023tf_gcmessages.proto\032\023steammessages.pro"
      "to\032\025base_gcmessages.proto\"X\n\033CMsgTFGolde"
      "nWrenchBroadcast\022\025\n\rwrench_number\030\001 \001(\005\022"
      "\017\n\007deleted\030\002 \001(\010\022\021\n\tuser_name\030\003 \001(\t\"B\n\024C"
      "MsgTFSaxxyBroadcast\022\027\n\017category_number\030\001"
      " \001(\005\022\021\n\tuser_name\030\002 \001(\t\"c\n\035CMsgGCTFSpeci"
      "ficItemBroadcast\022\026\n\016item_def_index\030\001 \001(\r"
      "\022\027\n\017was_destruction\030\002 \001(\010\022\021\n\tuser_name\030\003"
      " \001(\t\"A\n\021CMsgTFWorldStatus\022,\n\035beta_stress"
      "_test_event_active\030\001 \001(\010:\005false\"\251\001\n\020CSOT"
      "FDuelSummary\022\030\n\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\021"
      "\n\tduel_wins\030\002 \001(\r\022\023\n\013duel_losses\030\003 \001(\r\022\034"
      "\n\024last_duel_account_id\030\004 \001(\r\022\033\n\023last_due"
      "l_timestamp\030\005 \001(\r\022\030\n\020last_duel_status\030\006 "
      "\001(\r\"e\n\024CSOTFMapContribution\022\030\n\naccount_i"
      "d\030\001 \001(\rB\004\200\246\035\001\022\027\n\tdef_index\030\002 \001(\rB\004\200\246\035\001\022\032"
      "\n\022contribution_level\030\003 \001(\r\"J\n\027CMsgTFVote"
      "KickBanPlayer\022\032\n\022account_id_subject\030\001 \001("
      "\r\022\023\n\013kick_reason\030\002 \001(\r\"\320\001\n\035CMsgTFVoteKic"
      "kBanPlayerResult\022\034\n\024account_id_initiator"
      "\030\001 \001(\r\022\032\n\022account_id_subject\030\002 \001(\r\022\023\n\013ki"
      "ck_reason\030\003 \001(\r\022\027\n\017kick_successful\030\004 \001(\010"
      "\022\025\n\rnum_yes_votes\030\005 \001(\r\022\024\n\014num_no_votes\030"
      "\006 \001(\r\022\032\n\022num_possible_votes\030\007 \001(\r\"C\n&CMs"
      "gTFFreeTrialChooseMostHelpfulFriend\022\031\n\021a"
      "ccount_id_friend\030\001 \001(\r\".\n\027CMsgTFRequestT"
      "F2Friends\022\023\n\013account_ids\030\001 \003(\r\"6\n\037CMsgTF"
      "RequestTF2FriendsResponse\022\023\n\013account_ids"
      "\030\001 \003(\r\"/\n\017CSOTFPlayerInfo\022\034\n\024num_new_use"
      "rs_helped\030\001 \001(\r\"2\n\026CMsgTFThankedBySomeon"
      "e\022\030\n\020thanker_steam_id\030\001 \001(\004\"\026\n\024CMsgTFTha"
      "nkedSomeone\"#\n!CMsgTFFreeTrialConvertedT"
      "oPremium\":\n\020CMsgSaxxyAwarded\022\020\n\010category"
      "\030\001 \001(\r\022\024\n\014winner_names\030\002 \003(\t\"E\n\034CMsgRepl"
      "aySubmitContestEntry\022\023\n\013youtube_url\030\001 \001("
      "\t\022\020\n\010category\030\002 \001(\r\"7\n$CMsgReplaySubmitC"
      "ontestEntryResponse\022\017\n\007success\030\001 \001(\010\"~\n\030"
      "CReplayCachedContestData\022\021\n\ttimestamp\030\001 "
      "\001(\007\022\032\n\022num_votes_last_day\030\002 \001(\r\022\027\n\017video"
      "_entry_ids\030\003 \003(\r\022\032\n\022num_flags_last_day\030\004"
      " \001(\r\"\035\n\033CMsgTFCoaching_AddToCoaches\"\"\n C"
      "MsgTFCoaching_RemoveFromCoaches\">\n\030CMsgT"
      "FCoaching_FindCoach\022\"\n\032account_id_friend"
      "_as_coach\030\001 \001(\r\"^\n CMsgTFCoaching_FindCo"
      "achResponse\022\023\n\013found_coach\030\001 \001(\010\022\021\n\tnum_"
      "likes\030\002 \001(\r\022\022\n\ncoach_name\030\003 \001(\t\"P\n\027CMsgT"
      "FCoaching_AskCoach\022\032\n\022account_id_student"
      "\030\001 \001(\r\022\031\n\021student_is_friend\030\002 \001(\010\"E\n\037CMs"
      "gTFCoaching_AskCoachResponse\022\"\n\032accept_c"
      "oaching_assignment\030\001 \001(\010\"z\n\034CMsgTFCoachi"
      "ng_CoachJoinGame\022\021\n\tjoin_game\030\001 \001(\010\022\026\n\016s"
      "erver_address\030\002 \001(\r\022\023\n\013server_port\030\003 \001(\r"
      "\022\032\n\022account_id_student\030\004 \001(\r\"S\n\033CMsgTFCo"
      "aching_CoachJoining\022\030\n\020account_id_coach\030"
      "\001 \001(\r\022\032\n\022account_id_student\030\002 \001(\r\"6\n\032CMs"
      "gTFCoaching_CoachJoined\022\030\n\020account_id_co"
      "ach\030\001 \001(\r\"5\n\037CMsgTFCoaching_LikeCurrentC"
      "oach\022\022\n\nlike_coach\030\001 \001(\010\"=\n!CMsgTFCoachi"
      "ng_RemoveCurrentCoach\022\030\n\020account_id_coac"
      "h\030\001 \001(\r\"\341\001\n\034CMsgTFQuickplay_ScoreServers"
      "\0229\n\007servers\030\001 \003(\0132(.CMsgTFQuickplay_Scor"
      "eServers.ServerInfo\032\205\001\n\nServerInfo\022\026\n\016se"
      "rver_address\030\001 \001(\r\022\023\n\013server_port\030\002 \001(\r\022"
      "\021\n\tnum_users\030\003 \001(\r\022\020\n\010steam_id\030\004 \001(\004\022\021\n\t"
      "max_users\030\005 \001(\r\022\022\n\nuser_score\030\006 \001(\002\"\342\001\n$"
      "CMsgTFQuickplay_ScoreServersResponse\022A\n\007"
      "servers\030\001 \003(\01320.CMsgTFQuickplay_ScoreSer"
      "versResponse.ServerInfo\032w\n\nServerInfo\022\026\n"
      "\016server_address\030\001 \001(\r\022\023\n\013server_port\030\002 \001"
      "(\r\022\023\n\013total_score\030\003 \001(\002\022\020\n\010steam_id\030\004 \001("
      "\004\022\025\n\roptions_score\030\005 \001(\r\"3\n\035CMsgTFQuickp"
      "lay_PlayerJoining\022\022\n\naccount_id\030\001 \001(\r\"G\n"
      "\033CMsgGC_GameServer_LevelInfo\022\024\n\014level_lo"
      "aded\030\001 \001(\010\022\022\n\nlevel_name\030\002 \001(\t\";\n\037CMsgGC"
      "_GameServer_AuthChallenge\022\030\n\020challenge_s"
      "tring\030\001 \001(\t\"\241\001\n\034CMsgGC_GameServer_AuthRe"
      "sult\022\025\n\rauthenticated\030\001 \001(\010\022\034\n\024game_serv"
      "er_standing\030\002 \001(\005\022\"\n\032game_server_standin"
      "g_trend\030\003 \001(\005\022\027\n\017is_valve_server\030\004 \001(\010\022\017"
      "\n\007message\030\005 \001(\t\"j\n\'CMsgGC_GameServer_Aut"
      "hChallengeResponse\022\036\n\026game_server_accoun"
      "t_id\030\001 \001(\r\022\037\n\027hashed_challenge_string\030\002 "
      "\001(\014\"6\n CMsgGC_GameServer_CreateIdentity\022"
      "\022\n\naccount_id\030\001 \001(\r\"\332\002\n(CMsgGC_GameServe"
      "r_CreateIdentityResponse\022\027\n\017account_crea"
      "ted\030\001 \001(\010\022\036\n\026game_server_account_id\030\002 \001("
      "\r\022\"\n\032game_server_identity_token\030\003 \001(\t\022Y\n"
      "\006status\030\004 \001(\01621.CMsgGC_GameServer_Create"
      "IdentityResponse.EStatus:\026kStatus_Generi"
      "cFailure\"v\n\007EStatus\022\032\n\026kStatus_GenericFa"
      "ilure\020\000\022\034\n\017kStatus_TooMany\020\377\377\377\377\377\377\377\377\377\001\022\034\n"
      "\017kStatus_NoPrivs\020\376\377\377\377\377\377\377\377\377\001\022\023\n\017kStatus_C"
      "reated\020\001\",\n\026CMsgGC_GameServer_List\022\022\n\nac"
      "count_id\030\001 \001(\r\"\215\002\n\036CMsgGC_GameServer_Lis"
      "tResponse\022N\n\022owned_game_servers\030\001 \003(\01322."
      "CMsgGC_GameServer_ListResponse.GameServe"
      "rIdentity\032\232\001\n\022GameServerIdentity\022\036\n\026game"
      "_server_account_id\030\001 \001(\r\022\"\n\032game_server_"
      "identity_token\030\002 \001(\t\022\034\n\024game_server_stan"
      "ding\030\003 \001(\005\022\"\n\032game_server_standing_trend"
      "\030\004 \001(\005\"A\n\037CMsgGC_GameServer_ResetIdentit"
      "y\022\036\n\026game_server_account_id\030\001 \001(\r\"\227\001\n\'CM"
      "sgGC_GameServer_ResetIdentityResponse\022(\n"
      " game_server_identity_token_reset\030\001 \001(\010\022"
      "\036\n\026game_server_account_id\030\002 \001(\r\022\"\n\032game_"
      "server_identity_token\030\003 \001(\t\"\035\n\033CMsgGC_Ga"
      "meServer_AckPolicy\"F\n#CMsgGC_GameServer_"
      "AckPolicyResponse\022\016\n\006result\030\001 \001(\r\022\017\n\007mes"
      "sage\030\002 \001(\t\":\n\'CMsgGC_Client_UseServerMod"
      "ificationItem\022\017\n\007item_id\030\001 \001(\004\"\374\003\n0CMsgG"
      "C_Client_UseServerModificationItem_Respo"
      "nse\022\226\001\n\rresponse_code\030\001 \001(\0162Q.CMsgGC_Cli"
      "ent_UseServerModificationItem_Response.E"
      "ServerModificationItemResponse:,kServerM"
      "odificationItemResponse_AlreadyInUse\"\256\002\n"
      "\037EServerModificationItemResponse\0220\n,kSer"
      "verModificationItemResponse_AlreadyInUse"
      "\020\001\022<\n8kServerModificationItemResponse_No"
      "tOnAuthenticatedServer\020\002\0220\n,kServerModif"
      "icationItemResponse_ServerReject\020\003\0221\n-kS"
      "erverModificationItemResponse_InternalEr"
      "ror\020\004\0226\n2kServerModificationItemResponse"
      "_EventAlreadyActive\020\005\"\215\001\n+CMsgGC_GameSer"
      "ver_UseServerModificationItem\022^\n\021modific"
      "ation_type\030\001 \001(\0162\034.EServerModificationIt"
      "emType:%kGameServerModificationItem_Hall"
      "oween\"\216\004\n4CMsgGC_GameServer_UseServerMod"
      "ificationItem_Response\022^\n\021modification_t"
      "ype\030\001 \001(\0162\034.EServerModificationItemType:"
      "%kGameServerModificationItem_Halloween\022\251"
      "\001\n\024server_response_code\030\002 \001(\0162[.CMsgGC_G"
      "ameServer_UseServerModificationItem_Resp"
      "onse.EServerModificationItemServerRespon"
      "se:.kServerModificationItemServerRespons"
      "e_Accepted\"\311\001\n%EServerModificationItemSe"
      "rverResponse\0222\n.kServerModificationItemS"
      "erverResponse_Accepted\020\001\0226\n2kServerModif"
      "icationItemServerResponse_NoVoteCalled\020\002"
      "\0224\n0kServerModificationItemServerRespons"
      "e_VoteFailed\020\003\"\221\001\n/CMsgGC_GameServer_Ser"
      "verModificationItemExpired\022^\n\021modificati"
      "on_type\030\001 \001(\0162\034.EServerModificationItemT"
      "ype:%kGameServerModificationItem_Hallowe"
      "en\"\232\001\n(CMsgGC_GameServer_ServerModificat"
      "ionItem\022^\n\021modification_type\030\001 \001(\0162\034.ESe"
      "rverModificationItemType:%kGameServerMod"
      "ificationItem_Halloween\022\016\n\006active\030\002 \001(\010\""
      "Y\n\035CMsgGC_Halloween_ReservedItem\022\t\n\001x\030\001 "
      "\003(\002\022\t\n\001y\030\002 \003(\002\022\t\n\001z\030\003 \003(\002\022\027\n\017spawn_meta_"
      "info\030\007 \001(\r\"]\n\032CMsgGC_Halloween_GrantItem"
      "\022\034\n\024recipient_account_id\030\001 \001(\r\022\020\n\010level_"
      "id\030\002 \001(\r\022\017\n\007flagged\030\003 \001(\010\"B\n\"CMsgGC_Hall"
      "oween_GrantItemResponse\022\034\n\024recipient_acc"
      "ount_id\030\001 \001(\r\"\036\n\034CMsgGC_Halloween_ItemCl"
      "aimed\"M\n\"CMsgGC_PickupItemEligibility_Qu"
      "ery\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013seconds_ago\030\002"
      " \001(\r\"h\n*CMsgGC_PickupItemEligibility_Que"
      "ryResponse\022\022\n\naccount_id\030\001 \001(\r\022\024\n\014was_el"
      "igible\030\002 \001(\010\022\020\n\010level_id\030\003 \001(\r\"\212\002\n\020CSOTF"
      "PartyMember\022\023\n\013owns_ticket\030\002 \001(\010\022\032\n\022comp"
      "leted_missions\030\003 \001(\r\022\023\n\013badge_level\030\004 \001("
      "\r\022\025\n\rsquad_surplus\030\005 \001(\010\022\030\n\tis_banned\030\010 "
      "\001(\010:\005false\022\032\n\022competitive_access\030\t \001(\010\022\023"
      "\n\013ladder_rank\030\014 \001(\r\022\036\n\017is_low_priority\030\r"
      " \001(\010:\005false\022\022\n\nexperience\030\016 \001(\r\022\032\n\013skill"
      "rating\030\017 \001(\r:\00510000\"\337\002\n\027CMsgMatchSearchC"
      "riteria\022E\n\020matchmaking_mode\030\007 \001(\0162\023.TF_M"
      "atchmakingMode:\026TF_Matchmaking_INVALID\022\024"
      "\n\014late_join_ok\030\005 \001(\010\022 \n\025custom_ping_tole"
      "rance\030\r \001(\r:\0010\022\027\n\017mvm_mannup_tour\030\n \001(\t\022"
      "\024\n\014mvm_missions\030\t \003(\t\022 \n\030play_for_braggi"
      "ng_rights\030\006 \001(\010\022\033\n\023quickplay_game_type\030\010"
      " \001(\r\022\030\n\020ladder_game_type\030\013 \001(\r\022=\n\017casual"
      "_criteria\030\014 \001(\0132$.CMsgCasualMatchmakingS"
      "earchCriteria\"A\n#CMsgCasualMatchmakingSe"
      "archCriteria\022\032\n\022selected_maps_bits\030\003 \003(\007"
      "\"\355\001\n\027CMsgCreateOrUpdateParty\0221\n\017search_c"
      "riteria\030\001 \001(\0132\030.CMsgMatchSearchCriteria\022"
      "\026\n\016steam_lobby_id\030\003 \001(\006\022\025\n\rsquad_surplus"
      "\030\004 \001(\010\022R\n\013wizard_step\030\005 \001(\0162\032.TF_Matchma"
      "king_WizardStep:!TF_Matchmaking_WizardSt"
      "ep_INVALID\022\034\n\016client_version\030\006 \001(\r:\0041225"
      "\"\223\001\n\034CMsgCreateOrUpdatePartyReply\022\016\n\006res"
      "ult\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\022R\n\013wizard_ste"
      "p\030\003 \001(\0162\032.TF_Matchmaking_WizardStep:!TF_"
      "Matchmaking_WizardStep_INVALID\"\252\007\n\nCSOTF"
      "Party\022\026\n\010party_id\030\001 \001(\004B\004\200\246\035\001\022\021\n\tleader_"
      "id\030\002 \001(\006\022\022\n\nmember_ids\030\003 \003(\006\022\"\n\007members\030"
      "\r \003(\0132\021.CSOTFPartyMember\022\027\n\017pending_invi"
      "tes\030\005 \003(\006\022\033\n\023associated_lobby_id\030# \001(\004\022$"
      "\n\005state\030\006 \001(\0162\021.CSOTFParty.State:\002UI\022R\n\013"
      "wizard_step\030\035 \001(\0162\032.TF_Matchmaking_Wizar"
      "dStep:!TF_Matchmaking_WizardStep_INVALID"
      "\022 \n\030started_matchmaking_time\030\007 \001(\r\022\"\n\032se"
      "arching_players_by_group\030\n \003(\r\022\026\n\016steam_"
      "lobby_id\030\033 \001(\006\022E\n\020matchmaking_mode\030\036 \001(\016"
      "2\023.TF_MatchmakingMode:\026TF_Matchmaking_IN"
      "VALID\022\033\n\023search_late_join_ok\030\027 \001(\010\022\036\n\026se"
      "arch_mvm_mannup_tour\030  \001(\t\022\033\n\023search_mvm"
      "_missions\030\037 \003(\t\022\'\n\037search_play_for_bragg"
      "ing_rights\030\032 \001(\010\022\"\n\032search_quickplay_gam"
      "e_type\030\034 \001(\r\022\037\n\027search_ladder_game_type\030"
      "! \001(\r\022;\n\rsearch_casual\030\" \001(\0132$.CMsgCasua"
      "lMatchmakingSearchCriteria\022\035\n\025custom_pin"
      "g_tolerance\030$ \001(\r\022\034\n\024matchmaking_ban_tim"
      "e\030\022 \001(\r\022\"\n\032matchmaking_ban_account_id\030\023 "
      "\001(\r\022%\n\035matchmaking_low_priority_time\030\024 \001"
      "(\r\"W\n\005State\022\006\n\002UI\020\000\022\021\n\rFINDING_MATCH\020\001\022\014"
      "\n\010IN_MATCH\020\002\022%\n!AWAITING_RESERVATION_CON"
      "FIRMATION\020\003\"\301\001\n\020CSOTFPartyInvite\022\026\n\010grou"
      "p_id\030\001 \001(\004B\004\200\246\035\001\022\021\n\tsender_id\030\002 \001(\006\022\023\n\013s"
      "ender_name\030\003 \001(\t\022.\n\007members\030\004 \003(\0132\035.CSOT"
      "FPartyInvite.PartyMember\032=\n\013PartyMember\022"
      "\014\n\004name\030\001 \001(\t\022\020\n\010steam_id\030\002 \001(\006\022\016\n\006avata"
      "r\030\003 \001(\r\"\300\003\n\016CTFLobbyMember\022\020\n\002id\030\001 \001(\006B\004"
      "\200\246\035\001\022/\n\004team\030\003 \001(\0162\013.TF_GC_TEAM:\024TF_GC_T"
      "EAM_DEFENDERS\022<\n\rconnect_state\030\r \001(\0162\034.C"
      "TFLobbyMember.ConnectState:\007INVALID\022\014\n\004n"
      "ame\030\006 \001(\t\022E\n\013ready_state\030\013 \001(\0162\022.TFLobby"
      "ReadyState:\034TFLobbyReadyState_UNDECLARED"
      "\022\020\n\010party_id\030\014 \001(\004\022\025\n\rsquad_surplus\030\016 \001("
      "\010\022\023\n\013badge_level\030\017 \001(\r\022\032\n\013skillrating\030\020 "
      "\001(\r:\00510000\022\031\n\021last_connect_time\030\021 \001(\r\"c\n"
      "\014ConnectState\022\013\n\007INVALID\020\000\022\027\n\023RESERVATIO"
      "N_PENDING\020\001\022\014\n\010RESERVED\020\002\022\r\n\tCONNECTED\020\003"
      "\022\020\n\014DISCONNECTED\020\005\"=\n\031CLobbyPendingPlaye"
      "rReport\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004date\030\002 \001("
      "\007\"\340\010\n\024CSOTFGameServerLobby\022\026\n\010lobby_id\030\001"
      " \001(\004B\004\200\246\035\001\022 \n\007members\030\002 \003(\0132\017.CTFLobbyMe"
      "mber\022\021\n\tleader_id\030\013 \001(\006\022\024\n\tserver_id\030\006 \001"
      "(\006:\0010\022\027\n\017pending_invites\030\n \003(\006\0223\n\005state\030"
      "\004 \001(\0162\033.CSOTFGameServerLobby.State:\007UNKN"
      "OWN\022\017\n\007connect\030\005 \001(\t\022<\n\nlobby_type\030\014 \001(\016"
      "2\037.CSOTFGameServerLobby.LobbyType:\007INVAL"
      "ID\022\024\n\014allow_cheats\030\r \001(\010\022\021\n\tgame_name\030\020 "
      "\001(\t\022\030\n\rserver_region\030\025 \001(\r:\0010\022@\n\ngame_st"
      "ate\030\026 \001(\0162\020.TF_GC_GameState:\032TF_GC_GAMES"
      "TATE_STATE_INIT\022\026\n\016num_spectators\030\027 \001(\r\022"
      "\036\n\026readyup_remaining_time\030\032 \001(\002\022\036\n\020allow"
      "_spectating\030\037 \001(\010:\004true\022\024\n\014average_rank\030"
      "  \001(\r\022\032\n\022load_game_lobby_id\030! \001(\006\022\035\n\025loa"
      "d_game_save_number\030\" \001(\r\022\030\n\020mannup_tour_"
      "name\030* \001(\t\022\020\n\010map_name\030& \001(\t\022\024\n\014mission_"
      "name\030\' \001(\t\022\023\n\013match_group\030) \001(\r\022\023\n\010match"
      "_id\030\036 \001(\004:\0010\022\023\n\013replay_salt\030# \001(\007\022\023\n\013for"
      "med_time\030$ \001(\r\022\r\n\005flags\030+ \001(\r\022\032\n\022late_jo"
      "in_eligible\030, \001(\010\022\030\n\020fixed_match_size\030- "
      "\001(\r\022:\n\014is_war_match\030. \001(\0162\036.CSOTFGameSer"
      "verLobby.WarMatch:\004NOPE\022\032\n\022next_maps_for"
      "_vote\030/ \003(\r\022\030\n\020lobby_mm_version\0300 \001(\r\".\n"
      "\005State\022\013\n\007UNKNOWN\020\000\022\017\n\013SERVERSETUP\020\001\022\007\n\003"
      "RUN\020\002\"X\n\tLobbyType\022\024\n\007INVALID\020\377\377\377\377\377\377\377\377\377\001"
      "\022\t\n\005MATCH\020\000\022\014\n\010PRACTICE\020\001\022\016\n\nTOURNAMENT\020"
      "\002\022\014\n\010TUTORIAL\020\003\"C\n\010WarMatch\022\010\n\004NOPE\020\000\022\025\n"
      "\021INVADERS_ARE_PYRO\020\001\022\026\n\022INVADERS_ARE_HEA"
      "VY\020\002\"S\n\023CMsgExitMatchmaking\022\030\n\020explicit_"
      "abandon\030\001 \001(\010\022\020\n\010party_id\030\002 \001(\004\022\020\n\010lobby"
      "_id\030\003 \001(\004\"Y\n\020CMsgAcceptInvite\022\020\n\010party_i"
      "d\030\001 \001(\004\022\025\n\rsteamid_lobby\030\002 \001(\006\022\034\n\016client"
      "_version\030\003 \001(\r:\0041225\"/\n\030CMsgAcceptInvite"
      "Response\022\023\n\013result_code\030\001 \001(\005\"N\n\013CMsgRea"
      "dyUp\022\?\n\005state\030\001 \001(\0162\022.TFLobbyReadyState:"
      "\034TFLobbyReadyState_UNDECLARED\"#\n!CMsgMat"
      "chmakingSearchCountRequest\"H\n\"CMsgMatchm"
      "akingSearchCountResponse\022\"\n\032searching_pl"
      "ayers_by_group\030\001 \003(\r\" \n\036CMsgKickedFromMa"
      "tchmakingQueue\"\231\001\n\025CMsgTFJoinChatChannel"
      "\022\024\n\014persona_name\030\001 \001(\t\022\024\n\014channel_name\030\002"
      " \001(\t\022\020\n\010password\030\003 \001(\t\022B\n\014channel_type\030\004"
      " \001(\0162\022.ChatChannelType_t:\030ChatChannelTyp"
      "e_Regional\".\n\026CMsgTFLeaveChatChannel\022\024\n\014"
      "channel_name\030\001 \001(\t\"\342\001\n\035CMsgTFJoinChatCha"
      "nnelResponse\022\020\n\010response\030\001 \001(\r\022\024\n\014channe"
      "l_name\030\002 \001(\t\022\022\n\nchannel_id\030\003 \001(\006\022\023\n\013max_"
      "members\030\004 \001(\r\022:\n\007members\030\005 \003(\0132).CMsgTFJ"
      "oinChatChannelResponse.ChatMember\0324\n\nCha"
      "tMember\022\020\n\010steam_id\030\001 \001(\006\022\024\n\014persona_nam"
      "e\030\002 \001(\t\"Z\n\034CMsgTFOtherJoinedChatChannel\022"
      "\022\n\nchannel_id\030\001 \001(\006\022\024\n\014persona_name\030\002 \001("
      "\t\022\020\n\010steam_id\030\003 \001(\006\"B\n\032CMsgTFOtherLeftCh"
      "atChannel\022\022\n\nchannel_id\030\001 \001(\006\022\020\n\010steam_i"
      "d\030\002 \001(\006\"!\n\037CMsgTFRequestDefaultChatChann"
      "el\"S\n\'CMsgTFRequestDefaultChatChannelRes"
      "ponse\022\024\n\014channel_name\030\001 \001(\t\022\022\n\nchannel_i"
      "d\030\002 \001(\006\"\036\n\034CMsgTFRequestChatChannelList\""
      "\351\001\n$CMsgTFRequestChatChannelListResponse"
      "\022C\n\010channels\030\001 \003(\01321.CMsgTFRequestChatCh"
      "annelListResponse.ChatChannel\032|\n\013ChatCha"
      "nnel\022\024\n\014channel_name\030\001 \001(\t\022\023\n\013num_member"
      "s\030\002 \001(\r\022B\n\014channel_type\030\003 \001(\0162\022.ChatChan"
      "nelType_t:\030ChatChannelType_Regional\"\356\007\n\037"
      "CMsgGameServerMatchmakingStatus\022\034\n\016serve"
      "r_version\030\020 \001(\r:\0041225\022R\n\021matchmaking_sta"
      "te\030\001 \001(\0162\027.ServerMatchmakingState:\036Serve"
      "rMatchmakingState_INVALID\022E\n\020matchmaking"
      "_mode\030\002 \001(\0162\023.TF_MatchmakingMode:\026TF_Mat"
      "chmaking_INVALID\022\013\n\003map\030\003 \001(\t\022\014\n\004tags\030\004 "
      "\001(\t\022\021\n\tbot_count\030\005 \001(\r\022\026\n\016num_spectators"
      "\030\006 \001(\r\022\023\n\013max_players\030\007 \001(\r\022\022\n\nslots_fre"
      "e\030\010 \001(\r\022\025\n\rserver_region\030\t \001(\r\022\026\n\016server"
      "_loadavg\030\n \001(\002\022\026\n\016server_trusted\030\013 \001(\010\022\030"
      "\n\020server_dedicated\030\014 \001(\010\022\016\n\006strict\030\021 \001(\r"
      "\0228\n\007players\030\r \003(\0132\'.CMsgGameServerMatchm"
      "akingStatus.Player\022@\n\ngame_state\030\016 \001(\0162\020"
      ".TF_GC_GameState:\032TF_GC_GAMESTATE_STATE_"
      "INIT\022;\n\005event\030\017 \001(\0162&.CMsgGameServerMatc"
      "hmakingStatus.Event:\004None\022\020\n\010mvm_wave\030\022 "
      "\001(\r\022\034\n\024mvm_credits_acquired\030\023 \001(\r\022\033\n\023mvm"
      "_credits_dropped\030\024 \001(\r\022\027\n\013match_group\030\027 "
      "\001(\021:\002-1\022\030\n\020lobby_mm_version\030\030 \001(\r\032o\n\006Pla"
      "yer\022\020\n\010steam_id\030\001 \001(\006\022S\n\rconnect_state\030\002"
      " \001(\01623.CMsgGameServerMatchmakingStatus.P"
      "layerConnectState:\007INVALID\">\n\022PlayerConn"
      "ectState\022\013\n\007INVALID\020\000\022\r\n\tCONNECTED\020\001\022\014\n\010"
      "RESERVED\020\002\"H\n\005Event\022\010\n\004None\020\000\022\016\n\nMvMVict"
      "ory\020\001\022\r\n\tMvMDefeat\020\002\022\026\n\022AcknowledgePlaye"
      "rs\020\003\"\206\005\n\027CMsgMatchmakingProgress\022\031\n\021avg_"
      "wait_time_new\030\004 \001(\r\022\037\n\027avg_wait_time_joi"
      "n_late\030\005 \001(\r\022\026\n\016your_wait_time\030\006 \001(\r\022,\n$"
      "matching_worldwide_searching_players\030\010 \001"
      "(\r\022+\n#matching_near_you_searching_player"
      "s\030\t \001(\r\022)\n!total_worldwide_searching_pla"
      "yers\030\r \001(\r\022(\n total_near_you_searching_p"
      "layers\030\016 \001(\r\022)\n!matching_worldwide_activ"
      "e_players\030\017 \001(\r\022(\n matching_near_you_act"
      "ive_players\030\020 \001(\r\022&\n\036total_worldwide_act"
      "ive_players\030\021 \001(\r\022%\n\035total_near_you_acti"
      "ve_players\030\022 \001(\r\022,\n$matching_worldwide_e"
      "mpty_gameservers\030\023 \001(\r\022+\n#matching_near_"
      "you_empty_gameservers\030\024 \001(\r\022)\n!total_wor"
      "ldwide_empty_gameservers\030\025 \001(\r\022(\n total_"
      "near_you_empty_gameservers\030\026 \001(\r\022\023\n\013urge"
      "ncy_pct\030\001 \001(\r\"\303\004\n\022CMsgMvMVictoryInfo\022+\n\007"
      "players\030\001 \003(\0132\032.CMsgMvMVictoryInfo.Playe"
      "r\022\021\n\ttour_name\030\002 \001(\t\022\024\n\014mission_name\030\003 \001"
      "(\t\032\201\001\n\004Item\022>\n\014grant_reason\030\001 \001(\0162\037.CMsg"
      "MvMVictoryInfo.GrantReason:\007INVALID\022\021\n\ti"
      "tem_data\030\002 \001(\014\022&\n\036squad_surplus_claimer_"
      "steam_id\030\003 \001(\006\032\362\001\n\006Player\022\020\n\010steam_id\030\001 "
      "\001(\006\022\025\n\rbadge_granted\030\003 \001(\010\022\036\n\026badge_prog"
      "ress_updated\030\004 \001(\010\022\025\n\rbadge_leveled\030\005 \001("
      "\010\022\023\n\013badge_level\030\006 \001(\r\022\033\n\023badge_progress"
      "_bits\030\007 \001(\r\022\'\n\005items\030\010 \003(\0132\030.CMsgMvMVict"
      "oryInfo.Item\022\027\n\017voucher_missing\030\t \001(\010\022\024\n"
      "\014badge_points\030\n \001(\r\"^\n\013GrantReason\022\013\n\007IN"
      "VALID\020\000\022\021\n\rBADGE_LEVELED\020\001\022\021\n\rSQUAD_SURP"
      "LUS\020\002\022\013\n\007MANN_UP\020\003\022\017\n\013HELP_A_NOOB\020\004\"a\n\025C"
      "GCMsgTFHelloResponse\022\025\n\rversion_check\030\001 "
      "\001(\r\022\030\n\020version_checksum\030\002 \003(\004\022\027\n\017version"
      "_verbose\030\003 \001(\r\"\221\001\n\014CGCMsgTFSync\022\030\n\020versi"
      "on_checksum\030\001 \001(\014\022\025\n\rversion_check\030\002 \001(\r"
      "\022\030\n\020version_check_ex\030\003 \001(\r\022\031\n\021version_ch"
      "eck_ex2\030\004 \001(\r\022\033\n\023version_checksum_ex\030\005 \001"
      "(\014\"^\n\016CGCMsgTFSyncEx\022\030\n\020version_checksum"
      "\030\001 \001(\t\022\033\n\023version_checksum_ex\030\002 \001(\014\022\025\n\rv"
      "ersion_check\030\003 \001(\r\"\340\001\n\016CMsgMvMVictory\022\034\n"
      "\024legacy_mission_index\030\001 \001(\r\022\030\n\020tour_name"
      "_mannup\030\005 \001(\t\022\024\n\014mission_name\030\006 \001(\t\022\'\n\007p"
      "layers\030\002 \003(\0132\026.CMsgMvMVictory.Player\022\020\n\010"
      "lobby_id\030\003 \001(\004\022\022\n\nevent_time\030\004 \001(\007\0321\n\006Pl"
      "ayer\022\020\n\010steam_id\030\001 \001(\006\022\025\n\rsquad_surplus\030"
      "\002 \001(\010\"\033\n\031CMsgMvMMannUpVictoryReply\"w\n\032CM"
      "sgGameServerKickingLobby\022\031\n\021connected_pl"
      "ayers\030\001 \003(\006\022\032\n\014create_party\030\002 \001(\010:\004true\022"
      "\020\n\010lobby_id\030\003 \001(\004\022\020\n\010match_id\030\004 \001(\004\"$\n\"C"
      "MsgGameServerKickingLobbyResponse\"6\n\"CMs"
      "gLeaveGameAndPrepareToJoinParty\022\020\n\010party"
      "_id\030\001 \001(\006\"\322\001\n\023CMsgPlayerLeftMatch\022\020\n\010ste"
      "am_id\030\001 \001(\006\022I\n\014leave_reason\030\002 \001(\0162\023.TFMa"
      "tchLeaveReason:\036TFMatchLeaveReason_UNSPE"
      "CIFIED\022\023\n\013was_abandon\030\003 \001(\010\022\020\n\010lobby_id\030"
      "\004 \001(\004\022\020\n\010match_id\030\005 \001(\004\022%\n\014xp_breakdown\030"
      "\006 \003(\0132\017.CMsgTFXPSource\"\035\n\033CMsgPlayerLeft"
      "MatchResponse\"]\n%CMsgPlayerVoteKickedAft"
      "erLeavingMatch\022\020\n\010steam_id\030\001 \001(\006\022\020\n\010lobb"
      "y_id\030\002 \001(\006\022\020\n\010match_id\030\003 \001(\006\"/\n-CMsgPlay"
      "erVoteKickedAfterLeavingMatchResponse\"\264\001"
      "\n\035CMsgHalloween_ServerBossEvent\022\025\n\revent"
      "_counter\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\022\021\n\tbos"
      "s_type\030\003 \001(\r\022\022\n\nboss_level\030\004 \001(\r\022\022\n\neven"
      "t_type\030\005 \001(\r\022\030\n\020players_involved\030\006 \001(\r\022\024"
      "\n\014elapsed_time\030\007 \001(\002\"\225\005\n\032CMsgHalloween_M"
      "erasmus2012\022\025\n\revent_counter\030\001 \001(\r\022\026\n\016ti"
      "me_submitted\030\002 \001(\007\022\027\n\017is_valve_server\030\003 "
      "\001(\010\022\022\n\nboss_level\030\004 \001(\r\022\026\n\016spawned_healt"
      "h\030\005 \001(\r\022\030\n\020remaining_health\030\006 \001(\r\022\021\n\tlif"
      "e_time\030\007 \001(\r\022\022\n\nbomb_kills\030\010 \001(\r\022\023\n\013staf"
      "f_kills\030\t \001(\r\022\021\n\tpvp_kills\030\n \001(\r\022\026\n\016prop"
      "hunt_time1\030\013 \001(\r\022\026\n\016prophunt_time2\030\014 \001(\r"
      "\022\021\n\tdmg_scout\030\r \001(\r\022\022\n\ndmg_sniper\030\016 \001(\r\022"
      "\023\n\013dmg_soldier\030\017 \001(\r\022\020\n\010dmg_demo\030\020 \001(\r\022\021"
      "\n\tdmg_medic\030\021 \001(\r\022\021\n\tdmg_heavy\030\022 \001(\r\022\020\n\010"
      "dmg_pyro\030\023 \001(\r\022\017\n\007dmg_spy\030\024 \001(\r\022\024\n\014dmg_e"
      "ngineer\030\025 \001(\r\022\023\n\013scout_count\030\026 \001(\r\022\024\n\014sn"
      "iper_count\030\027 \001(\r\022\025\n\rsolider_count\030\030 \001(\r\022"
      "\022\n\ndemo_count\030\031 \001(\r\022\023\n\013medic_count\030\032 \001(\r"
      "\022\023\n\013heavy_count\030\033 \001(\r\022\022\n\npyro_count\030\034 \001("
      "\r\022\021\n\tspy_count\030\035 \001(\r\022\026\n\016engineer_count\030\036"
      " \001(\r\"\231\001\n$CMsgUpdateHalloweenMerasmusLoot"
      "Level\022=\n\007players\030\001 \003(\0132,.CMsgUpdateHallo"
      "weenMerasmusLootLevel.Player\022\026\n\016merasmus"
      "_level\030\002 \001(\r\032\032\n\006Player\022\020\n\010steam_id\030\001 \001(\006"
      "\"\"\n\021CAttribute_String\022\r\n\005value\030\001 \001(\t\"\255\001\n"
      "!CAttribute_DynamicRecipeComponent\022\021\n\tde"
      "f_index\030\001 \001(\r\022\024\n\014item_quality\030\002 \001(\r\022\027\n\017c"
      "omponent_flags\030\003 \001(\r\022\031\n\021attributes_strin"
      "g\030\004 \001(\t\022\024\n\014num_required\030\005 \001(\r\022\025\n\rnum_ful"
      "filled\030\006 \001(\r\"\240\002\nACAttribute_DynamicRecip"
      "eComponent_COMPAT_NEVER_SERIALIZE_THIS_O"
      "UT\022\021\n\tdef_index\030\001 \001(\r\022\020\n\010item_def\030\002 \001(\r\022"
      "\024\n\014item_quality\030\003 \001(\r\022\027\n\017component_flags"
      "\030\004 \001(\r\022\022\n\nitem_flags\030\005 \001(\r\022\031\n\021attributes"
      "_string\030\006 \001(\t\022\024\n\014num_required\030\007 \001(\r\022\022\n\ni"
      "tem_count\030\010 \001(\r\022\025\n\rnum_fulfilled\030\t \001(\r\022\027"
      "\n\017items_fulfilled\030\n \001(\r\"+\n\033CAttribute_It"
      "emSlotCriteria\022\014\n\004tags\030\001 \001(\t\"^\n\030CMsgSetI"
      "temSlotAttribute\022\017\n\007item_id\030\001 \001(\004\022\035\n\025slo"
      "t_item_original_id\030\002 \001(\004\022\022\n\nslot_index\030\003"
      " \001(\r\"h\n\nCSOWarData\022\030\n\naccount_id\030\001 \001(\rB\004"
      "\200\246\035\001\022\024\n\006war_id\030\002 \001(\rB\004\200\246\035\001\022\023\n\013affiliatio"
      "n\030\003 \001(\r\022\025\n\rpoints_scored\030\004 \001(\r\"P\n\035CGCMsg"
      "GC_War_IndividualUpdate\022\020\n\010steam_id\030\001 \001("
      "\006\022\016\n\006war_id\030\002 \001(\r\022\r\n\005score\030\003 \001(\r\";\n\024CGCM"
      "sgGC_War_JoinWar\022\023\n\013affiliation\030\001 \001(\r\022\016\n"
      "\006war_id\030\002 \001(\r\"1\n\037CGCMsgGC_War_RequestGlo"
      "balStats\022\016\n\006war_id\030\001 \001(\r\"\236\001\n CGCMsgGC_Wa"
      "r_GlobalStatsResponse\022@\n\013side_scores\030\001 \003"
      "(\0132+.CGCMsgGC_War_GlobalStatsResponse.Si"
      "deScore\022\016\n\006war_id\030\002 \001(\r\032(\n\tSideScore\022\014\n\004"
      "side\030\001 \001(\r\022\r\n\005score\030\002 \001(\004\"u\n/CGCMsgGC_Pl"
      "ayerDuckLeaderboard_IndividualUpdate\022\r\n\005"
      "score\030\002 \001(\r\022\014\n\004type\030\003 \001(\r\022\020\n\010score_id\030\004 "
      "\001(\014\022\023\n\013score_check\030\005 \001(\r\"\223\001\n\035CAttribute_"
      "WorldItemPlacement\022\030\n\020original_item_id\030\001"
      " \001(\004\022\r\n\005pos_x\030\002 \001(\002\022\r\n\005pos_y\030\003 \001(\002\022\r\n\005po"
      "s_z\030\004 \001(\002\022\r\n\005ang_x\030\005 \001(\002\022\r\n\005ang_y\030\006 \001(\002\022"
      "\r\n\005ang_z\030\007 \001(\002\"\305\001\n CGCMsg_WorldItemPlace"
      "ment_Update\022\030\n\020original_item_id\030\001 \001(\004\022\r\n"
      "\005pos_x\030\002 \001(\002\022\r\n\005pos_y\030\003 \001(\002\022\r\n\005pos_z\030\004 \001"
      "(\002\022\r\n\005ang_x\030\005 \001(\002\022\r\n\005ang_y\030\006 \001(\002\022\r\n\005ang_"
      "z\030\007 \001(\002\022\030\n\020force_remove_all\030\010 \001(\010\022\023\n\013att"
      "rib_name\030\t \001(\t\"F\n\021CMsgAcknowledgeXP\022\023\n\013m"
      "atch_group\030\001 \001(\005\022\034\n\024predicted_experience"
      "\030\002 \001(\r\"\217\003\n\016CMsgTFXPSource\022>\n\004type\030\001 \001(\0162"
      "\034.CMsgTFXPSource.XPSourceType:\014SOURCE_SC"
      "OREB\004\200\246\035\001\022\016\n\006amount\030\002 \001(\005\022\023\n\013match_group"
      "\030\003 \001(\005\022\030\n\naccount_id\030\004 \001(\rB\004\200\246\035\001\022\026\n\010matc"
      "h_id\030\005 \001(\004B\004\200\246\035\001\"\345\001\n\014XPSourceType\022\020\n\014SOU"
      "RCE_SCORE\020\000\022\032\n\026SOURCE_OBJECTIVE_BONUS\020\001\022"
      "\032\n\026SOURCE_COMPLETED_MATCH\020\002\022\036\n\032SOURCE_CO"
      "MPETITIVE_ABANDON\020\003\022\032\n\026SOURCE_COMPETITIV"
      "E_WIN\020\004\022\033\n\027SOURCE_COMPETITIVE_LOSS\020\005\022\034\n\030"
      "SOURCE_AUTOBALANCE_BONUS\020\006\022\024\n\020NUM_SOURCE"
      "_TYPES\020\007\";\n\027CMsgTFXPSourceBreakdown\022 \n\007s"
      "ources\030\001 \003(\0132\017.CMsgTFXPSource\"<\n\020CMsgTFC"
      "lientInit\022\026\n\016client_version\030\001 \001(\r\022\020\n\010lan"
      "guage\030\002 \001(\005\"\310\003\n\022CMsgGCNotification\022\035\n\017no"
      "tification_id\030\001 \001(\004B\004\200\246\035\001\022\022\n\naccount_id\030"
      "\002 \001(\r\022\027\n\017expiration_time\030\003 \001(\007\022N\n\004type\030\004"
      " \001(\0162$.CMsgGCNotification.NotificationTy"
      "pe:\032NOTIFICATION_CUSTOM_STRING\022\033\n\023notifi"
      "cation_string\030\005 \001(\t\"\370\001\n\020NotificationType"
      "\022\'\n#NOTIFICATION_REPORTED_PLAYER_BANNED\020"
      "\000\022\036\n\032NOTIFICATION_CUSTOM_STRING\020\001\0220\n,NOT"
      "IFICATION_MM_BAN_DUE_TO_EXCESSIVE_REPORT"
      "S\020\002\022+\n\'NOTIFICATION_REPORTED_PLAYER_WAS_"
      "BANNED\020\003\022 \n\034NOTIFICATION_SUPPORT_MESSAGE"
      "\020\004\022\032\n\026NOTIFICATION_NUM_TYPES\020\005\"E\n\027CMsgGC"
      "NotificationQueue\022*\n\rnotifications\030\001 \003(\013"
      "2\023.CMsgGCNotification\"J\n\033CMsgNotificatio"
      "nAcknowledge\022\022\n\naccount_id\030\001 \001(\r\022\027\n\017noti"
      "fication_id\030\002 \001(\004\"\"\n CMsgNotificationAck"
      "nowledgeReply\"\372\007\n\023CMsgGC_Match_Result\022\026\n"
      "\010match_id\030\001 \001(\004B\004\200\246\035\001\022\023\n\013match_group\030\002 \001"
      "(\005\022<\n\006status\030\003 \001(\0162\033.CMsgGC_Match_Result"
      ".Status:\017MATCH_SUCCEEDED\022\020\n\010duration\030\004 \001"
      "(\r\022\021\n\tred_score\030\005 \001(\r\022\022\n\nblue_score\030\006 \001("
      "\r\022\024\n\014winning_team\030\007 \001(\r\022\021\n\tmap_index\030\010 \001"
      "(\r\022\024\n\tgame_type\030\t \001(\r:\0010\022,\n\007players\030\n \003("
      "\0132\033.CMsgGC_Match_Result.Player\022\022\n\nwin_re"
      "ason\030\r \001(\r\022\r\n\005flags\030\016 \001(\r\022\014\n\004bots\030\020 \001(\r\032"
      "\347\003\n\006Player\022\020\n\010steam_id\030\001 \001(\006\022\020\n\010party_id"
      "\030\002 \001(\004\022\014\n\004team\030\003 \001(\r\022\r\n\005score\030\004 \001(\r\022\014\n\004p"
      "ing\030\005 \001(\r\022\r\n\005flags\030\006 \001(\r\022\014\n\004rank\030\t \001(\r\022\026"
      "\n\016classes_played\030\n \001(\r\022\r\n\005kills\030\013 \001(\r\022\016\n"
      "\006deaths\030\014 \001(\r\022\016\n\006damage\030\r \001(\r\022\017\n\007healing"
      "\030\016 \001(\r\022\017\n\007support\030\017 \001(\r\022\023\n\013score_medal\030\020"
      " \001(\r\022\023\n\013kills_medal\030\021 \001(\r\022\024\n\014damage_meda"
      "l\030\022 \001(\r\022\025\n\rhealing_medal\030\023 \001(\r\022\025\n\rsuppor"
      "t_medal\030\024 \001(\r\022%\n\014xp_breakdown\030\025 \003(\0132\017.CM"
      "sgTFXPSource\022\022\n\nleave_time\030\026 \001(\r\022I\n\014leav"
      "e_reason\030\027 \001(\0162\023.TFMatchLeaveReason:\036TFM"
      "atchLeaveReason_UNSPECIFIED\022\024\n\014connect_t"
      "ime\030\030 \001(\r\"\266\001\n\006Status\022\023\n\017MATCH_SUCCEEDED\020"
      "\000\022\023\n\017MATCH_FAILED_GC\020\001\022\030\n\024MATCH_FAILED_T"
      "RUSTED\020\002\022\030\n\024MATCH_FAILED_ABANDON\020\003\022\030\n\024MA"
      "TCH_FAILED_UNKNOWN\020\005\022\030\n\024MATCH_FAILED_TIM"
      "EOUT\020\006\022\032\n\026MATCH_FINISHED_ABANDON\020\007\"\035\n\033CM"
      "sgGC_Match_ResultResponse\";\n\031CEconItemPr"
      "eviewDataBlock\022\036\n\010econitem\030\001 \001(\0132\014.CSOEc"
      "onItem\"q\n+CMsgGC_Client2GCEconPreviewDat"
      "aBlockRequest\022\017\n\007param_s\030\001 \001(\004\022\017\n\007param_"
      "a\030\002 \001(\004\022\017\n\007param_d\030\003 \001(\004\022\017\n\007param_m\030\004 \001("
      "\004\"\\\n,CMsgGC_Client2GCEconPreviewDataBloc"
      "kResponse\022,\n\010iteminfo\030\001 \001(\0132\032.CEconItemP"
      "reviewDataBlock\"\372\004\n\026CSOTFLadderPlayerSta"
      "ts\022\030\n\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\031\n\013match_gr"
      "oup\030\002 \001(\005B\004\200\246\035\001\022\027\n\tseason_id\030\003 \001(\rB\004\200\246\035\001"
      "\022\014\n\004rank\030\006 \001(\r\022\024\n\014highest_rank\030\007 \001(\r\022\022\n\n"
      "experience\030\010 \001(\r\022\034\n\024last_ackd_experience"
      "\030  \001(\r\022\r\n\005games\030\t \001(\r\022\r\n\005score\030\n \001(\r\022\r\n\005"
      "kills\030\013 \001(\r\022\016\n\006deaths\030\014 \001(\r\022\016\n\006damage\030\r "
      "\001(\r\022\017\n\007healing\030\016 \001(\r\022\017\n\007support\030\017 \001(\r\022\024\n"
      "\014score_bronze\030\020 \001(\r\022\024\n\014score_silver\030\021 \001("
      "\r\022\022\n\nscore_gold\030\022 \001(\r\022\024\n\014kills_bronze\030\023 "
      "\001(\r\022\024\n\014kills_silver\030\024 \001(\r\022\022\n\nkills_gold\030"
      "\025 \001(\r\022\025\n\rdamage_bronze\030\026 \001(\r\022\025\n\rdamage_s"
      "ilver\030\027 \001(\r\022\023\n\013damage_gold\030\030 \001(\r\022\026\n\016heal"
      "ing_bronze\030\031 \001(\r\022\026\n\016healing_silver\030\032 \001(\r"
      "\022\024\n\014healing_gold\030\033 \001(\r\022\026\n\016support_bronze"
      "\030\034 \001(\r\022\026\n\016support_silver\030\035 \001(\r\022\024\n\014suppor"
      "t_gold\030\036 \001(\r\"\221\001\n\017CSOTFRatingData\022\030\n\nacco"
      "unt_id\030\001 \001(\rB\004\200\246\035\001\022\031\n\013rating_type\030\002 \001(\005B"
      "\004\200\246\035\001\022\026\n\016rating_primary\030\003 \001(\r\022\030\n\020rating_"
      "secondary\030\004 \001(\r\022\027\n\017rating_tertiary\030\005 \001(\r"
      "\"G\n\036CMsgGC_TFVoteKickPlayerRequest\022\022\n\nac"
      "count_id\030\001 \001(\r\022\021\n\ttarget_id\030\002 \001(\004\"7\n$CMs"
      "gGC_VoteKickPlayerRequestResponse\022\017\n\007all"
      "owed\030\001 \001(\010\"$\n\"CMsgGC_DailyCompetitiveSta"
      "tsRollup\"\202\003\n+CMsgGC_DailyCompetitiveStat"
      "sRollup_Response\022N\n\010rankdata\030\001 \003(\0132<.CMs"
      "gGC_DailyCompetitiveStatsRollup_Response"
      ".RankBucketEntry\032\202\002\n\017RankBucketEntry\022\014\n\004"
      "rank\030\001 \001(\r\022\017\n\007records\030\002 \001(\r\022\021\n\tavg_score"
      "\030\003 \001(\r\022\023\n\013stdev_score\030\004 \001(\r\022\021\n\tavg_kills"
      "\030\005 \001(\r\022\023\n\013stdev_kills\030\006 \001(\r\022\022\n\navg_damag"
      "e\030\007 \001(\r\022\024\n\014stdev_damage\030\010 \001(\r\022\023\n\013avg_hea"
      "ling\030\t \001(\r\022\025\n\rstdev_healing\030\n \001(\r\022\023\n\013avg"
      "_support\030\013 \001(\r\022\025\n\rstdev_support\030\014 \001(\r\"\371\001"
      "\n\023CMsgGC_ReportPlayer\022\031\n\021account_id_targ"
      "et\030\001 \001(\r\022=\n\006reason\030\002 \001(\0162\034.CMsgGC_Report"
      "Player.EReason:\017kReason_INVALID\"\207\001\n\007ERea"
      "son\022\023\n\017kReason_INVALID\020\000\022\024\n\020kReason_CHEA"
      "TING\020\001\022\020\n\014kReason_IDLE\020\002\022\026\n\022kReason_HARA"
      "SSMENT\020\003\022\024\n\020kReason_GRIEFING\020\004\022\021\n\rkReaso"
      "n_COUNT\020\005\"\231\004\n\033CSOTFMatchResultPlayerStat"
      "s\022\026\n\010match_id\030\001 \001(\004B\004\200\246\035\001\022\030\n\naccount_id\030"
      "\002 \001(\rB\004\200\246\035\001\022\031\n\013match_group\030\003 \001(\005B\004\200\246\035\001\022\017"
      "\n\007endtime\030\004 \001(\r\022\021\n\tseason_id\030\005 \001(\r\022\016\n\006st"
      "atus\030\006 \001(\r\022\020\n\010party_id\030\007 \001(\r\022\014\n\004team\030\010 \001"
      "(\r\022\r\n\005score\030\t \001(\r\022\014\n\004ping\030\n \001(\r\022\r\n\005flags"
      "\030\013 \001(\r\022\026\n\016display_rating\030\014 \001(\r\022\035\n\025displa"
      "y_rating_change\030\r \001(\005\022\014\n\004rank\030\016 \001(\r\022\026\n\016c"
      "lasses_played\030\017 \001(\r\022\r\n\005kills\030\020 \001(\r\022\016\n\006de"
      "aths\030\021 \001(\r\022\016\n\006damage\030\022 \001(\r\022\017\n\007healing\030\023 "
      "\001(\r\022\017\n\007support\030\024 \001(\r\022\023\n\013score_medal\030\025 \001("
      "\r\022\023\n\013kills_medal\030\026 \001(\r\022\024\n\014damage_medal\030\027"
      " \001(\r\022\025\n\rhealing_medal\030\030 \001(\r\022\025\n\rsupport_m"
      "edal\030\031 \001(\r\022\021\n\tmap_index\030\032 \001(\r\"\036\n\034CMsgGCR"
      "equestMatchMakerStats\"@\n\032CMsgGCDataCente"
      "rPopulation\022\014\n\004name\030\001 \001(\t\022\024\n\014health_rati"
      "o\030\002 \001(\002\"c\n$CMsgGCMatchGroupDataCenterPop"
      "ulation\022;\n\026data_center_population\030\001 \003(\0132"
      "\033.CMsgGCDataCenterPopulation\"\204\001\n\035CMsgGCM"
      "atchMakerStatsResponse\022\021\n\tmap_count\030\001 \003("
      "\r\022P\n!matchgroup_data_center_population\030\002"
      " \003(\0132%.CMsgGCMatchGroupDataCenterPopulat"
      "ion\"\030\n\026CMsgGCMatchHistoryLoad\"\214\002\n\033CMsgGC"
      "DataCenterPing_Update\0228\n\010pingdata\030\001 \003(\0132"
      "&.CMsgGCDataCenterPing_Update.PingEntry\032"
      "i\n\tPingEntry\022\014\n\004name\030\001 \001(\t\022\014\n\004ping\030\002 \001(\r"
      "\022@\n\013ping_status\030\003 \001(\0162#.CMsgGCDataCenter"
      "Ping_Update.Status:\006Normal\"H\n\006Status\022\013\n\007"
      "Invalid\020\000\022\n\n\006Normal\020\001\022\017\n\013Unreachable\020\002\022\024"
      "\n\020FallbackToDCPing\020\003\".\n\032CMsgGC_KickPlaye"
      "rFromLobby\022\020\n\010targetID\030\001 \001(\004\"k\n\023CMsgGCSu"
      "rveyRequest\022B\n\rquestion_type\030\001 \001(\0162\023.Sur"
      "veyQuestionType:\026QUESTION_MATCH_QUALITY\022"
      "\020\n\010match_id\030\002 \001(\004\"~\n\024CMsgGCSurveyRespons"
      "e\022B\n\rquestion_type\030\001 \001(\0162\023.SurveyQuestio"
      "nType:\026QUESTION_MATCH_QUALITY\022\020\n\010match_i"
      "d\030\002 \001(\004\022\020\n\010response\030\003 \001(\005\"`\n\035CMsgGCNewMa"
      "tchForLobbyRequest\022\030\n\020current_match_id\030\001"
      " \001(\004\022\023\n\013next_map_id\030\002 \001(\r\022\020\n\010lobby_id\030\003 "
      "\001(\004\"1\n\036CMsgGCNewMatchForLobbyResponse\022\017\n"
      "\007success\030\001 \001(\010\"\325\001\n#CMsgGCChangeMatchPlay"
      "erTeamsRequest\022\020\n\010match_id\030\001 \001(\004\022\020\n\010lobb"
      "y_id\030\002 \001(\004\022;\n\006member\030\003 \003(\0132+.CMsgGCChang"
      "eMatchPlayerTeamsRequest.Member\032M\n\006Membe"
      "r\022\021\n\tmember_id\030\001 \001(\004\0220\n\010new_team\030\002 \001(\0162\013"
      ".TF_GC_TEAM:\021TF_GC_TEAM_NOTEAM\"7\n$CMsgGC"
      "ChangeMatchPlayerTeamsResponse\022\017\n\007succes"
      "s\030\001 \001(\010*\366*\n\010ETFGCMsg\022\032\n\025k_EMsgGCReportWa"
      "rKill\020\211\'\022\036\n\031k_EMsgGCVoteKickBanPlayer\020\232\'"
      "\022$\n\037k_EMsgGCVoteKickBanPlayerResult\020\233\'\022\""
      "\n\035k_EMsgGCKickPlayer_DEPRECATED\020\234\'\022\'\n\"k_"
      "EMsgGCStartedTraining_DEPRECATED\020\235\'\022.\n)k"
      "_EMsgGCFreeTrial_ChooseMostHelpfulFriend"
      "\020\236\'\022\036\n\031k_EMsgGCRequestTF2Friends\020\237\'\022&\n!k"
      "_EMsgGCRequestTF2FriendsResponse\020\240\'\022&\n!k"
      "_EMsgGCReplay_SubmitContestEntry\020\242\'\022.\n)k"
      "_EMsgGCReplay_SubmitContestEntryResponse"
      "\020\243\'\022\032\n\025k_EMsgGCSaxxy_Awarded\020\245\'\022\'\n\"k_EMs"
      "gGCFreeTrial_ThankedBySomeone\020\244\'\022%\n k_EM"
      "sgGCFreeTrial_ThankedSomeone\020\246\'\022)\n$k_EMs"
      "gGCFreeTrial_ConvertedToPremium\020\247\'\0228\n3k_"
      "EMsgGCMeetThePyroSilliness_BananaCraft_D"
      "EPRECATED\020\250\'\0226\n1k_EMsgGCMVMARG_HighFiveS"
      "uccessResponse_DEPRECATED\020\251\'\022/\n*k_EMsgGC"
      "MVMARG_HighFiveOnClient_DEPRECATED\020\252\'\022\"\n"
      "\035k_EMsgGCCoaching_AddToCoaches\020\320(\022*\n%k_E"
      "MsgGCCoaching_AddToCoachesResponse\020\321(\022\'\n"
      "\"k_EMsgGCCoaching_RemoveFromCoaches\020\322(\022/"
      "\n*k_EMsgGCCoaching_RemoveFromCoachesResp"
      "onse\020\323(\022\037\n\032k_EMsgGCCoaching_FindCoach\020\324("
      "\022\'\n\"k_EMsgGCCoaching_FindCoachResponse\020\325"
      "(\022\036\n\031k_EMsgGCCoaching_AskCoach\020\326(\022&\n!k_E"
      "MsgGCCoaching_AskCoachResponse\020\327(\022#\n\036k_E"
      "MsgGCCoaching_CoachJoinGame\020\330(\022\"\n\035k_EMsg"
      "GCCoaching_CoachJoining\020\331(\022!\n\034k_EMsgGCCo"
      "aching_CoachJoined\020\332(\022&\n!k_EMsgGCCoachin"
      "g_LikeCurrentCoach\020\333(\022(\n#k_EMsgGCCoachin"
      "g_RemoveCurrentCoach\020\334(\022\'\n\"k_EMsgGCCoach"
      "ing_AlreadyRatedCoach\020\335(\022\032\n\025k_EMsgGC_Due"
      "l_Request\020\374*\022\033\n\026k_EMsgGC_Duel_Response\020\375"
      "*\022\032\n\025k_EMsgGC_Duel_Results\020\376*\022\031\n\024k_EMsgG"
      "C_Duel_Status\020\377*\022/\n*k_EMsgGC_Halloween_R"
      "eservedItem_DEPRECATED\020\340+\022,\n\'k_EMsgGC_Ha"
      "lloween_GrantItem_DEPRECATED\020\341+\0224\n/k_EMs"
      "gGC_Halloween_GrantItemResponse_DEPRECAT"
      "ED\020\344+\0226\n1k_EMsgGC_Halloween_Cheat_QueryR"
      "esponse_DEPRECATED\020\345+\022.\n)k_EMsgGC_Hallow"
      "een_ItemClaimed_DEPRECATED\020\346+\022$\n\037k_EMsgG"
      "C_Halloween_ReservedItem\020\347+\022!\n\034k_EMsgGC_"
      "Halloween_GrantItem\020\350+\022)\n$k_EMsgGC_Hallo"
      "ween_GrantItemResponse\020\351+\0228\n3k_EMsgGC_Ha"
      "lloween_Cheat_QueryResponse_DEPRECATED_2"
      "\020\352+\0220\n+k_EMsgGC_Halloween_ItemClaimed_DE"
      "PRECATED_2\020\353+\022\'\n\"k_EMsgGC_Halloween_Serv"
      "erBossEvent\020\354+\022$\n\037k_EMsgGC_Halloween_Mer"
      "asmus2012\020\355+\022/\n*k_EMsgGC_Halloween_Updat"
      "eMerasmusLootLevel\020\356+\022\"\n\035k_EMsgGC_GameSe"
      "rver_LevelInfo\020\304,\022&\n!k_EMsgGC_GameServer"
      "_AuthChallenge\020\305,\022.\n)k_EMsgGC_GameServer"
      "_AuthChallengeResponse\020\306,\022\'\n\"k_EMsgGC_Ga"
      "meServer_CreateIdentity\020\307,\022/\n*k_EMsgGC_G"
      "ameServer_CreateIdentityResponse\020\310,\022\035\n\030k"
      "_EMsgGC_GameServer_List\020\311,\022%\n k_EMsgGC_G"
      "ameServer_ListResponse\020\312,\022#\n\036k_EMsgGC_Ga"
      "meServer_AuthResult\020\313,\022&\n!k_EMsgGC_GameS"
      "erver_ResetIdentity\020\314,\022.\n)k_EMsgGC_GameS"
      "erver_ResetIdentityResponse\020\315,\022.\n)k_EMsg"
      "GC_Client_UseServerModificationItem\020\316,\0227"
      "\n2k_EMsgGC_Client_UseServerModificationI"
      "tem_Response\020\317,\0222\n-k_EMsgGC_GameServer_U"
      "seServerModificationItem\020\320,\022;\n6k_EMsgGC_"
      "GameServer_UseServerModificationItem_Res"
      "ponse\020\321,\0226\n1k_EMsgGC_GameServer_ServerMo"
      "dificationItemExpired\020\322,\022.\n)k_EMsgGC_Gam"
      "eServer_ModificationItemState\020\323,\022\"\n\035k_EM"
      "sgGC_GameServer_AckPolicy\020\324,\022*\n%k_EMsgGC"
      "_GameServer_AckPolicyResponse\020\325,\022\035\n\030k_EM"
      "sgGC_QP_ScoreServers\020\250-\022%\n k_EMsgGC_QP_S"
      "coreServersResponse\020\251-\022\036\n\031k_EMsgGC_QP_Pl"
      "ayerJoining\020\252-\0224\n/k_EMsgGC_PickupItemEli"
      "gibility_Query_DEPRECATED\020\360.\0226\n1k_EMsgGC"
      "_PickupItemEligibility_Query_DEPRECATED_"
      "2\020\361.\0224\n/k_EMsgGC_IncrementKillCountAttri"
      "bute_DEPRECATED\020\324/\0223\n.k_EMsgGC_Increment"
      "KillCountResponse_DEPRECATED\020\325/\022 \n\033k_EMs"
      "gGCCreateOrUpdateParty\020\3310\022\037\n\032k_EMsgGCAba"
      "ndonCurrentGame\020\3330\022\035\n\030k_EMsgForceSOCache"
      "Resend\020\3350\022#\n\036k_EMsgGCRequestChatChannelL"
      "ist\020\3640\022+\n&k_EMsgGCRequestChatChannelList"
      "Response\020\3650\022\024\n\017k_EMsgGCReadyUp\020\3760\022\'\n\"k_E"
      "MsgGCKickedFromMatchmakingQueue\020\3770\022\033\n\026k_"
      "EMsgGCLeaverDetected\020\2001\022#\n\036k_EMsgGCLeave"
      "rDetectedResponse\020\2171\022\034\n\027k_EMsgGCExitMatc"
      "hmaking\020\2211\022\031\n\024k_EMsgGCAcceptInvite\020\2231\022!\n"
      "\034k_EMsgGCAcceptInviteResponse\020\2241\022 \n\033k_EM"
      "sgGCMatchmakingProgress\020\2251\022\033\n\026k_EMsgGCMv"
      "MVictoryInfo\020\2261\022(\n#k_EMsgGCGameServerMat"
      "chmakingStatus\020\2271\022%\n k_EMsgGCCreateOrUpd"
      "atePartyReply\020\2301\022\027\n\022k_EMsgGCMvMVictory\020\231"
      "1\022\034\n\027k_EMsgGCMvMVictoryReply\020\2321\022#\n\036k_EMs"
      "gGCGameServerKickingLobby\020\2331\022+\n&k_EMsgGC"
      "LeaveGameAndPrepareToJoinParty\020\2341\022!\n\034k_E"
      "MsgGC_UpdatePeriodicEvent\020\2002\022.\n)k_EMsgGC"
      "_DuckLeaderboard_IndividualUpdate\020\2012\0222\n-"
      "k_EMsgGC_Client2GCEconPreviewDataBlockRe"
      "quest\020\2022\0223\n.k_EMsgGC_Client2GCEconPrevie"
      "wDataBlockResponse\020\2032\022)\n$k_EMsgGC_Client"
      "VerificationChallenge\020\3442\0221\n,k_EMsgGC_Cli"
      "entVerificationChallengeResponse\020\3452\022/\n*k"
      "_EMsgGC_ClientVerificationVerboseRespons"
      "e\020\3462\022(\n#k_EMsgGC_ClientSetItemSlotAttrib"
      "ute\020\3472\022\"\n\035k_EMsgGC_War_IndividualUpdate\020"
      "\3512\022\031\n\024k_EMsgGC_War_JoinWar\020\3522\022$\n\037k_EMsgG"
      "C_War_RequestGlobalStats\020\3532\022%\n k_EMsgGC_"
      "War_GlobalStatsResponse\020\3542\022*\n%k_EMsgGC_W"
      "orldItemPlacement_Attribute\020\3562\022\'\n\"k_EMsg"
      "GC_WorldItemPlacement_Update\020\3572\022\032\n\025k_EMs"
      "gGC_Match_Result\020\3602\022\"\n\035k_EMsgGCVoteKickP"
      "layerRequest\020\3612\022*\n%k_EMsgGCVoteKickPlaye"
      "rRequestResponse\020\3622\022)\n$k_EMsgGC_DailyCom"
      "petitiveStatsRollup\020\3642\0222\n-k_EMsgGC_Daily"
      "CompetitiveStatsRollup_Response\020\3652\022\"\n\035k_"
      "EMsgGC_WorldStatusBroadcast\020\3662\022\032\n\025k_EMsg"
      "GC_ReportPlayer\020\3672\022\"\n\035k_EMsgGC_Match_Res"
      "ultResponse\020\3702\022+\n&k_EMsgGCGameServerKick"
      "ingLobbyResponse\020\3712\022\034\n\027k_EMsgGCPlayerLef"
      "tMatch\020\3722\022$\n\037k_EMsgGCPlayerLeftMatchResp"
      "onse\020\3732\022#\n\036k_EMsgGCRequestMatchMakerStat"
      "s\020\3742\022$\n\037k_EMsgGCMatchMakerStatsResponse\020"
      "\3752\022\035\n\030k_EMsgGCMatchHistoryLoad\020\3762\022\033\n\026k_E"
      "MsgGC_AcknowledgeXP\020\3772\022\"\n\035k_EMsgGCDataCe"
      "nterPing_Update\020\2003\022%\n k_EMsgGC_Notificat"
      "ionAcknowledge\020\2013\022*\n%k_EMsgGC_Notificati"
      "onAcknowledgeReply\020\2023\022!\n\034k_EMsgGC_KickPl"
      "ayerFromLobby\020\2033\022#\n\036k_EMsgGC_SurveyQuest"
      "ionRequest\020\2063\022$\n\037k_EMsgGC_SurveyQuestion"
      "Response\020\2073\022\032\n\025k_EMsgGC_TFClientInit\020\2103\022"
      "%\n k_EMsgGC_NewMatchForLobbyRequest\020\2113\022&"
      "\n!k_EMsgGC_NewMatchForLobbyResponse\020\2123\022+"
      "\n&k_EMsgGC_ChangeMatchPlayerTeamsRequest"
      "\020\2133\022,\n\'k_EMsgGC_ChangeMatchPlayerTeamsRe"
      "sponse\020\2143\022.\n)k_EMsgGCPlayerVoteKickedAft"
      "erLeavingMatch\020\2273\0226\n1k_EMsgGCPlayerVoteK"
      "ickedAfterLeavingMatchResponse\020\2303\022\035\n\030k_E"
      "MsgGCDev_GrantWarKill\020\221N*H\n\033EServerModif"
      "icationItemType\022)\n%kGameServerModificati"
      "onItem_Halloween\020\001*~\n\022TF_MatchmakingMode"
      "\022\032\n\026TF_Matchmaking_INVALID\020\000\022\026\n\022TF_Match"
      "making_MVM\020\001\022\031\n\025TF_Matchmaking_LADDER\020\002\022"
      "\031\n\025TF_Matchmaking_CASUAL\020\003*\320\002\n\031TF_Matchm"
      "aking_WizardStep\022%\n!TF_Matchmaking_Wizar"
      "dStep_INVALID\020\000\022:\n6TF_Matchmaking_Wizard"
      "Step_MVM_PLAY_FOR_BRAGGING_RIGHTS\020\001\022.\n*T"
      "F_Matchmaking_WizardStep_MVM_TOUR_OF_DUT"
      "Y\020\002\022+\n\'TF_Matchmaking_WizardStep_MVM_CHA"
      "LLENGE\020\003\022\'\n#TF_Matchmaking_WizardStep_SE"
      "ARCHING\020\004\022$\n TF_Matchmaking_WizardStep_L"
      "ADDER\020\005\022$\n TF_Matchmaking_WizardStep_CAS"
      "UAL\020\006*\201\002\n\017TF_GC_GameState\022\036\n\032TF_GC_GAMES"
      "TATE_STATE_INIT\020\000\022,\n(TF_GC_GAMESTATE_WAI"
      "T_FOR_PLAYERS_TO_LOAD\020\001\022!\n\035TF_GC_GAMESTA"
      "TE_STRATEGY_TIME\020\003\022$\n TF_GC_GAMESTATE_GA"
      "ME_IN_PROGRESS\020\005\022\035\n\031TF_GC_GAMESTATE_POST"
      "_GAME\020\006\022\036\n\032TF_GC_GAMESTATE_DISCONNECT\020\007\022"
      "\030\n\024TF_GC_GAMESTATE_LAST\020\010*\250\001\n\nTF_GC_TEAM"
      "\022\030\n\024TF_GC_TEAM_DEFENDERS\020\000\022\027\n\023TF_GC_TEAM"
      "_INVADERS\020\001\022\032\n\026TF_GC_TEAM_BROADCASTER\020\002\022"
      "\030\n\024TF_GC_TEAM_SPECTATOR\020\003\022\032\n\026TF_GC_TEAM_"
      "PLAYER_POOL\020\004\022\025\n\021TF_GC_TEAM_NOTEAM\020\005*\372\001\n"
      "\022TFMatchLeaveReason\022\"\n\036TFMatchLeaveReaso"
      "n_UNSPECIFIED\020\000\022 \n\034TFMatchLeaveReason_VO"
      "TE_KICK\020\001\022\033\n\027TFMatchLeaveReason_IDLE\020\002\022!"
      "\n\035TFMatchLeaveReason_ADMIN_KICK\020\003\022\033\n\027TFM"
      "atchLeaveReason_AWOL\020\004\022\036\n\032TFMatchLeaveRe"
      "ason_NO_SHOW\020\005\022!\n\035TFMatchLeaveReason_GC_"
      "REMOVED\020\006*u\n\021TFLobbyReadyState\022 \n\034TFLobb"
      "yReadyState_UNDECLARED\020\000\022\036\n\032TFLobbyReady"
      "State_ACCEPTED\020\001\022\036\n\032TFLobbyReadyState_DE"
      "CLINED\020\002*\203\001\n\021ChatChannelType_t\022\034\n\030ChatCh"
      "annelType_Regional\020\000\022\032\n\026ChatChannelType_"
      "Custom\020\001\022\031\n\025ChatChannelType_Party\020\002\022\031\n\025C"
      "hatChannelType_Lobby\020\003*\363\001\n\026ServerMatchma"
      "kingState\022\"\n\036ServerMatchmakingState_INVA"
      "LID\020\000\022,\n(ServerMatchmakingState_NOT_PART"
      "ICIPATING\020\001\022 \n\034ServerMatchmakingState_EM"
      "PTY\020\002\022<\n8ServerMatchmakingState_ACTIVE_M"
      "ATCH_REQUESTING_LATE_JOIN\020\003\022\'\n#ServerMat"
      "chmakingState_ACTIVE_MATCH\020\004*\202\001\n\022SurveyQ"
      "uestionType\022\032\n\026QUESTION_MATCH_QUALITY\020\000\022"
      "\030\n\024QUESTION_MAP_QUALITY\020\001\022\031\n\025QUESTION_CO"
      "MP_INQUIRY\020\002\022\033\n\027QUESTION_CASUAL_INQUIRY\020"
      "\003B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 31048);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tf_gcmessages.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_2eproto::AddDescriptors();
  ::protobuf_base_5fgcmessages_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tf_5fgcmessages_2eproto
const ::google::protobuf::EnumDescriptor* CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[0];
}
bool CMsgGC_GameServer_CreateIdentityResponse_EStatus_IsValid(int value) {
  switch (value) {
    case -2:
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_GenericFailure;
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_TooMany;
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_NoPrivs;
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_Created;
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::EStatus_MIN;
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::EStatus_MAX;
const int CMsgGC_GameServer_CreateIdentityResponse::EStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[1];
}
bool CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::kServerModificationItemResponse_AlreadyInUse;
const CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::kServerModificationItemResponse_NotOnAuthenticatedServer;
const CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::kServerModificationItemResponse_ServerReject;
const CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::kServerModificationItemResponse_InternalError;
const CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::kServerModificationItemResponse_EventAlreadyActive;
const CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::EServerModificationItemResponse_MIN;
const CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::EServerModificationItemResponse_MAX;
const int CMsgGC_Client_UseServerModificationItem_Response::EServerModificationItemResponse_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[2];
}
bool CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::kServerModificationItemServerResponse_Accepted;
const CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::kServerModificationItemServerResponse_NoVoteCalled;
const CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::kServerModificationItemServerResponse_VoteFailed;
const CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::EServerModificationItemServerResponse_MIN;
const CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::EServerModificationItemServerResponse_MAX;
const int CMsgGC_GameServer_UseServerModificationItem_Response::EServerModificationItemServerResponse_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CSOTFParty_State_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[3];
}
bool CSOTFParty_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CSOTFParty_State CSOTFParty::UI;
const CSOTFParty_State CSOTFParty::FINDING_MATCH;
const CSOTFParty_State CSOTFParty::IN_MATCH;
const CSOTFParty_State CSOTFParty::AWAITING_RESERVATION_CONFIRMATION;
const CSOTFParty_State CSOTFParty::State_MIN;
const CSOTFParty_State CSOTFParty::State_MAX;
const int CSOTFParty::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CTFLobbyMember_ConnectState_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[4];
}
bool CTFLobbyMember_ConnectState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CTFLobbyMember_ConnectState CTFLobbyMember::INVALID;
const CTFLobbyMember_ConnectState CTFLobbyMember::RESERVATION_PENDING;
const CTFLobbyMember_ConnectState CTFLobbyMember::RESERVED;
const CTFLobbyMember_ConnectState CTFLobbyMember::CONNECTED;
const CTFLobbyMember_ConnectState CTFLobbyMember::DISCONNECTED;
const CTFLobbyMember_ConnectState CTFLobbyMember::ConnectState_MIN;
const CTFLobbyMember_ConnectState CTFLobbyMember::ConnectState_MAX;
const int CTFLobbyMember::ConnectState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CSOTFGameServerLobby_State_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[5];
}
bool CSOTFGameServerLobby_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CSOTFGameServerLobby_State CSOTFGameServerLobby::UNKNOWN;
const CSOTFGameServerLobby_State CSOTFGameServerLobby::SERVERSETUP;
const CSOTFGameServerLobby_State CSOTFGameServerLobby::RUN;
const CSOTFGameServerLobby_State CSOTFGameServerLobby::State_MIN;
const CSOTFGameServerLobby_State CSOTFGameServerLobby::State_MAX;
const int CSOTFGameServerLobby::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CSOTFGameServerLobby_LobbyType_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[6];
}
bool CSOTFGameServerLobby_LobbyType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CSOTFGameServerLobby_LobbyType CSOTFGameServerLobby::INVALID;
const CSOTFGameServerLobby_LobbyType CSOTFGameServerLobby::MATCH;
const CSOTFGameServerLobby_LobbyType CSOTFGameServerLobby::PRACTICE;
const CSOTFGameServerLobby_LobbyType CSOTFGameServerLobby::TOURNAMENT;
const CSOTFGameServerLobby_LobbyType CSOTFGameServerLobby::TUTORIAL;
const CSOTFGameServerLobby_LobbyType CSOTFGameServerLobby::LobbyType_MIN;
const CSOTFGameServerLobby_LobbyType CSOTFGameServerLobby::LobbyType_MAX;
const int CSOTFGameServerLobby::LobbyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CSOTFGameServerLobby_WarMatch_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[7];
}
bool CSOTFGameServerLobby_WarMatch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::NOPE;
const CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::INVADERS_ARE_PYRO;
const CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::INVADERS_ARE_HEAVY;
const CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::WarMatch_MIN;
const CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::WarMatch_MAX;
const int CSOTFGameServerLobby::WarMatch_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGameServerMatchmakingStatus_PlayerConnectState_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[8];
}
bool CMsgGameServerMatchmakingStatus_PlayerConnectState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus::INVALID;
const CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus::CONNECTED;
const CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus::RESERVED;
const CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus::PlayerConnectState_MIN;
const CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus::PlayerConnectState_MAX;
const int CMsgGameServerMatchmakingStatus::PlayerConnectState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGameServerMatchmakingStatus_Event_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[9];
}
bool CMsgGameServerMatchmakingStatus_Event_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::None;
const CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::MvMVictory;
const CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::MvMDefeat;
const CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::AcknowledgePlayers;
const CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::Event_MIN;
const CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::Event_MAX;
const int CMsgGameServerMatchmakingStatus::Event_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgMvMVictoryInfo_GrantReason_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[10];
}
bool CMsgMvMVictoryInfo_GrantReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::INVALID;
const CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::BADGE_LEVELED;
const CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::SQUAD_SURPLUS;
const CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::MANN_UP;
const CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::HELP_A_NOOB;
const CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::GrantReason_MIN;
const CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::GrantReason_MAX;
const int CMsgMvMVictoryInfo::GrantReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgTFXPSource_XPSourceType_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[11];
}
bool CMsgTFXPSource_XPSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_SCORE;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_OBJECTIVE_BONUS;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_COMPLETED_MATCH;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_COMPETITIVE_ABANDON;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_COMPETITIVE_WIN;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_COMPETITIVE_LOSS;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_AUTOBALANCE_BONUS;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::NUM_SOURCE_TYPES;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::XPSourceType_MIN;
const CMsgTFXPSource_XPSourceType CMsgTFXPSource::XPSourceType_MAX;
const int CMsgTFXPSource::XPSourceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGCNotification_NotificationType_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[12];
}
bool CMsgGCNotification_NotificationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_REPORTED_PLAYER_BANNED;
const CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_CUSTOM_STRING;
const CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_MM_BAN_DUE_TO_EXCESSIVE_REPORTS;
const CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_REPORTED_PLAYER_WAS_BANNED;
const CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_SUPPORT_MESSAGE;
const CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_NUM_TYPES;
const CMsgGCNotification_NotificationType CMsgGCNotification::NotificationType_MIN;
const CMsgGCNotification_NotificationType CMsgGCNotification::NotificationType_MAX;
const int CMsgGCNotification::NotificationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGC_Match_Result_Status_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[13];
}
bool CMsgGC_Match_Result_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_SUCCEEDED;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FAILED_GC;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FAILED_TRUSTED;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FAILED_ABANDON;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FAILED_UNKNOWN;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FAILED_TIMEOUT;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FINISHED_ABANDON;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::Status_MIN;
const CMsgGC_Match_Result_Status CMsgGC_Match_Result::Status_MAX;
const int CMsgGC_Match_Result::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGC_ReportPlayer_EReason_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[14];
}
bool CMsgGC_ReportPlayer_EReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_INVALID;
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_CHEATING;
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_IDLE;
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_HARASSMENT;
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_GRIEFING;
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_COUNT;
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::EReason_MIN;
const CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::EReason_MAX;
const int CMsgGC_ReportPlayer::EReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGCDataCenterPing_Update_Status_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[15];
}
bool CMsgGCDataCenterPing_Update_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::Invalid;
const CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::Normal;
const CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::Unreachable;
const CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::FallbackToDCPing;
const CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::Status_MIN;
const CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::Status_MAX;
const int CMsgGCDataCenterPing_Update::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ETFGCMsg_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[16];
}
bool ETFGCMsg_IsValid(int value) {
  switch (value) {
    case 5001:
    case 5018:
    case 5019:
    case 5020:
    case 5021:
    case 5022:
    case 5023:
    case 5024:
    case 5026:
    case 5027:
    case 5028:
    case 5029:
    case 5030:
    case 5031:
    case 5032:
    case 5033:
    case 5034:
    case 5200:
    case 5201:
    case 5202:
    case 5203:
    case 5204:
    case 5205:
    case 5206:
    case 5207:
    case 5208:
    case 5209:
    case 5210:
    case 5211:
    case 5212:
    case 5213:
    case 5500:
    case 5501:
    case 5502:
    case 5503:
    case 5600:
    case 5601:
    case 5604:
    case 5605:
    case 5606:
    case 5607:
    case 5608:
    case 5609:
    case 5610:
    case 5611:
    case 5612:
    case 5613:
    case 5614:
    case 5700:
    case 5701:
    case 5702:
    case 5703:
    case 5704:
    case 5705:
    case 5706:
    case 5707:
    case 5708:
    case 5709:
    case 5710:
    case 5711:
    case 5712:
    case 5713:
    case 5714:
    case 5715:
    case 5716:
    case 5717:
    case 5800:
    case 5801:
    case 5802:
    case 6000:
    case 6001:
    case 6100:
    case 6101:
    case 6233:
    case 6235:
    case 6237:
    case 6260:
    case 6261:
    case 6270:
    case 6271:
    case 6272:
    case 6287:
    case 6289:
    case 6291:
    case 6292:
    case 6293:
    case 6294:
    case 6295:
    case 6296:
    case 6297:
    case 6298:
    case 6299:
    case 6300:
    case 6400:
    case 6401:
    case 6402:
    case 6403:
    case 6500:
    case 6501:
    case 6502:
    case 6503:
    case 6505:
    case 6506:
    case 6507:
    case 6508:
    case 6510:
    case 6511:
    case 6512:
    case 6513:
    case 6514:
    case 6516:
    case 6517:
    case 6518:
    case 6519:
    case 6520:
    case 6521:
    case 6522:
    case 6523:
    case 6524:
    case 6525:
    case 6526:
    case 6527:
    case 6528:
    case 6529:
    case 6530:
    case 6531:
    case 6534:
    case 6535:
    case 6536:
    case 6537:
    case 6538:
    case 6539:
    case 6540:
    case 6551:
    case 6552:
    case 10001:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EServerModificationItemType_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[17];
}
bool EServerModificationItemType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TF_MatchmakingMode_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[18];
}
bool TF_MatchmakingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TF_Matchmaking_WizardStep_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[19];
}
bool TF_Matchmaking_WizardStep_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TF_GC_GameState_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[20];
}
bool TF_GC_GameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TF_GC_TEAM_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[21];
}
bool TF_GC_TEAM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TFMatchLeaveReason_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[22];
}
bool TFMatchLeaveReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TFLobbyReadyState_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[23];
}
bool TFLobbyReadyState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChatChannelType_t_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[24];
}
bool ChatChannelType_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServerMatchmakingState_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[25];
}
bool ServerMatchmakingState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SurveyQuestionType_descriptor() {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tf_5fgcmessages_2eproto::file_level_enum_descriptors[26];
}
bool SurveyQuestionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgTFGoldenWrenchBroadcast::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFGoldenWrenchBroadcast::kWrenchNumberFieldNumber;
const int CMsgTFGoldenWrenchBroadcast::kDeletedFieldNumber;
const int CMsgTFGoldenWrenchBroadcast::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFGoldenWrenchBroadcast::CMsgTFGoldenWrenchBroadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFGoldenWrenchBroadcast();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFGoldenWrenchBroadcast)
}
CMsgTFGoldenWrenchBroadcast::CMsgTFGoldenWrenchBroadcast(const CMsgTFGoldenWrenchBroadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_name()) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  ::memcpy(&wrench_number_, &from.wrench_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&deleted_) -
    reinterpret_cast<char*>(&wrench_number_)) + sizeof(deleted_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFGoldenWrenchBroadcast)
}

void CMsgTFGoldenWrenchBroadcast::SharedCtor() {
  _cached_size_ = 0;
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wrench_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deleted_) -
      reinterpret_cast<char*>(&wrench_number_)) + sizeof(deleted_));
}

CMsgTFGoldenWrenchBroadcast::~CMsgTFGoldenWrenchBroadcast() {
  // @@protoc_insertion_point(destructor:CMsgTFGoldenWrenchBroadcast)
  SharedDtor();
}

void CMsgTFGoldenWrenchBroadcast::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTFGoldenWrenchBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFGoldenWrenchBroadcast::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFGoldenWrenchBroadcast& CMsgTFGoldenWrenchBroadcast::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFGoldenWrenchBroadcast();
  return *internal_default_instance();
}

CMsgTFGoldenWrenchBroadcast* CMsgTFGoldenWrenchBroadcast::New(::google::protobuf::Arena* arena) const {
  CMsgTFGoldenWrenchBroadcast* n = new CMsgTFGoldenWrenchBroadcast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFGoldenWrenchBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFGoldenWrenchBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!user_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*user_name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&wrench_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deleted_) -
        reinterpret_cast<char*>(&wrench_number_)) + sizeof(deleted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFGoldenWrenchBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFGoldenWrenchBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wrench_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_wrench_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrench_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool deleted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_deleted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgTFGoldenWrenchBroadcast.user_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFGoldenWrenchBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFGoldenWrenchBroadcast)
  return false;
#undef DO_
}

void CMsgTFGoldenWrenchBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFGoldenWrenchBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 wrench_number = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wrench_number(), output);
  }

  // optional bool deleted = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->deleted(), output);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFGoldenWrenchBroadcast.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFGoldenWrenchBroadcast)
}

::google::protobuf::uint8* CMsgTFGoldenWrenchBroadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFGoldenWrenchBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 wrench_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wrench_number(), target);
  }

  // optional bool deleted = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->deleted(), target);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFGoldenWrenchBroadcast.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFGoldenWrenchBroadcast)
  return target;
}

size_t CMsgTFGoldenWrenchBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFGoldenWrenchBroadcast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional int32 wrench_number = 1;
    if (has_wrench_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wrench_number());
    }

    // optional bool deleted = 2;
    if (has_deleted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFGoldenWrenchBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFGoldenWrenchBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFGoldenWrenchBroadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFGoldenWrenchBroadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFGoldenWrenchBroadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFGoldenWrenchBroadcast)
    MergeFrom(*source);
  }
}

void CMsgTFGoldenWrenchBroadcast::MergeFrom(const CMsgTFGoldenWrenchBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFGoldenWrenchBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      wrench_number_ = from.wrench_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      deleted_ = from.deleted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFGoldenWrenchBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFGoldenWrenchBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFGoldenWrenchBroadcast::CopyFrom(const CMsgTFGoldenWrenchBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFGoldenWrenchBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFGoldenWrenchBroadcast::IsInitialized() const {
  return true;
}

void CMsgTFGoldenWrenchBroadcast::Swap(CMsgTFGoldenWrenchBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFGoldenWrenchBroadcast::InternalSwap(CMsgTFGoldenWrenchBroadcast* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_);
  swap(wrench_number_, other->wrench_number_);
  swap(deleted_, other->deleted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFGoldenWrenchBroadcast::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFSaxxyBroadcast::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFSaxxyBroadcast::kCategoryNumberFieldNumber;
const int CMsgTFSaxxyBroadcast::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFSaxxyBroadcast::CMsgTFSaxxyBroadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFSaxxyBroadcast();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFSaxxyBroadcast)
}
CMsgTFSaxxyBroadcast::CMsgTFSaxxyBroadcast(const CMsgTFSaxxyBroadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_name()) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  category_number_ = from.category_number_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFSaxxyBroadcast)
}

void CMsgTFSaxxyBroadcast::SharedCtor() {
  _cached_size_ = 0;
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_number_ = 0;
}

CMsgTFSaxxyBroadcast::~CMsgTFSaxxyBroadcast() {
  // @@protoc_insertion_point(destructor:CMsgTFSaxxyBroadcast)
  SharedDtor();
}

void CMsgTFSaxxyBroadcast::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTFSaxxyBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFSaxxyBroadcast::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFSaxxyBroadcast& CMsgTFSaxxyBroadcast::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFSaxxyBroadcast();
  return *internal_default_instance();
}

CMsgTFSaxxyBroadcast* CMsgTFSaxxyBroadcast::New(::google::protobuf::Arena* arena) const {
  CMsgTFSaxxyBroadcast* n = new CMsgTFSaxxyBroadcast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFSaxxyBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFSaxxyBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!user_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*user_name_.UnsafeRawStringPointer())->clear();
  }
  category_number_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFSaxxyBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFSaxxyBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 category_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_category_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgTFSaxxyBroadcast.user_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFSaxxyBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFSaxxyBroadcast)
  return false;
#undef DO_
}

void CMsgTFSaxxyBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFSaxxyBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 category_number = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category_number(), output);
  }

  // optional string user_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFSaxxyBroadcast.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFSaxxyBroadcast)
}

::google::protobuf::uint8* CMsgTFSaxxyBroadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFSaxxyBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 category_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->category_number(), target);
  }

  // optional string user_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFSaxxyBroadcast.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFSaxxyBroadcast)
  return target;
}

size_t CMsgTFSaxxyBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFSaxxyBroadcast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional int32 category_number = 1;
    if (has_category_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFSaxxyBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFSaxxyBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFSaxxyBroadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFSaxxyBroadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFSaxxyBroadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFSaxxyBroadcast)
    MergeFrom(*source);
  }
}

void CMsgTFSaxxyBroadcast::MergeFrom(const CMsgTFSaxxyBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFSaxxyBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      category_number_ = from.category_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFSaxxyBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFSaxxyBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFSaxxyBroadcast::CopyFrom(const CMsgTFSaxxyBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFSaxxyBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFSaxxyBroadcast::IsInitialized() const {
  return true;
}

void CMsgTFSaxxyBroadcast::Swap(CMsgTFSaxxyBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFSaxxyBroadcast::InternalSwap(CMsgTFSaxxyBroadcast* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_);
  swap(category_number_, other->category_number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFSaxxyBroadcast::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCTFSpecificItemBroadcast::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCTFSpecificItemBroadcast::kItemDefIndexFieldNumber;
const int CMsgGCTFSpecificItemBroadcast::kWasDestructionFieldNumber;
const int CMsgGCTFSpecificItemBroadcast::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCTFSpecificItemBroadcast::CMsgGCTFSpecificItemBroadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCTFSpecificItemBroadcast();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCTFSpecificItemBroadcast)
}
CMsgGCTFSpecificItemBroadcast::CMsgGCTFSpecificItemBroadcast(const CMsgGCTFSpecificItemBroadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_name()) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  ::memcpy(&item_def_index_, &from.item_def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&was_destruction_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(was_destruction_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCTFSpecificItemBroadcast)
}

void CMsgGCTFSpecificItemBroadcast::SharedCtor() {
  _cached_size_ = 0;
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&item_def_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&was_destruction_) -
      reinterpret_cast<char*>(&item_def_index_)) + sizeof(was_destruction_));
}

CMsgGCTFSpecificItemBroadcast::~CMsgGCTFSpecificItemBroadcast() {
  // @@protoc_insertion_point(destructor:CMsgGCTFSpecificItemBroadcast)
  SharedDtor();
}

void CMsgGCTFSpecificItemBroadcast::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCTFSpecificItemBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCTFSpecificItemBroadcast::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCTFSpecificItemBroadcast& CMsgGCTFSpecificItemBroadcast::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCTFSpecificItemBroadcast();
  return *internal_default_instance();
}

CMsgGCTFSpecificItemBroadcast* CMsgGCTFSpecificItemBroadcast::New(::google::protobuf::Arena* arena) const {
  CMsgGCTFSpecificItemBroadcast* n = new CMsgGCTFSpecificItemBroadcast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCTFSpecificItemBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCTFSpecificItemBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!user_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*user_name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&item_def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&was_destruction_) -
        reinterpret_cast<char*>(&item_def_index_)) + sizeof(was_destruction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCTFSpecificItemBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCTFSpecificItemBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_item_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool was_destruction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_was_destruction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_destruction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCTFSpecificItemBroadcast.user_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCTFSpecificItemBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCTFSpecificItemBroadcast)
  return false;
#undef DO_
}

void CMsgGCTFSpecificItemBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCTFSpecificItemBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def_index(), output);
  }

  // optional bool was_destruction = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->was_destruction(), output);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCTFSpecificItemBroadcast.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCTFSpecificItemBroadcast)
}

::google::protobuf::uint8* CMsgGCTFSpecificItemBroadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCTFSpecificItemBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def_index(), target);
  }

  // optional bool was_destruction = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->was_destruction(), target);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCTFSpecificItemBroadcast.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCTFSpecificItemBroadcast)
  return target;
}

size_t CMsgGCTFSpecificItemBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCTFSpecificItemBroadcast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional uint32 item_def_index = 1;
    if (has_item_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }

    // optional bool was_destruction = 2;
    if (has_was_destruction()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCTFSpecificItemBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCTFSpecificItemBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCTFSpecificItemBroadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCTFSpecificItemBroadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCTFSpecificItemBroadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCTFSpecificItemBroadcast)
    MergeFrom(*source);
  }
}

void CMsgGCTFSpecificItemBroadcast::MergeFrom(const CMsgGCTFSpecificItemBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCTFSpecificItemBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      was_destruction_ = from.was_destruction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCTFSpecificItemBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCTFSpecificItemBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCTFSpecificItemBroadcast::CopyFrom(const CMsgGCTFSpecificItemBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCTFSpecificItemBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCTFSpecificItemBroadcast::IsInitialized() const {
  return true;
}

void CMsgGCTFSpecificItemBroadcast::Swap(CMsgGCTFSpecificItemBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCTFSpecificItemBroadcast::InternalSwap(CMsgGCTFSpecificItemBroadcast* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_);
  swap(item_def_index_, other->item_def_index_);
  swap(was_destruction_, other->was_destruction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCTFSpecificItemBroadcast::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFWorldStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFWorldStatus::kBetaStressTestEventActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFWorldStatus::CMsgTFWorldStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFWorldStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFWorldStatus)
}
CMsgTFWorldStatus::CMsgTFWorldStatus(const CMsgTFWorldStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  beta_stress_test_event_active_ = from.beta_stress_test_event_active_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFWorldStatus)
}

void CMsgTFWorldStatus::SharedCtor() {
  _cached_size_ = 0;
  beta_stress_test_event_active_ = false;
}

CMsgTFWorldStatus::~CMsgTFWorldStatus() {
  // @@protoc_insertion_point(destructor:CMsgTFWorldStatus)
  SharedDtor();
}

void CMsgTFWorldStatus::SharedDtor() {
}

void CMsgTFWorldStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFWorldStatus::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFWorldStatus& CMsgTFWorldStatus::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFWorldStatus();
  return *internal_default_instance();
}

CMsgTFWorldStatus* CMsgTFWorldStatus::New(::google::protobuf::Arena* arena) const {
  CMsgTFWorldStatus* n = new CMsgTFWorldStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFWorldStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFWorldStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beta_stress_test_event_active_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFWorldStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFWorldStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool beta_stress_test_event_active = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_beta_stress_test_event_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &beta_stress_test_event_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFWorldStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFWorldStatus)
  return false;
#undef DO_
}

void CMsgTFWorldStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFWorldStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool beta_stress_test_event_active = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->beta_stress_test_event_active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFWorldStatus)
}

::google::protobuf::uint8* CMsgTFWorldStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFWorldStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool beta_stress_test_event_active = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->beta_stress_test_event_active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFWorldStatus)
  return target;
}

size_t CMsgTFWorldStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFWorldStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool beta_stress_test_event_active = 1 [default = false];
  if (has_beta_stress_test_event_active()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFWorldStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFWorldStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFWorldStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFWorldStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFWorldStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFWorldStatus)
    MergeFrom(*source);
  }
}

void CMsgTFWorldStatus::MergeFrom(const CMsgTFWorldStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFWorldStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_beta_stress_test_event_active()) {
    set_beta_stress_test_event_active(from.beta_stress_test_event_active());
  }
}

void CMsgTFWorldStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFWorldStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFWorldStatus::CopyFrom(const CMsgTFWorldStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFWorldStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFWorldStatus::IsInitialized() const {
  return true;
}

void CMsgTFWorldStatus::Swap(CMsgTFWorldStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFWorldStatus::InternalSwap(CMsgTFWorldStatus* other) {
  using std::swap;
  swap(beta_stress_test_event_active_, other->beta_stress_test_event_active_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFWorldStatus::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSOTFDuelSummary::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOTFDuelSummary::kAccountIdFieldNumber;
const int CSOTFDuelSummary::kDuelWinsFieldNumber;
const int CSOTFDuelSummary::kDuelLossesFieldNumber;
const int CSOTFDuelSummary::kLastDuelAccountIdFieldNumber;
const int CSOTFDuelSummary::kLastDuelTimestampFieldNumber;
const int CSOTFDuelSummary::kLastDuelStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOTFDuelSummary::CSOTFDuelSummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFDuelSummary();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSOTFDuelSummary)
}
CSOTFDuelSummary::CSOTFDuelSummary(const CSOTFDuelSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_duel_status_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(last_duel_status_));
  // @@protoc_insertion_point(copy_constructor:CSOTFDuelSummary)
}

void CSOTFDuelSummary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_duel_status_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(last_duel_status_));
}

CSOTFDuelSummary::~CSOTFDuelSummary() {
  // @@protoc_insertion_point(destructor:CSOTFDuelSummary)
  SharedDtor();
}

void CSOTFDuelSummary::SharedDtor() {
}

void CSOTFDuelSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFDuelSummary::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOTFDuelSummary& CSOTFDuelSummary::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFDuelSummary();
  return *internal_default_instance();
}

CSOTFDuelSummary* CSOTFDuelSummary::New(::google::protobuf::Arena* arena) const {
  CSOTFDuelSummary* n = new CSOTFDuelSummary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOTFDuelSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFDuelSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_duel_status_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(last_duel_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOTFDuelSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSOTFDuelSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duel_wins = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_duel_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duel_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duel_losses = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_duel_losses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duel_losses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_duel_account_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_last_duel_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_duel_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_duel_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_last_duel_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_duel_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_duel_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_last_duel_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_duel_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSOTFDuelSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSOTFDuelSummary)
  return false;
#undef DO_
}

void CSOTFDuelSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSOTFDuelSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 duel_wins = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duel_wins(), output);
  }

  // optional uint32 duel_losses = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duel_losses(), output);
  }

  // optional uint32 last_duel_account_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_duel_account_id(), output);
  }

  // optional uint32 last_duel_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_duel_timestamp(), output);
  }

  // optional uint32 last_duel_status = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_duel_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSOTFDuelSummary)
}

::google::protobuf::uint8* CSOTFDuelSummary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFDuelSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 duel_wins = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duel_wins(), target);
  }

  // optional uint32 duel_losses = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duel_losses(), target);
  }

  // optional uint32 last_duel_account_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_duel_account_id(), target);
  }

  // optional uint32 last_duel_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_duel_timestamp(), target);
  }

  // optional uint32 last_duel_status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_duel_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFDuelSummary)
  return target;
}

size_t CSOTFDuelSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFDuelSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 duel_wins = 2;
    if (has_duel_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duel_wins());
    }

    // optional uint32 duel_losses = 3;
    if (has_duel_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duel_losses());
    }

    // optional uint32 last_duel_account_id = 4;
    if (has_last_duel_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_duel_account_id());
    }

    // optional uint32 last_duel_timestamp = 5;
    if (has_last_duel_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_duel_timestamp());
    }

    // optional uint32 last_duel_status = 6;
    if (has_last_duel_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_duel_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFDuelSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFDuelSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFDuelSummary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOTFDuelSummary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFDuelSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFDuelSummary)
    MergeFrom(*source);
  }
}

void CSOTFDuelSummary::MergeFrom(const CSOTFDuelSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFDuelSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      duel_wins_ = from.duel_wins_;
    }
    if (cached_has_bits & 0x00000004u) {
      duel_losses_ = from.duel_losses_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_duel_account_id_ = from.last_duel_account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_duel_timestamp_ = from.last_duel_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_duel_status_ = from.last_duel_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFDuelSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFDuelSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFDuelSummary::CopyFrom(const CSOTFDuelSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFDuelSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFDuelSummary::IsInitialized() const {
  return true;
}

void CSOTFDuelSummary::Swap(CSOTFDuelSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOTFDuelSummary::InternalSwap(CSOTFDuelSummary* other) {
  using std::swap;
  swap(account_id_, other->account_id_);
  swap(duel_wins_, other->duel_wins_);
  swap(duel_losses_, other->duel_losses_);
  swap(last_duel_account_id_, other->last_duel_account_id_);
  swap(last_duel_timestamp_, other->last_duel_timestamp_);
  swap(last_duel_status_, other->last_duel_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOTFDuelSummary::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSOTFMapContribution::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOTFMapContribution::kAccountIdFieldNumber;
const int CSOTFMapContribution::kDefIndexFieldNumber;
const int CSOTFMapContribution::kContributionLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOTFMapContribution::CSOTFMapContribution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFMapContribution();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSOTFMapContribution)
}
CSOTFMapContribution::CSOTFMapContribution(const CSOTFMapContribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&contribution_level_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(contribution_level_));
  // @@protoc_insertion_point(copy_constructor:CSOTFMapContribution)
}

void CSOTFMapContribution::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contribution_level_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(contribution_level_));
}

CSOTFMapContribution::~CSOTFMapContribution() {
  // @@protoc_insertion_point(destructor:CSOTFMapContribution)
  SharedDtor();
}

void CSOTFMapContribution::SharedDtor() {
}

void CSOTFMapContribution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFMapContribution::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOTFMapContribution& CSOTFMapContribution::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFMapContribution();
  return *internal_default_instance();
}

CSOTFMapContribution* CSOTFMapContribution::New(::google::protobuf::Arena* arena) const {
  CSOTFMapContribution* n = new CSOTFMapContribution;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOTFMapContribution::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFMapContribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contribution_level_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(contribution_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOTFMapContribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSOTFMapContribution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 def_index = 2 [(.key_field) = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 contribution_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_contribution_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribution_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSOTFMapContribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSOTFMapContribution)
  return false;
#undef DO_
}

void CSOTFMapContribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSOTFMapContribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 def_index = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->def_index(), output);
  }

  // optional uint32 contribution_level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->contribution_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSOTFMapContribution)
}

::google::protobuf::uint8* CSOTFMapContribution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFMapContribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 def_index = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->def_index(), target);
  }

  // optional uint32 contribution_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->contribution_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFMapContribution)
  return target;
}

size_t CSOTFMapContribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFMapContribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 def_index = 2 [(.key_field) = true];
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint32 contribution_level = 3;
    if (has_contribution_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribution_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFMapContribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFMapContribution)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFMapContribution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOTFMapContribution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFMapContribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFMapContribution)
    MergeFrom(*source);
  }
}

void CSOTFMapContribution::MergeFrom(const CSOTFMapContribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFMapContribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      contribution_level_ = from.contribution_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFMapContribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFMapContribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFMapContribution::CopyFrom(const CSOTFMapContribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFMapContribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFMapContribution::IsInitialized() const {
  return true;
}

void CSOTFMapContribution::Swap(CSOTFMapContribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOTFMapContribution::InternalSwap(CSOTFMapContribution* other) {
  using std::swap;
  swap(account_id_, other->account_id_);
  swap(def_index_, other->def_index_);
  swap(contribution_level_, other->contribution_level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOTFMapContribution::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFVoteKickBanPlayer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFVoteKickBanPlayer::kAccountIdSubjectFieldNumber;
const int CMsgTFVoteKickBanPlayer::kKickReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFVoteKickBanPlayer::CMsgTFVoteKickBanPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFVoteKickBanPlayer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFVoteKickBanPlayer)
}
CMsgTFVoteKickBanPlayer::CMsgTFVoteKickBanPlayer(const CMsgTFVoteKickBanPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_subject_, &from.account_id_subject_,
    static_cast<size_t>(reinterpret_cast<char*>(&kick_reason_) -
    reinterpret_cast<char*>(&account_id_subject_)) + sizeof(kick_reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFVoteKickBanPlayer)
}

void CMsgTFVoteKickBanPlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_subject_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kick_reason_) -
      reinterpret_cast<char*>(&account_id_subject_)) + sizeof(kick_reason_));
}

CMsgTFVoteKickBanPlayer::~CMsgTFVoteKickBanPlayer() {
  // @@protoc_insertion_point(destructor:CMsgTFVoteKickBanPlayer)
  SharedDtor();
}

void CMsgTFVoteKickBanPlayer::SharedDtor() {
}

void CMsgTFVoteKickBanPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFVoteKickBanPlayer::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFVoteKickBanPlayer& CMsgTFVoteKickBanPlayer::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFVoteKickBanPlayer();
  return *internal_default_instance();
}

CMsgTFVoteKickBanPlayer* CMsgTFVoteKickBanPlayer::New(::google::protobuf::Arena* arena) const {
  CMsgTFVoteKickBanPlayer* n = new CMsgTFVoteKickBanPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFVoteKickBanPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFVoteKickBanPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&account_id_subject_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kick_reason_) -
        reinterpret_cast<char*>(&account_id_subject_)) + sizeof(kick_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFVoteKickBanPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFVoteKickBanPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_subject = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id_subject();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_subject_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kick_reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_kick_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFVoteKickBanPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFVoteKickBanPlayer)
  return false;
#undef DO_
}

void CMsgTFVoteKickBanPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFVoteKickBanPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_subject = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_subject(), output);
  }

  // optional uint32 kick_reason = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kick_reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFVoteKickBanPlayer)
}

::google::protobuf::uint8* CMsgTFVoteKickBanPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFVoteKickBanPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_subject = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_subject(), target);
  }

  // optional uint32 kick_reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kick_reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFVoteKickBanPlayer)
  return target;
}

size_t CMsgTFVoteKickBanPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFVoteKickBanPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id_subject = 1;
    if (has_account_id_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_subject());
    }

    // optional uint32 kick_reason = 2;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFVoteKickBanPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFVoteKickBanPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFVoteKickBanPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFVoteKickBanPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFVoteKickBanPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFVoteKickBanPlayer)
    MergeFrom(*source);
  }
}

void CMsgTFVoteKickBanPlayer::MergeFrom(const CMsgTFVoteKickBanPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFVoteKickBanPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_subject_ = from.account_id_subject_;
    }
    if (cached_has_bits & 0x00000002u) {
      kick_reason_ = from.kick_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFVoteKickBanPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFVoteKickBanPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFVoteKickBanPlayer::CopyFrom(const CMsgTFVoteKickBanPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFVoteKickBanPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFVoteKickBanPlayer::IsInitialized() const {
  return true;
}

void CMsgTFVoteKickBanPlayer::Swap(CMsgTFVoteKickBanPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFVoteKickBanPlayer::InternalSwap(CMsgTFVoteKickBanPlayer* other) {
  using std::swap;
  swap(account_id_subject_, other->account_id_subject_);
  swap(kick_reason_, other->kick_reason_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFVoteKickBanPlayer::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFVoteKickBanPlayerResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFVoteKickBanPlayerResult::kAccountIdInitiatorFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kAccountIdSubjectFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kKickReasonFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kKickSuccessfulFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kNumYesVotesFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kNumNoVotesFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kNumPossibleVotesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFVoteKickBanPlayerResult::CMsgTFVoteKickBanPlayerResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFVoteKickBanPlayerResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFVoteKickBanPlayerResult)
}
CMsgTFVoteKickBanPlayerResult::CMsgTFVoteKickBanPlayerResult(const CMsgTFVoteKickBanPlayerResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_initiator_, &from.account_id_initiator_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_possible_votes_) -
    reinterpret_cast<char*>(&account_id_initiator_)) + sizeof(num_possible_votes_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFVoteKickBanPlayerResult)
}

void CMsgTFVoteKickBanPlayerResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_initiator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_possible_votes_) -
      reinterpret_cast<char*>(&account_id_initiator_)) + sizeof(num_possible_votes_));
}

CMsgTFVoteKickBanPlayerResult::~CMsgTFVoteKickBanPlayerResult() {
  // @@protoc_insertion_point(destructor:CMsgTFVoteKickBanPlayerResult)
  SharedDtor();
}

void CMsgTFVoteKickBanPlayerResult::SharedDtor() {
}

void CMsgTFVoteKickBanPlayerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFVoteKickBanPlayerResult::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFVoteKickBanPlayerResult& CMsgTFVoteKickBanPlayerResult::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFVoteKickBanPlayerResult();
  return *internal_default_instance();
}

CMsgTFVoteKickBanPlayerResult* CMsgTFVoteKickBanPlayerResult::New(::google::protobuf::Arena* arena) const {
  CMsgTFVoteKickBanPlayerResult* n = new CMsgTFVoteKickBanPlayerResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFVoteKickBanPlayerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFVoteKickBanPlayerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&account_id_initiator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_possible_votes_) -
        reinterpret_cast<char*>(&account_id_initiator_)) + sizeof(num_possible_votes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFVoteKickBanPlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFVoteKickBanPlayerResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_initiator = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id_initiator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_initiator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id_subject = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_account_id_subject();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_subject_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kick_reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_kick_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool kick_successful = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_kick_successful();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kick_successful_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_yes_votes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_num_yes_votes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_yes_votes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_no_votes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_num_no_votes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_no_votes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_possible_votes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_num_possible_votes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_possible_votes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFVoteKickBanPlayerResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFVoteKickBanPlayerResult)
  return false;
#undef DO_
}

void CMsgTFVoteKickBanPlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFVoteKickBanPlayerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_initiator = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_initiator(), output);
  }

  // optional uint32 account_id_subject = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id_subject(), output);
  }

  // optional uint32 kick_reason = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kick_reason(), output);
  }

  // optional bool kick_successful = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->kick_successful(), output);
  }

  // optional uint32 num_yes_votes = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_yes_votes(), output);
  }

  // optional uint32 num_no_votes = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_no_votes(), output);
  }

  // optional uint32 num_possible_votes = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_possible_votes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFVoteKickBanPlayerResult)
}

::google::protobuf::uint8* CMsgTFVoteKickBanPlayerResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFVoteKickBanPlayerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_initiator = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_initiator(), target);
  }

  // optional uint32 account_id_subject = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id_subject(), target);
  }

  // optional uint32 kick_reason = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kick_reason(), target);
  }

  // optional bool kick_successful = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->kick_successful(), target);
  }

  // optional uint32 num_yes_votes = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_yes_votes(), target);
  }

  // optional uint32 num_no_votes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_no_votes(), target);
  }

  // optional uint32 num_possible_votes = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_possible_votes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFVoteKickBanPlayerResult)
  return target;
}

size_t CMsgTFVoteKickBanPlayerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFVoteKickBanPlayerResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 account_id_initiator = 1;
    if (has_account_id_initiator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_initiator());
    }

    // optional uint32 account_id_subject = 2;
    if (has_account_id_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_subject());
    }

    // optional uint32 kick_reason = 3;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick_reason());
    }

    // optional bool kick_successful = 4;
    if (has_kick_successful()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_yes_votes = 5;
    if (has_num_yes_votes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_yes_votes());
    }

    // optional uint32 num_no_votes = 6;
    if (has_num_no_votes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_no_votes());
    }

    // optional uint32 num_possible_votes = 7;
    if (has_num_possible_votes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_possible_votes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFVoteKickBanPlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFVoteKickBanPlayerResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFVoteKickBanPlayerResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFVoteKickBanPlayerResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFVoteKickBanPlayerResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFVoteKickBanPlayerResult)
    MergeFrom(*source);
  }
}

void CMsgTFVoteKickBanPlayerResult::MergeFrom(const CMsgTFVoteKickBanPlayerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFVoteKickBanPlayerResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_initiator_ = from.account_id_initiator_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_subject_ = from.account_id_subject_;
    }
    if (cached_has_bits & 0x00000004u) {
      kick_reason_ = from.kick_reason_;
    }
    if (cached_has_bits & 0x00000008u) {
      kick_successful_ = from.kick_successful_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_yes_votes_ = from.num_yes_votes_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_no_votes_ = from.num_no_votes_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_possible_votes_ = from.num_possible_votes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFVoteKickBanPlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFVoteKickBanPlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFVoteKickBanPlayerResult::CopyFrom(const CMsgTFVoteKickBanPlayerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFVoteKickBanPlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFVoteKickBanPlayerResult::IsInitialized() const {
  return true;
}

void CMsgTFVoteKickBanPlayerResult::Swap(CMsgTFVoteKickBanPlayerResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFVoteKickBanPlayerResult::InternalSwap(CMsgTFVoteKickBanPlayerResult* other) {
  using std::swap;
  swap(account_id_initiator_, other->account_id_initiator_);
  swap(account_id_subject_, other->account_id_subject_);
  swap(kick_reason_, other->kick_reason_);
  swap(kick_successful_, other->kick_successful_);
  swap(num_yes_votes_, other->num_yes_votes_);
  swap(num_no_votes_, other->num_no_votes_);
  swap(num_possible_votes_, other->num_possible_votes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFVoteKickBanPlayerResult::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFFreeTrialChooseMostHelpfulFriend::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFFreeTrialChooseMostHelpfulFriend::kAccountIdFriendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFFreeTrialChooseMostHelpfulFriend::CMsgTFFreeTrialChooseMostHelpfulFriend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFFreeTrialChooseMostHelpfulFriend();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFFreeTrialChooseMostHelpfulFriend)
}
CMsgTFFreeTrialChooseMostHelpfulFriend::CMsgTFFreeTrialChooseMostHelpfulFriend(const CMsgTFFreeTrialChooseMostHelpfulFriend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_friend_ = from.account_id_friend_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFFreeTrialChooseMostHelpfulFriend)
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::SharedCtor() {
  _cached_size_ = 0;
  account_id_friend_ = 0u;
}

CMsgTFFreeTrialChooseMostHelpfulFriend::~CMsgTFFreeTrialChooseMostHelpfulFriend() {
  // @@protoc_insertion_point(destructor:CMsgTFFreeTrialChooseMostHelpfulFriend)
  SharedDtor();
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::SharedDtor() {
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFFreeTrialChooseMostHelpfulFriend::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFFreeTrialChooseMostHelpfulFriend& CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFFreeTrialChooseMostHelpfulFriend();
  return *internal_default_instance();
}

CMsgTFFreeTrialChooseMostHelpfulFriend* CMsgTFFreeTrialChooseMostHelpfulFriend::New(::google::protobuf::Arena* arena) const {
  CMsgTFFreeTrialChooseMostHelpfulFriend* n = new CMsgTFFreeTrialChooseMostHelpfulFriend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_friend_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFFreeTrialChooseMostHelpfulFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_friend = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id_friend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_friend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFFreeTrialChooseMostHelpfulFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFFreeTrialChooseMostHelpfulFriend)
  return false;
#undef DO_
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_friend = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_friend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFFreeTrialChooseMostHelpfulFriend)
}

::google::protobuf::uint8* CMsgTFFreeTrialChooseMostHelpfulFriend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_friend = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_friend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFFreeTrialChooseMostHelpfulFriend)
  return target;
}

size_t CMsgTFFreeTrialChooseMostHelpfulFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 account_id_friend = 1;
  if (has_account_id_friend()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id_friend());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFFreeTrialChooseMostHelpfulFriend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFFreeTrialChooseMostHelpfulFriend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFFreeTrialChooseMostHelpfulFriend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFFreeTrialChooseMostHelpfulFriend)
    MergeFrom(*source);
  }
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::MergeFrom(const CMsgTFFreeTrialChooseMostHelpfulFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id_friend()) {
    set_account_id_friend(from.account_id_friend());
  }
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::CopyFrom(const CMsgTFFreeTrialChooseMostHelpfulFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFFreeTrialChooseMostHelpfulFriend::IsInitialized() const {
  return true;
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::Swap(CMsgTFFreeTrialChooseMostHelpfulFriend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFFreeTrialChooseMostHelpfulFriend::InternalSwap(CMsgTFFreeTrialChooseMostHelpfulFriend* other) {
  using std::swap;
  swap(account_id_friend_, other->account_id_friend_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFFreeTrialChooseMostHelpfulFriend::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFRequestTF2Friends::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFRequestTF2Friends::kAccountIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFRequestTF2Friends::CMsgTFRequestTF2Friends()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFRequestTF2Friends();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFRequestTF2Friends)
}
CMsgTFRequestTF2Friends::CMsgTFRequestTF2Friends(const CMsgTFRequestTF2Friends& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFRequestTF2Friends)
}

void CMsgTFRequestTF2Friends::SharedCtor() {
  _cached_size_ = 0;
}

CMsgTFRequestTF2Friends::~CMsgTFRequestTF2Friends() {
  // @@protoc_insertion_point(destructor:CMsgTFRequestTF2Friends)
  SharedDtor();
}

void CMsgTFRequestTF2Friends::SharedDtor() {
}

void CMsgTFRequestTF2Friends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFRequestTF2Friends::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFRequestTF2Friends& CMsgTFRequestTF2Friends::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFRequestTF2Friends();
  return *internal_default_instance();
}

CMsgTFRequestTF2Friends* CMsgTFRequestTF2Friends::New(::google::protobuf::Arena* arena) const {
  CMsgTFRequestTF2Friends* n = new CMsgTFRequestTF2Friends;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFRequestTF2Friends::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFRequestTF2Friends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFRequestTF2Friends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFRequestTF2Friends)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_account_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFRequestTF2Friends)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFRequestTF2Friends)
  return false;
#undef DO_
}

void CMsgTFRequestTF2Friends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFRequestTF2Friends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFRequestTF2Friends)
}

::google::protobuf::uint8* CMsgTFRequestTF2Friends::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFRequestTF2Friends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->account_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFRequestTF2Friends)
  return target;
}

size_t CMsgTFRequestTF2Friends::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFRequestTF2Friends)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFRequestTF2Friends::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFRequestTF2Friends)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFRequestTF2Friends* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFRequestTF2Friends>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFRequestTF2Friends)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFRequestTF2Friends)
    MergeFrom(*source);
  }
}

void CMsgTFRequestTF2Friends::MergeFrom(const CMsgTFRequestTF2Friends& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFRequestTF2Friends)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void CMsgTFRequestTF2Friends::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFRequestTF2Friends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFRequestTF2Friends::CopyFrom(const CMsgTFRequestTF2Friends& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFRequestTF2Friends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFRequestTF2Friends::IsInitialized() const {
  return true;
}

void CMsgTFRequestTF2Friends::Swap(CMsgTFRequestTF2Friends* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFRequestTF2Friends::InternalSwap(CMsgTFRequestTF2Friends* other) {
  using std::swap;
  account_ids_.InternalSwap(&other->account_ids_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFRequestTF2Friends::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFRequestTF2FriendsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFRequestTF2FriendsResponse::kAccountIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFRequestTF2FriendsResponse::CMsgTFRequestTF2FriendsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFRequestTF2FriendsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFRequestTF2FriendsResponse)
}
CMsgTFRequestTF2FriendsResponse::CMsgTFRequestTF2FriendsResponse(const CMsgTFRequestTF2FriendsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFRequestTF2FriendsResponse)
}

void CMsgTFRequestTF2FriendsResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgTFRequestTF2FriendsResponse::~CMsgTFRequestTF2FriendsResponse() {
  // @@protoc_insertion_point(destructor:CMsgTFRequestTF2FriendsResponse)
  SharedDtor();
}

void CMsgTFRequestTF2FriendsResponse::SharedDtor() {
}

void CMsgTFRequestTF2FriendsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFRequestTF2FriendsResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFRequestTF2FriendsResponse& CMsgTFRequestTF2FriendsResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFRequestTF2FriendsResponse();
  return *internal_default_instance();
}

CMsgTFRequestTF2FriendsResponse* CMsgTFRequestTF2FriendsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgTFRequestTF2FriendsResponse* n = new CMsgTFRequestTF2FriendsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFRequestTF2FriendsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFRequestTF2FriendsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFRequestTF2FriendsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFRequestTF2FriendsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_account_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFRequestTF2FriendsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFRequestTF2FriendsResponse)
  return false;
#undef DO_
}

void CMsgTFRequestTF2FriendsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFRequestTF2FriendsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFRequestTF2FriendsResponse)
}

::google::protobuf::uint8* CMsgTFRequestTF2FriendsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFRequestTF2FriendsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->account_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFRequestTF2FriendsResponse)
  return target;
}

size_t CMsgTFRequestTF2FriendsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFRequestTF2FriendsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFRequestTF2FriendsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFRequestTF2FriendsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFRequestTF2FriendsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFRequestTF2FriendsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFRequestTF2FriendsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFRequestTF2FriendsResponse)
    MergeFrom(*source);
  }
}

void CMsgTFRequestTF2FriendsResponse::MergeFrom(const CMsgTFRequestTF2FriendsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFRequestTF2FriendsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void CMsgTFRequestTF2FriendsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFRequestTF2FriendsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFRequestTF2FriendsResponse::CopyFrom(const CMsgTFRequestTF2FriendsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFRequestTF2FriendsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFRequestTF2FriendsResponse::IsInitialized() const {
  return true;
}

void CMsgTFRequestTF2FriendsResponse::Swap(CMsgTFRequestTF2FriendsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFRequestTF2FriendsResponse::InternalSwap(CMsgTFRequestTF2FriendsResponse* other) {
  using std::swap;
  account_ids_.InternalSwap(&other->account_ids_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFRequestTF2FriendsResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSOTFPlayerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOTFPlayerInfo::kNumNewUsersHelpedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOTFPlayerInfo::CSOTFPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFPlayerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSOTFPlayerInfo)
}
CSOTFPlayerInfo::CSOTFPlayerInfo(const CSOTFPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_new_users_helped_ = from.num_new_users_helped_;
  // @@protoc_insertion_point(copy_constructor:CSOTFPlayerInfo)
}

void CSOTFPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  num_new_users_helped_ = 0u;
}

CSOTFPlayerInfo::~CSOTFPlayerInfo() {
  // @@protoc_insertion_point(destructor:CSOTFPlayerInfo)
  SharedDtor();
}

void CSOTFPlayerInfo::SharedDtor() {
}

void CSOTFPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFPlayerInfo::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOTFPlayerInfo& CSOTFPlayerInfo::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFPlayerInfo();
  return *internal_default_instance();
}

CSOTFPlayerInfo* CSOTFPlayerInfo::New(::google::protobuf::Arena* arena) const {
  CSOTFPlayerInfo* n = new CSOTFPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOTFPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_new_users_helped_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOTFPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSOTFPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_new_users_helped = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_new_users_helped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_new_users_helped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSOTFPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSOTFPlayerInfo)
  return false;
#undef DO_
}

void CSOTFPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSOTFPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_new_users_helped = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_new_users_helped(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSOTFPlayerInfo)
}

::google::protobuf::uint8* CSOTFPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_new_users_helped = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_new_users_helped(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFPlayerInfo)
  return target;
}

size_t CSOTFPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFPlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 num_new_users_helped = 1;
  if (has_num_new_users_helped()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_new_users_helped());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOTFPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFPlayerInfo)
    MergeFrom(*source);
  }
}

void CSOTFPlayerInfo::MergeFrom(const CSOTFPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_num_new_users_helped()) {
    set_num_new_users_helped(from.num_new_users_helped());
  }
}

void CSOTFPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFPlayerInfo::CopyFrom(const CSOTFPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFPlayerInfo::IsInitialized() const {
  return true;
}

void CSOTFPlayerInfo::Swap(CSOTFPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOTFPlayerInfo::InternalSwap(CSOTFPlayerInfo* other) {
  using std::swap;
  swap(num_new_users_helped_, other->num_new_users_helped_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOTFPlayerInfo::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFThankedBySomeone::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFThankedBySomeone::kThankerSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFThankedBySomeone::CMsgTFThankedBySomeone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFThankedBySomeone();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFThankedBySomeone)
}
CMsgTFThankedBySomeone::CMsgTFThankedBySomeone(const CMsgTFThankedBySomeone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thanker_steam_id_ = from.thanker_steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFThankedBySomeone)
}

void CMsgTFThankedBySomeone::SharedCtor() {
  _cached_size_ = 0;
  thanker_steam_id_ = GOOGLE_ULONGLONG(0);
}

CMsgTFThankedBySomeone::~CMsgTFThankedBySomeone() {
  // @@protoc_insertion_point(destructor:CMsgTFThankedBySomeone)
  SharedDtor();
}

void CMsgTFThankedBySomeone::SharedDtor() {
}

void CMsgTFThankedBySomeone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFThankedBySomeone::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFThankedBySomeone& CMsgTFThankedBySomeone::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFThankedBySomeone();
  return *internal_default_instance();
}

CMsgTFThankedBySomeone* CMsgTFThankedBySomeone::New(::google::protobuf::Arena* arena) const {
  CMsgTFThankedBySomeone* n = new CMsgTFThankedBySomeone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFThankedBySomeone::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFThankedBySomeone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thanker_steam_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFThankedBySomeone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFThankedBySomeone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 thanker_steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_thanker_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thanker_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFThankedBySomeone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFThankedBySomeone)
  return false;
#undef DO_
}

void CMsgTFThankedBySomeone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFThankedBySomeone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 thanker_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->thanker_steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFThankedBySomeone)
}

::google::protobuf::uint8* CMsgTFThankedBySomeone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFThankedBySomeone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 thanker_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->thanker_steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFThankedBySomeone)
  return target;
}

size_t CMsgTFThankedBySomeone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFThankedBySomeone)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 thanker_steam_id = 1;
  if (has_thanker_steam_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->thanker_steam_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFThankedBySomeone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFThankedBySomeone)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFThankedBySomeone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFThankedBySomeone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFThankedBySomeone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFThankedBySomeone)
    MergeFrom(*source);
  }
}

void CMsgTFThankedBySomeone::MergeFrom(const CMsgTFThankedBySomeone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFThankedBySomeone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_thanker_steam_id()) {
    set_thanker_steam_id(from.thanker_steam_id());
  }
}

void CMsgTFThankedBySomeone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFThankedBySomeone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFThankedBySomeone::CopyFrom(const CMsgTFThankedBySomeone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFThankedBySomeone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFThankedBySomeone::IsInitialized() const {
  return true;
}

void CMsgTFThankedBySomeone::Swap(CMsgTFThankedBySomeone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFThankedBySomeone::InternalSwap(CMsgTFThankedBySomeone* other) {
  using std::swap;
  swap(thanker_steam_id_, other->thanker_steam_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFThankedBySomeone::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFThankedSomeone::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFThankedSomeone::CMsgTFThankedSomeone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFThankedSomeone();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFThankedSomeone)
}
CMsgTFThankedSomeone::CMsgTFThankedSomeone(const CMsgTFThankedSomeone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFThankedSomeone)
}

void CMsgTFThankedSomeone::SharedCtor() {
  _cached_size_ = 0;
}

CMsgTFThankedSomeone::~CMsgTFThankedSomeone() {
  // @@protoc_insertion_point(destructor:CMsgTFThankedSomeone)
  SharedDtor();
}

void CMsgTFThankedSomeone::SharedDtor() {
}

void CMsgTFThankedSomeone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFThankedSomeone::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFThankedSomeone& CMsgTFThankedSomeone::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFThankedSomeone();
  return *internal_default_instance();
}

CMsgTFThankedSomeone* CMsgTFThankedSomeone::New(::google::protobuf::Arena* arena) const {
  CMsgTFThankedSomeone* n = new CMsgTFThankedSomeone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFThankedSomeone::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFThankedSomeone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFThankedSomeone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFThankedSomeone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFThankedSomeone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFThankedSomeone)
  return false;
#undef DO_
}

void CMsgTFThankedSomeone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFThankedSomeone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFThankedSomeone)
}

::google::protobuf::uint8* CMsgTFThankedSomeone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFThankedSomeone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFThankedSomeone)
  return target;
}

size_t CMsgTFThankedSomeone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFThankedSomeone)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFThankedSomeone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFThankedSomeone)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFThankedSomeone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFThankedSomeone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFThankedSomeone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFThankedSomeone)
    MergeFrom(*source);
  }
}

void CMsgTFThankedSomeone::MergeFrom(const CMsgTFThankedSomeone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFThankedSomeone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgTFThankedSomeone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFThankedSomeone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFThankedSomeone::CopyFrom(const CMsgTFThankedSomeone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFThankedSomeone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFThankedSomeone::IsInitialized() const {
  return true;
}

void CMsgTFThankedSomeone::Swap(CMsgTFThankedSomeone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFThankedSomeone::InternalSwap(CMsgTFThankedSomeone* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFThankedSomeone::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFFreeTrialConvertedToPremium::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFFreeTrialConvertedToPremium::CMsgTFFreeTrialConvertedToPremium()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFFreeTrialConvertedToPremium();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFFreeTrialConvertedToPremium)
}
CMsgTFFreeTrialConvertedToPremium::CMsgTFFreeTrialConvertedToPremium(const CMsgTFFreeTrialConvertedToPremium& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFFreeTrialConvertedToPremium)
}

void CMsgTFFreeTrialConvertedToPremium::SharedCtor() {
  _cached_size_ = 0;
}

CMsgTFFreeTrialConvertedToPremium::~CMsgTFFreeTrialConvertedToPremium() {
  // @@protoc_insertion_point(destructor:CMsgTFFreeTrialConvertedToPremium)
  SharedDtor();
}

void CMsgTFFreeTrialConvertedToPremium::SharedDtor() {
}

void CMsgTFFreeTrialConvertedToPremium::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFFreeTrialConvertedToPremium::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFFreeTrialConvertedToPremium& CMsgTFFreeTrialConvertedToPremium::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFFreeTrialConvertedToPremium();
  return *internal_default_instance();
}

CMsgTFFreeTrialConvertedToPremium* CMsgTFFreeTrialConvertedToPremium::New(::google::protobuf::Arena* arena) const {
  CMsgTFFreeTrialConvertedToPremium* n = new CMsgTFFreeTrialConvertedToPremium;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFFreeTrialConvertedToPremium::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFFreeTrialConvertedToPremium)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFFreeTrialConvertedToPremium::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFFreeTrialConvertedToPremium)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFFreeTrialConvertedToPremium)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFFreeTrialConvertedToPremium)
  return false;
#undef DO_
}

void CMsgTFFreeTrialConvertedToPremium::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFFreeTrialConvertedToPremium)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFFreeTrialConvertedToPremium)
}

::google::protobuf::uint8* CMsgTFFreeTrialConvertedToPremium::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFFreeTrialConvertedToPremium)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFFreeTrialConvertedToPremium)
  return target;
}

size_t CMsgTFFreeTrialConvertedToPremium::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFFreeTrialConvertedToPremium)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFFreeTrialConvertedToPremium::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFFreeTrialConvertedToPremium)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFFreeTrialConvertedToPremium* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFFreeTrialConvertedToPremium>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFFreeTrialConvertedToPremium)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFFreeTrialConvertedToPremium)
    MergeFrom(*source);
  }
}

void CMsgTFFreeTrialConvertedToPremium::MergeFrom(const CMsgTFFreeTrialConvertedToPremium& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFFreeTrialConvertedToPremium)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgTFFreeTrialConvertedToPremium::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFFreeTrialConvertedToPremium)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFFreeTrialConvertedToPremium::CopyFrom(const CMsgTFFreeTrialConvertedToPremium& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFFreeTrialConvertedToPremium)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFFreeTrialConvertedToPremium::IsInitialized() const {
  return true;
}

void CMsgTFFreeTrialConvertedToPremium::Swap(CMsgTFFreeTrialConvertedToPremium* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFFreeTrialConvertedToPremium::InternalSwap(CMsgTFFreeTrialConvertedToPremium* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFFreeTrialConvertedToPremium::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSaxxyAwarded::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSaxxyAwarded::kCategoryFieldNumber;
const int CMsgSaxxyAwarded::kWinnerNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSaxxyAwarded::CMsgSaxxyAwarded()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgSaxxyAwarded();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSaxxyAwarded)
}
CMsgSaxxyAwarded::CMsgSaxxyAwarded(const CMsgSaxxyAwarded& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      winner_names_(from.winner_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_ = from.category_;
  // @@protoc_insertion_point(copy_constructor:CMsgSaxxyAwarded)
}

void CMsgSaxxyAwarded::SharedCtor() {
  _cached_size_ = 0;
  category_ = 0u;
}

CMsgSaxxyAwarded::~CMsgSaxxyAwarded() {
  // @@protoc_insertion_point(destructor:CMsgSaxxyAwarded)
  SharedDtor();
}

void CMsgSaxxyAwarded::SharedDtor() {
}

void CMsgSaxxyAwarded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSaxxyAwarded::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSaxxyAwarded& CMsgSaxxyAwarded::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgSaxxyAwarded();
  return *internal_default_instance();
}

CMsgSaxxyAwarded* CMsgSaxxyAwarded::New(::google::protobuf::Arena* arena) const {
  CMsgSaxxyAwarded* n = new CMsgSaxxyAwarded;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSaxxyAwarded::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSaxxyAwarded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  winner_names_.Clear();
  category_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSaxxyAwarded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSaxxyAwarded)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 category = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_category();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string winner_names = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_winner_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->winner_names(this->winner_names_size() - 1).data(),
            static_cast<int>(this->winner_names(this->winner_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSaxxyAwarded.winner_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSaxxyAwarded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSaxxyAwarded)
  return false;
#undef DO_
}

void CMsgSaxxyAwarded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSaxxyAwarded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 category = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->category(), output);
  }

  // repeated string winner_names = 2;
  for (int i = 0, n = this->winner_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winner_names(i).data(), static_cast<int>(this->winner_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSaxxyAwarded.winner_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->winner_names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSaxxyAwarded)
}

::google::protobuf::uint8* CMsgSaxxyAwarded::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSaxxyAwarded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 category = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->category(), target);
  }

  // repeated string winner_names = 2;
  for (int i = 0, n = this->winner_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winner_names(i).data(), static_cast<int>(this->winner_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSaxxyAwarded.winner_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->winner_names(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSaxxyAwarded)
  return target;
}

size_t CMsgSaxxyAwarded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSaxxyAwarded)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string winner_names = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->winner_names_size());
  for (int i = 0, n = this->winner_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->winner_names(i));
  }

  // optional uint32 category = 1;
  if (has_category()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->category());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSaxxyAwarded::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSaxxyAwarded)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSaxxyAwarded* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSaxxyAwarded>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSaxxyAwarded)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSaxxyAwarded)
    MergeFrom(*source);
  }
}

void CMsgSaxxyAwarded::MergeFrom(const CMsgSaxxyAwarded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSaxxyAwarded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  winner_names_.MergeFrom(from.winner_names_);
  if (from.has_category()) {
    set_category(from.category());
  }
}

void CMsgSaxxyAwarded::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSaxxyAwarded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSaxxyAwarded::CopyFrom(const CMsgSaxxyAwarded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSaxxyAwarded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSaxxyAwarded::IsInitialized() const {
  return true;
}

void CMsgSaxxyAwarded::Swap(CMsgSaxxyAwarded* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSaxxyAwarded::InternalSwap(CMsgSaxxyAwarded* other) {
  using std::swap;
  winner_names_.InternalSwap(&other->winner_names_);
  swap(category_, other->category_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSaxxyAwarded::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgReplaySubmitContestEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgReplaySubmitContestEntry::kYoutubeUrlFieldNumber;
const int CMsgReplaySubmitContestEntry::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgReplaySubmitContestEntry::CMsgReplaySubmitContestEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgReplaySubmitContestEntry();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgReplaySubmitContestEntry)
}
CMsgReplaySubmitContestEntry::CMsgReplaySubmitContestEntry(const CMsgReplaySubmitContestEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  youtube_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_youtube_url()) {
    youtube_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtube_url_);
  }
  category_ = from.category_;
  // @@protoc_insertion_point(copy_constructor:CMsgReplaySubmitContestEntry)
}

void CMsgReplaySubmitContestEntry::SharedCtor() {
  _cached_size_ = 0;
  youtube_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_ = 0u;
}

CMsgReplaySubmitContestEntry::~CMsgReplaySubmitContestEntry() {
  // @@protoc_insertion_point(destructor:CMsgReplaySubmitContestEntry)
  SharedDtor();
}

void CMsgReplaySubmitContestEntry::SharedDtor() {
  youtube_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgReplaySubmitContestEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReplaySubmitContestEntry::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgReplaySubmitContestEntry& CMsgReplaySubmitContestEntry::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgReplaySubmitContestEntry();
  return *internal_default_instance();
}

CMsgReplaySubmitContestEntry* CMsgReplaySubmitContestEntry::New(::google::protobuf::Arena* arena) const {
  CMsgReplaySubmitContestEntry* n = new CMsgReplaySubmitContestEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgReplaySubmitContestEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReplaySubmitContestEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!youtube_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*youtube_url_.UnsafeRawStringPointer())->clear();
  }
  category_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgReplaySubmitContestEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgReplaySubmitContestEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string youtube_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtube_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->youtube_url().data(), static_cast<int>(this->youtube_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgReplaySubmitContestEntry.youtube_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 category = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_category();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgReplaySubmitContestEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgReplaySubmitContestEntry)
  return false;
#undef DO_
}

void CMsgReplaySubmitContestEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgReplaySubmitContestEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string youtube_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtube_url().data(), static_cast<int>(this->youtube_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgReplaySubmitContestEntry.youtube_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->youtube_url(), output);
  }

  // optional uint32 category = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->category(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgReplaySubmitContestEntry)
}

::google::protobuf::uint8* CMsgReplaySubmitContestEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReplaySubmitContestEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string youtube_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtube_url().data(), static_cast<int>(this->youtube_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgReplaySubmitContestEntry.youtube_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->youtube_url(), target);
  }

  // optional uint32 category = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->category(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReplaySubmitContestEntry)
  return target;
}

size_t CMsgReplaySubmitContestEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReplaySubmitContestEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string youtube_url = 1;
    if (has_youtube_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtube_url());
    }

    // optional uint32 category = 2;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->category());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReplaySubmitContestEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgReplaySubmitContestEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReplaySubmitContestEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgReplaySubmitContestEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgReplaySubmitContestEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgReplaySubmitContestEntry)
    MergeFrom(*source);
  }
}

void CMsgReplaySubmitContestEntry::MergeFrom(const CMsgReplaySubmitContestEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgReplaySubmitContestEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_youtube_url();
      youtube_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtube_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      category_ = from.category_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgReplaySubmitContestEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgReplaySubmitContestEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReplaySubmitContestEntry::CopyFrom(const CMsgReplaySubmitContestEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReplaySubmitContestEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplaySubmitContestEntry::IsInitialized() const {
  return true;
}

void CMsgReplaySubmitContestEntry::Swap(CMsgReplaySubmitContestEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgReplaySubmitContestEntry::InternalSwap(CMsgReplaySubmitContestEntry* other) {
  using std::swap;
  youtube_url_.Swap(&other->youtube_url_);
  swap(category_, other->category_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgReplaySubmitContestEntry::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgReplaySubmitContestEntryResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgReplaySubmitContestEntryResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgReplaySubmitContestEntryResponse::CMsgReplaySubmitContestEntryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgReplaySubmitContestEntryResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgReplaySubmitContestEntryResponse)
}
CMsgReplaySubmitContestEntryResponse::CMsgReplaySubmitContestEntryResponse(const CMsgReplaySubmitContestEntryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgReplaySubmitContestEntryResponse)
}

void CMsgReplaySubmitContestEntryResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
}

CMsgReplaySubmitContestEntryResponse::~CMsgReplaySubmitContestEntryResponse() {
  // @@protoc_insertion_point(destructor:CMsgReplaySubmitContestEntryResponse)
  SharedDtor();
}

void CMsgReplaySubmitContestEntryResponse::SharedDtor() {
}

void CMsgReplaySubmitContestEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReplaySubmitContestEntryResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgReplaySubmitContestEntryResponse& CMsgReplaySubmitContestEntryResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgReplaySubmitContestEntryResponse();
  return *internal_default_instance();
}

CMsgReplaySubmitContestEntryResponse* CMsgReplaySubmitContestEntryResponse::New(::google::protobuf::Arena* arena) const {
  CMsgReplaySubmitContestEntryResponse* n = new CMsgReplaySubmitContestEntryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgReplaySubmitContestEntryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReplaySubmitContestEntryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgReplaySubmitContestEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgReplaySubmitContestEntryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgReplaySubmitContestEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgReplaySubmitContestEntryResponse)
  return false;
#undef DO_
}

void CMsgReplaySubmitContestEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgReplaySubmitContestEntryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgReplaySubmitContestEntryResponse)
}

::google::protobuf::uint8* CMsgReplaySubmitContestEntryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReplaySubmitContestEntryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReplaySubmitContestEntryResponse)
  return target;
}

size_t CMsgReplaySubmitContestEntryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReplaySubmitContestEntryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReplaySubmitContestEntryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgReplaySubmitContestEntryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReplaySubmitContestEntryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgReplaySubmitContestEntryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgReplaySubmitContestEntryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgReplaySubmitContestEntryResponse)
    MergeFrom(*source);
  }
}

void CMsgReplaySubmitContestEntryResponse::MergeFrom(const CMsgReplaySubmitContestEntryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgReplaySubmitContestEntryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_success()) {
    set_success(from.success());
  }
}

void CMsgReplaySubmitContestEntryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgReplaySubmitContestEntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReplaySubmitContestEntryResponse::CopyFrom(const CMsgReplaySubmitContestEntryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReplaySubmitContestEntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplaySubmitContestEntryResponse::IsInitialized() const {
  return true;
}

void CMsgReplaySubmitContestEntryResponse::Swap(CMsgReplaySubmitContestEntryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgReplaySubmitContestEntryResponse::InternalSwap(CMsgReplaySubmitContestEntryResponse* other) {
  using std::swap;
  swap(success_, other->success_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgReplaySubmitContestEntryResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CReplayCachedContestData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CReplayCachedContestData::kTimestampFieldNumber;
const int CReplayCachedContestData::kNumVotesLastDayFieldNumber;
const int CReplayCachedContestData::kVideoEntryIdsFieldNumber;
const int CReplayCachedContestData::kNumFlagsLastDayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CReplayCachedContestData::CReplayCachedContestData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCReplayCachedContestData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CReplayCachedContestData)
}
CReplayCachedContestData::CReplayCachedContestData(const CReplayCachedContestData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      video_entry_ids_(from.video_entry_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_flags_last_day_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(num_flags_last_day_));
  // @@protoc_insertion_point(copy_constructor:CReplayCachedContestData)
}

void CReplayCachedContestData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_flags_last_day_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(num_flags_last_day_));
}

CReplayCachedContestData::~CReplayCachedContestData() {
  // @@protoc_insertion_point(destructor:CReplayCachedContestData)
  SharedDtor();
}

void CReplayCachedContestData::SharedDtor() {
}

void CReplayCachedContestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CReplayCachedContestData::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CReplayCachedContestData& CReplayCachedContestData::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCReplayCachedContestData();
  return *internal_default_instance();
}

CReplayCachedContestData* CReplayCachedContestData::New(::google::protobuf::Arena* arena) const {
  CReplayCachedContestData* n = new CReplayCachedContestData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CReplayCachedContestData::Clear() {
// @@protoc_insertion_point(message_clear_start:CReplayCachedContestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  video_entry_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_flags_last_day_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(num_flags_last_day_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CReplayCachedContestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CReplayCachedContestData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_votes_last_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_votes_last_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_votes_last_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 video_entry_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_video_entry_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_video_entry_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_flags_last_day = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_num_flags_last_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_flags_last_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CReplayCachedContestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CReplayCachedContestData)
  return false;
#undef DO_
}

void CReplayCachedContestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CReplayCachedContestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->timestamp(), output);
  }

  // optional uint32 num_votes_last_day = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_votes_last_day(), output);
  }

  // repeated uint32 video_entry_ids = 3;
  for (int i = 0, n = this->video_entry_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->video_entry_ids(i), output);
  }

  // optional uint32 num_flags_last_day = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_flags_last_day(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CReplayCachedContestData)
}

::google::protobuf::uint8* CReplayCachedContestData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CReplayCachedContestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->timestamp(), target);
  }

  // optional uint32 num_votes_last_day = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_votes_last_day(), target);
  }

  // repeated uint32 video_entry_ids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->video_entry_ids_, target);

  // optional uint32 num_flags_last_day = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_flags_last_day(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CReplayCachedContestData)
  return target;
}

size_t CReplayCachedContestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CReplayCachedContestData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 video_entry_ids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->video_entry_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->video_entry_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }

    // optional uint32 num_votes_last_day = 2;
    if (has_num_votes_last_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_votes_last_day());
    }

    // optional uint32 num_flags_last_day = 4;
    if (has_num_flags_last_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_flags_last_day());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CReplayCachedContestData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CReplayCachedContestData)
  GOOGLE_DCHECK_NE(&from, this);
  const CReplayCachedContestData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CReplayCachedContestData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CReplayCachedContestData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CReplayCachedContestData)
    MergeFrom(*source);
  }
}

void CReplayCachedContestData::MergeFrom(const CReplayCachedContestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CReplayCachedContestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  video_entry_ids_.MergeFrom(from.video_entry_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_votes_last_day_ = from.num_votes_last_day_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_flags_last_day_ = from.num_flags_last_day_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CReplayCachedContestData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CReplayCachedContestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CReplayCachedContestData::CopyFrom(const CReplayCachedContestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CReplayCachedContestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CReplayCachedContestData::IsInitialized() const {
  return true;
}

void CReplayCachedContestData::Swap(CReplayCachedContestData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CReplayCachedContestData::InternalSwap(CReplayCachedContestData* other) {
  using std::swap;
  video_entry_ids_.InternalSwap(&other->video_entry_ids_);
  swap(timestamp_, other->timestamp_);
  swap(num_votes_last_day_, other->num_votes_last_day_);
  swap(num_flags_last_day_, other->num_flags_last_day_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CReplayCachedContestData::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFCoaching_AddToCoaches::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFCoaching_AddToCoaches::CMsgTFCoaching_AddToCoaches()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_AddToCoaches();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFCoaching_AddToCoaches)
}
CMsgTFCoaching_AddToCoaches::CMsgTFCoaching_AddToCoaches(const CMsgTFCoaching_AddToCoaches& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_AddToCoaches)
}

void CMsgTFCoaching_AddToCoaches::SharedCtor() {
  _cached_size_ = 0;
}

CMsgTFCoaching_AddToCoaches::~CMsgTFCoaching_AddToCoaches() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_AddToCoaches)
  SharedDtor();
}

void CMsgTFCoaching_AddToCoaches::SharedDtor() {
}

void CMsgTFCoaching_AddToCoaches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_AddToCoaches::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFCoaching_AddToCoaches& CMsgTFCoaching_AddToCoaches::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_AddToCoaches();
  return *internal_default_instance();
}

CMsgTFCoaching_AddToCoaches* CMsgTFCoaching_AddToCoaches::New(::google::protobuf::Arena* arena) const {
  CMsgTFCoaching_AddToCoaches* n = new CMsgTFCoaching_AddToCoaches;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFCoaching_AddToCoaches::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_AddToCoaches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFCoaching_AddToCoaches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFCoaching_AddToCoaches)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFCoaching_AddToCoaches)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFCoaching_AddToCoaches)
  return false;
#undef DO_
}

void CMsgTFCoaching_AddToCoaches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFCoaching_AddToCoaches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFCoaching_AddToCoaches)
}

::google::protobuf::uint8* CMsgTFCoaching_AddToCoaches::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_AddToCoaches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_AddToCoaches)
  return target;
}

size_t CMsgTFCoaching_AddToCoaches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_AddToCoaches)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_AddToCoaches::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_AddToCoaches)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_AddToCoaches* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFCoaching_AddToCoaches>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_AddToCoaches)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_AddToCoaches)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_AddToCoaches::MergeFrom(const CMsgTFCoaching_AddToCoaches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_AddToCoaches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgTFCoaching_AddToCoaches::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_AddToCoaches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_AddToCoaches::CopyFrom(const CMsgTFCoaching_AddToCoaches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_AddToCoaches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_AddToCoaches::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_AddToCoaches::Swap(CMsgTFCoaching_AddToCoaches* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFCoaching_AddToCoaches::InternalSwap(CMsgTFCoaching_AddToCoaches* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFCoaching_AddToCoaches::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFCoaching_RemoveFromCoaches::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFCoaching_RemoveFromCoaches::CMsgTFCoaching_RemoveFromCoaches()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_RemoveFromCoaches();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFCoaching_RemoveFromCoaches)
}
CMsgTFCoaching_RemoveFromCoaches::CMsgTFCoaching_RemoveFromCoaches(const CMsgTFCoaching_RemoveFromCoaches& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_RemoveFromCoaches)
}

void CMsgTFCoaching_RemoveFromCoaches::SharedCtor() {
  _cached_size_ = 0;
}

CMsgTFCoaching_RemoveFromCoaches::~CMsgTFCoaching_RemoveFromCoaches() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_RemoveFromCoaches)
  SharedDtor();
}

void CMsgTFCoaching_RemoveFromCoaches::SharedDtor() {
}

void CMsgTFCoaching_RemoveFromCoaches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_RemoveFromCoaches::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFCoaching_RemoveFromCoaches& CMsgTFCoaching_RemoveFromCoaches::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_RemoveFromCoaches();
  return *internal_default_instance();
}

CMsgTFCoaching_RemoveFromCoaches* CMsgTFCoaching_RemoveFromCoaches::New(::google::protobuf::Arena* arena) const {
  CMsgTFCoaching_RemoveFromCoaches* n = new CMsgTFCoaching_RemoveFromCoaches;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFCoaching_RemoveFromCoaches::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_RemoveFromCoaches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFCoaching_RemoveFromCoaches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFCoaching_RemoveFromCoaches)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFCoaching_RemoveFromCoaches)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFCoaching_RemoveFromCoaches)
  return false;
#undef DO_
}

void CMsgTFCoaching_RemoveFromCoaches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFCoaching_RemoveFromCoaches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFCoaching_RemoveFromCoaches)
}

::google::protobuf::uint8* CMsgTFCoaching_RemoveFromCoaches::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_RemoveFromCoaches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_RemoveFromCoaches)
  return target;
}

size_t CMsgTFCoaching_RemoveFromCoaches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_RemoveFromCoaches)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_RemoveFromCoaches::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_RemoveFromCoaches)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_RemoveFromCoaches* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFCoaching_RemoveFromCoaches>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_RemoveFromCoaches)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_RemoveFromCoaches)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_RemoveFromCoaches::MergeFrom(const CMsgTFCoaching_RemoveFromCoaches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_RemoveFromCoaches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgTFCoaching_RemoveFromCoaches::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_RemoveFromCoaches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_RemoveFromCoaches::CopyFrom(const CMsgTFCoaching_RemoveFromCoaches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_RemoveFromCoaches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_RemoveFromCoaches::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_RemoveFromCoaches::Swap(CMsgTFCoaching_RemoveFromCoaches* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFCoaching_RemoveFromCoaches::InternalSwap(CMsgTFCoaching_RemoveFromCoaches* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFCoaching_RemoveFromCoaches::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFCoaching_FindCoach::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFCoaching_FindCoach::kAccountIdFriendAsCoachFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFCoaching_FindCoach::CMsgTFCoaching_FindCoach()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_FindCoach();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFCoaching_FindCoach)
}
CMsgTFCoaching_FindCoach::CMsgTFCoaching_FindCoach(const CMsgTFCoaching_FindCoach& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_friend_as_coach_ = from.account_id_friend_as_coach_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_FindCoach)
}

void CMsgTFCoaching_FindCoach::SharedCtor() {
  _cached_size_ = 0;
  account_id_friend_as_coach_ = 0u;
}

CMsgTFCoaching_FindCoach::~CMsgTFCoaching_FindCoach() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_FindCoach)
  SharedDtor();
}

void CMsgTFCoaching_FindCoach::SharedDtor() {
}

void CMsgTFCoaching_FindCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_FindCoach::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFCoaching_FindCoach& CMsgTFCoaching_FindCoach::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_FindCoach();
  return *internal_default_instance();
}

CMsgTFCoaching_FindCoach* CMsgTFCoaching_FindCoach::New(::google::protobuf::Arena* arena) const {
  CMsgTFCoaching_FindCoach* n = new CMsgTFCoaching_FindCoach;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFCoaching_FindCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_FindCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_friend_as_coach_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFCoaching_FindCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFCoaching_FindCoach)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_friend_as_coach = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id_friend_as_coach();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_friend_as_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFCoaching_FindCoach)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFCoaching_FindCoach)
  return false;
#undef DO_
}

void CMsgTFCoaching_FindCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFCoaching_FindCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_friend_as_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_friend_as_coach(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFCoaching_FindCoach)
}

::google::protobuf::uint8* CMsgTFCoaching_FindCoach::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_FindCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_friend_as_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_friend_as_coach(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_FindCoach)
  return target;
}

size_t CMsgTFCoaching_FindCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_FindCoach)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 account_id_friend_as_coach = 1;
  if (has_account_id_friend_as_coach()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id_friend_as_coach());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_FindCoach::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_FindCoach)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_FindCoach* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFCoaching_FindCoach>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_FindCoach)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_FindCoach)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_FindCoach::MergeFrom(const CMsgTFCoaching_FindCoach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_FindCoach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id_friend_as_coach()) {
    set_account_id_friend_as_coach(from.account_id_friend_as_coach());
  }
}

void CMsgTFCoaching_FindCoach::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_FindCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_FindCoach::CopyFrom(const CMsgTFCoaching_FindCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_FindCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_FindCoach::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_FindCoach::Swap(CMsgTFCoaching_FindCoach* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFCoaching_FindCoach::InternalSwap(CMsgTFCoaching_FindCoach* other) {
  using std::swap;
  swap(account_id_friend_as_coach_, other->account_id_friend_as_coach_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFCoaching_FindCoach::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFCoaching_FindCoachResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFCoaching_FindCoachResponse::kFoundCoachFieldNumber;
const int CMsgTFCoaching_FindCoachResponse::kNumLikesFieldNumber;
const int CMsgTFCoaching_FindCoachResponse::kCoachNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFCoaching_FindCoachResponse::CMsgTFCoaching_FindCoachResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_FindCoachResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFCoaching_FindCoachResponse)
}
CMsgTFCoaching_FindCoachResponse::CMsgTFCoaching_FindCoachResponse(const CMsgTFCoaching_FindCoachResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  coach_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_coach_name()) {
    coach_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coach_name_);
  }
  ::memcpy(&found_coach_, &from.found_coach_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_likes_) -
    reinterpret_cast<char*>(&found_coach_)) + sizeof(num_likes_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_FindCoachResponse)
}

void CMsgTFCoaching_FindCoachResponse::SharedCtor() {
  _cached_size_ = 0;
  coach_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&found_coach_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_likes_) -
      reinterpret_cast<char*>(&found_coach_)) + sizeof(num_likes_));
}

CMsgTFCoaching_FindCoachResponse::~CMsgTFCoaching_FindCoachResponse() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_FindCoachResponse)
  SharedDtor();
}

void CMsgTFCoaching_FindCoachResponse::SharedDtor() {
  coach_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTFCoaching_FindCoachResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_FindCoachResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFCoaching_FindCoachResponse& CMsgTFCoaching_FindCoachResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_FindCoachResponse();
  return *internal_default_instance();
}

CMsgTFCoaching_FindCoachResponse* CMsgTFCoaching_FindCoachResponse::New(::google::protobuf::Arena* arena) const {
  CMsgTFCoaching_FindCoachResponse* n = new CMsgTFCoaching_FindCoachResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFCoaching_FindCoachResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_FindCoachResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!coach_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*coach_name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&found_coach_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_likes_) -
        reinterpret_cast<char*>(&found_coach_)) + sizeof(num_likes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFCoaching_FindCoachResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFCoaching_FindCoachResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool found_coach = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_found_coach();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &found_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_likes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string coach_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coach_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->coach_name().data(), static_cast<int>(this->coach_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgTFCoaching_FindCoachResponse.coach_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFCoaching_FindCoachResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFCoaching_FindCoachResponse)
  return false;
#undef DO_
}

void CMsgTFCoaching_FindCoachResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFCoaching_FindCoachResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool found_coach = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->found_coach(), output);
  }

  // optional uint32 num_likes = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_likes(), output);
  }

  // optional string coach_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coach_name().data(), static_cast<int>(this->coach_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFCoaching_FindCoachResponse.coach_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->coach_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFCoaching_FindCoachResponse)
}

::google::protobuf::uint8* CMsgTFCoaching_FindCoachResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_FindCoachResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool found_coach = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->found_coach(), target);
  }

  // optional uint32 num_likes = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_likes(), target);
  }

  // optional string coach_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coach_name().data(), static_cast<int>(this->coach_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFCoaching_FindCoachResponse.coach_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->coach_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_FindCoachResponse)
  return target;
}

size_t CMsgTFCoaching_FindCoachResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_FindCoachResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string coach_name = 3;
    if (has_coach_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coach_name());
    }

    // optional bool found_coach = 1;
    if (has_found_coach()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_likes = 2;
    if (has_num_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_likes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_FindCoachResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_FindCoachResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_FindCoachResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFCoaching_FindCoachResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_FindCoachResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_FindCoachResponse)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_FindCoachResponse::MergeFrom(const CMsgTFCoaching_FindCoachResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_FindCoachResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_coach_name();
      coach_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coach_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      found_coach_ = from.found_coach_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_likes_ = from.num_likes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFCoaching_FindCoachResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_FindCoachResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_FindCoachResponse::CopyFrom(const CMsgTFCoaching_FindCoachResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_FindCoachResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_FindCoachResponse::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_FindCoachResponse::Swap(CMsgTFCoaching_FindCoachResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFCoaching_FindCoachResponse::InternalSwap(CMsgTFCoaching_FindCoachResponse* other) {
  using std::swap;
  coach_name_.Swap(&other->coach_name_);
  swap(found_coach_, other->found_coach_);
  swap(num_likes_, other->num_likes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFCoaching_FindCoachResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFCoaching_AskCoach::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFCoaching_AskCoach::kAccountIdStudentFieldNumber;
const int CMsgTFCoaching_AskCoach::kStudentIsFriendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFCoaching_AskCoach::CMsgTFCoaching_AskCoach()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_AskCoach();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFCoaching_AskCoach)
}
CMsgTFCoaching_AskCoach::CMsgTFCoaching_AskCoach(const CMsgTFCoaching_AskCoach& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_student_, &from.account_id_student_,
    static_cast<size_t>(reinterpret_cast<char*>(&student_is_friend_) -
    reinterpret_cast<char*>(&account_id_student_)) + sizeof(student_is_friend_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_AskCoach)
}

void CMsgTFCoaching_AskCoach::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_student_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&student_is_friend_) -
      reinterpret_cast<char*>(&account_id_student_)) + sizeof(student_is_friend_));
}

CMsgTFCoaching_AskCoach::~CMsgTFCoaching_AskCoach() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_AskCoach)
  SharedDtor();
}

void CMsgTFCoaching_AskCoach::SharedDtor() {
}

void CMsgTFCoaching_AskCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_AskCoach::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFCoaching_AskCoach& CMsgTFCoaching_AskCoach::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_AskCoach();
  return *internal_default_instance();
}

CMsgTFCoaching_AskCoach* CMsgTFCoaching_AskCoach::New(::google::protobuf::Arena* arena) const {
  CMsgTFCoaching_AskCoach* n = new CMsgTFCoaching_AskCoach;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFCoaching_AskCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_AskCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&account_id_student_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&student_is_friend_) -
        reinterpret_cast<char*>(&account_id_student_)) + sizeof(student_is_friend_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFCoaching_AskCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFCoaching_AskCoach)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_student = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id_student();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_student_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool student_is_friend = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_student_is_friend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &student_is_friend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFCoaching_AskCoach)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFCoaching_AskCoach)
  return false;
#undef DO_
}

void CMsgTFCoaching_AskCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFCoaching_AskCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_student = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_student(), output);
  }

  // optional bool student_is_friend = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->student_is_friend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFCoaching_AskCoach)
}

::google::protobuf::uint8* CMsgTFCoaching_AskCoach::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_AskCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_student = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_student(), target);
  }

  // optional bool student_is_friend = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->student_is_friend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_AskCoach)
  return target;
}

size_t CMsgTFCoaching_AskCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_AskCoach)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id_student = 1;
    if (has_account_id_student()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_student());
    }

    // optional bool student_is_friend = 2;
    if (has_student_is_friend()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_AskCoach::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_AskCoach)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_AskCoach* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFCoaching_AskCoach>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_AskCoach)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_AskCoach)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_AskCoach::MergeFrom(const CMsgTFCoaching_AskCoach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_AskCoach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_student_ = from.account_id_student_;
    }
    if (cached_has_bits & 0x00000002u) {
      student_is_friend_ = from.student_is_friend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFCoaching_AskCoach::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_AskCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_AskCoach::CopyFrom(const CMsgTFCoaching_AskCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_AskCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_AskCoach::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_AskCoach::Swap(CMsgTFCoaching_AskCoach* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFCoaching_AskCoach::InternalSwap(CMsgTFCoaching_AskCoach* other) {
  using std::swap;
  swap(account_id_student_, other->account_id_student_);
  swap(student_is_friend_, other->student_is_friend_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFCoaching_AskCoach::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFCoaching_AskCoachResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFCoaching_AskCoachResponse::kAcceptCoachingAssignmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFCoaching_AskCoachResponse::CMsgTFCoaching_AskCoachResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_AskCoachResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFCoaching_AskCoachResponse)
}
CMsgTFCoaching_AskCoachResponse::CMsgTFCoaching_AskCoachResponse(const CMsgTFCoaching_AskCoachResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accept_coaching_assignment_ = from.accept_coaching_assignment_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_AskCoachResponse)
}

void CMsgTFCoaching_AskCoachResponse::SharedCtor() {
  _cached_size_ = 0;
  accept_coaching_assignment_ = false;
}

CMsgTFCoaching_AskCoachResponse::~CMsgTFCoaching_AskCoachResponse() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_AskCoachResponse)
  SharedDtor();
}

void CMsgTFCoaching_AskCoachResponse::SharedDtor() {
}

void CMsgTFCoaching_AskCoachResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_AskCoachResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFCoaching_AskCoachResponse& CMsgTFCoaching_AskCoachResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_AskCoachResponse();
  return *internal_default_instance();
}

CMsgTFCoaching_AskCoachResponse* CMsgTFCoaching_AskCoachResponse::New(::google::protobuf::Arena* arena) const {
  CMsgTFCoaching_AskCoachResponse* n = new CMsgTFCoaching_AskCoachResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFCoaching_AskCoachResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_AskCoachResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accept_coaching_assignment_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFCoaching_AskCoachResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFCoaching_AskCoachResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool accept_coaching_assignment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accept_coaching_assignment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_coaching_assignment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFCoaching_AskCoachResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFCoaching_AskCoachResponse)
  return false;
#undef DO_
}

void CMsgTFCoaching_AskCoachResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFCoaching_AskCoachResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool accept_coaching_assignment = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->accept_coaching_assignment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFCoaching_AskCoachResponse)
}

::google::protobuf::uint8* CMsgTFCoaching_AskCoachResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_AskCoachResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool accept_coaching_assignment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->accept_coaching_assignment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_AskCoachResponse)
  return target;
}

size_t CMsgTFCoaching_AskCoachResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_AskCoachResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool accept_coaching_assignment = 1;
  if (has_accept_coaching_assignment()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_AskCoachResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_AskCoachResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_AskCoachResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFCoaching_AskCoachResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_AskCoachResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_AskCoachResponse)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_AskCoachResponse::MergeFrom(const CMsgTFCoaching_AskCoachResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_AskCoachResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_accept_coaching_assignment()) {
    set_accept_coaching_assignment(from.accept_coaching_assignment());
  }
}

void CMsgTFCoaching_AskCoachResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_AskCoachResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_AskCoachResponse::CopyFrom(const CMsgTFCoaching_AskCoachResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_AskCoachResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_AskCoachResponse::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_AskCoachResponse::Swap(CMsgTFCoaching_AskCoachResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFCoaching_AskCoachResponse::InternalSwap(CMsgTFCoaching_AskCoachResponse* other) {
  using std::swap;
  swap(accept_coaching_assignment_, other->accept_coaching_assignment_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFCoaching_AskCoachResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFCoaching_CoachJoinGame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFCoaching_CoachJoinGame::kJoinGameFieldNumber;
const int CMsgTFCoaching_CoachJoinGame::kServerAddressFieldNumber;
const int CMsgTFCoaching_CoachJoinGame::kServerPortFieldNumber;
const int CMsgTFCoaching_CoachJoinGame::kAccountIdStudentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFCoaching_CoachJoinGame::CMsgTFCoaching_CoachJoinGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_CoachJoinGame();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFCoaching_CoachJoinGame)
}
CMsgTFCoaching_CoachJoinGame::CMsgTFCoaching_CoachJoinGame(const CMsgTFCoaching_CoachJoinGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&join_game_, &from.join_game_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_student_) -
    reinterpret_cast<char*>(&join_game_)) + sizeof(account_id_student_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_CoachJoinGame)
}

void CMsgTFCoaching_CoachJoinGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&join_game_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_student_) -
      reinterpret_cast<char*>(&join_game_)) + sizeof(account_id_student_));
}

CMsgTFCoaching_CoachJoinGame::~CMsgTFCoaching_CoachJoinGame() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_CoachJoinGame)
  SharedDtor();
}

void CMsgTFCoaching_CoachJoinGame::SharedDtor() {
}

void CMsgTFCoaching_CoachJoinGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_CoachJoinGame::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFCoaching_CoachJoinGame& CMsgTFCoaching_CoachJoinGame::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_CoachJoinGame();
  return *internal_default_instance();
}

CMsgTFCoaching_CoachJoinGame* CMsgTFCoaching_CoachJoinGame::New(::google::protobuf::Arena* arena) const {
  CMsgTFCoaching_CoachJoinGame* n = new CMsgTFCoaching_CoachJoinGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFCoaching_CoachJoinGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_CoachJoinGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&join_game_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_student_) -
        reinterpret_cast<char*>(&join_game_)) + sizeof(account_id_student_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFCoaching_CoachJoinGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFCoaching_CoachJoinGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool join_game = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_join_game();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &join_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_server_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_server_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id_student = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_account_id_student();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_student_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFCoaching_CoachJoinGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFCoaching_CoachJoinGame)
  return false;
#undef DO_
}

void CMsgTFCoaching_CoachJoinGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFCoaching_CoachJoinGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool join_game = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->join_game(), output);
  }

  // optional uint32 server_address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_address(), output);
  }

  // optional uint32 server_port = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_port(), output);
  }

  // optional uint32 account_id_student = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account_id_student(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFCoaching_CoachJoinGame)
}

::google::protobuf::uint8* CMsgTFCoaching_CoachJoinGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_CoachJoinGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool join_game = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->join_game(), target);
  }

  // optional uint32 server_address = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_address(), target);
  }

  // optional uint32 server_port = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_port(), target);
  }

  // optional uint32 account_id_student = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account_id_student(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_CoachJoinGame)
  return target;
}

size_t CMsgTFCoaching_CoachJoinGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_CoachJoinGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool join_game = 1;
    if (has_join_game()) {
      total_size += 1 + 1;
    }

    // optional uint32 server_address = 2;
    if (has_server_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_address());
    }

    // optional uint32 server_port = 3;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 account_id_student = 4;
    if (has_account_id_student()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_student());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_CoachJoinGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_CoachJoinGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_CoachJoinGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFCoaching_CoachJoinGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_CoachJoinGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_CoachJoinGame)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_CoachJoinGame::MergeFrom(const CMsgTFCoaching_CoachJoinGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_CoachJoinGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      join_game_ = from.join_game_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_address_ = from.server_address_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_id_student_ = from.account_id_student_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFCoaching_CoachJoinGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_CoachJoinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoinGame::CopyFrom(const CMsgTFCoaching_CoachJoinGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_CoachJoinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_CoachJoinGame::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_CoachJoinGame::Swap(CMsgTFCoaching_CoachJoinGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFCoaching_CoachJoinGame::InternalSwap(CMsgTFCoaching_CoachJoinGame* other) {
  using std::swap;
  swap(join_game_, other->join_game_);
  swap(server_address_, other->server_address_);
  swap(server_port_, other->server_port_);
  swap(account_id_student_, other->account_id_student_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFCoaching_CoachJoinGame::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFCoaching_CoachJoining::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFCoaching_CoachJoining::kAccountIdCoachFieldNumber;
const int CMsgTFCoaching_CoachJoining::kAccountIdStudentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFCoaching_CoachJoining::CMsgTFCoaching_CoachJoining()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_CoachJoining();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFCoaching_CoachJoining)
}
CMsgTFCoaching_CoachJoining::CMsgTFCoaching_CoachJoining(const CMsgTFCoaching_CoachJoining& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_coach_, &from.account_id_coach_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_student_) -
    reinterpret_cast<char*>(&account_id_coach_)) + sizeof(account_id_student_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_CoachJoining)
}

void CMsgTFCoaching_CoachJoining::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_coach_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_student_) -
      reinterpret_cast<char*>(&account_id_coach_)) + sizeof(account_id_student_));
}

CMsgTFCoaching_CoachJoining::~CMsgTFCoaching_CoachJoining() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_CoachJoining)
  SharedDtor();
}

void CMsgTFCoaching_CoachJoining::SharedDtor() {
}

void CMsgTFCoaching_CoachJoining::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_CoachJoining::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFCoaching_CoachJoining& CMsgTFCoaching_CoachJoining::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_CoachJoining();
  return *internal_default_instance();
}

CMsgTFCoaching_CoachJoining* CMsgTFCoaching_CoachJoining::New(::google::protobuf::Arena* arena) const {
  CMsgTFCoaching_CoachJoining* n = new CMsgTFCoaching_CoachJoining;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFCoaching_CoachJoining::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_CoachJoining)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&account_id_coach_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_student_) -
        reinterpret_cast<char*>(&account_id_coach_)) + sizeof(account_id_student_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFCoaching_CoachJoining::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFCoaching_CoachJoining)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_coach = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id_coach();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id_student = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_account_id_student();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_student_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFCoaching_CoachJoining)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFCoaching_CoachJoining)
  return false;
#undef DO_
}

void CMsgTFCoaching_CoachJoining::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFCoaching_CoachJoining)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_coach(), output);
  }

  // optional uint32 account_id_student = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id_student(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFCoaching_CoachJoining)
}

::google::protobuf::uint8* CMsgTFCoaching_CoachJoining::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_CoachJoining)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_coach(), target);
  }

  // optional uint32 account_id_student = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id_student(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_CoachJoining)
  return target;
}

size_t CMsgTFCoaching_CoachJoining::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_CoachJoining)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id_coach = 1;
    if (has_account_id_coach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_coach());
    }

    // optional uint32 account_id_student = 2;
    if (has_account_id_student()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_student());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_CoachJoining::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_CoachJoining)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_CoachJoining* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFCoaching_CoachJoining>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_CoachJoining)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_CoachJoining)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_CoachJoining::MergeFrom(const CMsgTFCoaching_CoachJoining& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_CoachJoining)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_coach_ = from.account_id_coach_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_student_ = from.account_id_student_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFCoaching_CoachJoining::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_CoachJoining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoining::CopyFrom(const CMsgTFCoaching_CoachJoining& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_CoachJoining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_CoachJoining::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_CoachJoining::Swap(CMsgTFCoaching_CoachJoining* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFCoaching_CoachJoining::InternalSwap(CMsgTFCoaching_CoachJoining* other) {
  using std::swap;
  swap(account_id_coach_, other->account_id_coach_);
  swap(account_id_student_, other->account_id_student_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFCoaching_CoachJoining::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFCoaching_CoachJoined::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFCoaching_CoachJoined::kAccountIdCoachFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFCoaching_CoachJoined::CMsgTFCoaching_CoachJoined()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_CoachJoined();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFCoaching_CoachJoined)
}
CMsgTFCoaching_CoachJoined::CMsgTFCoaching_CoachJoined(const CMsgTFCoaching_CoachJoined& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_coach_ = from.account_id_coach_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_CoachJoined)
}

void CMsgTFCoaching_CoachJoined::SharedCtor() {
  _cached_size_ = 0;
  account_id_coach_ = 0u;
}

CMsgTFCoaching_CoachJoined::~CMsgTFCoaching_CoachJoined() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_CoachJoined)
  SharedDtor();
}

void CMsgTFCoaching_CoachJoined::SharedDtor() {
}

void CMsgTFCoaching_CoachJoined::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_CoachJoined::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFCoaching_CoachJoined& CMsgTFCoaching_CoachJoined::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_CoachJoined();
  return *internal_default_instance();
}

CMsgTFCoaching_CoachJoined* CMsgTFCoaching_CoachJoined::New(::google::protobuf::Arena* arena) const {
  CMsgTFCoaching_CoachJoined* n = new CMsgTFCoaching_CoachJoined;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFCoaching_CoachJoined::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_CoachJoined)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_coach_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFCoaching_CoachJoined::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFCoaching_CoachJoined)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_coach = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id_coach();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFCoaching_CoachJoined)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFCoaching_CoachJoined)
  return false;
#undef DO_
}

void CMsgTFCoaching_CoachJoined::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFCoaching_CoachJoined)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_coach(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFCoaching_CoachJoined)
}

::google::protobuf::uint8* CMsgTFCoaching_CoachJoined::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_CoachJoined)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_coach(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_CoachJoined)
  return target;
}

size_t CMsgTFCoaching_CoachJoined::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_CoachJoined)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 account_id_coach = 1;
  if (has_account_id_coach()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id_coach());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_CoachJoined::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_CoachJoined)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_CoachJoined* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFCoaching_CoachJoined>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_CoachJoined)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_CoachJoined)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_CoachJoined::MergeFrom(const CMsgTFCoaching_CoachJoined& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_CoachJoined)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id_coach()) {
    set_account_id_coach(from.account_id_coach());
  }
}

void CMsgTFCoaching_CoachJoined::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_CoachJoined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoined::CopyFrom(const CMsgTFCoaching_CoachJoined& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_CoachJoined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_CoachJoined::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_CoachJoined::Swap(CMsgTFCoaching_CoachJoined* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFCoaching_CoachJoined::InternalSwap(CMsgTFCoaching_CoachJoined* other) {
  using std::swap;
  swap(account_id_coach_, other->account_id_coach_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFCoaching_CoachJoined::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFCoaching_LikeCurrentCoach::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFCoaching_LikeCurrentCoach::kLikeCoachFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFCoaching_LikeCurrentCoach::CMsgTFCoaching_LikeCurrentCoach()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_LikeCurrentCoach();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFCoaching_LikeCurrentCoach)
}
CMsgTFCoaching_LikeCurrentCoach::CMsgTFCoaching_LikeCurrentCoach(const CMsgTFCoaching_LikeCurrentCoach& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  like_coach_ = from.like_coach_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_LikeCurrentCoach)
}

void CMsgTFCoaching_LikeCurrentCoach::SharedCtor() {
  _cached_size_ = 0;
  like_coach_ = false;
}

CMsgTFCoaching_LikeCurrentCoach::~CMsgTFCoaching_LikeCurrentCoach() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_LikeCurrentCoach)
  SharedDtor();
}

void CMsgTFCoaching_LikeCurrentCoach::SharedDtor() {
}

void CMsgTFCoaching_LikeCurrentCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_LikeCurrentCoach::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFCoaching_LikeCurrentCoach& CMsgTFCoaching_LikeCurrentCoach::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_LikeCurrentCoach();
  return *internal_default_instance();
}

CMsgTFCoaching_LikeCurrentCoach* CMsgTFCoaching_LikeCurrentCoach::New(::google::protobuf::Arena* arena) const {
  CMsgTFCoaching_LikeCurrentCoach* n = new CMsgTFCoaching_LikeCurrentCoach;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFCoaching_LikeCurrentCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_LikeCurrentCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  like_coach_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFCoaching_LikeCurrentCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFCoaching_LikeCurrentCoach)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool like_coach = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_like_coach();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &like_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFCoaching_LikeCurrentCoach)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFCoaching_LikeCurrentCoach)
  return false;
#undef DO_
}

void CMsgTFCoaching_LikeCurrentCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFCoaching_LikeCurrentCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool like_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->like_coach(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFCoaching_LikeCurrentCoach)
}

::google::protobuf::uint8* CMsgTFCoaching_LikeCurrentCoach::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_LikeCurrentCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool like_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->like_coach(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_LikeCurrentCoach)
  return target;
}

size_t CMsgTFCoaching_LikeCurrentCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_LikeCurrentCoach)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool like_coach = 1;
  if (has_like_coach()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_LikeCurrentCoach::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_LikeCurrentCoach)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_LikeCurrentCoach* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFCoaching_LikeCurrentCoach>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_LikeCurrentCoach)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_LikeCurrentCoach)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_LikeCurrentCoach::MergeFrom(const CMsgTFCoaching_LikeCurrentCoach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_LikeCurrentCoach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_like_coach()) {
    set_like_coach(from.like_coach());
  }
}

void CMsgTFCoaching_LikeCurrentCoach::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_LikeCurrentCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_LikeCurrentCoach::CopyFrom(const CMsgTFCoaching_LikeCurrentCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_LikeCurrentCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_LikeCurrentCoach::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_LikeCurrentCoach::Swap(CMsgTFCoaching_LikeCurrentCoach* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFCoaching_LikeCurrentCoach::InternalSwap(CMsgTFCoaching_LikeCurrentCoach* other) {
  using std::swap;
  swap(like_coach_, other->like_coach_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFCoaching_LikeCurrentCoach::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFCoaching_RemoveCurrentCoach::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFCoaching_RemoveCurrentCoach::kAccountIdCoachFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFCoaching_RemoveCurrentCoach::CMsgTFCoaching_RemoveCurrentCoach()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_RemoveCurrentCoach();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFCoaching_RemoveCurrentCoach)
}
CMsgTFCoaching_RemoveCurrentCoach::CMsgTFCoaching_RemoveCurrentCoach(const CMsgTFCoaching_RemoveCurrentCoach& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_coach_ = from.account_id_coach_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_RemoveCurrentCoach)
}

void CMsgTFCoaching_RemoveCurrentCoach::SharedCtor() {
  _cached_size_ = 0;
  account_id_coach_ = 0u;
}

CMsgTFCoaching_RemoveCurrentCoach::~CMsgTFCoaching_RemoveCurrentCoach() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_RemoveCurrentCoach)
  SharedDtor();
}

void CMsgTFCoaching_RemoveCurrentCoach::SharedDtor() {
}

void CMsgTFCoaching_RemoveCurrentCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_RemoveCurrentCoach::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFCoaching_RemoveCurrentCoach& CMsgTFCoaching_RemoveCurrentCoach::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFCoaching_RemoveCurrentCoach();
  return *internal_default_instance();
}

CMsgTFCoaching_RemoveCurrentCoach* CMsgTFCoaching_RemoveCurrentCoach::New(::google::protobuf::Arena* arena) const {
  CMsgTFCoaching_RemoveCurrentCoach* n = new CMsgTFCoaching_RemoveCurrentCoach;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFCoaching_RemoveCurrentCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_RemoveCurrentCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_coach_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFCoaching_RemoveCurrentCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFCoaching_RemoveCurrentCoach)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_coach = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id_coach();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFCoaching_RemoveCurrentCoach)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFCoaching_RemoveCurrentCoach)
  return false;
#undef DO_
}

void CMsgTFCoaching_RemoveCurrentCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFCoaching_RemoveCurrentCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_coach(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFCoaching_RemoveCurrentCoach)
}

::google::protobuf::uint8* CMsgTFCoaching_RemoveCurrentCoach::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_RemoveCurrentCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_coach(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_RemoveCurrentCoach)
  return target;
}

size_t CMsgTFCoaching_RemoveCurrentCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_RemoveCurrentCoach)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 account_id_coach = 1;
  if (has_account_id_coach()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id_coach());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_RemoveCurrentCoach::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_RemoveCurrentCoach)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_RemoveCurrentCoach* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFCoaching_RemoveCurrentCoach>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_RemoveCurrentCoach)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_RemoveCurrentCoach)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_RemoveCurrentCoach::MergeFrom(const CMsgTFCoaching_RemoveCurrentCoach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_RemoveCurrentCoach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id_coach()) {
    set_account_id_coach(from.account_id_coach());
  }
}

void CMsgTFCoaching_RemoveCurrentCoach::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_RemoveCurrentCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_RemoveCurrentCoach::CopyFrom(const CMsgTFCoaching_RemoveCurrentCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_RemoveCurrentCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_RemoveCurrentCoach::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_RemoveCurrentCoach::Swap(CMsgTFCoaching_RemoveCurrentCoach* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFCoaching_RemoveCurrentCoach::InternalSwap(CMsgTFCoaching_RemoveCurrentCoach* other) {
  using std::swap;
  swap(account_id_coach_, other->account_id_coach_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFCoaching_RemoveCurrentCoach::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFQuickplay_ScoreServers_ServerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kServerAddressFieldNumber;
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kServerPortFieldNumber;
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kNumUsersFieldNumber;
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kSteamIdFieldNumber;
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kMaxUsersFieldNumber;
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kUserScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFQuickplay_ScoreServers_ServerInfo::CMsgTFQuickplay_ScoreServers_ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFQuickplay_ScoreServers_ServerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFQuickplay_ScoreServers.ServerInfo)
}
CMsgTFQuickplay_ScoreServers_ServerInfo::CMsgTFQuickplay_ScoreServers_ServerInfo(const CMsgTFQuickplay_ScoreServers_ServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_address_, &from.server_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_score_) -
    reinterpret_cast<char*>(&server_address_)) + sizeof(user_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFQuickplay_ScoreServers.ServerInfo)
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&server_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_score_) -
      reinterpret_cast<char*>(&server_address_)) + sizeof(user_score_));
}

CMsgTFQuickplay_ScoreServers_ServerInfo::~CMsgTFQuickplay_ScoreServers_ServerInfo() {
  // @@protoc_insertion_point(destructor:CMsgTFQuickplay_ScoreServers.ServerInfo)
  SharedDtor();
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::SharedDtor() {
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServers_ServerInfo::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFQuickplay_ScoreServers_ServerInfo& CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFQuickplay_ScoreServers_ServerInfo();
  return *internal_default_instance();
}

CMsgTFQuickplay_ScoreServers_ServerInfo* CMsgTFQuickplay_ScoreServers_ServerInfo::New(::google::protobuf::Arena* arena) const {
  CMsgTFQuickplay_ScoreServers_ServerInfo* n = new CMsgTFQuickplay_ScoreServers_ServerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&server_address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_score_) -
        reinterpret_cast<char*>(&server_address_)) + sizeof(user_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFQuickplay_ScoreServers_ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_server_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_server_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_users = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_users();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_users_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steam_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_users = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_max_users();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_users_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float user_score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_user_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &user_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFQuickplay_ScoreServers.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFQuickplay_ScoreServers.ServerInfo)
  return false;
#undef DO_
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_address(), output);
  }

  // optional uint32 server_port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_port(), output);
  }

  // optional uint32 num_users = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_users(), output);
  }

  // optional uint64 steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->steam_id(), output);
  }

  // optional uint32 max_users = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_users(), output);
  }

  // optional float user_score = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->user_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFQuickplay_ScoreServers.ServerInfo)
}

::google::protobuf::uint8* CMsgTFQuickplay_ScoreServers_ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_address(), target);
  }

  // optional uint32 server_port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_port(), target);
  }

  // optional uint32 num_users = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_users(), target);
  }

  // optional uint64 steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->steam_id(), target);
  }

  // optional uint32 max_users = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_users(), target);
  }

  // optional float user_score = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->user_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFQuickplay_ScoreServers.ServerInfo)
  return target;
}

size_t CMsgTFQuickplay_ScoreServers_ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 server_address = 1;
    if (has_server_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_address());
    }

    // optional uint32 server_port = 2;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint64 steam_id = 4;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id());
    }

    // optional uint32 num_users = 3;
    if (has_num_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_users());
    }

    // optional uint32 max_users = 5;
    if (has_max_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_users());
    }

    // optional float user_score = 6;
    if (has_user_score()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServers_ServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFQuickplay_ScoreServers_ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFQuickplay_ScoreServers.ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFQuickplay_ScoreServers.ServerInfo)
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::MergeFrom(const CMsgTFQuickplay_ScoreServers_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      server_address_ = from.server_address_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_users_ = from.num_users_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_users_ = from.max_users_;
    }
    if (cached_has_bits & 0x00000020u) {
      user_score_ = from.user_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::CopyFrom(const CMsgTFQuickplay_ScoreServers_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServers_ServerInfo::IsInitialized() const {
  return true;
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::Swap(CMsgTFQuickplay_ScoreServers_ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFQuickplay_ScoreServers_ServerInfo::InternalSwap(CMsgTFQuickplay_ScoreServers_ServerInfo* other) {
  using std::swap;
  swap(server_address_, other->server_address_);
  swap(server_port_, other->server_port_);
  swap(steam_id_, other->steam_id_);
  swap(num_users_, other->num_users_);
  swap(max_users_, other->max_users_);
  swap(user_score_, other->user_score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFQuickplay_ScoreServers_ServerInfo::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFQuickplay_ScoreServers::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFQuickplay_ScoreServers::kServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFQuickplay_ScoreServers::CMsgTFQuickplay_ScoreServers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFQuickplay_ScoreServers();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFQuickplay_ScoreServers)
}
CMsgTFQuickplay_ScoreServers::CMsgTFQuickplay_ScoreServers(const CMsgTFQuickplay_ScoreServers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFQuickplay_ScoreServers)
}

void CMsgTFQuickplay_ScoreServers::SharedCtor() {
  _cached_size_ = 0;
}

CMsgTFQuickplay_ScoreServers::~CMsgTFQuickplay_ScoreServers() {
  // @@protoc_insertion_point(destructor:CMsgTFQuickplay_ScoreServers)
  SharedDtor();
}

void CMsgTFQuickplay_ScoreServers::SharedDtor() {
}

void CMsgTFQuickplay_ScoreServers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServers::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFQuickplay_ScoreServers& CMsgTFQuickplay_ScoreServers::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFQuickplay_ScoreServers();
  return *internal_default_instance();
}

CMsgTFQuickplay_ScoreServers* CMsgTFQuickplay_ScoreServers::New(::google::protobuf::Arena* arena) const {
  CMsgTFQuickplay_ScoreServers* n = new CMsgTFQuickplay_ScoreServers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFQuickplay_ScoreServers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFQuickplay_ScoreServers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFQuickplay_ScoreServers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFQuickplay_ScoreServers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFQuickplay_ScoreServers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFQuickplay_ScoreServers)
  return false;
#undef DO_
}

void CMsgTFQuickplay_ScoreServers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFQuickplay_ScoreServers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFQuickplay_ScoreServers)
}

::google::protobuf::uint8* CMsgTFQuickplay_ScoreServers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFQuickplay_ScoreServers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->servers(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFQuickplay_ScoreServers)
  return target;
}

size_t CMsgTFQuickplay_ScoreServers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFQuickplay_ScoreServers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->servers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->servers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFQuickplay_ScoreServers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFQuickplay_ScoreServers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFQuickplay_ScoreServers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFQuickplay_ScoreServers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFQuickplay_ScoreServers)
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServers::MergeFrom(const CMsgTFQuickplay_ScoreServers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFQuickplay_ScoreServers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
}

void CMsgTFQuickplay_ScoreServers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFQuickplay_ScoreServers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServers::CopyFrom(const CMsgTFQuickplay_ScoreServers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFQuickplay_ScoreServers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServers::IsInitialized() const {
  return true;
}

void CMsgTFQuickplay_ScoreServers::Swap(CMsgTFQuickplay_ScoreServers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFQuickplay_ScoreServers::InternalSwap(CMsgTFQuickplay_ScoreServers* other) {
  using std::swap;
  servers_.InternalSwap(&other->servers_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFQuickplay_ScoreServers::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::kServerAddressFieldNumber;
const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::kServerPortFieldNumber;
const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::kTotalScoreFieldNumber;
const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::kSteamIdFieldNumber;
const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::kOptionsScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CMsgTFQuickplay_ScoreServersResponse_ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFQuickplay_ScoreServersResponse_ServerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
}
CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CMsgTFQuickplay_ScoreServersResponse_ServerInfo(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_address_, &from.server_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&options_score_) -
    reinterpret_cast<char*>(&server_address_)) + sizeof(options_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&server_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&options_score_) -
      reinterpret_cast<char*>(&server_address_)) + sizeof(options_score_));
}

CMsgTFQuickplay_ScoreServersResponse_ServerInfo::~CMsgTFQuickplay_ScoreServersResponse_ServerInfo() {
  // @@protoc_insertion_point(destructor:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  SharedDtor();
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SharedDtor() {
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServersResponse_ServerInfo::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFQuickplay_ScoreServersResponse_ServerInfo();
  return *internal_default_instance();
}

CMsgTFQuickplay_ScoreServersResponse_ServerInfo* CMsgTFQuickplay_ScoreServersResponse_ServerInfo::New(::google::protobuf::Arena* arena) const {
  CMsgTFQuickplay_ScoreServersResponse_ServerInfo* n = new CMsgTFQuickplay_ScoreServersResponse_ServerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&server_address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&options_score_) -
        reinterpret_cast<char*>(&server_address_)) + sizeof(options_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_server_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_server_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float total_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_total_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steam_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 options_score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_options_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &options_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  return false;
#undef DO_
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_address(), output);
  }

  // optional uint32 server_port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_port(), output);
  }

  // optional float total_score = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->total_score(), output);
  }

  // optional uint64 steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->steam_id(), output);
  }

  // optional uint32 options_score = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->options_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
}

::google::protobuf::uint8* CMsgTFQuickplay_ScoreServersResponse_ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_address(), target);
  }

  // optional uint32 server_port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_port(), target);
  }

  // optional float total_score = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->total_score(), target);
  }

  // optional uint64 steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->steam_id(), target);
  }

  // optional uint32 options_score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->options_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  return target;
}

size_t CMsgTFQuickplay_ScoreServersResponse_ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 server_address = 1;
    if (has_server_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_address());
    }

    // optional uint32 server_port = 2;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint64 steam_id = 4;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id());
    }

    // optional float total_score = 3;
    if (has_total_score()) {
      total_size += 1 + 4;
    }

    // optional uint32 options_score = 5;
    if (has_options_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->options_score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServersResponse_ServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFQuickplay_ScoreServersResponse_ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::MergeFrom(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      server_address_ = from.server_address_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      total_score_ = from.total_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      options_score_ = from.options_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CopyFrom(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::IsInitialized() const {
  return true;
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::Swap(CMsgTFQuickplay_ScoreServersResponse_ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::InternalSwap(CMsgTFQuickplay_ScoreServersResponse_ServerInfo* other) {
  using std::swap;
  swap(server_address_, other->server_address_);
  swap(server_port_, other->server_port_);
  swap(steam_id_, other->steam_id_);
  swap(total_score_, other->total_score_);
  swap(options_score_, other->options_score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFQuickplay_ScoreServersResponse_ServerInfo::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFQuickplay_ScoreServersResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFQuickplay_ScoreServersResponse::kServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFQuickplay_ScoreServersResponse::CMsgTFQuickplay_ScoreServersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFQuickplay_ScoreServersResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFQuickplay_ScoreServersResponse)
}
CMsgTFQuickplay_ScoreServersResponse::CMsgTFQuickplay_ScoreServersResponse(const CMsgTFQuickplay_ScoreServersResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFQuickplay_ScoreServersResponse)
}

void CMsgTFQuickplay_ScoreServersResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgTFQuickplay_ScoreServersResponse::~CMsgTFQuickplay_ScoreServersResponse() {
  // @@protoc_insertion_point(destructor:CMsgTFQuickplay_ScoreServersResponse)
  SharedDtor();
}

void CMsgTFQuickplay_ScoreServersResponse::SharedDtor() {
}

void CMsgTFQuickplay_ScoreServersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServersResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFQuickplay_ScoreServersResponse& CMsgTFQuickplay_ScoreServersResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFQuickplay_ScoreServersResponse();
  return *internal_default_instance();
}

CMsgTFQuickplay_ScoreServersResponse* CMsgTFQuickplay_ScoreServersResponse::New(::google::protobuf::Arena* arena) const {
  CMsgTFQuickplay_ScoreServersResponse* n = new CMsgTFQuickplay_ScoreServersResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFQuickplay_ScoreServersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFQuickplay_ScoreServersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFQuickplay_ScoreServersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFQuickplay_ScoreServersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFQuickplay_ScoreServersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFQuickplay_ScoreServersResponse)
  return false;
#undef DO_
}

void CMsgTFQuickplay_ScoreServersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFQuickplay_ScoreServersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFQuickplay_ScoreServersResponse)
}

::google::protobuf::uint8* CMsgTFQuickplay_ScoreServersResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFQuickplay_ScoreServersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->servers(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFQuickplay_ScoreServersResponse)
  return target;
}

size_t CMsgTFQuickplay_ScoreServersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFQuickplay_ScoreServersResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->servers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->servers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFQuickplay_ScoreServersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFQuickplay_ScoreServersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServersResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFQuickplay_ScoreServersResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFQuickplay_ScoreServersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFQuickplay_ScoreServersResponse)
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServersResponse::MergeFrom(const CMsgTFQuickplay_ScoreServersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFQuickplay_ScoreServersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
}

void CMsgTFQuickplay_ScoreServersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFQuickplay_ScoreServersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServersResponse::CopyFrom(const CMsgTFQuickplay_ScoreServersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFQuickplay_ScoreServersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServersResponse::IsInitialized() const {
  return true;
}

void CMsgTFQuickplay_ScoreServersResponse::Swap(CMsgTFQuickplay_ScoreServersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFQuickplay_ScoreServersResponse::InternalSwap(CMsgTFQuickplay_ScoreServersResponse* other) {
  using std::swap;
  servers_.InternalSwap(&other->servers_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFQuickplay_ScoreServersResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFQuickplay_PlayerJoining::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFQuickplay_PlayerJoining::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFQuickplay_PlayerJoining::CMsgTFQuickplay_PlayerJoining()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFQuickplay_PlayerJoining();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFQuickplay_PlayerJoining)
}
CMsgTFQuickplay_PlayerJoining::CMsgTFQuickplay_PlayerJoining(const CMsgTFQuickplay_PlayerJoining& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFQuickplay_PlayerJoining)
}

void CMsgTFQuickplay_PlayerJoining::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
}

CMsgTFQuickplay_PlayerJoining::~CMsgTFQuickplay_PlayerJoining() {
  // @@protoc_insertion_point(destructor:CMsgTFQuickplay_PlayerJoining)
  SharedDtor();
}

void CMsgTFQuickplay_PlayerJoining::SharedDtor() {
}

void CMsgTFQuickplay_PlayerJoining::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFQuickplay_PlayerJoining::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFQuickplay_PlayerJoining& CMsgTFQuickplay_PlayerJoining::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFQuickplay_PlayerJoining();
  return *internal_default_instance();
}

CMsgTFQuickplay_PlayerJoining* CMsgTFQuickplay_PlayerJoining::New(::google::protobuf::Arena* arena) const {
  CMsgTFQuickplay_PlayerJoining* n = new CMsgTFQuickplay_PlayerJoining;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFQuickplay_PlayerJoining::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFQuickplay_PlayerJoining)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFQuickplay_PlayerJoining::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFQuickplay_PlayerJoining)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFQuickplay_PlayerJoining)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFQuickplay_PlayerJoining)
  return false;
#undef DO_
}

void CMsgTFQuickplay_PlayerJoining::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFQuickplay_PlayerJoining)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFQuickplay_PlayerJoining)
}

::google::protobuf::uint8* CMsgTFQuickplay_PlayerJoining::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFQuickplay_PlayerJoining)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFQuickplay_PlayerJoining)
  return target;
}

size_t CMsgTFQuickplay_PlayerJoining::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFQuickplay_PlayerJoining)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFQuickplay_PlayerJoining::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFQuickplay_PlayerJoining)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFQuickplay_PlayerJoining* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFQuickplay_PlayerJoining>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFQuickplay_PlayerJoining)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFQuickplay_PlayerJoining)
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_PlayerJoining::MergeFrom(const CMsgTFQuickplay_PlayerJoining& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFQuickplay_PlayerJoining)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgTFQuickplay_PlayerJoining::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFQuickplay_PlayerJoining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_PlayerJoining::CopyFrom(const CMsgTFQuickplay_PlayerJoining& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFQuickplay_PlayerJoining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_PlayerJoining::IsInitialized() const {
  return true;
}

void CMsgTFQuickplay_PlayerJoining::Swap(CMsgTFQuickplay_PlayerJoining* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFQuickplay_PlayerJoining::InternalSwap(CMsgTFQuickplay_PlayerJoining* other) {
  using std::swap;
  swap(account_id_, other->account_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFQuickplay_PlayerJoining::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_LevelInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_LevelInfo::kLevelLoadedFieldNumber;
const int CMsgGC_GameServer_LevelInfo::kLevelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_LevelInfo::CMsgGC_GameServer_LevelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_LevelInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_LevelInfo)
}
CMsgGC_GameServer_LevelInfo::CMsgGC_GameServer_LevelInfo(const CMsgGC_GameServer_LevelInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_level_name()) {
    level_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_name_);
  }
  level_loaded_ = from.level_loaded_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_LevelInfo)
}

void CMsgGC_GameServer_LevelInfo::SharedCtor() {
  _cached_size_ = 0;
  level_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_loaded_ = false;
}

CMsgGC_GameServer_LevelInfo::~CMsgGC_GameServer_LevelInfo() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_LevelInfo)
  SharedDtor();
}

void CMsgGC_GameServer_LevelInfo::SharedDtor() {
  level_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_LevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_LevelInfo::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_LevelInfo& CMsgGC_GameServer_LevelInfo::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_LevelInfo();
  return *internal_default_instance();
}

CMsgGC_GameServer_LevelInfo* CMsgGC_GameServer_LevelInfo::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_LevelInfo* n = new CMsgGC_GameServer_LevelInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_LevelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_LevelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!level_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*level_name_.UnsafeRawStringPointer())->clear();
  }
  level_loaded_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_LevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_LevelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool level_loaded = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_level_loaded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &level_loaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string level_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->level_name().data(), static_cast<int>(this->level_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGC_GameServer_LevelInfo.level_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_LevelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_LevelInfo)
  return false;
#undef DO_
}

void CMsgGC_GameServer_LevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_LevelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool level_loaded = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->level_loaded(), output);
  }

  // optional string level_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->level_name().data(), static_cast<int>(this->level_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_LevelInfo.level_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->level_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_LevelInfo)
}

::google::protobuf::uint8* CMsgGC_GameServer_LevelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_LevelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool level_loaded = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->level_loaded(), target);
  }

  // optional string level_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->level_name().data(), static_cast<int>(this->level_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_LevelInfo.level_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->level_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_LevelInfo)
  return target;
}

size_t CMsgGC_GameServer_LevelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_LevelInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string level_name = 2;
    if (has_level_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->level_name());
    }

    // optional bool level_loaded = 1;
    if (has_level_loaded()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_LevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_LevelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_LevelInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_LevelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_LevelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_LevelInfo)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_LevelInfo::MergeFrom(const CMsgGC_GameServer_LevelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_LevelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_level_name();
      level_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      level_loaded_ = from.level_loaded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_LevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_LevelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_LevelInfo::CopyFrom(const CMsgGC_GameServer_LevelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_LevelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_LevelInfo::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_LevelInfo::Swap(CMsgGC_GameServer_LevelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_LevelInfo::InternalSwap(CMsgGC_GameServer_LevelInfo* other) {
  using std::swap;
  level_name_.Swap(&other->level_name_);
  swap(level_loaded_, other->level_loaded_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_LevelInfo::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_AuthChallenge::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_AuthChallenge::kChallengeStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_AuthChallenge::CMsgGC_GameServer_AuthChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_AuthChallenge();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_AuthChallenge)
}
CMsgGC_GameServer_AuthChallenge::CMsgGC_GameServer_AuthChallenge(const CMsgGC_GameServer_AuthChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  challenge_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_challenge_string()) {
    challenge_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challenge_string_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_AuthChallenge)
}

void CMsgGC_GameServer_AuthChallenge::SharedCtor() {
  _cached_size_ = 0;
  challenge_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgGC_GameServer_AuthChallenge::~CMsgGC_GameServer_AuthChallenge() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_AuthChallenge)
  SharedDtor();
}

void CMsgGC_GameServer_AuthChallenge::SharedDtor() {
  challenge_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_AuthChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AuthChallenge::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_AuthChallenge& CMsgGC_GameServer_AuthChallenge::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_AuthChallenge();
  return *internal_default_instance();
}

CMsgGC_GameServer_AuthChallenge* CMsgGC_GameServer_AuthChallenge::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_AuthChallenge* n = new CMsgGC_GameServer_AuthChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_AuthChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_AuthChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!challenge_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*challenge_string_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_AuthChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_AuthChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string challenge_string = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_challenge_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->challenge_string().data(), static_cast<int>(this->challenge_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGC_GameServer_AuthChallenge.challenge_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_AuthChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_AuthChallenge)
  return false;
#undef DO_
}

void CMsgGC_GameServer_AuthChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_AuthChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string challenge_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->challenge_string().data(), static_cast<int>(this->challenge_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_AuthChallenge.challenge_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->challenge_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_AuthChallenge)
}

::google::protobuf::uint8* CMsgGC_GameServer_AuthChallenge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_AuthChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string challenge_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->challenge_string().data(), static_cast<int>(this->challenge_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_AuthChallenge.challenge_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->challenge_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_AuthChallenge)
  return target;
}

size_t CMsgGC_GameServer_AuthChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_AuthChallenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string challenge_string = 1;
  if (has_challenge_string()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->challenge_string());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_AuthChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_AuthChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_AuthChallenge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_AuthChallenge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_AuthChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_AuthChallenge)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AuthChallenge::MergeFrom(const CMsgGC_GameServer_AuthChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_AuthChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_challenge_string()) {
    set_has_challenge_string();
    challenge_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challenge_string_);
  }
}

void CMsgGC_GameServer_AuthChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_AuthChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthChallenge::CopyFrom(const CMsgGC_GameServer_AuthChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_AuthChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AuthChallenge::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_AuthChallenge::Swap(CMsgGC_GameServer_AuthChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_AuthChallenge::InternalSwap(CMsgGC_GameServer_AuthChallenge* other) {
  using std::swap;
  challenge_string_.Swap(&other->challenge_string_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_AuthChallenge::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_AuthResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_AuthResult::kAuthenticatedFieldNumber;
const int CMsgGC_GameServer_AuthResult::kGameServerStandingFieldNumber;
const int CMsgGC_GameServer_AuthResult::kGameServerStandingTrendFieldNumber;
const int CMsgGC_GameServer_AuthResult::kIsValveServerFieldNumber;
const int CMsgGC_GameServer_AuthResult::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_AuthResult::CMsgGC_GameServer_AuthResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_AuthResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_AuthResult)
}
CMsgGC_GameServer_AuthResult::CMsgGC_GameServer_AuthResult(const CMsgGC_GameServer_AuthResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&game_server_standing_, &from.game_server_standing_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_server_standing_trend_) -
    reinterpret_cast<char*>(&game_server_standing_)) + sizeof(game_server_standing_trend_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_AuthResult)
}

void CMsgGC_GameServer_AuthResult::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&game_server_standing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_server_standing_trend_) -
      reinterpret_cast<char*>(&game_server_standing_)) + sizeof(game_server_standing_trend_));
}

CMsgGC_GameServer_AuthResult::~CMsgGC_GameServer_AuthResult() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_AuthResult)
  SharedDtor();
}

void CMsgGC_GameServer_AuthResult::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_AuthResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AuthResult::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_AuthResult& CMsgGC_GameServer_AuthResult::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_AuthResult();
  return *internal_default_instance();
}

CMsgGC_GameServer_AuthResult* CMsgGC_GameServer_AuthResult::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_AuthResult* n = new CMsgGC_GameServer_AuthResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_AuthResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_AuthResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&game_server_standing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_server_standing_trend_) -
        reinterpret_cast<char*>(&game_server_standing_)) + sizeof(game_server_standing_trend_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_AuthResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_AuthResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool authenticated = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_authenticated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authenticated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_server_standing = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_game_server_standing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_standing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_server_standing_trend = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_game_server_standing_trend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_standing_trend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_valve_server = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_valve_server();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valve_server_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGC_GameServer_AuthResult.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_AuthResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_AuthResult)
  return false;
#undef DO_
}

void CMsgGC_GameServer_AuthResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_AuthResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool authenticated = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->authenticated(), output);
  }

  // optional int32 game_server_standing = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_server_standing(), output);
  }

  // optional int32 game_server_standing_trend = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_server_standing_trend(), output);
  }

  // optional bool is_valve_server = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_valve_server(), output);
  }

  // optional string message = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_AuthResult.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_AuthResult)
}

::google::protobuf::uint8* CMsgGC_GameServer_AuthResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_AuthResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool authenticated = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->authenticated(), target);
  }

  // optional int32 game_server_standing = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_server_standing(), target);
  }

  // optional int32 game_server_standing_trend = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_server_standing_trend(), target);
  }

  // optional bool is_valve_server = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_valve_server(), target);
  }

  // optional string message = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_AuthResult.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_AuthResult)
  return target;
}

size_t CMsgGC_GameServer_AuthResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_AuthResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string message = 5;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 game_server_standing = 2;
    if (has_game_server_standing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_standing());
    }

    // optional bool authenticated = 1;
    if (has_authenticated()) {
      total_size += 1 + 1;
    }

    // optional bool is_valve_server = 4;
    if (has_is_valve_server()) {
      total_size += 1 + 1;
    }

    // optional int32 game_server_standing_trend = 3;
    if (has_game_server_standing_trend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_standing_trend());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_AuthResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_AuthResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_AuthResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_AuthResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_AuthResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_AuthResult)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AuthResult::MergeFrom(const CMsgGC_GameServer_AuthResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_AuthResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      game_server_standing_ = from.game_server_standing_;
    }
    if (cached_has_bits & 0x00000004u) {
      authenticated_ = from.authenticated_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_valve_server_ = from.is_valve_server_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_server_standing_trend_ = from.game_server_standing_trend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_AuthResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_AuthResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthResult::CopyFrom(const CMsgGC_GameServer_AuthResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_AuthResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AuthResult::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_AuthResult::Swap(CMsgGC_GameServer_AuthResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_AuthResult::InternalSwap(CMsgGC_GameServer_AuthResult* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(game_server_standing_, other->game_server_standing_);
  swap(authenticated_, other->authenticated_);
  swap(is_valve_server_, other->is_valve_server_);
  swap(game_server_standing_trend_, other->game_server_standing_trend_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_AuthResult::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_AuthChallengeResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_AuthChallengeResponse::kGameServerAccountIdFieldNumber;
const int CMsgGC_GameServer_AuthChallengeResponse::kHashedChallengeStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_AuthChallengeResponse::CMsgGC_GameServer_AuthChallengeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_AuthChallengeResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_AuthChallengeResponse)
}
CMsgGC_GameServer_AuthChallengeResponse::CMsgGC_GameServer_AuthChallengeResponse(const CMsgGC_GameServer_AuthChallengeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hashed_challenge_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hashed_challenge_string()) {
    hashed_challenge_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_challenge_string_);
  }
  game_server_account_id_ = from.game_server_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_AuthChallengeResponse)
}

void CMsgGC_GameServer_AuthChallengeResponse::SharedCtor() {
  _cached_size_ = 0;
  hashed_challenge_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_server_account_id_ = 0u;
}

CMsgGC_GameServer_AuthChallengeResponse::~CMsgGC_GameServer_AuthChallengeResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_AuthChallengeResponse)
  SharedDtor();
}

void CMsgGC_GameServer_AuthChallengeResponse::SharedDtor() {
  hashed_challenge_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_AuthChallengeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AuthChallengeResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_AuthChallengeResponse& CMsgGC_GameServer_AuthChallengeResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_AuthChallengeResponse();
  return *internal_default_instance();
}

CMsgGC_GameServer_AuthChallengeResponse* CMsgGC_GameServer_AuthChallengeResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_AuthChallengeResponse* n = new CMsgGC_GameServer_AuthChallengeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_AuthChallengeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_AuthChallengeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!hashed_challenge_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*hashed_challenge_string_.UnsafeRawStringPointer())->clear();
  }
  game_server_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_AuthChallengeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_AuthChallengeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_server_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_game_server_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hashed_challenge_string = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_challenge_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_AuthChallengeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_AuthChallengeResponse)
  return false;
#undef DO_
}

void CMsgGC_GameServer_AuthChallengeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_AuthChallengeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_server_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_server_account_id(), output);
  }

  // optional bytes hashed_challenge_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hashed_challenge_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_AuthChallengeResponse)
}

::google::protobuf::uint8* CMsgGC_GameServer_AuthChallengeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_AuthChallengeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_server_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_server_account_id(), target);
  }

  // optional bytes hashed_challenge_string = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hashed_challenge_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_AuthChallengeResponse)
  return target;
}

size_t CMsgGC_GameServer_AuthChallengeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_AuthChallengeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes hashed_challenge_string = 2;
    if (has_hashed_challenge_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_challenge_string());
    }

    // optional uint32 game_server_account_id = 1;
    if (has_game_server_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_AuthChallengeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_AuthChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_AuthChallengeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_AuthChallengeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_AuthChallengeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_AuthChallengeResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AuthChallengeResponse::MergeFrom(const CMsgGC_GameServer_AuthChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_AuthChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hashed_challenge_string();
      hashed_challenge_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_challenge_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      game_server_account_id_ = from.game_server_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_AuthChallengeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_AuthChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthChallengeResponse::CopyFrom(const CMsgGC_GameServer_AuthChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_AuthChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AuthChallengeResponse::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_AuthChallengeResponse::Swap(CMsgGC_GameServer_AuthChallengeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_AuthChallengeResponse::InternalSwap(CMsgGC_GameServer_AuthChallengeResponse* other) {
  using std::swap;
  hashed_challenge_string_.Swap(&other->hashed_challenge_string_);
  swap(game_server_account_id_, other->game_server_account_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_AuthChallengeResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_CreateIdentity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_CreateIdentity::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_CreateIdentity::CMsgGC_GameServer_CreateIdentity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_CreateIdentity();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_CreateIdentity)
}
CMsgGC_GameServer_CreateIdentity::CMsgGC_GameServer_CreateIdentity(const CMsgGC_GameServer_CreateIdentity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_CreateIdentity)
}

void CMsgGC_GameServer_CreateIdentity::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
}

CMsgGC_GameServer_CreateIdentity::~CMsgGC_GameServer_CreateIdentity() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_CreateIdentity)
  SharedDtor();
}

void CMsgGC_GameServer_CreateIdentity::SharedDtor() {
}

void CMsgGC_GameServer_CreateIdentity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_CreateIdentity::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_CreateIdentity& CMsgGC_GameServer_CreateIdentity::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_CreateIdentity();
  return *internal_default_instance();
}

CMsgGC_GameServer_CreateIdentity* CMsgGC_GameServer_CreateIdentity::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_CreateIdentity* n = new CMsgGC_GameServer_CreateIdentity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_CreateIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_CreateIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_CreateIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_CreateIdentity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_CreateIdentity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_CreateIdentity)
  return false;
#undef DO_
}

void CMsgGC_GameServer_CreateIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_CreateIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_CreateIdentity)
}

::google::protobuf::uint8* CMsgGC_GameServer_CreateIdentity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_CreateIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_CreateIdentity)
  return target;
}

size_t CMsgGC_GameServer_CreateIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_CreateIdentity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_CreateIdentity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_CreateIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_CreateIdentity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_CreateIdentity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_CreateIdentity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_CreateIdentity)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_CreateIdentity::MergeFrom(const CMsgGC_GameServer_CreateIdentity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_CreateIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgGC_GameServer_CreateIdentity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_CreateIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_CreateIdentity::CopyFrom(const CMsgGC_GameServer_CreateIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_CreateIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_CreateIdentity::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_CreateIdentity::Swap(CMsgGC_GameServer_CreateIdentity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_CreateIdentity::InternalSwap(CMsgGC_GameServer_CreateIdentity* other) {
  using std::swap;
  swap(account_id_, other->account_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_CreateIdentity::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_CreateIdentityResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_CreateIdentityResponse::kAccountCreatedFieldNumber;
const int CMsgGC_GameServer_CreateIdentityResponse::kGameServerAccountIdFieldNumber;
const int CMsgGC_GameServer_CreateIdentityResponse::kGameServerIdentityTokenFieldNumber;
const int CMsgGC_GameServer_CreateIdentityResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_CreateIdentityResponse::CMsgGC_GameServer_CreateIdentityResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_CreateIdentityResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_CreateIdentityResponse)
}
CMsgGC_GameServer_CreateIdentityResponse::CMsgGC_GameServer_CreateIdentityResponse(const CMsgGC_GameServer_CreateIdentityResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_server_identity_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_server_identity_token()) {
    game_server_identity_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_server_identity_token_);
  }
  ::memcpy(&account_created_, &from.account_created_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&account_created_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_CreateIdentityResponse)
}

void CMsgGC_GameServer_CreateIdentityResponse::SharedCtor() {
  _cached_size_ = 0;
  game_server_identity_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_created_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&account_created_)) + sizeof(status_));
}

CMsgGC_GameServer_CreateIdentityResponse::~CMsgGC_GameServer_CreateIdentityResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_CreateIdentityResponse)
  SharedDtor();
}

void CMsgGC_GameServer_CreateIdentityResponse::SharedDtor() {
  game_server_identity_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_CreateIdentityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_CreateIdentityResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_CreateIdentityResponse& CMsgGC_GameServer_CreateIdentityResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_CreateIdentityResponse();
  return *internal_default_instance();
}

CMsgGC_GameServer_CreateIdentityResponse* CMsgGC_GameServer_CreateIdentityResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_CreateIdentityResponse* n = new CMsgGC_GameServer_CreateIdentityResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_CreateIdentityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_CreateIdentityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!game_server_identity_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*game_server_identity_token_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&account_created_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&account_created_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_CreateIdentityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_CreateIdentityResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool account_created = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &account_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_game_server_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_server_identity_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_server_identity_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_server_identity_token().data(), static_cast<int>(this->game_server_identity_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGC_GameServer_CreateIdentityResponse.game_server_identity_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGC_GameServer_CreateIdentityResponse_EStatus_IsValid(value)) {
            set_status(static_cast< ::CMsgGC_GameServer_CreateIdentityResponse_EStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_CreateIdentityResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_CreateIdentityResponse)
  return false;
#undef DO_
}

void CMsgGC_GameServer_CreateIdentityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_CreateIdentityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool account_created = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->account_created(), output);
  }

  // optional uint32 game_server_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_server_account_id(), output);
  }

  // optional string game_server_identity_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_server_identity_token().data(), static_cast<int>(this->game_server_identity_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_CreateIdentityResponse.game_server_identity_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->game_server_identity_token(), output);
  }

  // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_CreateIdentityResponse)
}

::google::protobuf::uint8* CMsgGC_GameServer_CreateIdentityResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_CreateIdentityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool account_created = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->account_created(), target);
  }

  // optional uint32 game_server_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_server_account_id(), target);
  }

  // optional string game_server_identity_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_server_identity_token().data(), static_cast<int>(this->game_server_identity_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_CreateIdentityResponse.game_server_identity_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->game_server_identity_token(), target);
  }

  // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_CreateIdentityResponse)
  return target;
}

size_t CMsgGC_GameServer_CreateIdentityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_CreateIdentityResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string game_server_identity_token = 3;
    if (has_game_server_identity_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_server_identity_token());
    }

    // optional bool account_created = 1;
    if (has_account_created()) {
      total_size += 1 + 1;
    }

    // optional uint32 game_server_account_id = 2;
    if (has_game_server_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_account_id());
    }

    // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_CreateIdentityResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_CreateIdentityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_CreateIdentityResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_CreateIdentityResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_CreateIdentityResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_CreateIdentityResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_CreateIdentityResponse::MergeFrom(const CMsgGC_GameServer_CreateIdentityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_CreateIdentityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_game_server_identity_token();
      game_server_identity_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_server_identity_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_created_ = from.account_created_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_server_account_id_ = from.game_server_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_CreateIdentityResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_CreateIdentityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_CreateIdentityResponse::CopyFrom(const CMsgGC_GameServer_CreateIdentityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_CreateIdentityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_CreateIdentityResponse::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_CreateIdentityResponse::Swap(CMsgGC_GameServer_CreateIdentityResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_CreateIdentityResponse::InternalSwap(CMsgGC_GameServer_CreateIdentityResponse* other) {
  using std::swap;
  game_server_identity_token_.Swap(&other->game_server_identity_token_);
  swap(account_created_, other->account_created_);
  swap(game_server_account_id_, other->game_server_account_id_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_CreateIdentityResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_List::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_List::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_List::CMsgGC_GameServer_List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_List();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_List)
}
CMsgGC_GameServer_List::CMsgGC_GameServer_List(const CMsgGC_GameServer_List& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_List)
}

void CMsgGC_GameServer_List::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
}

CMsgGC_GameServer_List::~CMsgGC_GameServer_List() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_List)
  SharedDtor();
}

void CMsgGC_GameServer_List::SharedDtor() {
}

void CMsgGC_GameServer_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_List::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_List& CMsgGC_GameServer_List::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_List();
  return *internal_default_instance();
}

CMsgGC_GameServer_List* CMsgGC_GameServer_List::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_List* n = new CMsgGC_GameServer_List;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_List::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_List)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_List)
  return false;
#undef DO_
}

void CMsgGC_GameServer_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_List)
}

::google::protobuf::uint8* CMsgGC_GameServer_List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_List)
  return target;
}

size_t CMsgGC_GameServer_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_List)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_List)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_List::MergeFrom(const CMsgGC_GameServer_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgGC_GameServer_List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_List::CopyFrom(const CMsgGC_GameServer_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_List::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_List::Swap(CMsgGC_GameServer_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_List::InternalSwap(CMsgGC_GameServer_List* other) {
  using std::swap;
  swap(account_id_, other->account_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_List::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_ListResponse_GameServerIdentity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_ListResponse_GameServerIdentity::kGameServerAccountIdFieldNumber;
const int CMsgGC_GameServer_ListResponse_GameServerIdentity::kGameServerIdentityTokenFieldNumber;
const int CMsgGC_GameServer_ListResponse_GameServerIdentity::kGameServerStandingFieldNumber;
const int CMsgGC_GameServer_ListResponse_GameServerIdentity::kGameServerStandingTrendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_ListResponse_GameServerIdentity::CMsgGC_GameServer_ListResponse_GameServerIdentity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_ListResponse_GameServerIdentity();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_ListResponse.GameServerIdentity)
}
CMsgGC_GameServer_ListResponse_GameServerIdentity::CMsgGC_GameServer_ListResponse_GameServerIdentity(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_server_identity_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_server_identity_token()) {
    game_server_identity_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_server_identity_token_);
  }
  ::memcpy(&game_server_account_id_, &from.game_server_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_server_standing_trend_) -
    reinterpret_cast<char*>(&game_server_account_id_)) + sizeof(game_server_standing_trend_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_ListResponse.GameServerIdentity)
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::SharedCtor() {
  _cached_size_ = 0;
  game_server_identity_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&game_server_account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_server_standing_trend_) -
      reinterpret_cast<char*>(&game_server_account_id_)) + sizeof(game_server_standing_trend_));
}

CMsgGC_GameServer_ListResponse_GameServerIdentity::~CMsgGC_GameServer_ListResponse_GameServerIdentity() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  SharedDtor();
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::SharedDtor() {
  game_server_identity_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ListResponse_GameServerIdentity::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_ListResponse_GameServerIdentity& CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_ListResponse_GameServerIdentity();
  return *internal_default_instance();
}

CMsgGC_GameServer_ListResponse_GameServerIdentity* CMsgGC_GameServer_ListResponse_GameServerIdentity::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_ListResponse_GameServerIdentity* n = new CMsgGC_GameServer_ListResponse_GameServerIdentity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!game_server_identity_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*game_server_identity_token_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&game_server_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_server_standing_trend_) -
        reinterpret_cast<char*>(&game_server_account_id_)) + sizeof(game_server_standing_trend_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_ListResponse_GameServerIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_server_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_game_server_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_server_identity_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_server_identity_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_server_identity_token().data(), static_cast<int>(this->game_server_identity_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_identity_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_server_standing = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_game_server_standing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_standing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_server_standing_trend = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_game_server_standing_trend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_standing_trend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  return false;
#undef DO_
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_server_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_server_account_id(), output);
  }

  // optional string game_server_identity_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_server_identity_token().data(), static_cast<int>(this->game_server_identity_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_identity_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_server_identity_token(), output);
  }

  // optional int32 game_server_standing = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_server_standing(), output);
  }

  // optional int32 game_server_standing_trend = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game_server_standing_trend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_ListResponse.GameServerIdentity)
}

::google::protobuf::uint8* CMsgGC_GameServer_ListResponse_GameServerIdentity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_server_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_server_account_id(), target);
  }

  // optional string game_server_identity_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_server_identity_token().data(), static_cast<int>(this->game_server_identity_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_identity_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_server_identity_token(), target);
  }

  // optional int32 game_server_standing = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_server_standing(), target);
  }

  // optional int32 game_server_standing_trend = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game_server_standing_trend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  return target;
}

size_t CMsgGC_GameServer_ListResponse_GameServerIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string game_server_identity_token = 2;
    if (has_game_server_identity_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_server_identity_token());
    }

    // optional uint32 game_server_account_id = 1;
    if (has_game_server_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_account_id());
    }

    // optional int32 game_server_standing = 3;
    if (has_game_server_standing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_standing());
    }

    // optional int32 game_server_standing_trend = 4;
    if (has_game_server_standing_trend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_standing_trend());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_ListResponse_GameServerIdentity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_ListResponse_GameServerIdentity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_ListResponse.GameServerIdentity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_ListResponse.GameServerIdentity)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::MergeFrom(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_game_server_identity_token();
      game_server_identity_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_server_identity_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      game_server_account_id_ = from.game_server_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_server_standing_ = from.game_server_standing_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_server_standing_trend_ = from.game_server_standing_trend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::CopyFrom(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ListResponse_GameServerIdentity::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::Swap(CMsgGC_GameServer_ListResponse_GameServerIdentity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_ListResponse_GameServerIdentity::InternalSwap(CMsgGC_GameServer_ListResponse_GameServerIdentity* other) {
  using std::swap;
  game_server_identity_token_.Swap(&other->game_server_identity_token_);
  swap(game_server_account_id_, other->game_server_account_id_);
  swap(game_server_standing_, other->game_server_standing_);
  swap(game_server_standing_trend_, other->game_server_standing_trend_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_ListResponse_GameServerIdentity::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_ListResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_ListResponse::kOwnedGameServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_ListResponse::CMsgGC_GameServer_ListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_ListResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_ListResponse)
}
CMsgGC_GameServer_ListResponse::CMsgGC_GameServer_ListResponse(const CMsgGC_GameServer_ListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      owned_game_servers_(from.owned_game_servers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_ListResponse)
}

void CMsgGC_GameServer_ListResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGC_GameServer_ListResponse::~CMsgGC_GameServer_ListResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_ListResponse)
  SharedDtor();
}

void CMsgGC_GameServer_ListResponse::SharedDtor() {
}

void CMsgGC_GameServer_ListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ListResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_ListResponse& CMsgGC_GameServer_ListResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_ListResponse();
  return *internal_default_instance();
}

CMsgGC_GameServer_ListResponse* CMsgGC_GameServer_ListResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_ListResponse* n = new CMsgGC_GameServer_ListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_ListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_ListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owned_game_servers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_ListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_ListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_owned_game_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_ListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_ListResponse)
  return false;
#undef DO_
}

void CMsgGC_GameServer_ListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_ListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->owned_game_servers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->owned_game_servers(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_ListResponse)
}

::google::protobuf::uint8* CMsgGC_GameServer_ListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_ListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->owned_game_servers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->owned_game_servers(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_ListResponse)
  return target;
}

size_t CMsgGC_GameServer_ListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_ListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->owned_game_servers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->owned_game_servers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_ListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_ListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_ListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_ListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_ListResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ListResponse::MergeFrom(const CMsgGC_GameServer_ListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_ListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owned_game_servers_.MergeFrom(from.owned_game_servers_);
}

void CMsgGC_GameServer_ListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_ListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ListResponse::CopyFrom(const CMsgGC_GameServer_ListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_ListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ListResponse::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_ListResponse::Swap(CMsgGC_GameServer_ListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_ListResponse::InternalSwap(CMsgGC_GameServer_ListResponse* other) {
  using std::swap;
  owned_game_servers_.InternalSwap(&other->owned_game_servers_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_ListResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_ResetIdentity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_ResetIdentity::kGameServerAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_ResetIdentity::CMsgGC_GameServer_ResetIdentity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_ResetIdentity();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_ResetIdentity)
}
CMsgGC_GameServer_ResetIdentity::CMsgGC_GameServer_ResetIdentity(const CMsgGC_GameServer_ResetIdentity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_server_account_id_ = from.game_server_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_ResetIdentity)
}

void CMsgGC_GameServer_ResetIdentity::SharedCtor() {
  _cached_size_ = 0;
  game_server_account_id_ = 0u;
}

CMsgGC_GameServer_ResetIdentity::~CMsgGC_GameServer_ResetIdentity() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_ResetIdentity)
  SharedDtor();
}

void CMsgGC_GameServer_ResetIdentity::SharedDtor() {
}

void CMsgGC_GameServer_ResetIdentity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ResetIdentity::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_ResetIdentity& CMsgGC_GameServer_ResetIdentity::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_ResetIdentity();
  return *internal_default_instance();
}

CMsgGC_GameServer_ResetIdentity* CMsgGC_GameServer_ResetIdentity::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_ResetIdentity* n = new CMsgGC_GameServer_ResetIdentity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_ResetIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_ResetIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_server_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_ResetIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_ResetIdentity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_server_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_game_server_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_ResetIdentity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_ResetIdentity)
  return false;
#undef DO_
}

void CMsgGC_GameServer_ResetIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_ResetIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_server_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_server_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_ResetIdentity)
}

::google::protobuf::uint8* CMsgGC_GameServer_ResetIdentity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_ResetIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_server_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_server_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_ResetIdentity)
  return target;
}

size_t CMsgGC_GameServer_ResetIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_ResetIdentity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 game_server_account_id = 1;
  if (has_game_server_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_server_account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ResetIdentity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_ResetIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_ResetIdentity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_ResetIdentity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_ResetIdentity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_ResetIdentity)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ResetIdentity::MergeFrom(const CMsgGC_GameServer_ResetIdentity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_ResetIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_game_server_account_id()) {
    set_game_server_account_id(from.game_server_account_id());
  }
}

void CMsgGC_GameServer_ResetIdentity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_ResetIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ResetIdentity::CopyFrom(const CMsgGC_GameServer_ResetIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_ResetIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ResetIdentity::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_ResetIdentity::Swap(CMsgGC_GameServer_ResetIdentity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_ResetIdentity::InternalSwap(CMsgGC_GameServer_ResetIdentity* other) {
  using std::swap;
  swap(game_server_account_id_, other->game_server_account_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_ResetIdentity::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_ResetIdentityResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_ResetIdentityResponse::kGameServerIdentityTokenResetFieldNumber;
const int CMsgGC_GameServer_ResetIdentityResponse::kGameServerAccountIdFieldNumber;
const int CMsgGC_GameServer_ResetIdentityResponse::kGameServerIdentityTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_ResetIdentityResponse::CMsgGC_GameServer_ResetIdentityResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_ResetIdentityResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_ResetIdentityResponse)
}
CMsgGC_GameServer_ResetIdentityResponse::CMsgGC_GameServer_ResetIdentityResponse(const CMsgGC_GameServer_ResetIdentityResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_server_identity_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_server_identity_token()) {
    game_server_identity_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_server_identity_token_);
  }
  ::memcpy(&game_server_identity_token_reset_, &from.game_server_identity_token_reset_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_server_account_id_) -
    reinterpret_cast<char*>(&game_server_identity_token_reset_)) + sizeof(game_server_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_ResetIdentityResponse)
}

void CMsgGC_GameServer_ResetIdentityResponse::SharedCtor() {
  _cached_size_ = 0;
  game_server_identity_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&game_server_identity_token_reset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_server_account_id_) -
      reinterpret_cast<char*>(&game_server_identity_token_reset_)) + sizeof(game_server_account_id_));
}

CMsgGC_GameServer_ResetIdentityResponse::~CMsgGC_GameServer_ResetIdentityResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_ResetIdentityResponse)
  SharedDtor();
}

void CMsgGC_GameServer_ResetIdentityResponse::SharedDtor() {
  game_server_identity_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_ResetIdentityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ResetIdentityResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_ResetIdentityResponse& CMsgGC_GameServer_ResetIdentityResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_ResetIdentityResponse();
  return *internal_default_instance();
}

CMsgGC_GameServer_ResetIdentityResponse* CMsgGC_GameServer_ResetIdentityResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_ResetIdentityResponse* n = new CMsgGC_GameServer_ResetIdentityResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_ResetIdentityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_ResetIdentityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!game_server_identity_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*game_server_identity_token_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&game_server_identity_token_reset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_server_account_id_) -
        reinterpret_cast<char*>(&game_server_identity_token_reset_)) + sizeof(game_server_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_ResetIdentityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_ResetIdentityResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool game_server_identity_token_reset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_game_server_identity_token_reset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &game_server_identity_token_reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_game_server_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_server_identity_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_server_identity_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_server_identity_token().data(), static_cast<int>(this->game_server_identity_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGC_GameServer_ResetIdentityResponse.game_server_identity_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_ResetIdentityResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_ResetIdentityResponse)
  return false;
#undef DO_
}

void CMsgGC_GameServer_ResetIdentityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_ResetIdentityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool game_server_identity_token_reset = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->game_server_identity_token_reset(), output);
  }

  // optional uint32 game_server_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_server_account_id(), output);
  }

  // optional string game_server_identity_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_server_identity_token().data(), static_cast<int>(this->game_server_identity_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_ResetIdentityResponse.game_server_identity_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->game_server_identity_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_ResetIdentityResponse)
}

::google::protobuf::uint8* CMsgGC_GameServer_ResetIdentityResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_ResetIdentityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool game_server_identity_token_reset = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->game_server_identity_token_reset(), target);
  }

  // optional uint32 game_server_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_server_account_id(), target);
  }

  // optional string game_server_identity_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_server_identity_token().data(), static_cast<int>(this->game_server_identity_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_ResetIdentityResponse.game_server_identity_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->game_server_identity_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_ResetIdentityResponse)
  return target;
}

size_t CMsgGC_GameServer_ResetIdentityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_ResetIdentityResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string game_server_identity_token = 3;
    if (has_game_server_identity_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_server_identity_token());
    }

    // optional bool game_server_identity_token_reset = 1;
    if (has_game_server_identity_token_reset()) {
      total_size += 1 + 1;
    }

    // optional uint32 game_server_account_id = 2;
    if (has_game_server_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ResetIdentityResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_ResetIdentityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_ResetIdentityResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_ResetIdentityResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_ResetIdentityResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_ResetIdentityResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ResetIdentityResponse::MergeFrom(const CMsgGC_GameServer_ResetIdentityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_ResetIdentityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_game_server_identity_token();
      game_server_identity_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_server_identity_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      game_server_identity_token_reset_ = from.game_server_identity_token_reset_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_server_account_id_ = from.game_server_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_ResetIdentityResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_ResetIdentityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ResetIdentityResponse::CopyFrom(const CMsgGC_GameServer_ResetIdentityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_ResetIdentityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ResetIdentityResponse::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_ResetIdentityResponse::Swap(CMsgGC_GameServer_ResetIdentityResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_ResetIdentityResponse::InternalSwap(CMsgGC_GameServer_ResetIdentityResponse* other) {
  using std::swap;
  game_server_identity_token_.Swap(&other->game_server_identity_token_);
  swap(game_server_identity_token_reset_, other->game_server_identity_token_reset_);
  swap(game_server_account_id_, other->game_server_account_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_ResetIdentityResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_AckPolicy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_AckPolicy::CMsgGC_GameServer_AckPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_AckPolicy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_AckPolicy)
}
CMsgGC_GameServer_AckPolicy::CMsgGC_GameServer_AckPolicy(const CMsgGC_GameServer_AckPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_AckPolicy)
}

void CMsgGC_GameServer_AckPolicy::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGC_GameServer_AckPolicy::~CMsgGC_GameServer_AckPolicy() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_AckPolicy)
  SharedDtor();
}

void CMsgGC_GameServer_AckPolicy::SharedDtor() {
}

void CMsgGC_GameServer_AckPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AckPolicy::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_AckPolicy& CMsgGC_GameServer_AckPolicy::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_AckPolicy();
  return *internal_default_instance();
}

CMsgGC_GameServer_AckPolicy* CMsgGC_GameServer_AckPolicy::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_AckPolicy* n = new CMsgGC_GameServer_AckPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_AckPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_AckPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_AckPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_AckPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_AckPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_AckPolicy)
  return false;
#undef DO_
}

void CMsgGC_GameServer_AckPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_AckPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_AckPolicy)
}

::google::protobuf::uint8* CMsgGC_GameServer_AckPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_AckPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_AckPolicy)
  return target;
}

size_t CMsgGC_GameServer_AckPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_AckPolicy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_AckPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_AckPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_AckPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_AckPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_AckPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_AckPolicy)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AckPolicy::MergeFrom(const CMsgGC_GameServer_AckPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_AckPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGC_GameServer_AckPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_AckPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AckPolicy::CopyFrom(const CMsgGC_GameServer_AckPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_AckPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AckPolicy::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_AckPolicy::Swap(CMsgGC_GameServer_AckPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_AckPolicy::InternalSwap(CMsgGC_GameServer_AckPolicy* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_AckPolicy::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_AckPolicyResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_AckPolicyResponse::kResultFieldNumber;
const int CMsgGC_GameServer_AckPolicyResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_AckPolicyResponse::CMsgGC_GameServer_AckPolicyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_AckPolicyResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_AckPolicyResponse)
}
CMsgGC_GameServer_AckPolicyResponse::CMsgGC_GameServer_AckPolicyResponse(const CMsgGC_GameServer_AckPolicyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_AckPolicyResponse)
}

void CMsgGC_GameServer_AckPolicyResponse::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0u;
}

CMsgGC_GameServer_AckPolicyResponse::~CMsgGC_GameServer_AckPolicyResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_AckPolicyResponse)
  SharedDtor();
}

void CMsgGC_GameServer_AckPolicyResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_AckPolicyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AckPolicyResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_AckPolicyResponse& CMsgGC_GameServer_AckPolicyResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_AckPolicyResponse();
  return *internal_default_instance();
}

CMsgGC_GameServer_AckPolicyResponse* CMsgGC_GameServer_AckPolicyResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_AckPolicyResponse* n = new CMsgGC_GameServer_AckPolicyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_AckPolicyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_AckPolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_AckPolicyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_AckPolicyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGC_GameServer_AckPolicyResponse.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_AckPolicyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_AckPolicyResponse)
  return false;
#undef DO_
}

void CMsgGC_GameServer_AckPolicyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_AckPolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_AckPolicyResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_AckPolicyResponse)
}

::google::protobuf::uint8* CMsgGC_GameServer_AckPolicyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_AckPolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_AckPolicyResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_AckPolicyResponse)
  return target;
}

size_t CMsgGC_GameServer_AckPolicyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_AckPolicyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_AckPolicyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_AckPolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_AckPolicyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_AckPolicyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_AckPolicyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_AckPolicyResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AckPolicyResponse::MergeFrom(const CMsgGC_GameServer_AckPolicyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_AckPolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_AckPolicyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_AckPolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AckPolicyResponse::CopyFrom(const CMsgGC_GameServer_AckPolicyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_AckPolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AckPolicyResponse::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_AckPolicyResponse::Swap(CMsgGC_GameServer_AckPolicyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_AckPolicyResponse::InternalSwap(CMsgGC_GameServer_AckPolicyResponse* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_AckPolicyResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_Client_UseServerModificationItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_Client_UseServerModificationItem::kItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_Client_UseServerModificationItem::CMsgGC_Client_UseServerModificationItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Client_UseServerModificationItem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_Client_UseServerModificationItem)
}
CMsgGC_Client_UseServerModificationItem::CMsgGC_Client_UseServerModificationItem(const CMsgGC_Client_UseServerModificationItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Client_UseServerModificationItem)
}

void CMsgGC_Client_UseServerModificationItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
}

CMsgGC_Client_UseServerModificationItem::~CMsgGC_Client_UseServerModificationItem() {
  // @@protoc_insertion_point(destructor:CMsgGC_Client_UseServerModificationItem)
  SharedDtor();
}

void CMsgGC_Client_UseServerModificationItem::SharedDtor() {
}

void CMsgGC_Client_UseServerModificationItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Client_UseServerModificationItem::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_Client_UseServerModificationItem& CMsgGC_Client_UseServerModificationItem::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Client_UseServerModificationItem();
  return *internal_default_instance();
}

CMsgGC_Client_UseServerModificationItem* CMsgGC_Client_UseServerModificationItem::New(::google::protobuf::Arena* arena) const {
  CMsgGC_Client_UseServerModificationItem* n = new CMsgGC_Client_UseServerModificationItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_Client_UseServerModificationItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Client_UseServerModificationItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_Client_UseServerModificationItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_Client_UseServerModificationItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_Client_UseServerModificationItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_Client_UseServerModificationItem)
  return false;
#undef DO_
}

void CMsgGC_Client_UseServerModificationItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_Client_UseServerModificationItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_Client_UseServerModificationItem)
}

::google::protobuf::uint8* CMsgGC_Client_UseServerModificationItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Client_UseServerModificationItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Client_UseServerModificationItem)
  return target;
}

size_t CMsgGC_Client_UseServerModificationItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Client_UseServerModificationItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->item_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Client_UseServerModificationItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Client_UseServerModificationItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Client_UseServerModificationItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_Client_UseServerModificationItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Client_UseServerModificationItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Client_UseServerModificationItem)
    MergeFrom(*source);
  }
}

void CMsgGC_Client_UseServerModificationItem::MergeFrom(const CMsgGC_Client_UseServerModificationItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Client_UseServerModificationItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item_id()) {
    set_item_id(from.item_id());
  }
}

void CMsgGC_Client_UseServerModificationItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Client_UseServerModificationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Client_UseServerModificationItem::CopyFrom(const CMsgGC_Client_UseServerModificationItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Client_UseServerModificationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Client_UseServerModificationItem::IsInitialized() const {
  return true;
}

void CMsgGC_Client_UseServerModificationItem::Swap(CMsgGC_Client_UseServerModificationItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_Client_UseServerModificationItem::InternalSwap(CMsgGC_Client_UseServerModificationItem* other) {
  using std::swap;
  swap(item_id_, other->item_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_Client_UseServerModificationItem::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_Client_UseServerModificationItem_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_Client_UseServerModificationItem_Response::kResponseCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_Client_UseServerModificationItem_Response::CMsgGC_Client_UseServerModificationItem_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Client_UseServerModificationItem_Response();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_Client_UseServerModificationItem_Response)
}
CMsgGC_Client_UseServerModificationItem_Response::CMsgGC_Client_UseServerModificationItem_Response(const CMsgGC_Client_UseServerModificationItem_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_code_ = from.response_code_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Client_UseServerModificationItem_Response)
}

void CMsgGC_Client_UseServerModificationItem_Response::SharedCtor() {
  _cached_size_ = 0;
  response_code_ = 1;
}

CMsgGC_Client_UseServerModificationItem_Response::~CMsgGC_Client_UseServerModificationItem_Response() {
  // @@protoc_insertion_point(destructor:CMsgGC_Client_UseServerModificationItem_Response)
  SharedDtor();
}

void CMsgGC_Client_UseServerModificationItem_Response::SharedDtor() {
}

void CMsgGC_Client_UseServerModificationItem_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Client_UseServerModificationItem_Response::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_Client_UseServerModificationItem_Response& CMsgGC_Client_UseServerModificationItem_Response::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Client_UseServerModificationItem_Response();
  return *internal_default_instance();
}

CMsgGC_Client_UseServerModificationItem_Response* CMsgGC_Client_UseServerModificationItem_Response::New(::google::protobuf::Arena* arena) const {
  CMsgGC_Client_UseServerModificationItem_Response* n = new CMsgGC_Client_UseServerModificationItem_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_Client_UseServerModificationItem_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Client_UseServerModificationItem_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_code_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_Client_UseServerModificationItem_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_Client_UseServerModificationItem_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgGC_Client_UseServerModificationItem_Response.EServerModificationItemResponse response_code = 1 [default = kServerModificationItemResponse_AlreadyInUse];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_IsValid(value)) {
            set_response_code(static_cast< ::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_Client_UseServerModificationItem_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_Client_UseServerModificationItem_Response)
  return false;
#undef DO_
}

void CMsgGC_Client_UseServerModificationItem_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_Client_UseServerModificationItem_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGC_Client_UseServerModificationItem_Response.EServerModificationItemResponse response_code = 1 [default = kServerModificationItemResponse_AlreadyInUse];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_Client_UseServerModificationItem_Response)
}

::google::protobuf::uint8* CMsgGC_Client_UseServerModificationItem_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Client_UseServerModificationItem_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGC_Client_UseServerModificationItem_Response.EServerModificationItemResponse response_code = 1 [default = kServerModificationItemResponse_AlreadyInUse];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Client_UseServerModificationItem_Response)
  return target;
}

size_t CMsgGC_Client_UseServerModificationItem_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Client_UseServerModificationItem_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CMsgGC_Client_UseServerModificationItem_Response.EServerModificationItemResponse response_code = 1 [default = kServerModificationItemResponse_AlreadyInUse];
  if (has_response_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Client_UseServerModificationItem_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Client_UseServerModificationItem_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Client_UseServerModificationItem_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_Client_UseServerModificationItem_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Client_UseServerModificationItem_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Client_UseServerModificationItem_Response)
    MergeFrom(*source);
  }
}

void CMsgGC_Client_UseServerModificationItem_Response::MergeFrom(const CMsgGC_Client_UseServerModificationItem_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Client_UseServerModificationItem_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response_code()) {
    set_response_code(from.response_code());
  }
}

void CMsgGC_Client_UseServerModificationItem_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Client_UseServerModificationItem_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Client_UseServerModificationItem_Response::CopyFrom(const CMsgGC_Client_UseServerModificationItem_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Client_UseServerModificationItem_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Client_UseServerModificationItem_Response::IsInitialized() const {
  return true;
}

void CMsgGC_Client_UseServerModificationItem_Response::Swap(CMsgGC_Client_UseServerModificationItem_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_Client_UseServerModificationItem_Response::InternalSwap(CMsgGC_Client_UseServerModificationItem_Response* other) {
  using std::swap;
  swap(response_code_, other->response_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_Client_UseServerModificationItem_Response::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_UseServerModificationItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_UseServerModificationItem::kModificationTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_UseServerModificationItem::CMsgGC_GameServer_UseServerModificationItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_UseServerModificationItem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_UseServerModificationItem)
}
CMsgGC_GameServer_UseServerModificationItem::CMsgGC_GameServer_UseServerModificationItem(const CMsgGC_GameServer_UseServerModificationItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modification_type_ = from.modification_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_UseServerModificationItem)
}

void CMsgGC_GameServer_UseServerModificationItem::SharedCtor() {
  _cached_size_ = 0;
  modification_type_ = 1;
}

CMsgGC_GameServer_UseServerModificationItem::~CMsgGC_GameServer_UseServerModificationItem() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_UseServerModificationItem)
  SharedDtor();
}

void CMsgGC_GameServer_UseServerModificationItem::SharedDtor() {
}

void CMsgGC_GameServer_UseServerModificationItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_UseServerModificationItem::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_UseServerModificationItem& CMsgGC_GameServer_UseServerModificationItem::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_UseServerModificationItem();
  return *internal_default_instance();
}

CMsgGC_GameServer_UseServerModificationItem* CMsgGC_GameServer_UseServerModificationItem::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_UseServerModificationItem* n = new CMsgGC_GameServer_UseServerModificationItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_UseServerModificationItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_UseServerModificationItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modification_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_UseServerModificationItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_UseServerModificationItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EServerModificationItemType_IsValid(value)) {
            set_modification_type(static_cast< ::EServerModificationItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_UseServerModificationItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_UseServerModificationItem)
  return false;
#undef DO_
}

void CMsgGC_GameServer_UseServerModificationItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_UseServerModificationItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->modification_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_UseServerModificationItem)
}

::google::protobuf::uint8* CMsgGC_GameServer_UseServerModificationItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_UseServerModificationItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->modification_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_UseServerModificationItem)
  return target;
}

size_t CMsgGC_GameServer_UseServerModificationItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_UseServerModificationItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (has_modification_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->modification_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_UseServerModificationItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_UseServerModificationItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_UseServerModificationItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_UseServerModificationItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_UseServerModificationItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_UseServerModificationItem)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_UseServerModificationItem::MergeFrom(const CMsgGC_GameServer_UseServerModificationItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_UseServerModificationItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_modification_type()) {
    set_modification_type(from.modification_type());
  }
}

void CMsgGC_GameServer_UseServerModificationItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_UseServerModificationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_UseServerModificationItem::CopyFrom(const CMsgGC_GameServer_UseServerModificationItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_UseServerModificationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_UseServerModificationItem::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_UseServerModificationItem::Swap(CMsgGC_GameServer_UseServerModificationItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_UseServerModificationItem::InternalSwap(CMsgGC_GameServer_UseServerModificationItem* other) {
  using std::swap;
  swap(modification_type_, other->modification_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_UseServerModificationItem::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_UseServerModificationItem_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_UseServerModificationItem_Response::kModificationTypeFieldNumber;
const int CMsgGC_GameServer_UseServerModificationItem_Response::kServerResponseCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_UseServerModificationItem_Response::CMsgGC_GameServer_UseServerModificationItem_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_UseServerModificationItem_Response();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_UseServerModificationItem_Response)
}
CMsgGC_GameServer_UseServerModificationItem_Response::CMsgGC_GameServer_UseServerModificationItem_Response(const CMsgGC_GameServer_UseServerModificationItem_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&modification_type_, &from.modification_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_response_code_) -
    reinterpret_cast<char*>(&modification_type_)) + sizeof(server_response_code_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_UseServerModificationItem_Response)
}

void CMsgGC_GameServer_UseServerModificationItem_Response::SharedCtor() {
  _cached_size_ = 0;
  modification_type_ = 1;
  server_response_code_ = 1;
}

CMsgGC_GameServer_UseServerModificationItem_Response::~CMsgGC_GameServer_UseServerModificationItem_Response() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_UseServerModificationItem_Response)
  SharedDtor();
}

void CMsgGC_GameServer_UseServerModificationItem_Response::SharedDtor() {
}

void CMsgGC_GameServer_UseServerModificationItem_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_UseServerModificationItem_Response::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_UseServerModificationItem_Response& CMsgGC_GameServer_UseServerModificationItem_Response::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_UseServerModificationItem_Response();
  return *internal_default_instance();
}

CMsgGC_GameServer_UseServerModificationItem_Response* CMsgGC_GameServer_UseServerModificationItem_Response::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_UseServerModificationItem_Response* n = new CMsgGC_GameServer_UseServerModificationItem_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_UseServerModificationItem_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    modification_type_ = 1;
    server_response_code_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_UseServerModificationItem_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EServerModificationItemType_IsValid(value)) {
            set_modification_type(static_cast< ::EServerModificationItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGC_GameServer_UseServerModificationItem_Response.EServerModificationItemServerResponse server_response_code = 2 [default = kServerModificationItemServerResponse_Accepted];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_IsValid(value)) {
            set_server_response_code(static_cast< ::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_UseServerModificationItem_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_UseServerModificationItem_Response)
  return false;
#undef DO_
}

void CMsgGC_GameServer_UseServerModificationItem_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->modification_type(), output);
  }

  // optional .CMsgGC_GameServer_UseServerModificationItem_Response.EServerModificationItemServerResponse server_response_code = 2 [default = kServerModificationItemServerResponse_Accepted];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->server_response_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_UseServerModificationItem_Response)
}

::google::protobuf::uint8* CMsgGC_GameServer_UseServerModificationItem_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->modification_type(), target);
  }

  // optional .CMsgGC_GameServer_UseServerModificationItem_Response.EServerModificationItemServerResponse server_response_code = 2 [default = kServerModificationItemServerResponse_Accepted];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->server_response_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_UseServerModificationItem_Response)
  return target;
}

size_t CMsgGC_GameServer_UseServerModificationItem_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
    if (has_modification_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modification_type());
    }

    // optional .CMsgGC_GameServer_UseServerModificationItem_Response.EServerModificationItemServerResponse server_response_code = 2 [default = kServerModificationItemServerResponse_Accepted];
    if (has_server_response_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_response_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_UseServerModificationItem_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_UseServerModificationItem_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_UseServerModificationItem_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_UseServerModificationItem_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_UseServerModificationItem_Response)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_UseServerModificationItem_Response::MergeFrom(const CMsgGC_GameServer_UseServerModificationItem_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      modification_type_ = from.modification_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_response_code_ = from.server_response_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_UseServerModificationItem_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_UseServerModificationItem_Response::CopyFrom(const CMsgGC_GameServer_UseServerModificationItem_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_UseServerModificationItem_Response::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_UseServerModificationItem_Response::Swap(CMsgGC_GameServer_UseServerModificationItem_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_UseServerModificationItem_Response::InternalSwap(CMsgGC_GameServer_UseServerModificationItem_Response* other) {
  using std::swap;
  swap(modification_type_, other->modification_type_);
  swap(server_response_code_, other->server_response_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_UseServerModificationItem_Response::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_ServerModificationItemExpired::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_ServerModificationItemExpired::kModificationTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_ServerModificationItemExpired::CMsgGC_GameServer_ServerModificationItemExpired()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_ServerModificationItemExpired();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_ServerModificationItemExpired)
}
CMsgGC_GameServer_ServerModificationItemExpired::CMsgGC_GameServer_ServerModificationItemExpired(const CMsgGC_GameServer_ServerModificationItemExpired& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modification_type_ = from.modification_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_ServerModificationItemExpired)
}

void CMsgGC_GameServer_ServerModificationItemExpired::SharedCtor() {
  _cached_size_ = 0;
  modification_type_ = 1;
}

CMsgGC_GameServer_ServerModificationItemExpired::~CMsgGC_GameServer_ServerModificationItemExpired() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_ServerModificationItemExpired)
  SharedDtor();
}

void CMsgGC_GameServer_ServerModificationItemExpired::SharedDtor() {
}

void CMsgGC_GameServer_ServerModificationItemExpired::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ServerModificationItemExpired::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_ServerModificationItemExpired& CMsgGC_GameServer_ServerModificationItemExpired::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_ServerModificationItemExpired();
  return *internal_default_instance();
}

CMsgGC_GameServer_ServerModificationItemExpired* CMsgGC_GameServer_ServerModificationItemExpired::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_ServerModificationItemExpired* n = new CMsgGC_GameServer_ServerModificationItemExpired;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_ServerModificationItemExpired::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_ServerModificationItemExpired)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modification_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_ServerModificationItemExpired::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_ServerModificationItemExpired)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EServerModificationItemType_IsValid(value)) {
            set_modification_type(static_cast< ::EServerModificationItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_ServerModificationItemExpired)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_ServerModificationItemExpired)
  return false;
#undef DO_
}

void CMsgGC_GameServer_ServerModificationItemExpired::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_ServerModificationItemExpired)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->modification_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_ServerModificationItemExpired)
}

::google::protobuf::uint8* CMsgGC_GameServer_ServerModificationItemExpired::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_ServerModificationItemExpired)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->modification_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_ServerModificationItemExpired)
  return target;
}

size_t CMsgGC_GameServer_ServerModificationItemExpired::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_ServerModificationItemExpired)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (has_modification_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->modification_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ServerModificationItemExpired::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_ServerModificationItemExpired)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_ServerModificationItemExpired* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_ServerModificationItemExpired>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_ServerModificationItemExpired)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_ServerModificationItemExpired)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ServerModificationItemExpired::MergeFrom(const CMsgGC_GameServer_ServerModificationItemExpired& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_ServerModificationItemExpired)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_modification_type()) {
    set_modification_type(from.modification_type());
  }
}

void CMsgGC_GameServer_ServerModificationItemExpired::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_ServerModificationItemExpired)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ServerModificationItemExpired::CopyFrom(const CMsgGC_GameServer_ServerModificationItemExpired& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_ServerModificationItemExpired)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ServerModificationItemExpired::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_ServerModificationItemExpired::Swap(CMsgGC_GameServer_ServerModificationItemExpired* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_ServerModificationItemExpired::InternalSwap(CMsgGC_GameServer_ServerModificationItemExpired* other) {
  using std::swap;
  swap(modification_type_, other->modification_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_ServerModificationItemExpired::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_GameServer_ServerModificationItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_GameServer_ServerModificationItem::kModificationTypeFieldNumber;
const int CMsgGC_GameServer_ServerModificationItem::kActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_GameServer_ServerModificationItem::CMsgGC_GameServer_ServerModificationItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_ServerModificationItem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_GameServer_ServerModificationItem)
}
CMsgGC_GameServer_ServerModificationItem::CMsgGC_GameServer_ServerModificationItem(const CMsgGC_GameServer_ServerModificationItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&active_, &from.active_,
    static_cast<size_t>(reinterpret_cast<char*>(&modification_type_) -
    reinterpret_cast<char*>(&active_)) + sizeof(modification_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_ServerModificationItem)
}

void CMsgGC_GameServer_ServerModificationItem::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  modification_type_ = 1;
}

CMsgGC_GameServer_ServerModificationItem::~CMsgGC_GameServer_ServerModificationItem() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_ServerModificationItem)
  SharedDtor();
}

void CMsgGC_GameServer_ServerModificationItem::SharedDtor() {
}

void CMsgGC_GameServer_ServerModificationItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ServerModificationItem::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_GameServer_ServerModificationItem& CMsgGC_GameServer_ServerModificationItem::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_GameServer_ServerModificationItem();
  return *internal_default_instance();
}

CMsgGC_GameServer_ServerModificationItem* CMsgGC_GameServer_ServerModificationItem::New(::google::protobuf::Arena* arena) const {
  CMsgGC_GameServer_ServerModificationItem* n = new CMsgGC_GameServer_ServerModificationItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_GameServer_ServerModificationItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_ServerModificationItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    active_ = false;
    modification_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_GameServer_ServerModificationItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_GameServer_ServerModificationItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EServerModificationItemType_IsValid(value)) {
            set_modification_type(static_cast< ::EServerModificationItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool active = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_GameServer_ServerModificationItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_GameServer_ServerModificationItem)
  return false;
#undef DO_
}

void CMsgGC_GameServer_ServerModificationItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_GameServer_ServerModificationItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->modification_type(), output);
  }

  // optional bool active = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_GameServer_ServerModificationItem)
}

::google::protobuf::uint8* CMsgGC_GameServer_ServerModificationItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_ServerModificationItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->modification_type(), target);
  }

  // optional bool active = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_ServerModificationItem)
  return target;
}

size_t CMsgGC_GameServer_ServerModificationItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_ServerModificationItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool active = 2;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
    if (has_modification_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modification_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ServerModificationItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_ServerModificationItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_ServerModificationItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_GameServer_ServerModificationItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_ServerModificationItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_ServerModificationItem)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ServerModificationItem::MergeFrom(const CMsgGC_GameServer_ServerModificationItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_ServerModificationItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000002u) {
      modification_type_ = from.modification_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_ServerModificationItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_ServerModificationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ServerModificationItem::CopyFrom(const CMsgGC_GameServer_ServerModificationItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_ServerModificationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ServerModificationItem::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_ServerModificationItem::Swap(CMsgGC_GameServer_ServerModificationItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_GameServer_ServerModificationItem::InternalSwap(CMsgGC_GameServer_ServerModificationItem* other) {
  using std::swap;
  swap(active_, other->active_);
  swap(modification_type_, other->modification_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_GameServer_ServerModificationItem::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_Halloween_ReservedItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_Halloween_ReservedItem::kXFieldNumber;
const int CMsgGC_Halloween_ReservedItem::kYFieldNumber;
const int CMsgGC_Halloween_ReservedItem::kZFieldNumber;
const int CMsgGC_Halloween_ReservedItem::kSpawnMetaInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_Halloween_ReservedItem::CMsgGC_Halloween_ReservedItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Halloween_ReservedItem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_Halloween_ReservedItem)
}
CMsgGC_Halloween_ReservedItem::CMsgGC_Halloween_ReservedItem(const CMsgGC_Halloween_ReservedItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      x_(from.x_),
      y_(from.y_),
      z_(from.z_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spawn_meta_info_ = from.spawn_meta_info_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Halloween_ReservedItem)
}

void CMsgGC_Halloween_ReservedItem::SharedCtor() {
  _cached_size_ = 0;
  spawn_meta_info_ = 0u;
}

CMsgGC_Halloween_ReservedItem::~CMsgGC_Halloween_ReservedItem() {
  // @@protoc_insertion_point(destructor:CMsgGC_Halloween_ReservedItem)
  SharedDtor();
}

void CMsgGC_Halloween_ReservedItem::SharedDtor() {
}

void CMsgGC_Halloween_ReservedItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Halloween_ReservedItem::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_Halloween_ReservedItem& CMsgGC_Halloween_ReservedItem::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Halloween_ReservedItem();
  return *internal_default_instance();
}

CMsgGC_Halloween_ReservedItem* CMsgGC_Halloween_ReservedItem::New(::google::protobuf::Arena* arena) const {
  CMsgGC_Halloween_ReservedItem* n = new CMsgGC_Halloween_ReservedItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_Halloween_ReservedItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Halloween_ReservedItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_.Clear();
  y_.Clear();
  z_.Clear();
  spawn_meta_info_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_Halloween_ReservedItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_Halloween_ReservedItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_x())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_y())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_z())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_z())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spawn_meta_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_spawn_meta_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawn_meta_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_Halloween_ReservedItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_Halloween_ReservedItem)
  return false;
#undef DO_
}

void CMsgGC_Halloween_ReservedItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_Halloween_ReservedItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float x = 1;
  for (int i = 0, n = this->x_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->x(i), output);
  }

  // repeated float y = 2;
  for (int i = 0, n = this->y_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->y(i), output);
  }

  // repeated float z = 3;
  for (int i = 0, n = this->z_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->z(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 spawn_meta_info = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->spawn_meta_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_Halloween_ReservedItem)
}

::google::protobuf::uint8* CMsgGC_Halloween_ReservedItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Halloween_ReservedItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float x = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->x_, target);

  // repeated float y = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->y_, target);

  // repeated float z = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->z_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 spawn_meta_info = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->spawn_meta_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Halloween_ReservedItem)
  return target;
}

size_t CMsgGC_Halloween_ReservedItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Halloween_ReservedItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float x = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->x_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->x_size());
    total_size += data_size;
  }

  // repeated float y = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->y_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->y_size());
    total_size += data_size;
  }

  // repeated float z = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->z_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->z_size());
    total_size += data_size;
  }

  // optional uint32 spawn_meta_info = 7;
  if (has_spawn_meta_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spawn_meta_info());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Halloween_ReservedItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Halloween_ReservedItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Halloween_ReservedItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_Halloween_ReservedItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Halloween_ReservedItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Halloween_ReservedItem)
    MergeFrom(*source);
  }
}

void CMsgGC_Halloween_ReservedItem::MergeFrom(const CMsgGC_Halloween_ReservedItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Halloween_ReservedItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  z_.MergeFrom(from.z_);
  if (from.has_spawn_meta_info()) {
    set_spawn_meta_info(from.spawn_meta_info());
  }
}

void CMsgGC_Halloween_ReservedItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Halloween_ReservedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Halloween_ReservedItem::CopyFrom(const CMsgGC_Halloween_ReservedItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Halloween_ReservedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Halloween_ReservedItem::IsInitialized() const {
  return true;
}

void CMsgGC_Halloween_ReservedItem::Swap(CMsgGC_Halloween_ReservedItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_Halloween_ReservedItem::InternalSwap(CMsgGC_Halloween_ReservedItem* other) {
  using std::swap;
  x_.InternalSwap(&other->x_);
  y_.InternalSwap(&other->y_);
  z_.InternalSwap(&other->z_);
  swap(spawn_meta_info_, other->spawn_meta_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_Halloween_ReservedItem::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_Halloween_GrantItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_Halloween_GrantItem::kRecipientAccountIdFieldNumber;
const int CMsgGC_Halloween_GrantItem::kLevelIdFieldNumber;
const int CMsgGC_Halloween_GrantItem::kFlaggedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_Halloween_GrantItem::CMsgGC_Halloween_GrantItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Halloween_GrantItem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_Halloween_GrantItem)
}
CMsgGC_Halloween_GrantItem::CMsgGC_Halloween_GrantItem(const CMsgGC_Halloween_GrantItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&recipient_account_id_, &from.recipient_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&flagged_) -
    reinterpret_cast<char*>(&recipient_account_id_)) + sizeof(flagged_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Halloween_GrantItem)
}

void CMsgGC_Halloween_GrantItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&recipient_account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flagged_) -
      reinterpret_cast<char*>(&recipient_account_id_)) + sizeof(flagged_));
}

CMsgGC_Halloween_GrantItem::~CMsgGC_Halloween_GrantItem() {
  // @@protoc_insertion_point(destructor:CMsgGC_Halloween_GrantItem)
  SharedDtor();
}

void CMsgGC_Halloween_GrantItem::SharedDtor() {
}

void CMsgGC_Halloween_GrantItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Halloween_GrantItem::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_Halloween_GrantItem& CMsgGC_Halloween_GrantItem::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Halloween_GrantItem();
  return *internal_default_instance();
}

CMsgGC_Halloween_GrantItem* CMsgGC_Halloween_GrantItem::New(::google::protobuf::Arena* arena) const {
  CMsgGC_Halloween_GrantItem* n = new CMsgGC_Halloween_GrantItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_Halloween_GrantItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Halloween_GrantItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&recipient_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flagged_) -
        reinterpret_cast<char*>(&recipient_account_id_)) + sizeof(flagged_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_Halloween_GrantItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_Halloween_GrantItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recipient_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_recipient_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recipient_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool flagged = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_flagged();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flagged_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_Halloween_GrantItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_Halloween_GrantItem)
  return false;
#undef DO_
}

void CMsgGC_Halloween_GrantItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_Halloween_GrantItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 recipient_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recipient_account_id(), output);
  }

  // optional uint32 level_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level_id(), output);
  }

  // optional bool flagged = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flagged(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_Halloween_GrantItem)
}

::google::protobuf::uint8* CMsgGC_Halloween_GrantItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Halloween_GrantItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 recipient_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recipient_account_id(), target);
  }

  // optional uint32 level_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level_id(), target);
  }

  // optional bool flagged = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flagged(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Halloween_GrantItem)
  return target;
}

size_t CMsgGC_Halloween_GrantItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Halloween_GrantItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 recipient_account_id = 1;
    if (has_recipient_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recipient_account_id());
    }

    // optional uint32 level_id = 2;
    if (has_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level_id());
    }

    // optional bool flagged = 3;
    if (has_flagged()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Halloween_GrantItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Halloween_GrantItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Halloween_GrantItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_Halloween_GrantItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Halloween_GrantItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Halloween_GrantItem)
    MergeFrom(*source);
  }
}

void CMsgGC_Halloween_GrantItem::MergeFrom(const CMsgGC_Halloween_GrantItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Halloween_GrantItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      recipient_account_id_ = from.recipient_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_id_ = from.level_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      flagged_ = from.flagged_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_Halloween_GrantItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Halloween_GrantItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Halloween_GrantItem::CopyFrom(const CMsgGC_Halloween_GrantItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Halloween_GrantItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Halloween_GrantItem::IsInitialized() const {
  return true;
}

void CMsgGC_Halloween_GrantItem::Swap(CMsgGC_Halloween_GrantItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_Halloween_GrantItem::InternalSwap(CMsgGC_Halloween_GrantItem* other) {
  using std::swap;
  swap(recipient_account_id_, other->recipient_account_id_);
  swap(level_id_, other->level_id_);
  swap(flagged_, other->flagged_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_Halloween_GrantItem::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_Halloween_GrantItemResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_Halloween_GrantItemResponse::kRecipientAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_Halloween_GrantItemResponse::CMsgGC_Halloween_GrantItemResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Halloween_GrantItemResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_Halloween_GrantItemResponse)
}
CMsgGC_Halloween_GrantItemResponse::CMsgGC_Halloween_GrantItemResponse(const CMsgGC_Halloween_GrantItemResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  recipient_account_id_ = from.recipient_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Halloween_GrantItemResponse)
}

void CMsgGC_Halloween_GrantItemResponse::SharedCtor() {
  _cached_size_ = 0;
  recipient_account_id_ = 0u;
}

CMsgGC_Halloween_GrantItemResponse::~CMsgGC_Halloween_GrantItemResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_Halloween_GrantItemResponse)
  SharedDtor();
}

void CMsgGC_Halloween_GrantItemResponse::SharedDtor() {
}

void CMsgGC_Halloween_GrantItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Halloween_GrantItemResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_Halloween_GrantItemResponse& CMsgGC_Halloween_GrantItemResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Halloween_GrantItemResponse();
  return *internal_default_instance();
}

CMsgGC_Halloween_GrantItemResponse* CMsgGC_Halloween_GrantItemResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGC_Halloween_GrantItemResponse* n = new CMsgGC_Halloween_GrantItemResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_Halloween_GrantItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Halloween_GrantItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipient_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_Halloween_GrantItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_Halloween_GrantItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recipient_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_recipient_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recipient_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_Halloween_GrantItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_Halloween_GrantItemResponse)
  return false;
#undef DO_
}

void CMsgGC_Halloween_GrantItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_Halloween_GrantItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 recipient_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recipient_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_Halloween_GrantItemResponse)
}

::google::protobuf::uint8* CMsgGC_Halloween_GrantItemResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Halloween_GrantItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 recipient_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recipient_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Halloween_GrantItemResponse)
  return target;
}

size_t CMsgGC_Halloween_GrantItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Halloween_GrantItemResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 recipient_account_id = 1;
  if (has_recipient_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recipient_account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Halloween_GrantItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Halloween_GrantItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Halloween_GrantItemResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_Halloween_GrantItemResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Halloween_GrantItemResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Halloween_GrantItemResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_Halloween_GrantItemResponse::MergeFrom(const CMsgGC_Halloween_GrantItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Halloween_GrantItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_recipient_account_id()) {
    set_recipient_account_id(from.recipient_account_id());
  }
}

void CMsgGC_Halloween_GrantItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Halloween_GrantItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Halloween_GrantItemResponse::CopyFrom(const CMsgGC_Halloween_GrantItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Halloween_GrantItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Halloween_GrantItemResponse::IsInitialized() const {
  return true;
}

void CMsgGC_Halloween_GrantItemResponse::Swap(CMsgGC_Halloween_GrantItemResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_Halloween_GrantItemResponse::InternalSwap(CMsgGC_Halloween_GrantItemResponse* other) {
  using std::swap;
  swap(recipient_account_id_, other->recipient_account_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_Halloween_GrantItemResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_Halloween_ItemClaimed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_Halloween_ItemClaimed::CMsgGC_Halloween_ItemClaimed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Halloween_ItemClaimed();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_Halloween_ItemClaimed)
}
CMsgGC_Halloween_ItemClaimed::CMsgGC_Halloween_ItemClaimed(const CMsgGC_Halloween_ItemClaimed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Halloween_ItemClaimed)
}

void CMsgGC_Halloween_ItemClaimed::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGC_Halloween_ItemClaimed::~CMsgGC_Halloween_ItemClaimed() {
  // @@protoc_insertion_point(destructor:CMsgGC_Halloween_ItemClaimed)
  SharedDtor();
}

void CMsgGC_Halloween_ItemClaimed::SharedDtor() {
}

void CMsgGC_Halloween_ItemClaimed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Halloween_ItemClaimed::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_Halloween_ItemClaimed& CMsgGC_Halloween_ItemClaimed::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Halloween_ItemClaimed();
  return *internal_default_instance();
}

CMsgGC_Halloween_ItemClaimed* CMsgGC_Halloween_ItemClaimed::New(::google::protobuf::Arena* arena) const {
  CMsgGC_Halloween_ItemClaimed* n = new CMsgGC_Halloween_ItemClaimed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_Halloween_ItemClaimed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Halloween_ItemClaimed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_Halloween_ItemClaimed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_Halloween_ItemClaimed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_Halloween_ItemClaimed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_Halloween_ItemClaimed)
  return false;
#undef DO_
}

void CMsgGC_Halloween_ItemClaimed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_Halloween_ItemClaimed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_Halloween_ItemClaimed)
}

::google::protobuf::uint8* CMsgGC_Halloween_ItemClaimed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Halloween_ItemClaimed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Halloween_ItemClaimed)
  return target;
}

size_t CMsgGC_Halloween_ItemClaimed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Halloween_ItemClaimed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Halloween_ItemClaimed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Halloween_ItemClaimed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Halloween_ItemClaimed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_Halloween_ItemClaimed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Halloween_ItemClaimed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Halloween_ItemClaimed)
    MergeFrom(*source);
  }
}

void CMsgGC_Halloween_ItemClaimed::MergeFrom(const CMsgGC_Halloween_ItemClaimed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Halloween_ItemClaimed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGC_Halloween_ItemClaimed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Halloween_ItemClaimed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Halloween_ItemClaimed::CopyFrom(const CMsgGC_Halloween_ItemClaimed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Halloween_ItemClaimed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Halloween_ItemClaimed::IsInitialized() const {
  return true;
}

void CMsgGC_Halloween_ItemClaimed::Swap(CMsgGC_Halloween_ItemClaimed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_Halloween_ItemClaimed::InternalSwap(CMsgGC_Halloween_ItemClaimed* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_Halloween_ItemClaimed::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_PickupItemEligibility_Query::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_PickupItemEligibility_Query::kAccountIdFieldNumber;
const int CMsgGC_PickupItemEligibility_Query::kSecondsAgoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_PickupItemEligibility_Query::CMsgGC_PickupItemEligibility_Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_PickupItemEligibility_Query();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_PickupItemEligibility_Query)
}
CMsgGC_PickupItemEligibility_Query::CMsgGC_PickupItemEligibility_Query(const CMsgGC_PickupItemEligibility_Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_ago_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(seconds_ago_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_PickupItemEligibility_Query)
}

void CMsgGC_PickupItemEligibility_Query::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_ago_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(seconds_ago_));
}

CMsgGC_PickupItemEligibility_Query::~CMsgGC_PickupItemEligibility_Query() {
  // @@protoc_insertion_point(destructor:CMsgGC_PickupItemEligibility_Query)
  SharedDtor();
}

void CMsgGC_PickupItemEligibility_Query::SharedDtor() {
}

void CMsgGC_PickupItemEligibility_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_PickupItemEligibility_Query::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_PickupItemEligibility_Query& CMsgGC_PickupItemEligibility_Query::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_PickupItemEligibility_Query();
  return *internal_default_instance();
}

CMsgGC_PickupItemEligibility_Query* CMsgGC_PickupItemEligibility_Query::New(::google::protobuf::Arena* arena) const {
  CMsgGC_PickupItemEligibility_Query* n = new CMsgGC_PickupItemEligibility_Query;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_PickupItemEligibility_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_PickupItemEligibility_Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_ago_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(seconds_ago_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_PickupItemEligibility_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_PickupItemEligibility_Query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_ago = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_seconds_ago();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_ago_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_PickupItemEligibility_Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_PickupItemEligibility_Query)
  return false;
#undef DO_
}

void CMsgGC_PickupItemEligibility_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_PickupItemEligibility_Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 seconds_ago = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seconds_ago(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_PickupItemEligibility_Query)
}

::google::protobuf::uint8* CMsgGC_PickupItemEligibility_Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_PickupItemEligibility_Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 seconds_ago = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seconds_ago(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_PickupItemEligibility_Query)
  return target;
}

size_t CMsgGC_PickupItemEligibility_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_PickupItemEligibility_Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 seconds_ago = 2;
    if (has_seconds_ago()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_ago());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_PickupItemEligibility_Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_PickupItemEligibility_Query)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_PickupItemEligibility_Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_PickupItemEligibility_Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_PickupItemEligibility_Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_PickupItemEligibility_Query)
    MergeFrom(*source);
  }
}

void CMsgGC_PickupItemEligibility_Query::MergeFrom(const CMsgGC_PickupItemEligibility_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_PickupItemEligibility_Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_ago_ = from.seconds_ago_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_PickupItemEligibility_Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_PickupItemEligibility_Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_PickupItemEligibility_Query::CopyFrom(const CMsgGC_PickupItemEligibility_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_PickupItemEligibility_Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_PickupItemEligibility_Query::IsInitialized() const {
  return true;
}

void CMsgGC_PickupItemEligibility_Query::Swap(CMsgGC_PickupItemEligibility_Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_PickupItemEligibility_Query::InternalSwap(CMsgGC_PickupItemEligibility_Query* other) {
  using std::swap;
  swap(account_id_, other->account_id_);
  swap(seconds_ago_, other->seconds_ago_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_PickupItemEligibility_Query::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_PickupItemEligibility_QueryResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_PickupItemEligibility_QueryResponse::kAccountIdFieldNumber;
const int CMsgGC_PickupItemEligibility_QueryResponse::kWasEligibleFieldNumber;
const int CMsgGC_PickupItemEligibility_QueryResponse::kLevelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_PickupItemEligibility_QueryResponse::CMsgGC_PickupItemEligibility_QueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_PickupItemEligibility_QueryResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_PickupItemEligibility_QueryResponse)
}
CMsgGC_PickupItemEligibility_QueryResponse::CMsgGC_PickupItemEligibility_QueryResponse(const CMsgGC_PickupItemEligibility_QueryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(level_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_PickupItemEligibility_QueryResponse)
}

void CMsgGC_PickupItemEligibility_QueryResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(level_id_));
}

CMsgGC_PickupItemEligibility_QueryResponse::~CMsgGC_PickupItemEligibility_QueryResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_PickupItemEligibility_QueryResponse)
  SharedDtor();
}

void CMsgGC_PickupItemEligibility_QueryResponse::SharedDtor() {
}

void CMsgGC_PickupItemEligibility_QueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_PickupItemEligibility_QueryResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_PickupItemEligibility_QueryResponse& CMsgGC_PickupItemEligibility_QueryResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_PickupItemEligibility_QueryResponse();
  return *internal_default_instance();
}

CMsgGC_PickupItemEligibility_QueryResponse* CMsgGC_PickupItemEligibility_QueryResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGC_PickupItemEligibility_QueryResponse* n = new CMsgGC_PickupItemEligibility_QueryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_PickupItemEligibility_QueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_PickupItemEligibility_QueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(level_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_PickupItemEligibility_QueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_PickupItemEligibility_QueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool was_eligible = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_was_eligible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_eligible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_level_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_PickupItemEligibility_QueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_PickupItemEligibility_QueryResponse)
  return false;
#undef DO_
}

void CMsgGC_PickupItemEligibility_QueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_PickupItemEligibility_QueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional bool was_eligible = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->was_eligible(), output);
  }

  // optional uint32 level_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_PickupItemEligibility_QueryResponse)
}

::google::protobuf::uint8* CMsgGC_PickupItemEligibility_QueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_PickupItemEligibility_QueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional bool was_eligible = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->was_eligible(), target);
  }

  // optional uint32 level_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_PickupItemEligibility_QueryResponse)
  return target;
}

size_t CMsgGC_PickupItemEligibility_QueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_PickupItemEligibility_QueryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional bool was_eligible = 2;
    if (has_was_eligible()) {
      total_size += 1 + 1;
    }

    // optional uint32 level_id = 3;
    if (has_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_PickupItemEligibility_QueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_PickupItemEligibility_QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_PickupItemEligibility_QueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_PickupItemEligibility_QueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_PickupItemEligibility_QueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_PickupItemEligibility_QueryResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_PickupItemEligibility_QueryResponse::MergeFrom(const CMsgGC_PickupItemEligibility_QueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_PickupItemEligibility_QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      was_eligible_ = from.was_eligible_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_id_ = from.level_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_PickupItemEligibility_QueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_PickupItemEligibility_QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_PickupItemEligibility_QueryResponse::CopyFrom(const CMsgGC_PickupItemEligibility_QueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_PickupItemEligibility_QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_PickupItemEligibility_QueryResponse::IsInitialized() const {
  return true;
}

void CMsgGC_PickupItemEligibility_QueryResponse::Swap(CMsgGC_PickupItemEligibility_QueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_PickupItemEligibility_QueryResponse::InternalSwap(CMsgGC_PickupItemEligibility_QueryResponse* other) {
  using std::swap;
  swap(account_id_, other->account_id_);
  swap(was_eligible_, other->was_eligible_);
  swap(level_id_, other->level_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_PickupItemEligibility_QueryResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSOTFPartyMember::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOTFPartyMember::kOwnsTicketFieldNumber;
const int CSOTFPartyMember::kCompletedMissionsFieldNumber;
const int CSOTFPartyMember::kBadgeLevelFieldNumber;
const int CSOTFPartyMember::kSquadSurplusFieldNumber;
const int CSOTFPartyMember::kIsBannedFieldNumber;
const int CSOTFPartyMember::kCompetitiveAccessFieldNumber;
const int CSOTFPartyMember::kLadderRankFieldNumber;
const int CSOTFPartyMember::kIsLowPriorityFieldNumber;
const int CSOTFPartyMember::kExperienceFieldNumber;
const int CSOTFPartyMember::kSkillratingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOTFPartyMember::CSOTFPartyMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFPartyMember();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSOTFPartyMember)
}
CSOTFPartyMember::CSOTFPartyMember(const CSOTFPartyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&completed_missions_, &from.completed_missions_,
    static_cast<size_t>(reinterpret_cast<char*>(&skillrating_) -
    reinterpret_cast<char*>(&completed_missions_)) + sizeof(skillrating_));
  // @@protoc_insertion_point(copy_constructor:CSOTFPartyMember)
}

void CSOTFPartyMember::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&completed_missions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&experience_) -
      reinterpret_cast<char*>(&completed_missions_)) + sizeof(experience_));
  skillrating_ = 10000u;
}

CSOTFPartyMember::~CSOTFPartyMember() {
  // @@protoc_insertion_point(destructor:CSOTFPartyMember)
  SharedDtor();
}

void CSOTFPartyMember::SharedDtor() {
}

void CSOTFPartyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFPartyMember::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOTFPartyMember& CSOTFPartyMember::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFPartyMember();
  return *internal_default_instance();
}

CSOTFPartyMember* CSOTFPartyMember::New(::google::protobuf::Arena* arena) const {
  CSOTFPartyMember* n = new CSOTFPartyMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOTFPartyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFPartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&completed_missions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_low_priority_) -
        reinterpret_cast<char*>(&completed_missions_)) + sizeof(is_low_priority_));
  }
  if (cached_has_bits & 768u) {
    experience_ = 0u;
    skillrating_ = 10000u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOTFPartyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSOTFPartyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool owns_ticket = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_owns_ticket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &owns_ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 completed_missions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_completed_missions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completed_missions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 badge_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_badge_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool squad_surplus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_squad_surplus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &squad_surplus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_banned = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_is_banned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool competitive_access = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_competitive_access();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &competitive_access_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ladder_rank = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_ladder_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ladder_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_low_priority = 13 [default = false];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_is_low_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_low_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 experience = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_experience();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experience_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 skillrating = 15 [default = 10000];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_skillrating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillrating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSOTFPartyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSOTFPartyMember)
  return false;
#undef DO_
}

void CSOTFPartyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSOTFPartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool owns_ticket = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->owns_ticket(), output);
  }

  // optional uint32 completed_missions = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->completed_missions(), output);
  }

  // optional uint32 badge_level = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->badge_level(), output);
  }

  // optional bool squad_surplus = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->squad_surplus(), output);
  }

  // optional bool is_banned = 8 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_banned(), output);
  }

  // optional bool competitive_access = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->competitive_access(), output);
  }

  // optional uint32 ladder_rank = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ladder_rank(), output);
  }

  // optional bool is_low_priority = 13 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_low_priority(), output);
  }

  // optional uint32 experience = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->experience(), output);
  }

  // optional uint32 skillrating = 15 [default = 10000];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->skillrating(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSOTFPartyMember)
}

::google::protobuf::uint8* CSOTFPartyMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFPartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool owns_ticket = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->owns_ticket(), target);
  }

  // optional uint32 completed_missions = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->completed_missions(), target);
  }

  // optional uint32 badge_level = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->badge_level(), target);
  }

  // optional bool squad_surplus = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->squad_surplus(), target);
  }

  // optional bool is_banned = 8 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_banned(), target);
  }

  // optional bool competitive_access = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->competitive_access(), target);
  }

  // optional uint32 ladder_rank = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ladder_rank(), target);
  }

  // optional bool is_low_priority = 13 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_low_priority(), target);
  }

  // optional uint32 experience = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->experience(), target);
  }

  // optional uint32 skillrating = 15 [default = 10000];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->skillrating(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFPartyMember)
  return target;
}

size_t CSOTFPartyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFPartyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 completed_missions = 3;
    if (has_completed_missions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completed_missions());
    }

    // optional uint32 badge_level = 4;
    if (has_badge_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_level());
    }

    // optional bool owns_ticket = 2;
    if (has_owns_ticket()) {
      total_size += 1 + 1;
    }

    // optional bool squad_surplus = 5;
    if (has_squad_surplus()) {
      total_size += 1 + 1;
    }

    // optional bool is_banned = 8 [default = false];
    if (has_is_banned()) {
      total_size += 1 + 1;
    }

    // optional bool competitive_access = 9;
    if (has_competitive_access()) {
      total_size += 1 + 1;
    }

    // optional uint32 ladder_rank = 12;
    if (has_ladder_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ladder_rank());
    }

    // optional bool is_low_priority = 13 [default = false];
    if (has_is_low_priority()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 experience = 14;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->experience());
    }

    // optional uint32 skillrating = 15 [default = 10000];
    if (has_skillrating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillrating());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFPartyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFPartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFPartyMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOTFPartyMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFPartyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFPartyMember)
    MergeFrom(*source);
  }
}

void CSOTFPartyMember::MergeFrom(const CSOTFPartyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFPartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      completed_missions_ = from.completed_missions_;
    }
    if (cached_has_bits & 0x00000002u) {
      badge_level_ = from.badge_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      owns_ticket_ = from.owns_ticket_;
    }
    if (cached_has_bits & 0x00000008u) {
      squad_surplus_ = from.squad_surplus_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_banned_ = from.is_banned_;
    }
    if (cached_has_bits & 0x00000020u) {
      competitive_access_ = from.competitive_access_;
    }
    if (cached_has_bits & 0x00000040u) {
      ladder_rank_ = from.ladder_rank_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_low_priority_ = from.is_low_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      experience_ = from.experience_;
    }
    if (cached_has_bits & 0x00000200u) {
      skillrating_ = from.skillrating_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFPartyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFPartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFPartyMember::CopyFrom(const CSOTFPartyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFPartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFPartyMember::IsInitialized() const {
  return true;
}

void CSOTFPartyMember::Swap(CSOTFPartyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOTFPartyMember::InternalSwap(CSOTFPartyMember* other) {
  using std::swap;
  swap(completed_missions_, other->completed_missions_);
  swap(badge_level_, other->badge_level_);
  swap(owns_ticket_, other->owns_ticket_);
  swap(squad_surplus_, other->squad_surplus_);
  swap(is_banned_, other->is_banned_);
  swap(competitive_access_, other->competitive_access_);
  swap(ladder_rank_, other->ladder_rank_);
  swap(is_low_priority_, other->is_low_priority_);
  swap(experience_, other->experience_);
  swap(skillrating_, other->skillrating_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOTFPartyMember::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgMatchSearchCriteria::InitAsDefaultInstance() {
  ::_CMsgMatchSearchCriteria_default_instance_._instance.get_mutable()->casual_criteria_ = const_cast< ::CMsgCasualMatchmakingSearchCriteria*>(
      ::CMsgCasualMatchmakingSearchCriteria::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMatchSearchCriteria::kMatchmakingModeFieldNumber;
const int CMsgMatchSearchCriteria::kLateJoinOkFieldNumber;
const int CMsgMatchSearchCriteria::kCustomPingToleranceFieldNumber;
const int CMsgMatchSearchCriteria::kMvmMannupTourFieldNumber;
const int CMsgMatchSearchCriteria::kMvmMissionsFieldNumber;
const int CMsgMatchSearchCriteria::kPlayForBraggingRightsFieldNumber;
const int CMsgMatchSearchCriteria::kQuickplayGameTypeFieldNumber;
const int CMsgMatchSearchCriteria::kLadderGameTypeFieldNumber;
const int CMsgMatchSearchCriteria::kCasualCriteriaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMatchSearchCriteria::CMsgMatchSearchCriteria()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMatchSearchCriteria();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgMatchSearchCriteria)
}
CMsgMatchSearchCriteria::CMsgMatchSearchCriteria(const CMsgMatchSearchCriteria& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mvm_missions_(from.mvm_missions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mvm_mannup_tour_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mvm_mannup_tour()) {
    mvm_mannup_tour_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mvm_mannup_tour_);
  }
  if (from.has_casual_criteria()) {
    casual_criteria_ = new ::CMsgCasualMatchmakingSearchCriteria(*from.casual_criteria_);
  } else {
    casual_criteria_ = NULL;
  }
  ::memcpy(&late_join_ok_, &from.late_join_ok_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_ping_tolerance_) -
    reinterpret_cast<char*>(&late_join_ok_)) + sizeof(custom_ping_tolerance_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchSearchCriteria)
}

void CMsgMatchSearchCriteria::SharedCtor() {
  _cached_size_ = 0;
  mvm_mannup_tour_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&casual_criteria_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_ping_tolerance_) -
      reinterpret_cast<char*>(&casual_criteria_)) + sizeof(custom_ping_tolerance_));
}

CMsgMatchSearchCriteria::~CMsgMatchSearchCriteria() {
  // @@protoc_insertion_point(destructor:CMsgMatchSearchCriteria)
  SharedDtor();
}

void CMsgMatchSearchCriteria::SharedDtor() {
  mvm_mannup_tour_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete casual_criteria_;
}

void CMsgMatchSearchCriteria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMatchSearchCriteria::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMatchSearchCriteria& CMsgMatchSearchCriteria::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMatchSearchCriteria();
  return *internal_default_instance();
}

CMsgMatchSearchCriteria* CMsgMatchSearchCriteria::New(::google::protobuf::Arena* arena) const {
  CMsgMatchSearchCriteria* n = new CMsgMatchSearchCriteria;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMatchSearchCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchSearchCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mvm_missions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!mvm_mannup_tour_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mvm_mannup_tour_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(casual_criteria_ != NULL);
      casual_criteria_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&late_join_ok_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_ping_tolerance_) -
        reinterpret_cast<char*>(&late_join_ok_)) + sizeof(custom_ping_tolerance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMatchSearchCriteria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgMatchSearchCriteria)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool late_join_ok = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_late_join_ok();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &late_join_ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool play_for_bragging_rights = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_play_for_bragging_rights();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &play_for_bragging_rights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TF_MatchmakingMode matchmaking_mode = 7 [default = TF_Matchmaking_INVALID];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TF_MatchmakingMode_IsValid(value)) {
            set_matchmaking_mode(static_cast< ::TF_MatchmakingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quickplay_game_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_quickplay_game_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quickplay_game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mvm_missions = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mvm_missions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mvm_missions(this->mvm_missions_size() - 1).data(),
            static_cast<int>(this->mvm_missions(this->mvm_missions_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgMatchSearchCriteria.mvm_missions");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mvm_mannup_tour = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mvm_mannup_tour()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mvm_mannup_tour().data(), static_cast<int>(this->mvm_mannup_tour().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgMatchSearchCriteria.mvm_mannup_tour");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ladder_game_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_ladder_game_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ladder_game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgCasualMatchmakingSearchCriteria casual_criteria = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_casual_criteria()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_ping_tolerance = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_custom_ping_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_ping_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgMatchSearchCriteria)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgMatchSearchCriteria)
  return false;
#undef DO_
}

void CMsgMatchSearchCriteria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgMatchSearchCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool late_join_ok = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->late_join_ok(), output);
  }

  // optional bool play_for_bragging_rights = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->play_for_bragging_rights(), output);
  }

  // optional .TF_MatchmakingMode matchmaking_mode = 7 [default = TF_Matchmaking_INVALID];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->matchmaking_mode(), output);
  }

  // optional uint32 quickplay_game_type = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->quickplay_game_type(), output);
  }

  // repeated string mvm_missions = 9;
  for (int i = 0, n = this->mvm_missions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mvm_missions(i).data(), static_cast<int>(this->mvm_missions(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgMatchSearchCriteria.mvm_missions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->mvm_missions(i), output);
  }

  // optional string mvm_mannup_tour = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mvm_mannup_tour().data(), static_cast<int>(this->mvm_mannup_tour().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgMatchSearchCriteria.mvm_mannup_tour");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->mvm_mannup_tour(), output);
  }

  // optional uint32 ladder_game_type = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ladder_game_type(), output);
  }

  // optional .CMsgCasualMatchmakingSearchCriteria casual_criteria = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->casual_criteria_, output);
  }

  // optional uint32 custom_ping_tolerance = 13 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->custom_ping_tolerance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgMatchSearchCriteria)
}

::google::protobuf::uint8* CMsgMatchSearchCriteria::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchSearchCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool late_join_ok = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->late_join_ok(), target);
  }

  // optional bool play_for_bragging_rights = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->play_for_bragging_rights(), target);
  }

  // optional .TF_MatchmakingMode matchmaking_mode = 7 [default = TF_Matchmaking_INVALID];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->matchmaking_mode(), target);
  }

  // optional uint32 quickplay_game_type = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->quickplay_game_type(), target);
  }

  // repeated string mvm_missions = 9;
  for (int i = 0, n = this->mvm_missions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mvm_missions(i).data(), static_cast<int>(this->mvm_missions(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgMatchSearchCriteria.mvm_missions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->mvm_missions(i), target);
  }

  // optional string mvm_mannup_tour = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mvm_mannup_tour().data(), static_cast<int>(this->mvm_mannup_tour().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgMatchSearchCriteria.mvm_mannup_tour");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mvm_mannup_tour(), target);
  }

  // optional uint32 ladder_game_type = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ladder_game_type(), target);
  }

  // optional .CMsgCasualMatchmakingSearchCriteria casual_criteria = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->casual_criteria_, deterministic, target);
  }

  // optional uint32 custom_ping_tolerance = 13 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->custom_ping_tolerance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchSearchCriteria)
  return target;
}

size_t CMsgMatchSearchCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchSearchCriteria)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string mvm_missions = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mvm_missions_size());
  for (int i = 0, n = this->mvm_missions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mvm_missions(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string mvm_mannup_tour = 10;
    if (has_mvm_mannup_tour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mvm_mannup_tour());
    }

    // optional .CMsgCasualMatchmakingSearchCriteria casual_criteria = 12;
    if (has_casual_criteria()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->casual_criteria_);
    }

    // optional bool late_join_ok = 5;
    if (has_late_join_ok()) {
      total_size += 1 + 1;
    }

    // optional bool play_for_bragging_rights = 6;
    if (has_play_for_bragging_rights()) {
      total_size += 1 + 1;
    }

    // optional .TF_MatchmakingMode matchmaking_mode = 7 [default = TF_Matchmaking_INVALID];
    if (has_matchmaking_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->matchmaking_mode());
    }

    // optional uint32 quickplay_game_type = 8;
    if (has_quickplay_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quickplay_game_type());
    }

    // optional uint32 ladder_game_type = 11;
    if (has_ladder_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ladder_game_type());
    }

    // optional uint32 custom_ping_tolerance = 13 [default = 0];
    if (has_custom_ping_tolerance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_ping_tolerance());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMatchSearchCriteria::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchSearchCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchSearchCriteria* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMatchSearchCriteria>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchSearchCriteria)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchSearchCriteria)
    MergeFrom(*source);
  }
}

void CMsgMatchSearchCriteria::MergeFrom(const CMsgMatchSearchCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchSearchCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mvm_missions_.MergeFrom(from.mvm_missions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mvm_mannup_tour();
      mvm_mannup_tour_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mvm_mannup_tour_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_casual_criteria()->::CMsgCasualMatchmakingSearchCriteria::MergeFrom(from.casual_criteria());
    }
    if (cached_has_bits & 0x00000004u) {
      late_join_ok_ = from.late_join_ok_;
    }
    if (cached_has_bits & 0x00000008u) {
      play_for_bragging_rights_ = from.play_for_bragging_rights_;
    }
    if (cached_has_bits & 0x00000010u) {
      matchmaking_mode_ = from.matchmaking_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      quickplay_game_type_ = from.quickplay_game_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      ladder_game_type_ = from.ladder_game_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      custom_ping_tolerance_ = from.custom_ping_tolerance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMatchSearchCriteria::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchSearchCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchSearchCriteria::CopyFrom(const CMsgMatchSearchCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchSearchCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchSearchCriteria::IsInitialized() const {
  return true;
}

void CMsgMatchSearchCriteria::Swap(CMsgMatchSearchCriteria* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMatchSearchCriteria::InternalSwap(CMsgMatchSearchCriteria* other) {
  using std::swap;
  mvm_missions_.InternalSwap(&other->mvm_missions_);
  mvm_mannup_tour_.Swap(&other->mvm_mannup_tour_);
  swap(casual_criteria_, other->casual_criteria_);
  swap(late_join_ok_, other->late_join_ok_);
  swap(play_for_bragging_rights_, other->play_for_bragging_rights_);
  swap(matchmaking_mode_, other->matchmaking_mode_);
  swap(quickplay_game_type_, other->quickplay_game_type_);
  swap(ladder_game_type_, other->ladder_game_type_);
  swap(custom_ping_tolerance_, other->custom_ping_tolerance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMatchSearchCriteria::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgCasualMatchmakingSearchCriteria::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCasualMatchmakingSearchCriteria::kSelectedMapsBitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCasualMatchmakingSearchCriteria::CMsgCasualMatchmakingSearchCriteria()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgCasualMatchmakingSearchCriteria();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgCasualMatchmakingSearchCriteria)
}
CMsgCasualMatchmakingSearchCriteria::CMsgCasualMatchmakingSearchCriteria(const CMsgCasualMatchmakingSearchCriteria& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      selected_maps_bits_(from.selected_maps_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgCasualMatchmakingSearchCriteria)
}

void CMsgCasualMatchmakingSearchCriteria::SharedCtor() {
  _cached_size_ = 0;
}

CMsgCasualMatchmakingSearchCriteria::~CMsgCasualMatchmakingSearchCriteria() {
  // @@protoc_insertion_point(destructor:CMsgCasualMatchmakingSearchCriteria)
  SharedDtor();
}

void CMsgCasualMatchmakingSearchCriteria::SharedDtor() {
}

void CMsgCasualMatchmakingSearchCriteria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCasualMatchmakingSearchCriteria::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgCasualMatchmakingSearchCriteria& CMsgCasualMatchmakingSearchCriteria::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgCasualMatchmakingSearchCriteria();
  return *internal_default_instance();
}

CMsgCasualMatchmakingSearchCriteria* CMsgCasualMatchmakingSearchCriteria::New(::google::protobuf::Arena* arena) const {
  CMsgCasualMatchmakingSearchCriteria* n = new CMsgCasualMatchmakingSearchCriteria;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgCasualMatchmakingSearchCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCasualMatchmakingSearchCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selected_maps_bits_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgCasualMatchmakingSearchCriteria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgCasualMatchmakingSearchCriteria)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 selected_maps_bits = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29u, input, this->mutable_selected_maps_bits())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_selected_maps_bits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgCasualMatchmakingSearchCriteria)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgCasualMatchmakingSearchCriteria)
  return false;
#undef DO_
}

void CMsgCasualMatchmakingSearchCriteria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgCasualMatchmakingSearchCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 selected_maps_bits = 3;
  for (int i = 0, n = this->selected_maps_bits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->selected_maps_bits(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgCasualMatchmakingSearchCriteria)
}

::google::protobuf::uint8* CMsgCasualMatchmakingSearchCriteria::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCasualMatchmakingSearchCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 selected_maps_bits = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(3, this->selected_maps_bits_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCasualMatchmakingSearchCriteria)
  return target;
}

size_t CMsgCasualMatchmakingSearchCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCasualMatchmakingSearchCriteria)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated fixed32 selected_maps_bits = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->selected_maps_bits_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->selected_maps_bits_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCasualMatchmakingSearchCriteria::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCasualMatchmakingSearchCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCasualMatchmakingSearchCriteria* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgCasualMatchmakingSearchCriteria>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCasualMatchmakingSearchCriteria)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCasualMatchmakingSearchCriteria)
    MergeFrom(*source);
  }
}

void CMsgCasualMatchmakingSearchCriteria::MergeFrom(const CMsgCasualMatchmakingSearchCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCasualMatchmakingSearchCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selected_maps_bits_.MergeFrom(from.selected_maps_bits_);
}

void CMsgCasualMatchmakingSearchCriteria::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCasualMatchmakingSearchCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCasualMatchmakingSearchCriteria::CopyFrom(const CMsgCasualMatchmakingSearchCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCasualMatchmakingSearchCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCasualMatchmakingSearchCriteria::IsInitialized() const {
  return true;
}

void CMsgCasualMatchmakingSearchCriteria::Swap(CMsgCasualMatchmakingSearchCriteria* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCasualMatchmakingSearchCriteria::InternalSwap(CMsgCasualMatchmakingSearchCriteria* other) {
  using std::swap;
  selected_maps_bits_.InternalSwap(&other->selected_maps_bits_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgCasualMatchmakingSearchCriteria::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgCreateOrUpdateParty::InitAsDefaultInstance() {
  ::_CMsgCreateOrUpdateParty_default_instance_._instance.get_mutable()->search_criteria_ = const_cast< ::CMsgMatchSearchCriteria*>(
      ::CMsgMatchSearchCriteria::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCreateOrUpdateParty::kSearchCriteriaFieldNumber;
const int CMsgCreateOrUpdateParty::kSteamLobbyIdFieldNumber;
const int CMsgCreateOrUpdateParty::kSquadSurplusFieldNumber;
const int CMsgCreateOrUpdateParty::kWizardStepFieldNumber;
const int CMsgCreateOrUpdateParty::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCreateOrUpdateParty::CMsgCreateOrUpdateParty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgCreateOrUpdateParty();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgCreateOrUpdateParty)
}
CMsgCreateOrUpdateParty::CMsgCreateOrUpdateParty(const CMsgCreateOrUpdateParty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_search_criteria()) {
    search_criteria_ = new ::CMsgMatchSearchCriteria(*from.search_criteria_);
  } else {
    search_criteria_ = NULL;
  }
  ::memcpy(&steam_lobby_id_, &from.steam_lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&steam_lobby_id_)) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgCreateOrUpdateParty)
}

void CMsgCreateOrUpdateParty::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&search_criteria_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wizard_step_) -
      reinterpret_cast<char*>(&search_criteria_)) + sizeof(wizard_step_));
  client_version_ = 1225u;
}

CMsgCreateOrUpdateParty::~CMsgCreateOrUpdateParty() {
  // @@protoc_insertion_point(destructor:CMsgCreateOrUpdateParty)
  SharedDtor();
}

void CMsgCreateOrUpdateParty::SharedDtor() {
  if (this != internal_default_instance()) delete search_criteria_;
}

void CMsgCreateOrUpdateParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCreateOrUpdateParty::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgCreateOrUpdateParty& CMsgCreateOrUpdateParty::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgCreateOrUpdateParty();
  return *internal_default_instance();
}

CMsgCreateOrUpdateParty* CMsgCreateOrUpdateParty::New(::google::protobuf::Arena* arena) const {
  CMsgCreateOrUpdateParty* n = new CMsgCreateOrUpdateParty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgCreateOrUpdateParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCreateOrUpdateParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(search_criteria_ != NULL);
    search_criteria_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&steam_lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wizard_step_) -
        reinterpret_cast<char*>(&steam_lobby_id_)) + sizeof(wizard_step_));
    client_version_ = 1225u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgCreateOrUpdateParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgCreateOrUpdateParty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgMatchSearchCriteria search_criteria = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_search_criteria()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_lobby_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_steam_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool squad_surplus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_squad_surplus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &squad_surplus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TF_Matchmaking_WizardStep wizard_step = 5 [default = TF_Matchmaking_WizardStep_INVALID];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TF_Matchmaking_WizardStep_IsValid(value)) {
            set_wizard_step(static_cast< ::TF_Matchmaking_WizardStep >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 6 [default = 1225];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgCreateOrUpdateParty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgCreateOrUpdateParty)
  return false;
#undef DO_
}

void CMsgCreateOrUpdateParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgCreateOrUpdateParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgMatchSearchCriteria search_criteria = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->search_criteria_, output);
  }

  // optional fixed64 steam_lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_lobby_id(), output);
  }

  // optional bool squad_surplus = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->squad_surplus(), output);
  }

  // optional .TF_Matchmaking_WizardStep wizard_step = 5 [default = TF_Matchmaking_WizardStep_INVALID];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->wizard_step(), output);
  }

  // optional uint32 client_version = 6 [default = 1225];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->client_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgCreateOrUpdateParty)
}

::google::protobuf::uint8* CMsgCreateOrUpdateParty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCreateOrUpdateParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgMatchSearchCriteria search_criteria = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->search_criteria_, deterministic, target);
  }

  // optional fixed64 steam_lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_lobby_id(), target);
  }

  // optional bool squad_surplus = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->squad_surplus(), target);
  }

  // optional .TF_Matchmaking_WizardStep wizard_step = 5 [default = TF_Matchmaking_WizardStep_INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->wizard_step(), target);
  }

  // optional uint32 client_version = 6 [default = 1225];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->client_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCreateOrUpdateParty)
  return target;
}

size_t CMsgCreateOrUpdateParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCreateOrUpdateParty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .CMsgMatchSearchCriteria search_criteria = 1;
    if (has_search_criteria()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->search_criteria_);
    }

    // optional fixed64 steam_lobby_id = 3;
    if (has_steam_lobby_id()) {
      total_size += 1 + 8;
    }

    // optional bool squad_surplus = 4;
    if (has_squad_surplus()) {
      total_size += 1 + 1;
    }

    // optional .TF_Matchmaking_WizardStep wizard_step = 5 [default = TF_Matchmaking_WizardStep_INVALID];
    if (has_wizard_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wizard_step());
    }

    // optional uint32 client_version = 6 [default = 1225];
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCreateOrUpdateParty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCreateOrUpdateParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCreateOrUpdateParty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgCreateOrUpdateParty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCreateOrUpdateParty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCreateOrUpdateParty)
    MergeFrom(*source);
  }
}

void CMsgCreateOrUpdateParty::MergeFrom(const CMsgCreateOrUpdateParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCreateOrUpdateParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_search_criteria()->::CMsgMatchSearchCriteria::MergeFrom(from.search_criteria());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_lobby_id_ = from.steam_lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      squad_surplus_ = from.squad_surplus_;
    }
    if (cached_has_bits & 0x00000008u) {
      wizard_step_ = from.wizard_step_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCreateOrUpdateParty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCreateOrUpdateParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCreateOrUpdateParty::CopyFrom(const CMsgCreateOrUpdateParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCreateOrUpdateParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCreateOrUpdateParty::IsInitialized() const {
  return true;
}

void CMsgCreateOrUpdateParty::Swap(CMsgCreateOrUpdateParty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCreateOrUpdateParty::InternalSwap(CMsgCreateOrUpdateParty* other) {
  using std::swap;
  swap(search_criteria_, other->search_criteria_);
  swap(steam_lobby_id_, other->steam_lobby_id_);
  swap(squad_surplus_, other->squad_surplus_);
  swap(wizard_step_, other->wizard_step_);
  swap(client_version_, other->client_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgCreateOrUpdateParty::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgCreateOrUpdatePartyReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCreateOrUpdatePartyReply::kResultFieldNumber;
const int CMsgCreateOrUpdatePartyReply::kMessageFieldNumber;
const int CMsgCreateOrUpdatePartyReply::kWizardStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCreateOrUpdatePartyReply::CMsgCreateOrUpdatePartyReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgCreateOrUpdatePartyReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgCreateOrUpdatePartyReply)
}
CMsgCreateOrUpdatePartyReply::CMsgCreateOrUpdatePartyReply(const CMsgCreateOrUpdatePartyReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&wizard_step_) -
    reinterpret_cast<char*>(&result_)) + sizeof(wizard_step_));
  // @@protoc_insertion_point(copy_constructor:CMsgCreateOrUpdatePartyReply)
}

void CMsgCreateOrUpdatePartyReply::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wizard_step_) -
      reinterpret_cast<char*>(&result_)) + sizeof(wizard_step_));
}

CMsgCreateOrUpdatePartyReply::~CMsgCreateOrUpdatePartyReply() {
  // @@protoc_insertion_point(destructor:CMsgCreateOrUpdatePartyReply)
  SharedDtor();
}

void CMsgCreateOrUpdatePartyReply::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgCreateOrUpdatePartyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCreateOrUpdatePartyReply::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgCreateOrUpdatePartyReply& CMsgCreateOrUpdatePartyReply::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgCreateOrUpdatePartyReply();
  return *internal_default_instance();
}

CMsgCreateOrUpdatePartyReply* CMsgCreateOrUpdatePartyReply::New(::google::protobuf::Arena* arena) const {
  CMsgCreateOrUpdatePartyReply* n = new CMsgCreateOrUpdatePartyReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgCreateOrUpdatePartyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCreateOrUpdatePartyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wizard_step_) -
        reinterpret_cast<char*>(&result_)) + sizeof(wizard_step_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgCreateOrUpdatePartyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgCreateOrUpdatePartyReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgCreateOrUpdatePartyReply.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TF_Matchmaking_WizardStep wizard_step = 3 [default = TF_Matchmaking_WizardStep_INVALID];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TF_Matchmaking_WizardStep_IsValid(value)) {
            set_wizard_step(static_cast< ::TF_Matchmaking_WizardStep >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgCreateOrUpdatePartyReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgCreateOrUpdatePartyReply)
  return false;
#undef DO_
}

void CMsgCreateOrUpdatePartyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgCreateOrUpdatePartyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgCreateOrUpdatePartyReply.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional .TF_Matchmaking_WizardStep wizard_step = 3 [default = TF_Matchmaking_WizardStep_INVALID];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->wizard_step(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgCreateOrUpdatePartyReply)
}

::google::protobuf::uint8* CMsgCreateOrUpdatePartyReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCreateOrUpdatePartyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgCreateOrUpdatePartyReply.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional .TF_Matchmaking_WizardStep wizard_step = 3 [default = TF_Matchmaking_WizardStep_INVALID];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->wizard_step(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCreateOrUpdatePartyReply)
  return target;
}

size_t CMsgCreateOrUpdatePartyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCreateOrUpdatePartyReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .TF_Matchmaking_WizardStep wizard_step = 3 [default = TF_Matchmaking_WizardStep_INVALID];
    if (has_wizard_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wizard_step());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCreateOrUpdatePartyReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCreateOrUpdatePartyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCreateOrUpdatePartyReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgCreateOrUpdatePartyReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCreateOrUpdatePartyReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCreateOrUpdatePartyReply)
    MergeFrom(*source);
  }
}

void CMsgCreateOrUpdatePartyReply::MergeFrom(const CMsgCreateOrUpdatePartyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCreateOrUpdatePartyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      wizard_step_ = from.wizard_step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCreateOrUpdatePartyReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCreateOrUpdatePartyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCreateOrUpdatePartyReply::CopyFrom(const CMsgCreateOrUpdatePartyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCreateOrUpdatePartyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCreateOrUpdatePartyReply::IsInitialized() const {
  return true;
}

void CMsgCreateOrUpdatePartyReply::Swap(CMsgCreateOrUpdatePartyReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCreateOrUpdatePartyReply::InternalSwap(CMsgCreateOrUpdatePartyReply* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(result_, other->result_);
  swap(wizard_step_, other->wizard_step_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgCreateOrUpdatePartyReply::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSOTFParty::InitAsDefaultInstance() {
  ::_CSOTFParty_default_instance_._instance.get_mutable()->search_casual_ = const_cast< ::CMsgCasualMatchmakingSearchCriteria*>(
      ::CMsgCasualMatchmakingSearchCriteria::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOTFParty::kPartyIdFieldNumber;
const int CSOTFParty::kLeaderIdFieldNumber;
const int CSOTFParty::kMemberIdsFieldNumber;
const int CSOTFParty::kMembersFieldNumber;
const int CSOTFParty::kPendingInvitesFieldNumber;
const int CSOTFParty::kAssociatedLobbyIdFieldNumber;
const int CSOTFParty::kStateFieldNumber;
const int CSOTFParty::kWizardStepFieldNumber;
const int CSOTFParty::kStartedMatchmakingTimeFieldNumber;
const int CSOTFParty::kSearchingPlayersByGroupFieldNumber;
const int CSOTFParty::kSteamLobbyIdFieldNumber;
const int CSOTFParty::kMatchmakingModeFieldNumber;
const int CSOTFParty::kSearchLateJoinOkFieldNumber;
const int CSOTFParty::kSearchMvmMannupTourFieldNumber;
const int CSOTFParty::kSearchMvmMissionsFieldNumber;
const int CSOTFParty::kSearchPlayForBraggingRightsFieldNumber;
const int CSOTFParty::kSearchQuickplayGameTypeFieldNumber;
const int CSOTFParty::kSearchLadderGameTypeFieldNumber;
const int CSOTFParty::kSearchCasualFieldNumber;
const int CSOTFParty::kCustomPingToleranceFieldNumber;
const int CSOTFParty::kMatchmakingBanTimeFieldNumber;
const int CSOTFParty::kMatchmakingBanAccountIdFieldNumber;
const int CSOTFParty::kMatchmakingLowPriorityTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOTFParty::CSOTFParty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFParty();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSOTFParty)
}
CSOTFParty::CSOTFParty(const CSOTFParty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      member_ids_(from.member_ids_),
      pending_invites_(from.pending_invites_),
      searching_players_by_group_(from.searching_players_by_group_),
      members_(from.members_),
      search_mvm_missions_(from.search_mvm_missions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_mvm_mannup_tour_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_mvm_mannup_tour()) {
    search_mvm_mannup_tour_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_mvm_mannup_tour_);
  }
  if (from.has_search_casual()) {
    search_casual_ = new ::CMsgCasualMatchmakingSearchCriteria(*from.search_casual_);
  } else {
    search_casual_ = NULL;
  }
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&associated_lobby_id_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(associated_lobby_id_));
  // @@protoc_insertion_point(copy_constructor:CSOTFParty)
}

void CSOTFParty::SharedCtor() {
  _cached_size_ = 0;
  search_mvm_mannup_tour_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&search_casual_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&associated_lobby_id_) -
      reinterpret_cast<char*>(&search_casual_)) + sizeof(associated_lobby_id_));
}

CSOTFParty::~CSOTFParty() {
  // @@protoc_insertion_point(destructor:CSOTFParty)
  SharedDtor();
}

void CSOTFParty::SharedDtor() {
  search_mvm_mannup_tour_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete search_casual_;
}

void CSOTFParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFParty::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOTFParty& CSOTFParty::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFParty();
  return *internal_default_instance();
}

CSOTFParty* CSOTFParty::New(::google::protobuf::Arena* arena) const {
  CSOTFParty* n = new CSOTFParty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOTFParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_ids_.Clear();
  pending_invites_.Clear();
  searching_players_by_group_.Clear();
  members_.Clear();
  search_mvm_missions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!search_mvm_mannup_tour_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*search_mvm_mannup_tour_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(search_casual_ != NULL);
      search_casual_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&matchmaking_ban_account_id_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(matchmaking_ban_account_id_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&matchmaking_low_priority_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&matchmaking_mode_) -
        reinterpret_cast<char*>(&matchmaking_low_priority_time_)) + sizeof(matchmaking_mode_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&search_ladder_game_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&associated_lobby_id_) -
        reinterpret_cast<char*>(&search_ladder_game_type_)) + sizeof(associated_lobby_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOTFParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSOTFParty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1 [(.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 leader_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_leader_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leader_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 member_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25u, input, this->mutable_member_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_member_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 pending_invites = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 41u, input, this->mutable_pending_invites())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_pending_invites())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CSOTFParty.State state = 6 [default = UI];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSOTFParty_State_IsValid(value)) {
            set_state(static_cast< ::CSOTFParty_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 started_matchmaking_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_started_matchmaking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &started_matchmaking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 searching_players_by_group = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80u, input, this->mutable_searching_players_by_group())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_searching_players_by_group())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CSOTFPartyMember members = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchmaking_ban_time = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_matchmaking_ban_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_ban_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchmaking_ban_account_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_matchmaking_ban_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_ban_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchmaking_low_priority_time = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_matchmaking_low_priority_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_low_priority_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool search_late_join_ok = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_search_late_join_ok();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &search_late_join_ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool search_play_for_bragging_rights = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_search_play_for_bragging_rights();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &search_play_for_bragging_rights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_lobby_id = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {
          set_has_steam_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 search_quickplay_game_type = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_search_quickplay_game_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_quickplay_game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TF_Matchmaking_WizardStep wizard_step = 29 [default = TF_Matchmaking_WizardStep_INVALID];
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TF_Matchmaking_WizardStep_IsValid(value)) {
            set_wizard_step(static_cast< ::TF_Matchmaking_WizardStep >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                29, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TF_MatchmakingMode matchmaking_mode = 30 [default = TF_Matchmaking_INVALID];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TF_MatchmakingMode_IsValid(value)) {
            set_matchmaking_mode(static_cast< ::TF_MatchmakingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                30, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string search_mvm_missions = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_search_mvm_missions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_mvm_missions(this->search_mvm_missions_size() - 1).data(),
            static_cast<int>(this->search_mvm_missions(this->search_mvm_missions_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSOTFParty.search_mvm_missions");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string search_mvm_mannup_tour = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_mvm_mannup_tour()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_mvm_mannup_tour().data(), static_cast<int>(this->search_mvm_mannup_tour().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSOTFParty.search_mvm_mannup_tour");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 search_ladder_game_type = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_search_ladder_game_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_ladder_game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgCasualMatchmakingSearchCriteria search_casual = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_search_casual()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 associated_lobby_id = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_associated_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &associated_lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_ping_tolerance = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_custom_ping_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_ping_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSOTFParty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSOTFParty)
  return false;
#undef DO_
}

void CSOTFParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSOTFParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  // optional fixed64 leader_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->leader_id(), output);
  }

  // repeated fixed64 member_ids = 3;
  for (int i = 0, n = this->member_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->member_ids(i), output);
  }

  // repeated fixed64 pending_invites = 5;
  for (int i = 0, n = this->pending_invites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      5, this->pending_invites(i), output);
  }

  // optional .CSOTFParty.State state = 6 [default = UI];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // optional uint32 started_matchmaking_time = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->started_matchmaking_time(), output);
  }

  // repeated uint32 searching_players_by_group = 10;
  for (int i = 0, n = this->searching_players_by_group_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->searching_players_by_group(i), output);
  }

  // repeated .CSOTFPartyMember members = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->members(static_cast<int>(i)), output);
  }

  // optional uint32 matchmaking_ban_time = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->matchmaking_ban_time(), output);
  }

  // optional uint32 matchmaking_ban_account_id = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->matchmaking_ban_account_id(), output);
  }

  // optional uint32 matchmaking_low_priority_time = 20;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->matchmaking_low_priority_time(), output);
  }

  // optional bool search_late_join_ok = 23;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->search_late_join_ok(), output);
  }

  // optional bool search_play_for_bragging_rights = 26;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->search_play_for_bragging_rights(), output);
  }

  // optional fixed64 steam_lobby_id = 27;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(27, this->steam_lobby_id(), output);
  }

  // optional uint32 search_quickplay_game_type = 28;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->search_quickplay_game_type(), output);
  }

  // optional .TF_Matchmaking_WizardStep wizard_step = 29 [default = TF_Matchmaking_WizardStep_INVALID];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->wizard_step(), output);
  }

  // optional .TF_MatchmakingMode matchmaking_mode = 30 [default = TF_Matchmaking_INVALID];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->matchmaking_mode(), output);
  }

  // repeated string search_mvm_missions = 31;
  for (int i = 0, n = this->search_mvm_missions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_mvm_missions(i).data(), static_cast<int>(this->search_mvm_missions(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFParty.search_mvm_missions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->search_mvm_missions(i), output);
  }

  // optional string search_mvm_mannup_tour = 32;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_mvm_mannup_tour().data(), static_cast<int>(this->search_mvm_mannup_tour().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFParty.search_mvm_mannup_tour");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->search_mvm_mannup_tour(), output);
  }

  // optional uint32 search_ladder_game_type = 33;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->search_ladder_game_type(), output);
  }

  // optional .CMsgCasualMatchmakingSearchCriteria search_casual = 34;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->search_casual_, output);
  }

  // optional uint64 associated_lobby_id = 35;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(35, this->associated_lobby_id(), output);
  }

  // optional uint32 custom_ping_tolerance = 36;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->custom_ping_tolerance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSOTFParty)
}

::google::protobuf::uint8* CSOTFParty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  // optional fixed64 leader_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->leader_id(), target);
  }

  // repeated fixed64 member_ids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(3, this->member_ids_, target);

  // repeated fixed64 pending_invites = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(5, this->pending_invites_, target);

  // optional .CSOTFParty.State state = 6 [default = UI];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // optional uint32 started_matchmaking_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->started_matchmaking_time(), target);
  }

  // repeated uint32 searching_players_by_group = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(10, this->searching_players_by_group_, target);

  // repeated .CSOTFPartyMember members = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->members(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 matchmaking_ban_time = 18;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->matchmaking_ban_time(), target);
  }

  // optional uint32 matchmaking_ban_account_id = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->matchmaking_ban_account_id(), target);
  }

  // optional uint32 matchmaking_low_priority_time = 20;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->matchmaking_low_priority_time(), target);
  }

  // optional bool search_late_join_ok = 23;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->search_late_join_ok(), target);
  }

  // optional bool search_play_for_bragging_rights = 26;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->search_play_for_bragging_rights(), target);
  }

  // optional fixed64 steam_lobby_id = 27;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(27, this->steam_lobby_id(), target);
  }

  // optional uint32 search_quickplay_game_type = 28;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->search_quickplay_game_type(), target);
  }

  // optional .TF_Matchmaking_WizardStep wizard_step = 29 [default = TF_Matchmaking_WizardStep_INVALID];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->wizard_step(), target);
  }

  // optional .TF_MatchmakingMode matchmaking_mode = 30 [default = TF_Matchmaking_INVALID];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->matchmaking_mode(), target);
  }

  // repeated string search_mvm_missions = 31;
  for (int i = 0, n = this->search_mvm_missions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_mvm_missions(i).data(), static_cast<int>(this->search_mvm_missions(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFParty.search_mvm_missions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(31, this->search_mvm_missions(i), target);
  }

  // optional string search_mvm_mannup_tour = 32;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_mvm_mannup_tour().data(), static_cast<int>(this->search_mvm_mannup_tour().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFParty.search_mvm_mannup_tour");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->search_mvm_mannup_tour(), target);
  }

  // optional uint32 search_ladder_game_type = 33;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->search_ladder_game_type(), target);
  }

  // optional .CMsgCasualMatchmakingSearchCriteria search_casual = 34;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, *this->search_casual_, deterministic, target);
  }

  // optional uint64 associated_lobby_id = 35;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(35, this->associated_lobby_id(), target);
  }

  // optional uint32 custom_ping_tolerance = 36;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->custom_ping_tolerance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFParty)
  return target;
}

size_t CSOTFParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFParty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated fixed64 member_ids = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->member_ids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->member_ids_size());
    total_size += data_size;
  }

  // repeated fixed64 pending_invites = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->pending_invites_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pending_invites_size());
    total_size += data_size;
  }

  // repeated uint32 searching_players_by_group = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->searching_players_by_group_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->searching_players_by_group_size());
    total_size += data_size;
  }

  // repeated .CSOTFPartyMember members = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  // repeated string search_mvm_missions = 31;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->search_mvm_missions_size());
  for (int i = 0, n = this->search_mvm_missions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->search_mvm_missions(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string search_mvm_mannup_tour = 32;
    if (has_search_mvm_mannup_tour()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_mvm_mannup_tour());
    }

    // optional .CMsgCasualMatchmakingSearchCriteria search_casual = 34;
    if (has_search_casual()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->search_casual_);
    }

    // optional uint64 party_id = 1 [(.key_field) = true];
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional fixed64 leader_id = 2;
    if (has_leader_id()) {
      total_size += 1 + 8;
    }

    // optional .CSOTFParty.State state = 6 [default = UI];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 started_matchmaking_time = 7;
    if (has_started_matchmaking_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->started_matchmaking_time());
    }

    // optional uint32 matchmaking_ban_time = 18;
    if (has_matchmaking_ban_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_ban_time());
    }

    // optional uint32 matchmaking_ban_account_id = 19;
    if (has_matchmaking_ban_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_ban_account_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 matchmaking_low_priority_time = 20;
    if (has_matchmaking_low_priority_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_low_priority_time());
    }

    // optional bool search_late_join_ok = 23;
    if (has_search_late_join_ok()) {
      total_size += 2 + 1;
    }

    // optional bool search_play_for_bragging_rights = 26;
    if (has_search_play_for_bragging_rights()) {
      total_size += 2 + 1;
    }

    // optional uint32 custom_ping_tolerance = 36;
    if (has_custom_ping_tolerance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_ping_tolerance());
    }

    // optional fixed64 steam_lobby_id = 27;
    if (has_steam_lobby_id()) {
      total_size += 2 + 8;
    }

    // optional uint32 search_quickplay_game_type = 28;
    if (has_search_quickplay_game_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_quickplay_game_type());
    }

    // optional .TF_Matchmaking_WizardStep wizard_step = 29 [default = TF_Matchmaking_WizardStep_INVALID];
    if (has_wizard_step()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wizard_step());
    }

    // optional .TF_MatchmakingMode matchmaking_mode = 30 [default = TF_Matchmaking_INVALID];
    if (has_matchmaking_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->matchmaking_mode());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional uint32 search_ladder_game_type = 33;
    if (has_search_ladder_game_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_ladder_game_type());
    }

    // optional uint64 associated_lobby_id = 35;
    if (has_associated_lobby_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->associated_lobby_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFParty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFParty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOTFParty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFParty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFParty)
    MergeFrom(*source);
  }
}

void CSOTFParty::MergeFrom(const CSOTFParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_ids_.MergeFrom(from.member_ids_);
  pending_invites_.MergeFrom(from.pending_invites_);
  searching_players_by_group_.MergeFrom(from.searching_players_by_group_);
  members_.MergeFrom(from.members_);
  search_mvm_missions_.MergeFrom(from.search_mvm_missions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_search_mvm_mannup_tour();
      search_mvm_mannup_tour_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_mvm_mannup_tour_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_search_casual()->::CMsgCasualMatchmakingSearchCriteria::MergeFrom(from.search_casual());
    }
    if (cached_has_bits & 0x00000004u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      leader_id_ = from.leader_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      started_matchmaking_time_ = from.started_matchmaking_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      matchmaking_ban_time_ = from.matchmaking_ban_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      matchmaking_ban_account_id_ = from.matchmaking_ban_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      matchmaking_low_priority_time_ = from.matchmaking_low_priority_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      search_late_join_ok_ = from.search_late_join_ok_;
    }
    if (cached_has_bits & 0x00000400u) {
      search_play_for_bragging_rights_ = from.search_play_for_bragging_rights_;
    }
    if (cached_has_bits & 0x00000800u) {
      custom_ping_tolerance_ = from.custom_ping_tolerance_;
    }
    if (cached_has_bits & 0x00001000u) {
      steam_lobby_id_ = from.steam_lobby_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      search_quickplay_game_type_ = from.search_quickplay_game_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      wizard_step_ = from.wizard_step_;
    }
    if (cached_has_bits & 0x00008000u) {
      matchmaking_mode_ = from.matchmaking_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      search_ladder_game_type_ = from.search_ladder_game_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      associated_lobby_id_ = from.associated_lobby_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFParty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFParty::CopyFrom(const CSOTFParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFParty::IsInitialized() const {
  return true;
}

void CSOTFParty::Swap(CSOTFParty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOTFParty::InternalSwap(CSOTFParty* other) {
  using std::swap;
  member_ids_.InternalSwap(&other->member_ids_);
  pending_invites_.InternalSwap(&other->pending_invites_);
  searching_players_by_group_.InternalSwap(&other->searching_players_by_group_);
  members_.InternalSwap(&other->members_);
  search_mvm_missions_.InternalSwap(&other->search_mvm_missions_);
  search_mvm_mannup_tour_.Swap(&other->search_mvm_mannup_tour_);
  swap(search_casual_, other->search_casual_);
  swap(party_id_, other->party_id_);
  swap(leader_id_, other->leader_id_);
  swap(state_, other->state_);
  swap(started_matchmaking_time_, other->started_matchmaking_time_);
  swap(matchmaking_ban_time_, other->matchmaking_ban_time_);
  swap(matchmaking_ban_account_id_, other->matchmaking_ban_account_id_);
  swap(matchmaking_low_priority_time_, other->matchmaking_low_priority_time_);
  swap(search_late_join_ok_, other->search_late_join_ok_);
  swap(search_play_for_bragging_rights_, other->search_play_for_bragging_rights_);
  swap(custom_ping_tolerance_, other->custom_ping_tolerance_);
  swap(steam_lobby_id_, other->steam_lobby_id_);
  swap(search_quickplay_game_type_, other->search_quickplay_game_type_);
  swap(wizard_step_, other->wizard_step_);
  swap(matchmaking_mode_, other->matchmaking_mode_);
  swap(search_ladder_game_type_, other->search_ladder_game_type_);
  swap(associated_lobby_id_, other->associated_lobby_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOTFParty::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSOTFPartyInvite_PartyMember::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOTFPartyInvite_PartyMember::kNameFieldNumber;
const int CSOTFPartyInvite_PartyMember::kSteamIdFieldNumber;
const int CSOTFPartyInvite_PartyMember::kAvatarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOTFPartyInvite_PartyMember::CSOTFPartyInvite_PartyMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFPartyInvite_PartyMember();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSOTFPartyInvite.PartyMember)
}
CSOTFPartyInvite_PartyMember::CSOTFPartyInvite_PartyMember(const CSOTFPartyInvite_PartyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatar_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(avatar_));
  // @@protoc_insertion_point(copy_constructor:CSOTFPartyInvite.PartyMember)
}

void CSOTFPartyInvite_PartyMember::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatar_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(avatar_));
}

CSOTFPartyInvite_PartyMember::~CSOTFPartyInvite_PartyMember() {
  // @@protoc_insertion_point(destructor:CSOTFPartyInvite.PartyMember)
  SharedDtor();
}

void CSOTFPartyInvite_PartyMember::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSOTFPartyInvite_PartyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFPartyInvite_PartyMember::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOTFPartyInvite_PartyMember& CSOTFPartyInvite_PartyMember::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFPartyInvite_PartyMember();
  return *internal_default_instance();
}

CSOTFPartyInvite_PartyMember* CSOTFPartyInvite_PartyMember::New(::google::protobuf::Arena* arena) const {
  CSOTFPartyInvite_PartyMember* n = new CSOTFPartyInvite_PartyMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOTFPartyInvite_PartyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFPartyInvite.PartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avatar_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(avatar_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOTFPartyInvite_PartyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSOTFPartyInvite.PartyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSOTFPartyInvite.PartyMember.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avatar = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_avatar();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSOTFPartyInvite.PartyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSOTFPartyInvite.PartyMember)
  return false;
#undef DO_
}

void CSOTFPartyInvite_PartyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSOTFPartyInvite.PartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFPartyInvite.PartyMember.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  // optional uint32 avatar = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->avatar(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSOTFPartyInvite.PartyMember)
}

::google::protobuf::uint8* CSOTFPartyInvite_PartyMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFPartyInvite.PartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFPartyInvite.PartyMember.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  // optional uint32 avatar = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->avatar(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFPartyInvite.PartyMember)
  return target;
}

size_t CSOTFPartyInvite_PartyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFPartyInvite.PartyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 avatar = 3;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFPartyInvite_PartyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFPartyInvite.PartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFPartyInvite_PartyMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOTFPartyInvite_PartyMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFPartyInvite.PartyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFPartyInvite.PartyMember)
    MergeFrom(*source);
  }
}

void CSOTFPartyInvite_PartyMember::MergeFrom(const CSOTFPartyInvite_PartyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFPartyInvite.PartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      avatar_ = from.avatar_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFPartyInvite_PartyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFPartyInvite.PartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFPartyInvite_PartyMember::CopyFrom(const CSOTFPartyInvite_PartyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFPartyInvite.PartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFPartyInvite_PartyMember::IsInitialized() const {
  return true;
}

void CSOTFPartyInvite_PartyMember::Swap(CSOTFPartyInvite_PartyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOTFPartyInvite_PartyMember::InternalSwap(CSOTFPartyInvite_PartyMember* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(steam_id_, other->steam_id_);
  swap(avatar_, other->avatar_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOTFPartyInvite_PartyMember::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSOTFPartyInvite::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOTFPartyInvite::kGroupIdFieldNumber;
const int CSOTFPartyInvite::kSenderIdFieldNumber;
const int CSOTFPartyInvite::kSenderNameFieldNumber;
const int CSOTFPartyInvite::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOTFPartyInvite::CSOTFPartyInvite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFPartyInvite();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSOTFPartyInvite)
}
CSOTFPartyInvite::CSOTFPartyInvite(const CSOTFPartyInvite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender_name()) {
    sender_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
  }
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_id_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(sender_id_));
  // @@protoc_insertion_point(copy_constructor:CSOTFPartyInvite)
}

void CSOTFPartyInvite::SharedCtor() {
  _cached_size_ = 0;
  sender_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sender_id_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(sender_id_));
}

CSOTFPartyInvite::~CSOTFPartyInvite() {
  // @@protoc_insertion_point(destructor:CSOTFPartyInvite)
  SharedDtor();
}

void CSOTFPartyInvite::SharedDtor() {
  sender_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSOTFPartyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFPartyInvite::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOTFPartyInvite& CSOTFPartyInvite::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFPartyInvite();
  return *internal_default_instance();
}

CSOTFPartyInvite* CSOTFPartyInvite::New(::google::protobuf::Arena* arena) const {
  CSOTFPartyInvite* n = new CSOTFPartyInvite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOTFPartyInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFPartyInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!sender_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*sender_name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sender_id_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(sender_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOTFPartyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSOTFPartyInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1 [(.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sender_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_sender_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sender_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_name().data(), static_cast<int>(this->sender_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSOTFPartyInvite.sender_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CSOTFPartyInvite.PartyMember members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSOTFPartyInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSOTFPartyInvite)
  return false;
#undef DO_
}

void CSOTFPartyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSOTFPartyInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), static_cast<int>(this->sender_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFPartyInvite.sender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sender_name(), output);
  }

  // repeated .CSOTFPartyInvite.PartyMember members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSOTFPartyInvite)
}

::google::protobuf::uint8* CSOTFPartyInvite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFPartyInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), static_cast<int>(this->sender_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFPartyInvite.sender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender_name(), target);
  }

  // repeated .CSOTFPartyInvite.PartyMember members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->members(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFPartyInvite)
  return target;
}

size_t CSOTFPartyInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFPartyInvite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CSOTFPartyInvite.PartyMember members = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string sender_name = 3;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }

    // optional uint64 group_id = 1 [(.key_field) = true];
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFPartyInvite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFPartyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFPartyInvite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOTFPartyInvite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFPartyInvite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFPartyInvite)
    MergeFrom(*source);
  }
}

void CSOTFPartyInvite::MergeFrom(const CSOTFPartyInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFPartyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sender_name();
      sender_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sender_id_ = from.sender_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFPartyInvite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFPartyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFPartyInvite::CopyFrom(const CSOTFPartyInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFPartyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFPartyInvite::IsInitialized() const {
  return true;
}

void CSOTFPartyInvite::Swap(CSOTFPartyInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOTFPartyInvite::InternalSwap(CSOTFPartyInvite* other) {
  using std::swap;
  members_.InternalSwap(&other->members_);
  sender_name_.Swap(&other->sender_name_);
  swap(group_id_, other->group_id_);
  swap(sender_id_, other->sender_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOTFPartyInvite::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CTFLobbyMember::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTFLobbyMember::kIdFieldNumber;
const int CTFLobbyMember::kTeamFieldNumber;
const int CTFLobbyMember::kConnectStateFieldNumber;
const int CTFLobbyMember::kNameFieldNumber;
const int CTFLobbyMember::kReadyStateFieldNumber;
const int CTFLobbyMember::kPartyIdFieldNumber;
const int CTFLobbyMember::kSquadSurplusFieldNumber;
const int CTFLobbyMember::kBadgeLevelFieldNumber;
const int CTFLobbyMember::kSkillratingFieldNumber;
const int CTFLobbyMember::kLastConnectTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTFLobbyMember::CTFLobbyMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCTFLobbyMember();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CTFLobbyMember)
}
CTFLobbyMember::CTFLobbyMember(const CTFLobbyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&skillrating_) -
    reinterpret_cast<char*>(&id_)) + sizeof(skillrating_));
  // @@protoc_insertion_point(copy_constructor:CTFLobbyMember)
}

void CTFLobbyMember::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_connect_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(last_connect_time_));
  skillrating_ = 10000u;
}

CTFLobbyMember::~CTFLobbyMember() {
  // @@protoc_insertion_point(destructor:CTFLobbyMember)
  SharedDtor();
}

void CTFLobbyMember::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTFLobbyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTFLobbyMember::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTFLobbyMember& CTFLobbyMember::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCTFLobbyMember();
  return *internal_default_instance();
}

CTFLobbyMember* CTFLobbyMember::New(::google::protobuf::Arena* arena) const {
  CTFLobbyMember* n = new CTFLobbyMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTFLobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CTFLobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&badge_level_) -
        reinterpret_cast<char*>(&id_)) + sizeof(badge_level_));
  }
  if (cached_has_bits & 768u) {
    last_connect_time_ = 0u;
    skillrating_ = 10000u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTFLobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CTFLobbyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1 [(.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TF_GC_TEAM team = 3 [default = TF_GC_TEAM_DEFENDERS];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TF_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::TF_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CTFLobbyMember.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TFLobbyReadyState ready_state = 11 [default = TFLobbyReadyState_UNDECLARED];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TFLobbyReadyState_IsValid(value)) {
            set_ready_state(static_cast< ::TFLobbyReadyState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 party_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CTFLobbyMember.ConnectState connect_state = 13 [default = INVALID];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CTFLobbyMember_ConnectState_IsValid(value)) {
            set_connect_state(static_cast< ::CTFLobbyMember_ConnectState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool squad_surplus = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_squad_surplus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &squad_surplus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 badge_level = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_badge_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 skillrating = 16 [default = 10000];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_skillrating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillrating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_connect_time = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_last_connect_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_connect_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CTFLobbyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CTFLobbyMember)
  return false;
#undef DO_
}

void CTFLobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CTFLobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }

  // optional .TF_GC_TEAM team = 3 [default = TF_GC_TEAM_DEFENDERS];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team(), output);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CTFLobbyMember.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional .TFLobbyReadyState ready_state = 11 [default = TFLobbyReadyState_UNDECLARED];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->ready_state(), output);
  }

  // optional uint64 party_id = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->party_id(), output);
  }

  // optional .CTFLobbyMember.ConnectState connect_state = 13 [default = INVALID];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->connect_state(), output);
  }

  // optional bool squad_surplus = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->squad_surplus(), output);
  }

  // optional uint32 badge_level = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->badge_level(), output);
  }

  // optional uint32 skillrating = 16 [default = 10000];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->skillrating(), output);
  }

  // optional uint32 last_connect_time = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->last_connect_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CTFLobbyMember)
}

::google::protobuf::uint8* CTFLobbyMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CTFLobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }

  // optional .TF_GC_TEAM team = 3 [default = TF_GC_TEAM_DEFENDERS];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team(), target);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CTFLobbyMember.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional .TFLobbyReadyState ready_state = 11 [default = TFLobbyReadyState_UNDECLARED];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->ready_state(), target);
  }

  // optional uint64 party_id = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->party_id(), target);
  }

  // optional .CTFLobbyMember.ConnectState connect_state = 13 [default = INVALID];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->connect_state(), target);
  }

  // optional bool squad_surplus = 14;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->squad_surplus(), target);
  }

  // optional uint32 badge_level = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->badge_level(), target);
  }

  // optional uint32 skillrating = 16 [default = 10000];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->skillrating(), target);
  }

  // optional uint32 last_connect_time = 17;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->last_connect_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTFLobbyMember)
  return target;
}

size_t CTFLobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTFLobbyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed64 id = 1 [(.key_field) = true];
    if (has_id()) {
      total_size += 1 + 8;
    }

    // optional .TF_GC_TEAM team = 3 [default = TF_GC_TEAM_DEFENDERS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional .TFLobbyReadyState ready_state = 11 [default = TFLobbyReadyState_UNDECLARED];
    if (has_ready_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ready_state());
    }

    // optional uint64 party_id = 12;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional .CTFLobbyMember.ConnectState connect_state = 13 [default = INVALID];
    if (has_connect_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connect_state());
    }

    // optional bool squad_surplus = 14;
    if (has_squad_surplus()) {
      total_size += 1 + 1;
    }

    // optional uint32 badge_level = 15;
    if (has_badge_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_level());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 last_connect_time = 17;
    if (has_last_connect_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_connect_time());
    }

    // optional uint32 skillrating = 16 [default = 10000];
    if (has_skillrating()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillrating());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTFLobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTFLobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CTFLobbyMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTFLobbyMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTFLobbyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTFLobbyMember)
    MergeFrom(*source);
  }
}

void CTFLobbyMember::MergeFrom(const CTFLobbyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTFLobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000008u) {
      ready_state_ = from.ready_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      connect_state_ = from.connect_state_;
    }
    if (cached_has_bits & 0x00000040u) {
      squad_surplus_ = from.squad_surplus_;
    }
    if (cached_has_bits & 0x00000080u) {
      badge_level_ = from.badge_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      last_connect_time_ = from.last_connect_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      skillrating_ = from.skillrating_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTFLobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTFLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTFLobbyMember::CopyFrom(const CTFLobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTFLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTFLobbyMember::IsInitialized() const {
  return true;
}

void CTFLobbyMember::Swap(CTFLobbyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTFLobbyMember::InternalSwap(CTFLobbyMember* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  swap(team_, other->team_);
  swap(ready_state_, other->ready_state_);
  swap(party_id_, other->party_id_);
  swap(connect_state_, other->connect_state_);
  swap(squad_surplus_, other->squad_surplus_);
  swap(badge_level_, other->badge_level_);
  swap(last_connect_time_, other->last_connect_time_);
  swap(skillrating_, other->skillrating_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTFLobbyMember::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CLobbyPendingPlayerReport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLobbyPendingPlayerReport::kAccountIdFieldNumber;
const int CLobbyPendingPlayerReport::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLobbyPendingPlayerReport::CLobbyPendingPlayerReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCLobbyPendingPlayerReport();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLobbyPendingPlayerReport)
}
CLobbyPendingPlayerReport::CLobbyPendingPlayerReport(const CLobbyPendingPlayerReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(date_));
  // @@protoc_insertion_point(copy_constructor:CLobbyPendingPlayerReport)
}

void CLobbyPendingPlayerReport::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(date_));
}

CLobbyPendingPlayerReport::~CLobbyPendingPlayerReport() {
  // @@protoc_insertion_point(destructor:CLobbyPendingPlayerReport)
  SharedDtor();
}

void CLobbyPendingPlayerReport::SharedDtor() {
}

void CLobbyPendingPlayerReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLobbyPendingPlayerReport::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CLobbyPendingPlayerReport& CLobbyPendingPlayerReport::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCLobbyPendingPlayerReport();
  return *internal_default_instance();
}

CLobbyPendingPlayerReport* CLobbyPendingPlayerReport::New(::google::protobuf::Arena* arena) const {
  CLobbyPendingPlayerReport* n = new CLobbyPendingPlayerReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CLobbyPendingPlayerReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CLobbyPendingPlayerReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&date_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(date_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CLobbyPendingPlayerReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CLobbyPendingPlayerReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CLobbyPendingPlayerReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CLobbyPendingPlayerReport)
  return false;
#undef DO_
}

void CLobbyPendingPlayerReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CLobbyPendingPlayerReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional fixed32 date = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CLobbyPendingPlayerReport)
}

::google::protobuf::uint8* CLobbyPendingPlayerReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyPendingPlayerReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional fixed32 date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyPendingPlayerReport)
  return target;
}

size_t CLobbyPendingPlayerReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLobbyPendingPlayerReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional fixed32 date = 2;
    if (has_date()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLobbyPendingPlayerReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLobbyPendingPlayerReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CLobbyPendingPlayerReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CLobbyPendingPlayerReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLobbyPendingPlayerReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLobbyPendingPlayerReport)
    MergeFrom(*source);
  }
}

void CLobbyPendingPlayerReport::MergeFrom(const CLobbyPendingPlayerReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLobbyPendingPlayerReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      date_ = from.date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLobbyPendingPlayerReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLobbyPendingPlayerReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyPendingPlayerReport::CopyFrom(const CLobbyPendingPlayerReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLobbyPendingPlayerReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyPendingPlayerReport::IsInitialized() const {
  return true;
}

void CLobbyPendingPlayerReport::Swap(CLobbyPendingPlayerReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLobbyPendingPlayerReport::InternalSwap(CLobbyPendingPlayerReport* other) {
  using std::swap;
  swap(account_id_, other->account_id_);
  swap(date_, other->date_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CLobbyPendingPlayerReport::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSOTFGameServerLobby::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOTFGameServerLobby::kLobbyIdFieldNumber;
const int CSOTFGameServerLobby::kMembersFieldNumber;
const int CSOTFGameServerLobby::kLeaderIdFieldNumber;
const int CSOTFGameServerLobby::kServerIdFieldNumber;
const int CSOTFGameServerLobby::kPendingInvitesFieldNumber;
const int CSOTFGameServerLobby::kStateFieldNumber;
const int CSOTFGameServerLobby::kConnectFieldNumber;
const int CSOTFGameServerLobby::kLobbyTypeFieldNumber;
const int CSOTFGameServerLobby::kAllowCheatsFieldNumber;
const int CSOTFGameServerLobby::kGameNameFieldNumber;
const int CSOTFGameServerLobby::kServerRegionFieldNumber;
const int CSOTFGameServerLobby::kGameStateFieldNumber;
const int CSOTFGameServerLobby::kNumSpectatorsFieldNumber;
const int CSOTFGameServerLobby::kReadyupRemainingTimeFieldNumber;
const int CSOTFGameServerLobby::kAllowSpectatingFieldNumber;
const int CSOTFGameServerLobby::kAverageRankFieldNumber;
const int CSOTFGameServerLobby::kLoadGameLobbyIdFieldNumber;
const int CSOTFGameServerLobby::kLoadGameSaveNumberFieldNumber;
const int CSOTFGameServerLobby::kMannupTourNameFieldNumber;
const int CSOTFGameServerLobby::kMapNameFieldNumber;
const int CSOTFGameServerLobby::kMissionNameFieldNumber;
const int CSOTFGameServerLobby::kMatchGroupFieldNumber;
const int CSOTFGameServerLobby::kMatchIdFieldNumber;
const int CSOTFGameServerLobby::kReplaySaltFieldNumber;
const int CSOTFGameServerLobby::kFormedTimeFieldNumber;
const int CSOTFGameServerLobby::kFlagsFieldNumber;
const int CSOTFGameServerLobby::kLateJoinEligibleFieldNumber;
const int CSOTFGameServerLobby::kFixedMatchSizeFieldNumber;
const int CSOTFGameServerLobby::kIsWarMatchFieldNumber;
const int CSOTFGameServerLobby::kNextMapsForVoteFieldNumber;
const int CSOTFGameServerLobby::kLobbyMmVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOTFGameServerLobby::CSOTFGameServerLobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFGameServerLobby();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSOTFGameServerLobby)
}
CSOTFGameServerLobby::CSOTFGameServerLobby(const CSOTFGameServerLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_),
      pending_invites_(from.pending_invites_),
      next_maps_for_vote_(from.next_maps_for_vote_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connect()) {
    connect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_);
  }
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_name()) {
    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  mission_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mission_name()) {
    mission_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mission_name_);
  }
  mannup_tour_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mannup_tour_name()) {
    mannup_tour_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mannup_tour_name_);
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_spectating_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(allow_spectating_));
  // @@protoc_insertion_point(copy_constructor:CSOTFGameServerLobby)
}

void CSOTFGameServerLobby::SharedCtor() {
  _cached_size_ = 0;
  connect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mission_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mannup_tour_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lobby_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_war_match_) -
      reinterpret_cast<char*>(&lobby_id_)) + sizeof(is_war_match_));
  lobby_type_ = -1;
  allow_spectating_ = true;
}

CSOTFGameServerLobby::~CSOTFGameServerLobby() {
  // @@protoc_insertion_point(destructor:CSOTFGameServerLobby)
  SharedDtor();
}

void CSOTFGameServerLobby::SharedDtor() {
  connect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mission_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mannup_tour_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSOTFGameServerLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFGameServerLobby::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOTFGameServerLobby& CSOTFGameServerLobby::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFGameServerLobby();
  return *internal_default_instance();
}

CSOTFGameServerLobby* CSOTFGameServerLobby::New(::google::protobuf::Arena* arena) const {
  CSOTFGameServerLobby* n = new CSOTFGameServerLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOTFGameServerLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFGameServerLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  pending_invites_.Clear();
  next_maps_for_vote_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!connect_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*connect_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!game_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!map_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!mission_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mission_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!mannup_tour_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mannup_tour_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leader_id_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(leader_id_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&state_)) + sizeof(match_id_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&lobby_mm_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&lobby_mm_version_)) + sizeof(flags_));
  }
  if (cached_has_bits & 251658240u) {
    ::memset(&fixed_match_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_war_match_) -
        reinterpret_cast<char*>(&fixed_match_size_)) + sizeof(is_war_match_));
    lobby_type_ = -1;
    allow_spectating_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOTFGameServerLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSOTFGameServerLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1 [(.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CTFLobbyMember members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CSOTFGameServerLobby.State state = 4 [default = UNKNOWN];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSOTFGameServerLobby_State_IsValid(value)) {
            set_state(static_cast< ::CSOTFGameServerLobby_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string connect = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connect().data(), static_cast<int>(this->connect().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSOTFGameServerLobby.connect");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 server_id = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_server_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 pending_invites = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 81u, input, this->mutable_pending_invites())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_pending_invites())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 leader_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_leader_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leader_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CSOTFGameServerLobby.LobbyType lobby_type = 12 [default = INVALID];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSOTFGameServerLobby_LobbyType_IsValid(value)) {
            set_lobby_type(static_cast< ::CSOTFGameServerLobby_LobbyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_cheats = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_allow_cheats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_cheats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_name = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), static_cast<int>(this->game_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSOTFGameServerLobby.game_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_region = 21 [default = 0];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TF_GC_GameState game_state = 22 [default = TF_GC_GAMESTATE_STATE_INIT];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TF_GC_GameState_IsValid(value)) {
            set_game_state(static_cast< ::TF_GC_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_spectators = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_num_spectators();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_spectators_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float readyup_remaining_time = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {
          set_has_readyup_remaining_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &readyup_remaining_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 30 [default = 0];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_spectating = 31 [default = true];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_allow_spectating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_spectating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 average_rank = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_average_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 load_game_lobby_id = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {
          set_has_load_game_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &load_game_lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 load_game_save_number = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_load_game_save_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_game_save_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 replay_salt = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 285 & 0xFF */)) {
          set_has_replay_salt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &replay_salt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 formed_time = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_formed_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formed_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_name = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), static_cast<int>(this->map_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSOTFGameServerLobby.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mission_name = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mission_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mission_name().data(), static_cast<int>(this->mission_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSOTFGameServerLobby.mission_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_group = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_match_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mannup_tour_name = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mannup_tour_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mannup_tour_name().data(), static_cast<int>(this->mannup_tour_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSOTFGameServerLobby.mannup_tour_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool late_join_eligible = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          set_has_late_join_eligible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &late_join_eligible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fixed_match_size = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          set_has_fixed_match_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fixed_match_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CSOTFGameServerLobby.WarMatch is_war_match = 46 [default = NOPE];
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSOTFGameServerLobby_WarMatch_IsValid(value)) {
            set_is_war_match(static_cast< ::CSOTFGameServerLobby_WarMatch >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                46, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 next_maps_for_vote = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 376u, input, this->mutable_next_maps_for_vote())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 378 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_next_maps_for_vote())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_mm_version = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 384 & 0xFF */)) {
          set_has_lobby_mm_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_mm_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSOTFGameServerLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSOTFGameServerLobby)
  return false;
#undef DO_
}

void CSOTFGameServerLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSOTFGameServerLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // repeated .CTFLobbyMember members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(static_cast<int>(i)), output);
  }

  // optional .CSOTFGameServerLobby.State state = 4 [default = UNKNOWN];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional string connect = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect().data(), static_cast<int>(this->connect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFGameServerLobby.connect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->connect(), output);
  }

  // optional fixed64 server_id = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->server_id(), output);
  }

  // repeated fixed64 pending_invites = 10;
  for (int i = 0, n = this->pending_invites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      10, this->pending_invites(i), output);
  }

  // optional fixed64 leader_id = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->leader_id(), output);
  }

  // optional .CSOTFGameServerLobby.LobbyType lobby_type = 12 [default = INVALID];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->lobby_type(), output);
  }

  // optional bool allow_cheats = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->allow_cheats(), output);
  }

  // optional string game_name = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFGameServerLobby.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->game_name(), output);
  }

  // optional uint32 server_region = 21 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->server_region(), output);
  }

  // optional .TF_GC_GameState game_state = 22 [default = TF_GC_GAMESTATE_STATE_INIT];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->game_state(), output);
  }

  // optional uint32 num_spectators = 23;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->num_spectators(), output);
  }

  // optional float readyup_remaining_time = 26;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->readyup_remaining_time(), output);
  }

  // optional uint64 match_id = 30 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->match_id(), output);
  }

  // optional bool allow_spectating = 31 [default = true];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->allow_spectating(), output);
  }

  // optional uint32 average_rank = 32;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->average_rank(), output);
  }

  // optional fixed64 load_game_lobby_id = 33;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(33, this->load_game_lobby_id(), output);
  }

  // optional uint32 load_game_save_number = 34;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->load_game_save_number(), output);
  }

  // optional fixed32 replay_salt = 35;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(35, this->replay_salt(), output);
  }

  // optional uint32 formed_time = 36;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->formed_time(), output);
  }

  // optional string map_name = 38;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFGameServerLobby.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->map_name(), output);
  }

  // optional string mission_name = 39;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mission_name().data(), static_cast<int>(this->mission_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFGameServerLobby.mission_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->mission_name(), output);
  }

  // optional uint32 match_group = 41;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->match_group(), output);
  }

  // optional string mannup_tour_name = 42;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mannup_tour_name().data(), static_cast<int>(this->mannup_tour_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFGameServerLobby.mannup_tour_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->mannup_tour_name(), output);
  }

  // optional uint32 flags = 43;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->flags(), output);
  }

  // optional bool late_join_eligible = 44;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->late_join_eligible(), output);
  }

  // optional uint32 fixed_match_size = 45;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->fixed_match_size(), output);
  }

  // optional .CSOTFGameServerLobby.WarMatch is_war_match = 46 [default = NOPE];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      46, this->is_war_match(), output);
  }

  // repeated uint32 next_maps_for_vote = 47;
  for (int i = 0, n = this->next_maps_for_vote_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      47, this->next_maps_for_vote(i), output);
  }

  // optional uint32 lobby_mm_version = 48;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->lobby_mm_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSOTFGameServerLobby)
}

::google::protobuf::uint8* CSOTFGameServerLobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFGameServerLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // repeated .CTFLobbyMember members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->members(static_cast<int>(i)), deterministic, target);
  }

  // optional .CSOTFGameServerLobby.State state = 4 [default = UNKNOWN];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional string connect = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect().data(), static_cast<int>(this->connect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFGameServerLobby.connect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->connect(), target);
  }

  // optional fixed64 server_id = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->server_id(), target);
  }

  // repeated fixed64 pending_invites = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(10, this->pending_invites_, target);

  // optional fixed64 leader_id = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->leader_id(), target);
  }

  // optional .CSOTFGameServerLobby.LobbyType lobby_type = 12 [default = INVALID];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->lobby_type(), target);
  }

  // optional bool allow_cheats = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->allow_cheats(), target);
  }

  // optional string game_name = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFGameServerLobby.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->game_name(), target);
  }

  // optional uint32 server_region = 21 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->server_region(), target);
  }

  // optional .TF_GC_GameState game_state = 22 [default = TF_GC_GAMESTATE_STATE_INIT];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->game_state(), target);
  }

  // optional uint32 num_spectators = 23;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->num_spectators(), target);
  }

  // optional float readyup_remaining_time = 26;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->readyup_remaining_time(), target);
  }

  // optional uint64 match_id = 30 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->match_id(), target);
  }

  // optional bool allow_spectating = 31 [default = true];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->allow_spectating(), target);
  }

  // optional uint32 average_rank = 32;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->average_rank(), target);
  }

  // optional fixed64 load_game_lobby_id = 33;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(33, this->load_game_lobby_id(), target);
  }

  // optional uint32 load_game_save_number = 34;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->load_game_save_number(), target);
  }

  // optional fixed32 replay_salt = 35;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(35, this->replay_salt(), target);
  }

  // optional uint32 formed_time = 36;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->formed_time(), target);
  }

  // optional string map_name = 38;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFGameServerLobby.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->map_name(), target);
  }

  // optional string mission_name = 39;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mission_name().data(), static_cast<int>(this->mission_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFGameServerLobby.mission_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->mission_name(), target);
  }

  // optional uint32 match_group = 41;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->match_group(), target);
  }

  // optional string mannup_tour_name = 42;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mannup_tour_name().data(), static_cast<int>(this->mannup_tour_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSOTFGameServerLobby.mannup_tour_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->mannup_tour_name(), target);
  }

  // optional uint32 flags = 43;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->flags(), target);
  }

  // optional bool late_join_eligible = 44;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->late_join_eligible(), target);
  }

  // optional uint32 fixed_match_size = 45;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->fixed_match_size(), target);
  }

  // optional .CSOTFGameServerLobby.WarMatch is_war_match = 46 [default = NOPE];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      46, this->is_war_match(), target);
  }

  // repeated uint32 next_maps_for_vote = 47;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(47, this->next_maps_for_vote_, target);

  // optional uint32 lobby_mm_version = 48;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->lobby_mm_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFGameServerLobby)
  return target;
}

size_t CSOTFGameServerLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFGameServerLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CTFLobbyMember members = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  // repeated fixed64 pending_invites = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->pending_invites_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pending_invites_size());
    total_size += data_size;
  }

  // repeated uint32 next_maps_for_vote = 47;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->next_maps_for_vote_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->next_maps_for_vote_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string connect = 5;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect());
    }

    // optional string game_name = 16;
    if (has_game_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional string map_name = 38;
    if (has_map_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional string mission_name = 39;
    if (has_mission_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mission_name());
    }

    // optional string mannup_tour_name = 42;
    if (has_mannup_tour_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mannup_tour_name());
    }

    // optional uint64 lobby_id = 1 [(.key_field) = true];
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional fixed64 server_id = 6 [default = 0];
    if (has_server_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 leader_id = 11;
    if (has_leader_id()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .CSOTFGameServerLobby.State state = 4 [default = UNKNOWN];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 server_region = 21 [default = 0];
    if (has_server_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional .TF_GC_GameState game_state = 22 [default = TF_GC_GAMESTATE_STATE_INIT];
    if (has_game_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional uint32 num_spectators = 23;
    if (has_num_spectators()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_spectators());
    }

    // optional float readyup_remaining_time = 26;
    if (has_readyup_remaining_time()) {
      total_size += 2 + 4;
    }

    // optional bool allow_cheats = 13;
    if (has_allow_cheats()) {
      total_size += 1 + 1;
    }

    // optional bool late_join_eligible = 44;
    if (has_late_join_eligible()) {
      total_size += 2 + 1;
    }

    // optional uint64 match_id = 30 [default = 0];
    if (has_match_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 lobby_mm_version = 48;
    if (has_lobby_mm_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_mm_version());
    }

    // optional fixed64 load_game_lobby_id = 33;
    if (has_load_game_lobby_id()) {
      total_size += 2 + 8;
    }

    // optional uint32 average_rank = 32;
    if (has_average_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_rank());
    }

    // optional uint32 load_game_save_number = 34;
    if (has_load_game_save_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load_game_save_number());
    }

    // optional fixed32 replay_salt = 35;
    if (has_replay_salt()) {
      total_size += 2 + 4;
    }

    // optional uint32 formed_time = 36;
    if (has_formed_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formed_time());
    }

    // optional uint32 match_group = 41;
    if (has_match_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_group());
    }

    // optional uint32 flags = 43;
    if (has_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional uint32 fixed_match_size = 45;
    if (has_fixed_match_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fixed_match_size());
    }

    // optional .CSOTFGameServerLobby.WarMatch is_war_match = 46 [default = NOPE];
    if (has_is_war_match()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->is_war_match());
    }

    // optional .CSOTFGameServerLobby.LobbyType lobby_type = 12 [default = INVALID];
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lobby_type());
    }

    // optional bool allow_spectating = 31 [default = true];
    if (has_allow_spectating()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFGameServerLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFGameServerLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFGameServerLobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOTFGameServerLobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFGameServerLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFGameServerLobby)
    MergeFrom(*source);
  }
}

void CSOTFGameServerLobby::MergeFrom(const CSOTFGameServerLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFGameServerLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  pending_invites_.MergeFrom(from.pending_invites_);
  next_maps_for_vote_.MergeFrom(from.next_maps_for_vote_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_connect();
      connect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_game_name();
      game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_mission_name();
      mission_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mission_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_mannup_tour_name();
      mannup_tour_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mannup_tour_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_id_ = from.server_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      leader_id_ = from.leader_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000200u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00000400u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00000800u) {
      num_spectators_ = from.num_spectators_;
    }
    if (cached_has_bits & 0x00001000u) {
      readyup_remaining_time_ = from.readyup_remaining_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      allow_cheats_ = from.allow_cheats_;
    }
    if (cached_has_bits & 0x00004000u) {
      late_join_eligible_ = from.late_join_eligible_;
    }
    if (cached_has_bits & 0x00008000u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      lobby_mm_version_ = from.lobby_mm_version_;
    }
    if (cached_has_bits & 0x00020000u) {
      load_game_lobby_id_ = from.load_game_lobby_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      average_rank_ = from.average_rank_;
    }
    if (cached_has_bits & 0x00080000u) {
      load_game_save_number_ = from.load_game_save_number_;
    }
    if (cached_has_bits & 0x00100000u) {
      replay_salt_ = from.replay_salt_;
    }
    if (cached_has_bits & 0x00200000u) {
      formed_time_ = from.formed_time_;
    }
    if (cached_has_bits & 0x00400000u) {
      match_group_ = from.match_group_;
    }
    if (cached_has_bits & 0x00800000u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 251658240u) {
    if (cached_has_bits & 0x01000000u) {
      fixed_match_size_ = from.fixed_match_size_;
    }
    if (cached_has_bits & 0x02000000u) {
      is_war_match_ = from.is_war_match_;
    }
    if (cached_has_bits & 0x04000000u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x08000000u) {
      allow_spectating_ = from.allow_spectating_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFGameServerLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFGameServerLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFGameServerLobby::CopyFrom(const CSOTFGameServerLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFGameServerLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFGameServerLobby::IsInitialized() const {
  return true;
}

void CSOTFGameServerLobby::Swap(CSOTFGameServerLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOTFGameServerLobby::InternalSwap(CSOTFGameServerLobby* other) {
  using std::swap;
  members_.InternalSwap(&other->members_);
  pending_invites_.InternalSwap(&other->pending_invites_);
  next_maps_for_vote_.InternalSwap(&other->next_maps_for_vote_);
  connect_.Swap(&other->connect_);
  game_name_.Swap(&other->game_name_);
  map_name_.Swap(&other->map_name_);
  mission_name_.Swap(&other->mission_name_);
  mannup_tour_name_.Swap(&other->mannup_tour_name_);
  swap(lobby_id_, other->lobby_id_);
  swap(server_id_, other->server_id_);
  swap(leader_id_, other->leader_id_);
  swap(state_, other->state_);
  swap(server_region_, other->server_region_);
  swap(game_state_, other->game_state_);
  swap(num_spectators_, other->num_spectators_);
  swap(readyup_remaining_time_, other->readyup_remaining_time_);
  swap(allow_cheats_, other->allow_cheats_);
  swap(late_join_eligible_, other->late_join_eligible_);
  swap(match_id_, other->match_id_);
  swap(lobby_mm_version_, other->lobby_mm_version_);
  swap(load_game_lobby_id_, other->load_game_lobby_id_);
  swap(average_rank_, other->average_rank_);
  swap(load_game_save_number_, other->load_game_save_number_);
  swap(replay_salt_, other->replay_salt_);
  swap(formed_time_, other->formed_time_);
  swap(match_group_, other->match_group_);
  swap(flags_, other->flags_);
  swap(fixed_match_size_, other->fixed_match_size_);
  swap(is_war_match_, other->is_war_match_);
  swap(lobby_type_, other->lobby_type_);
  swap(allow_spectating_, other->allow_spectating_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOTFGameServerLobby::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgExitMatchmaking::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgExitMatchmaking::kExplicitAbandonFieldNumber;
const int CMsgExitMatchmaking::kPartyIdFieldNumber;
const int CMsgExitMatchmaking::kLobbyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgExitMatchmaking::CMsgExitMatchmaking()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgExitMatchmaking();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgExitMatchmaking)
}
CMsgExitMatchmaking::CMsgExitMatchmaking(const CMsgExitMatchmaking& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&explicit_abandon_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(explicit_abandon_));
  // @@protoc_insertion_point(copy_constructor:CMsgExitMatchmaking)
}

void CMsgExitMatchmaking::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&party_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&explicit_abandon_) -
      reinterpret_cast<char*>(&party_id_)) + sizeof(explicit_abandon_));
}

CMsgExitMatchmaking::~CMsgExitMatchmaking() {
  // @@protoc_insertion_point(destructor:CMsgExitMatchmaking)
  SharedDtor();
}

void CMsgExitMatchmaking::SharedDtor() {
}

void CMsgExitMatchmaking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgExitMatchmaking::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgExitMatchmaking& CMsgExitMatchmaking::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgExitMatchmaking();
  return *internal_default_instance();
}

CMsgExitMatchmaking* CMsgExitMatchmaking::New(::google::protobuf::Arena* arena) const {
  CMsgExitMatchmaking* n = new CMsgExitMatchmaking;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgExitMatchmaking::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgExitMatchmaking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&explicit_abandon_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(explicit_abandon_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgExitMatchmaking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgExitMatchmaking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool explicit_abandon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_explicit_abandon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &explicit_abandon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 party_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lobby_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgExitMatchmaking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgExitMatchmaking)
  return false;
#undef DO_
}

void CMsgExitMatchmaking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgExitMatchmaking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool explicit_abandon = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->explicit_abandon(), output);
  }

  // optional uint64 party_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->party_id(), output);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lobby_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgExitMatchmaking)
}

::google::protobuf::uint8* CMsgExitMatchmaking::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgExitMatchmaking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool explicit_abandon = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->explicit_abandon(), target);
  }

  // optional uint64 party_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->party_id(), target);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lobby_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgExitMatchmaking)
  return target;
}

size_t CMsgExitMatchmaking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgExitMatchmaking)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 party_id = 2;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional uint64 lobby_id = 3;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional bool explicit_abandon = 1;
    if (has_explicit_abandon()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgExitMatchmaking::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgExitMatchmaking)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExitMatchmaking* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgExitMatchmaking>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgExitMatchmaking)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgExitMatchmaking)
    MergeFrom(*source);
  }
}

void CMsgExitMatchmaking::MergeFrom(const CMsgExitMatchmaking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgExitMatchmaking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      explicit_abandon_ = from.explicit_abandon_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgExitMatchmaking::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgExitMatchmaking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExitMatchmaking::CopyFrom(const CMsgExitMatchmaking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgExitMatchmaking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExitMatchmaking::IsInitialized() const {
  return true;
}

void CMsgExitMatchmaking::Swap(CMsgExitMatchmaking* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgExitMatchmaking::InternalSwap(CMsgExitMatchmaking* other) {
  using std::swap;
  swap(party_id_, other->party_id_);
  swap(lobby_id_, other->lobby_id_);
  swap(explicit_abandon_, other->explicit_abandon_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgExitMatchmaking::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgAcceptInvite::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAcceptInvite::kPartyIdFieldNumber;
const int CMsgAcceptInvite::kSteamidLobbyFieldNumber;
const int CMsgAcceptInvite::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAcceptInvite::CMsgAcceptInvite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgAcceptInvite();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgAcceptInvite)
}
CMsgAcceptInvite::CMsgAcceptInvite(const CMsgAcceptInvite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgAcceptInvite)
}

void CMsgAcceptInvite::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&party_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steamid_lobby_) -
      reinterpret_cast<char*>(&party_id_)) + sizeof(steamid_lobby_));
  client_version_ = 1225u;
}

CMsgAcceptInvite::~CMsgAcceptInvite() {
  // @@protoc_insertion_point(destructor:CMsgAcceptInvite)
  SharedDtor();
}

void CMsgAcceptInvite::SharedDtor() {
}

void CMsgAcceptInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAcceptInvite::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAcceptInvite& CMsgAcceptInvite::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgAcceptInvite();
  return *internal_default_instance();
}

CMsgAcceptInvite* CMsgAcceptInvite::New(::google::protobuf::Arena* arena) const {
  CMsgAcceptInvite* n = new CMsgAcceptInvite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAcceptInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAcceptInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_lobby_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(steamid_lobby_));
    client_version_ = 1225u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAcceptInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgAcceptInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_steamid_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 3 [default = 1225];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgAcceptInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgAcceptInvite)
  return false;
#undef DO_
}

void CMsgAcceptInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgAcceptInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  // optional fixed64 steamid_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid_lobby(), output);
  }

  // optional uint32 client_version = 3 [default = 1225];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgAcceptInvite)
}

::google::protobuf::uint8* CMsgAcceptInvite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAcceptInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  // optional fixed64 steamid_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid_lobby(), target);
  }

  // optional uint32 client_version = 3 [default = 1225];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAcceptInvite)
  return target;
}

size_t CMsgAcceptInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAcceptInvite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional fixed64 steamid_lobby = 2;
    if (has_steamid_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 client_version = 3 [default = 1225];
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAcceptInvite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAcceptInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAcceptInvite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAcceptInvite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAcceptInvite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAcceptInvite)
    MergeFrom(*source);
  }
}

void CMsgAcceptInvite::MergeFrom(const CMsgAcceptInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAcceptInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_lobby_ = from.steamid_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAcceptInvite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAcceptInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAcceptInvite::CopyFrom(const CMsgAcceptInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAcceptInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAcceptInvite::IsInitialized() const {
  return true;
}

void CMsgAcceptInvite::Swap(CMsgAcceptInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAcceptInvite::InternalSwap(CMsgAcceptInvite* other) {
  using std::swap;
  swap(party_id_, other->party_id_);
  swap(steamid_lobby_, other->steamid_lobby_);
  swap(client_version_, other->client_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAcceptInvite::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgAcceptInviteResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAcceptInviteResponse::kResultCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAcceptInviteResponse::CMsgAcceptInviteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgAcceptInviteResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgAcceptInviteResponse)
}
CMsgAcceptInviteResponse::CMsgAcceptInviteResponse(const CMsgAcceptInviteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:CMsgAcceptInviteResponse)
}

void CMsgAcceptInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  result_code_ = 0;
}

CMsgAcceptInviteResponse::~CMsgAcceptInviteResponse() {
  // @@protoc_insertion_point(destructor:CMsgAcceptInviteResponse)
  SharedDtor();
}

void CMsgAcceptInviteResponse::SharedDtor() {
}

void CMsgAcceptInviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAcceptInviteResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAcceptInviteResponse& CMsgAcceptInviteResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgAcceptInviteResponse();
  return *internal_default_instance();
}

CMsgAcceptInviteResponse* CMsgAcceptInviteResponse::New(::google::protobuf::Arena* arena) const {
  CMsgAcceptInviteResponse* n = new CMsgAcceptInviteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAcceptInviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAcceptInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAcceptInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgAcceptInviteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgAcceptInviteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgAcceptInviteResponse)
  return false;
#undef DO_
}

void CMsgAcceptInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgAcceptInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgAcceptInviteResponse)
}

::google::protobuf::uint8* CMsgAcceptInviteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAcceptInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAcceptInviteResponse)
  return target;
}

size_t CMsgAcceptInviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAcceptInviteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 result_code = 1;
  if (has_result_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAcceptInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAcceptInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAcceptInviteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAcceptInviteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAcceptInviteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAcceptInviteResponse)
    MergeFrom(*source);
  }
}

void CMsgAcceptInviteResponse::MergeFrom(const CMsgAcceptInviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAcceptInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result_code()) {
    set_result_code(from.result_code());
  }
}

void CMsgAcceptInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAcceptInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAcceptInviteResponse::CopyFrom(const CMsgAcceptInviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAcceptInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAcceptInviteResponse::IsInitialized() const {
  return true;
}

void CMsgAcceptInviteResponse::Swap(CMsgAcceptInviteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAcceptInviteResponse::InternalSwap(CMsgAcceptInviteResponse* other) {
  using std::swap;
  swap(result_code_, other->result_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAcceptInviteResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgReadyUp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgReadyUp::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgReadyUp::CMsgReadyUp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgReadyUp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgReadyUp)
}
CMsgReadyUp::CMsgReadyUp(const CMsgReadyUp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:CMsgReadyUp)
}

void CMsgReadyUp::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
}

CMsgReadyUp::~CMsgReadyUp() {
  // @@protoc_insertion_point(destructor:CMsgReadyUp)
  SharedDtor();
}

void CMsgReadyUp::SharedDtor() {
}

void CMsgReadyUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReadyUp::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgReadyUp& CMsgReadyUp::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgReadyUp();
  return *internal_default_instance();
}

CMsgReadyUp* CMsgReadyUp::New(::google::protobuf::Arena* arena) const {
  CMsgReadyUp* n = new CMsgReadyUp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgReadyUp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReadyUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgReadyUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgReadyUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TFLobbyReadyState state = 1 [default = TFLobbyReadyState_UNDECLARED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TFLobbyReadyState_IsValid(value)) {
            set_state(static_cast< ::TFLobbyReadyState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgReadyUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgReadyUp)
  return false;
#undef DO_
}

void CMsgReadyUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgReadyUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TFLobbyReadyState state = 1 [default = TFLobbyReadyState_UNDECLARED];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgReadyUp)
}

::google::protobuf::uint8* CMsgReadyUp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReadyUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TFLobbyReadyState state = 1 [default = TFLobbyReadyState_UNDECLARED];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReadyUp)
  return target;
}

size_t CMsgReadyUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReadyUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .TFLobbyReadyState state = 1 [default = TFLobbyReadyState_UNDECLARED];
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReadyUp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgReadyUp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReadyUp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgReadyUp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgReadyUp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgReadyUp)
    MergeFrom(*source);
  }
}

void CMsgReadyUp::MergeFrom(const CMsgReadyUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgReadyUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    set_state(from.state());
  }
}

void CMsgReadyUp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgReadyUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReadyUp::CopyFrom(const CMsgReadyUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReadyUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyUp::IsInitialized() const {
  return true;
}

void CMsgReadyUp::Swap(CMsgReadyUp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgReadyUp::InternalSwap(CMsgReadyUp* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgReadyUp::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgMatchmakingSearchCountRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMatchmakingSearchCountRequest::CMsgMatchmakingSearchCountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMatchmakingSearchCountRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgMatchmakingSearchCountRequest)
}
CMsgMatchmakingSearchCountRequest::CMsgMatchmakingSearchCountRequest(const CMsgMatchmakingSearchCountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMatchmakingSearchCountRequest)
}

void CMsgMatchmakingSearchCountRequest::SharedCtor() {
  _cached_size_ = 0;
}

CMsgMatchmakingSearchCountRequest::~CMsgMatchmakingSearchCountRequest() {
  // @@protoc_insertion_point(destructor:CMsgMatchmakingSearchCountRequest)
  SharedDtor();
}

void CMsgMatchmakingSearchCountRequest::SharedDtor() {
}

void CMsgMatchmakingSearchCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMatchmakingSearchCountRequest::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMatchmakingSearchCountRequest& CMsgMatchmakingSearchCountRequest::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMatchmakingSearchCountRequest();
  return *internal_default_instance();
}

CMsgMatchmakingSearchCountRequest* CMsgMatchmakingSearchCountRequest::New(::google::protobuf::Arena* arena) const {
  CMsgMatchmakingSearchCountRequest* n = new CMsgMatchmakingSearchCountRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMatchmakingSearchCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchmakingSearchCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMatchmakingSearchCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgMatchmakingSearchCountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgMatchmakingSearchCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgMatchmakingSearchCountRequest)
  return false;
#undef DO_
}

void CMsgMatchmakingSearchCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgMatchmakingSearchCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgMatchmakingSearchCountRequest)
}

::google::protobuf::uint8* CMsgMatchmakingSearchCountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchmakingSearchCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchmakingSearchCountRequest)
  return target;
}

size_t CMsgMatchmakingSearchCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchmakingSearchCountRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMatchmakingSearchCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchmakingSearchCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchmakingSearchCountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMatchmakingSearchCountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchmakingSearchCountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchmakingSearchCountRequest)
    MergeFrom(*source);
  }
}

void CMsgMatchmakingSearchCountRequest::MergeFrom(const CMsgMatchmakingSearchCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchmakingSearchCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgMatchmakingSearchCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchmakingSearchCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchmakingSearchCountRequest::CopyFrom(const CMsgMatchmakingSearchCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchmakingSearchCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchmakingSearchCountRequest::IsInitialized() const {
  return true;
}

void CMsgMatchmakingSearchCountRequest::Swap(CMsgMatchmakingSearchCountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMatchmakingSearchCountRequest::InternalSwap(CMsgMatchmakingSearchCountRequest* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMatchmakingSearchCountRequest::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgMatchmakingSearchCountResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMatchmakingSearchCountResponse::kSearchingPlayersByGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMatchmakingSearchCountResponse::CMsgMatchmakingSearchCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMatchmakingSearchCountResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgMatchmakingSearchCountResponse)
}
CMsgMatchmakingSearchCountResponse::CMsgMatchmakingSearchCountResponse(const CMsgMatchmakingSearchCountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      searching_players_by_group_(from.searching_players_by_group_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMatchmakingSearchCountResponse)
}

void CMsgMatchmakingSearchCountResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgMatchmakingSearchCountResponse::~CMsgMatchmakingSearchCountResponse() {
  // @@protoc_insertion_point(destructor:CMsgMatchmakingSearchCountResponse)
  SharedDtor();
}

void CMsgMatchmakingSearchCountResponse::SharedDtor() {
}

void CMsgMatchmakingSearchCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMatchmakingSearchCountResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMatchmakingSearchCountResponse& CMsgMatchmakingSearchCountResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMatchmakingSearchCountResponse();
  return *internal_default_instance();
}

CMsgMatchmakingSearchCountResponse* CMsgMatchmakingSearchCountResponse::New(::google::protobuf::Arena* arena) const {
  CMsgMatchmakingSearchCountResponse* n = new CMsgMatchmakingSearchCountResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMatchmakingSearchCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchmakingSearchCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searching_players_by_group_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMatchmakingSearchCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgMatchmakingSearchCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 searching_players_by_group = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_searching_players_by_group())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_searching_players_by_group())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgMatchmakingSearchCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgMatchmakingSearchCountResponse)
  return false;
#undef DO_
}

void CMsgMatchmakingSearchCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgMatchmakingSearchCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 searching_players_by_group = 1;
  for (int i = 0, n = this->searching_players_by_group_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->searching_players_by_group(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgMatchmakingSearchCountResponse)
}

::google::protobuf::uint8* CMsgMatchmakingSearchCountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchmakingSearchCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 searching_players_by_group = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->searching_players_by_group_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchmakingSearchCountResponse)
  return target;
}

size_t CMsgMatchmakingSearchCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchmakingSearchCountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 searching_players_by_group = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->searching_players_by_group_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->searching_players_by_group_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMatchmakingSearchCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchmakingSearchCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchmakingSearchCountResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMatchmakingSearchCountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchmakingSearchCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchmakingSearchCountResponse)
    MergeFrom(*source);
  }
}

void CMsgMatchmakingSearchCountResponse::MergeFrom(const CMsgMatchmakingSearchCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchmakingSearchCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  searching_players_by_group_.MergeFrom(from.searching_players_by_group_);
}

void CMsgMatchmakingSearchCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchmakingSearchCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchmakingSearchCountResponse::CopyFrom(const CMsgMatchmakingSearchCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchmakingSearchCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchmakingSearchCountResponse::IsInitialized() const {
  return true;
}

void CMsgMatchmakingSearchCountResponse::Swap(CMsgMatchmakingSearchCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMatchmakingSearchCountResponse::InternalSwap(CMsgMatchmakingSearchCountResponse* other) {
  using std::swap;
  searching_players_by_group_.InternalSwap(&other->searching_players_by_group_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMatchmakingSearchCountResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgKickedFromMatchmakingQueue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgKickedFromMatchmakingQueue::CMsgKickedFromMatchmakingQueue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgKickedFromMatchmakingQueue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgKickedFromMatchmakingQueue)
}
CMsgKickedFromMatchmakingQueue::CMsgKickedFromMatchmakingQueue(const CMsgKickedFromMatchmakingQueue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgKickedFromMatchmakingQueue)
}

void CMsgKickedFromMatchmakingQueue::SharedCtor() {
  _cached_size_ = 0;
}

CMsgKickedFromMatchmakingQueue::~CMsgKickedFromMatchmakingQueue() {
  // @@protoc_insertion_point(destructor:CMsgKickedFromMatchmakingQueue)
  SharedDtor();
}

void CMsgKickedFromMatchmakingQueue::SharedDtor() {
}

void CMsgKickedFromMatchmakingQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgKickedFromMatchmakingQueue::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgKickedFromMatchmakingQueue& CMsgKickedFromMatchmakingQueue::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgKickedFromMatchmakingQueue();
  return *internal_default_instance();
}

CMsgKickedFromMatchmakingQueue* CMsgKickedFromMatchmakingQueue::New(::google::protobuf::Arena* arena) const {
  CMsgKickedFromMatchmakingQueue* n = new CMsgKickedFromMatchmakingQueue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgKickedFromMatchmakingQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgKickedFromMatchmakingQueue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgKickedFromMatchmakingQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgKickedFromMatchmakingQueue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgKickedFromMatchmakingQueue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgKickedFromMatchmakingQueue)
  return false;
#undef DO_
}

void CMsgKickedFromMatchmakingQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgKickedFromMatchmakingQueue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgKickedFromMatchmakingQueue)
}

::google::protobuf::uint8* CMsgKickedFromMatchmakingQueue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgKickedFromMatchmakingQueue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgKickedFromMatchmakingQueue)
  return target;
}

size_t CMsgKickedFromMatchmakingQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgKickedFromMatchmakingQueue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgKickedFromMatchmakingQueue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgKickedFromMatchmakingQueue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgKickedFromMatchmakingQueue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgKickedFromMatchmakingQueue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgKickedFromMatchmakingQueue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgKickedFromMatchmakingQueue)
    MergeFrom(*source);
  }
}

void CMsgKickedFromMatchmakingQueue::MergeFrom(const CMsgKickedFromMatchmakingQueue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgKickedFromMatchmakingQueue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgKickedFromMatchmakingQueue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgKickedFromMatchmakingQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKickedFromMatchmakingQueue::CopyFrom(const CMsgKickedFromMatchmakingQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgKickedFromMatchmakingQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKickedFromMatchmakingQueue::IsInitialized() const {
  return true;
}

void CMsgKickedFromMatchmakingQueue::Swap(CMsgKickedFromMatchmakingQueue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgKickedFromMatchmakingQueue::InternalSwap(CMsgKickedFromMatchmakingQueue* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgKickedFromMatchmakingQueue::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFJoinChatChannel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFJoinChatChannel::kPersonaNameFieldNumber;
const int CMsgTFJoinChatChannel::kChannelNameFieldNumber;
const int CMsgTFJoinChatChannel::kPasswordFieldNumber;
const int CMsgTFJoinChatChannel::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFJoinChatChannel::CMsgTFJoinChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFJoinChatChannel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFJoinChatChannel)
}
CMsgTFJoinChatChannel::CMsgTFJoinChatChannel(const CMsgTFJoinChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  channel_type_ = from.channel_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFJoinChatChannel)
}

void CMsgTFJoinChatChannel::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_type_ = 0;
}

CMsgTFJoinChatChannel::~CMsgTFJoinChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgTFJoinChatChannel)
  SharedDtor();
}

void CMsgTFJoinChatChannel::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTFJoinChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFJoinChatChannel::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFJoinChatChannel& CMsgTFJoinChatChannel::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFJoinChatChannel();
  return *internal_default_instance();
}

CMsgTFJoinChatChannel* CMsgTFJoinChatChannel::New(::google::protobuf::Arena* arena) const {
  CMsgTFJoinChatChannel* n = new CMsgTFJoinChatChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFJoinChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFJoinChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*persona_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*channel_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
  }
  channel_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFJoinChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFJoinChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string persona_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgTFJoinChatChannel.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string channel_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgTFJoinChatChannel.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgTFJoinChatChannel.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ChatChannelType_t channel_type = 4 [default = ChatChannelType_Regional];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::ChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFJoinChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFJoinChatChannel)
  return false;
#undef DO_
}

void CMsgTFJoinChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFJoinChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string persona_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFJoinChatChannel.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->persona_name(), output);
  }

  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFJoinChatChannel.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_name(), output);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFJoinChatChannel.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional .ChatChannelType_t channel_type = 4 [default = ChatChannelType_Regional];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->channel_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFJoinChatChannel)
}

::google::protobuf::uint8* CMsgTFJoinChatChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFJoinChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string persona_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFJoinChatChannel.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->persona_name(), target);
  }

  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFJoinChatChannel.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_name(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFJoinChatChannel.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional .ChatChannelType_t channel_type = 4 [default = ChatChannelType_Regional];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->channel_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFJoinChatChannel)
  return target;
}

size_t CMsgTFJoinChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFJoinChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string persona_name = 1;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional string channel_name = 2;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional .ChatChannelType_t channel_type = 4 [default = ChatChannelType_Regional];
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFJoinChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFJoinChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFJoinChatChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFJoinChatChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFJoinChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFJoinChatChannel)
    MergeFrom(*source);
  }
}

void CMsgTFJoinChatChannel::MergeFrom(const CMsgTFJoinChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFJoinChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_channel_name();
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000008u) {
      channel_type_ = from.channel_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFJoinChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFJoinChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFJoinChatChannel::CopyFrom(const CMsgTFJoinChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFJoinChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFJoinChatChannel::IsInitialized() const {
  return true;
}

void CMsgTFJoinChatChannel::Swap(CMsgTFJoinChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFJoinChatChannel::InternalSwap(CMsgTFJoinChatChannel* other) {
  using std::swap;
  persona_name_.Swap(&other->persona_name_);
  channel_name_.Swap(&other->channel_name_);
  password_.Swap(&other->password_);
  swap(channel_type_, other->channel_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFJoinChatChannel::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFLeaveChatChannel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFLeaveChatChannel::kChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFLeaveChatChannel::CMsgTFLeaveChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFLeaveChatChannel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFLeaveChatChannel)
}
CMsgTFLeaveChatChannel::CMsgTFLeaveChatChannel(const CMsgTFLeaveChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgTFLeaveChatChannel)
}

void CMsgTFLeaveChatChannel::SharedCtor() {
  _cached_size_ = 0;
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgTFLeaveChatChannel::~CMsgTFLeaveChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgTFLeaveChatChannel)
  SharedDtor();
}

void CMsgTFLeaveChatChannel::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTFLeaveChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFLeaveChatChannel::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFLeaveChatChannel& CMsgTFLeaveChatChannel::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFLeaveChatChannel();
  return *internal_default_instance();
}

CMsgTFLeaveChatChannel* CMsgTFLeaveChatChannel::New(::google::protobuf::Arena* arena) const {
  CMsgTFLeaveChatChannel* n = new CMsgTFLeaveChatChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFLeaveChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFLeaveChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*channel_name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFLeaveChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFLeaveChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgTFLeaveChatChannel.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFLeaveChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFLeaveChatChannel)
  return false;
#undef DO_
}

void CMsgTFLeaveChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFLeaveChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFLeaveChatChannel.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFLeaveChatChannel)
}

::google::protobuf::uint8* CMsgTFLeaveChatChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFLeaveChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFLeaveChatChannel.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFLeaveChatChannel)
  return target;
}

size_t CMsgTFLeaveChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFLeaveChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string channel_name = 1;
  if (has_channel_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFLeaveChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFLeaveChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFLeaveChatChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFLeaveChatChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFLeaveChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFLeaveChatChannel)
    MergeFrom(*source);
  }
}

void CMsgTFLeaveChatChannel::MergeFrom(const CMsgTFLeaveChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFLeaveChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel_name()) {
    set_has_channel_name();
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
}

void CMsgTFLeaveChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFLeaveChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFLeaveChatChannel::CopyFrom(const CMsgTFLeaveChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFLeaveChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFLeaveChatChannel::IsInitialized() const {
  return true;
}

void CMsgTFLeaveChatChannel::Swap(CMsgTFLeaveChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFLeaveChatChannel::InternalSwap(CMsgTFLeaveChatChannel* other) {
  using std::swap;
  channel_name_.Swap(&other->channel_name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFLeaveChatChannel::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFJoinChatChannelResponse_ChatMember::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFJoinChatChannelResponse_ChatMember::kSteamIdFieldNumber;
const int CMsgTFJoinChatChannelResponse_ChatMember::kPersonaNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFJoinChatChannelResponse_ChatMember::CMsgTFJoinChatChannelResponse_ChatMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFJoinChatChannelResponse_ChatMember();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFJoinChatChannelResponse.ChatMember)
}
CMsgTFJoinChatChannelResponse_ChatMember::CMsgTFJoinChatChannelResponse_ChatMember(const CMsgTFJoinChatChannelResponse_ChatMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFJoinChatChannelResponse.ChatMember)
}

void CMsgTFJoinChatChannelResponse_ChatMember::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = GOOGLE_ULONGLONG(0);
}

CMsgTFJoinChatChannelResponse_ChatMember::~CMsgTFJoinChatChannelResponse_ChatMember() {
  // @@protoc_insertion_point(destructor:CMsgTFJoinChatChannelResponse.ChatMember)
  SharedDtor();
}

void CMsgTFJoinChatChannelResponse_ChatMember::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTFJoinChatChannelResponse_ChatMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFJoinChatChannelResponse_ChatMember::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFJoinChatChannelResponse_ChatMember& CMsgTFJoinChatChannelResponse_ChatMember::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFJoinChatChannelResponse_ChatMember();
  return *internal_default_instance();
}

CMsgTFJoinChatChannelResponse_ChatMember* CMsgTFJoinChatChannelResponse_ChatMember::New(::google::protobuf::Arena* arena) const {
  CMsgTFJoinChatChannelResponse_ChatMember* n = new CMsgTFJoinChatChannelResponse_ChatMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFJoinChatChannelResponse_ChatMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFJoinChatChannelResponse.ChatMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*persona_name_.UnsafeRawStringPointer())->clear();
  }
  steam_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFJoinChatChannelResponse_ChatMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFJoinChatChannelResponse.ChatMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgTFJoinChatChannelResponse.ChatMember.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFJoinChatChannelResponse.ChatMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFJoinChatChannelResponse.ChatMember)
  return false;
#undef DO_
}

void CMsgTFJoinChatChannelResponse_ChatMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFJoinChatChannelResponse.ChatMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFJoinChatChannelResponse.ChatMember.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFJoinChatChannelResponse.ChatMember)
}

::google::protobuf::uint8* CMsgTFJoinChatChannelResponse_ChatMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFJoinChatChannelResponse.ChatMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFJoinChatChannelResponse.ChatMember.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFJoinChatChannelResponse.ChatMember)
  return target;
}

size_t CMsgTFJoinChatChannelResponse_ChatMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFJoinChatChannelResponse.ChatMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFJoinChatChannelResponse_ChatMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFJoinChatChannelResponse.ChatMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFJoinChatChannelResponse_ChatMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFJoinChatChannelResponse_ChatMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFJoinChatChannelResponse.ChatMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFJoinChatChannelResponse.ChatMember)
    MergeFrom(*source);
  }
}

void CMsgTFJoinChatChannelResponse_ChatMember::MergeFrom(const CMsgTFJoinChatChannelResponse_ChatMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFJoinChatChannelResponse.ChatMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFJoinChatChannelResponse_ChatMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFJoinChatChannelResponse.ChatMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFJoinChatChannelResponse_ChatMember::CopyFrom(const CMsgTFJoinChatChannelResponse_ChatMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFJoinChatChannelResponse.ChatMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFJoinChatChannelResponse_ChatMember::IsInitialized() const {
  return true;
}

void CMsgTFJoinChatChannelResponse_ChatMember::Swap(CMsgTFJoinChatChannelResponse_ChatMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFJoinChatChannelResponse_ChatMember::InternalSwap(CMsgTFJoinChatChannelResponse_ChatMember* other) {
  using std::swap;
  persona_name_.Swap(&other->persona_name_);
  swap(steam_id_, other->steam_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFJoinChatChannelResponse_ChatMember::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFJoinChatChannelResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFJoinChatChannelResponse::kResponseFieldNumber;
const int CMsgTFJoinChatChannelResponse::kChannelNameFieldNumber;
const int CMsgTFJoinChatChannelResponse::kChannelIdFieldNumber;
const int CMsgTFJoinChatChannelResponse::kMaxMembersFieldNumber;
const int CMsgTFJoinChatChannelResponse::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFJoinChatChannelResponse::CMsgTFJoinChatChannelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFJoinChatChannelResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFJoinChatChannelResponse)
}
CMsgTFJoinChatChannelResponse::CMsgTFJoinChatChannelResponse(const CMsgTFJoinChatChannelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  ::memcpy(&response_, &from.response_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&response_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFJoinChatChannelResponse)
}

void CMsgTFJoinChatChannelResponse::SharedCtor() {
  _cached_size_ = 0;
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&response_)) + sizeof(channel_id_));
}

CMsgTFJoinChatChannelResponse::~CMsgTFJoinChatChannelResponse() {
  // @@protoc_insertion_point(destructor:CMsgTFJoinChatChannelResponse)
  SharedDtor();
}

void CMsgTFJoinChatChannelResponse::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTFJoinChatChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFJoinChatChannelResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFJoinChatChannelResponse& CMsgTFJoinChatChannelResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFJoinChatChannelResponse();
  return *internal_default_instance();
}

CMsgTFJoinChatChannelResponse* CMsgTFJoinChatChannelResponse::New(::google::protobuf::Arena* arena) const {
  CMsgTFJoinChatChannelResponse* n = new CMsgTFJoinChatChannelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFJoinChatChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFJoinChatChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*channel_name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&response_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_id_) -
        reinterpret_cast<char*>(&response_)) + sizeof(channel_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFJoinChatChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFJoinChatChannelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_response();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string channel_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgTFJoinChatChannelResponse.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 channel_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max_members();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgTFJoinChatChannelResponse.ChatMember members = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFJoinChatChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFJoinChatChannelResponse)
  return false;
#undef DO_
}

void CMsgTFJoinChatChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFJoinChatChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response(), output);
  }

  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFJoinChatChannelResponse.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_name(), output);
  }

  // optional fixed64 channel_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->channel_id(), output);
  }

  // optional uint32 max_members = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_members(), output);
  }

  // repeated .CMsgTFJoinChatChannelResponse.ChatMember members = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->members(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFJoinChatChannelResponse)
}

::google::protobuf::uint8* CMsgTFJoinChatChannelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFJoinChatChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response(), target);
  }

  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFJoinChatChannelResponse.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_name(), target);
  }

  // optional fixed64 channel_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->channel_id(), target);
  }

  // optional uint32 max_members = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_members(), target);
  }

  // repeated .CMsgTFJoinChatChannelResponse.ChatMember members = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->members(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFJoinChatChannelResponse)
  return target;
}

size_t CMsgTFJoinChatChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFJoinChatChannelResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgTFJoinChatChannelResponse.ChatMember members = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string channel_name = 2;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional uint32 response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->response());
    }

    // optional uint32 max_members = 4;
    if (has_max_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_members());
    }

    // optional fixed64 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFJoinChatChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFJoinChatChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFJoinChatChannelResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFJoinChatChannelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFJoinChatChannelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFJoinChatChannelResponse)
    MergeFrom(*source);
  }
}

void CMsgTFJoinChatChannelResponse::MergeFrom(const CMsgTFJoinChatChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFJoinChatChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_channel_name();
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000008u) {
      channel_id_ = from.channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFJoinChatChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFJoinChatChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFJoinChatChannelResponse::CopyFrom(const CMsgTFJoinChatChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFJoinChatChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFJoinChatChannelResponse::IsInitialized() const {
  return true;
}

void CMsgTFJoinChatChannelResponse::Swap(CMsgTFJoinChatChannelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFJoinChatChannelResponse::InternalSwap(CMsgTFJoinChatChannelResponse* other) {
  using std::swap;
  members_.InternalSwap(&other->members_);
  channel_name_.Swap(&other->channel_name_);
  swap(response_, other->response_);
  swap(max_members_, other->max_members_);
  swap(channel_id_, other->channel_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFJoinChatChannelResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFOtherJoinedChatChannel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFOtherJoinedChatChannel::kChannelIdFieldNumber;
const int CMsgTFOtherJoinedChatChannel::kPersonaNameFieldNumber;
const int CMsgTFOtherJoinedChatChannel::kSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFOtherJoinedChatChannel::CMsgTFOtherJoinedChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFOtherJoinedChatChannel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFOtherJoinedChatChannel)
}
CMsgTFOtherJoinedChatChannel::CMsgTFOtherJoinedChatChannel(const CMsgTFOtherJoinedChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steam_id_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(steam_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFOtherJoinedChatChannel)
}

void CMsgTFOtherJoinedChatChannel::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steam_id_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(steam_id_));
}

CMsgTFOtherJoinedChatChannel::~CMsgTFOtherJoinedChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgTFOtherJoinedChatChannel)
  SharedDtor();
}

void CMsgTFOtherJoinedChatChannel::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTFOtherJoinedChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFOtherJoinedChatChannel::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFOtherJoinedChatChannel& CMsgTFOtherJoinedChatChannel::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFOtherJoinedChatChannel();
  return *internal_default_instance();
}

CMsgTFOtherJoinedChatChannel* CMsgTFOtherJoinedChatChannel::New(::google::protobuf::Arena* arena) const {
  CMsgTFOtherJoinedChatChannel* n = new CMsgTFOtherJoinedChatChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFOtherJoinedChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFOtherJoinedChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*persona_name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steam_id_) -
        reinterpret_cast<char*>(&channel_id_)) + sizeof(steam_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFOtherJoinedChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFOtherJoinedChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgTFOtherJoinedChatChannel.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFOtherJoinedChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFOtherJoinedChatChannel)
  return false;
#undef DO_
}

void CMsgTFOtherJoinedChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFOtherJoinedChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFOtherJoinedChatChannel.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional fixed64 steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFOtherJoinedChatChannel)
}

::google::protobuf::uint8* CMsgTFOtherJoinedChatChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFOtherJoinedChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFOtherJoinedChatChannel.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional fixed64 steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFOtherJoinedChatChannel)
  return target;
}

size_t CMsgTFOtherJoinedChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFOtherJoinedChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id = 3;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFOtherJoinedChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFOtherJoinedChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFOtherJoinedChatChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFOtherJoinedChatChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFOtherJoinedChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFOtherJoinedChatChannel)
    MergeFrom(*source);
  }
}

void CMsgTFOtherJoinedChatChannel::MergeFrom(const CMsgTFOtherJoinedChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFOtherJoinedChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFOtherJoinedChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFOtherJoinedChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFOtherJoinedChatChannel::CopyFrom(const CMsgTFOtherJoinedChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFOtherJoinedChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFOtherJoinedChatChannel::IsInitialized() const {
  return true;
}

void CMsgTFOtherJoinedChatChannel::Swap(CMsgTFOtherJoinedChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFOtherJoinedChatChannel::InternalSwap(CMsgTFOtherJoinedChatChannel* other) {
  using std::swap;
  persona_name_.Swap(&other->persona_name_);
  swap(channel_id_, other->channel_id_);
  swap(steam_id_, other->steam_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFOtherJoinedChatChannel::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFOtherLeftChatChannel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFOtherLeftChatChannel::kChannelIdFieldNumber;
const int CMsgTFOtherLeftChatChannel::kSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFOtherLeftChatChannel::CMsgTFOtherLeftChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFOtherLeftChatChannel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFOtherLeftChatChannel)
}
CMsgTFOtherLeftChatChannel::CMsgTFOtherLeftChatChannel(const CMsgTFOtherLeftChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steam_id_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(steam_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFOtherLeftChatChannel)
}

void CMsgTFOtherLeftChatChannel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steam_id_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(steam_id_));
}

CMsgTFOtherLeftChatChannel::~CMsgTFOtherLeftChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgTFOtherLeftChatChannel)
  SharedDtor();
}

void CMsgTFOtherLeftChatChannel::SharedDtor() {
}

void CMsgTFOtherLeftChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFOtherLeftChatChannel::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFOtherLeftChatChannel& CMsgTFOtherLeftChatChannel::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFOtherLeftChatChannel();
  return *internal_default_instance();
}

CMsgTFOtherLeftChatChannel* CMsgTFOtherLeftChatChannel::New(::google::protobuf::Arena* arena) const {
  CMsgTFOtherLeftChatChannel* n = new CMsgTFOtherLeftChatChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFOtherLeftChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFOtherLeftChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steam_id_) -
        reinterpret_cast<char*>(&channel_id_)) + sizeof(steam_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFOtherLeftChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFOtherLeftChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFOtherLeftChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFOtherLeftChatChannel)
  return false;
#undef DO_
}

void CMsgTFOtherLeftChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFOtherLeftChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFOtherLeftChatChannel)
}

::google::protobuf::uint8* CMsgTFOtherLeftChatChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFOtherLeftChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFOtherLeftChatChannel)
  return target;
}

size_t CMsgTFOtherLeftChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFOtherLeftChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFOtherLeftChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFOtherLeftChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFOtherLeftChatChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFOtherLeftChatChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFOtherLeftChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFOtherLeftChatChannel)
    MergeFrom(*source);
  }
}

void CMsgTFOtherLeftChatChannel::MergeFrom(const CMsgTFOtherLeftChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFOtherLeftChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFOtherLeftChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFOtherLeftChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFOtherLeftChatChannel::CopyFrom(const CMsgTFOtherLeftChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFOtherLeftChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFOtherLeftChatChannel::IsInitialized() const {
  return true;
}

void CMsgTFOtherLeftChatChannel::Swap(CMsgTFOtherLeftChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFOtherLeftChatChannel::InternalSwap(CMsgTFOtherLeftChatChannel* other) {
  using std::swap;
  swap(channel_id_, other->channel_id_);
  swap(steam_id_, other->steam_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFOtherLeftChatChannel::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFRequestDefaultChatChannel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFRequestDefaultChatChannel::CMsgTFRequestDefaultChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFRequestDefaultChatChannel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFRequestDefaultChatChannel)
}
CMsgTFRequestDefaultChatChannel::CMsgTFRequestDefaultChatChannel(const CMsgTFRequestDefaultChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFRequestDefaultChatChannel)
}

void CMsgTFRequestDefaultChatChannel::SharedCtor() {
  _cached_size_ = 0;
}

CMsgTFRequestDefaultChatChannel::~CMsgTFRequestDefaultChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgTFRequestDefaultChatChannel)
  SharedDtor();
}

void CMsgTFRequestDefaultChatChannel::SharedDtor() {
}

void CMsgTFRequestDefaultChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFRequestDefaultChatChannel::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFRequestDefaultChatChannel& CMsgTFRequestDefaultChatChannel::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFRequestDefaultChatChannel();
  return *internal_default_instance();
}

CMsgTFRequestDefaultChatChannel* CMsgTFRequestDefaultChatChannel::New(::google::protobuf::Arena* arena) const {
  CMsgTFRequestDefaultChatChannel* n = new CMsgTFRequestDefaultChatChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFRequestDefaultChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFRequestDefaultChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFRequestDefaultChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFRequestDefaultChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFRequestDefaultChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFRequestDefaultChatChannel)
  return false;
#undef DO_
}

void CMsgTFRequestDefaultChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFRequestDefaultChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFRequestDefaultChatChannel)
}

::google::protobuf::uint8* CMsgTFRequestDefaultChatChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFRequestDefaultChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFRequestDefaultChatChannel)
  return target;
}

size_t CMsgTFRequestDefaultChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFRequestDefaultChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFRequestDefaultChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFRequestDefaultChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFRequestDefaultChatChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFRequestDefaultChatChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFRequestDefaultChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFRequestDefaultChatChannel)
    MergeFrom(*source);
  }
}

void CMsgTFRequestDefaultChatChannel::MergeFrom(const CMsgTFRequestDefaultChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFRequestDefaultChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgTFRequestDefaultChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFRequestDefaultChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFRequestDefaultChatChannel::CopyFrom(const CMsgTFRequestDefaultChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFRequestDefaultChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFRequestDefaultChatChannel::IsInitialized() const {
  return true;
}

void CMsgTFRequestDefaultChatChannel::Swap(CMsgTFRequestDefaultChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFRequestDefaultChatChannel::InternalSwap(CMsgTFRequestDefaultChatChannel* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFRequestDefaultChatChannel::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFRequestDefaultChatChannelResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFRequestDefaultChatChannelResponse::kChannelNameFieldNumber;
const int CMsgTFRequestDefaultChatChannelResponse::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFRequestDefaultChatChannelResponse::CMsgTFRequestDefaultChatChannelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFRequestDefaultChatChannelResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFRequestDefaultChatChannelResponse)
}
CMsgTFRequestDefaultChatChannelResponse::CMsgTFRequestDefaultChatChannelResponse(const CMsgTFRequestDefaultChatChannelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFRequestDefaultChatChannelResponse)
}

void CMsgTFRequestDefaultChatChannelResponse::SharedCtor() {
  _cached_size_ = 0;
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = GOOGLE_ULONGLONG(0);
}

CMsgTFRequestDefaultChatChannelResponse::~CMsgTFRequestDefaultChatChannelResponse() {
  // @@protoc_insertion_point(destructor:CMsgTFRequestDefaultChatChannelResponse)
  SharedDtor();
}

void CMsgTFRequestDefaultChatChannelResponse::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTFRequestDefaultChatChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFRequestDefaultChatChannelResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFRequestDefaultChatChannelResponse& CMsgTFRequestDefaultChatChannelResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFRequestDefaultChatChannelResponse();
  return *internal_default_instance();
}

CMsgTFRequestDefaultChatChannelResponse* CMsgTFRequestDefaultChatChannelResponse::New(::google::protobuf::Arena* arena) const {
  CMsgTFRequestDefaultChatChannelResponse* n = new CMsgTFRequestDefaultChatChannelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFRequestDefaultChatChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFRequestDefaultChatChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*channel_name_.UnsafeRawStringPointer())->clear();
  }
  channel_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFRequestDefaultChatChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFRequestDefaultChatChannelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgTFRequestDefaultChatChannelResponse.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 channel_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFRequestDefaultChatChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFRequestDefaultChatChannelResponse)
  return false;
#undef DO_
}

void CMsgTFRequestDefaultChatChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFRequestDefaultChatChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFRequestDefaultChatChannelResponse.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // optional fixed64 channel_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->channel_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFRequestDefaultChatChannelResponse)
}

::google::protobuf::uint8* CMsgTFRequestDefaultChatChannelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFRequestDefaultChatChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFRequestDefaultChatChannelResponse.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // optional fixed64 channel_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->channel_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFRequestDefaultChatChannelResponse)
  return target;
}

size_t CMsgTFRequestDefaultChatChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFRequestDefaultChatChannelResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string channel_name = 1;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional fixed64 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFRequestDefaultChatChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFRequestDefaultChatChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFRequestDefaultChatChannelResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFRequestDefaultChatChannelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFRequestDefaultChatChannelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFRequestDefaultChatChannelResponse)
    MergeFrom(*source);
  }
}

void CMsgTFRequestDefaultChatChannelResponse::MergeFrom(const CMsgTFRequestDefaultChatChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFRequestDefaultChatChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_channel_name();
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_id_ = from.channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFRequestDefaultChatChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFRequestDefaultChatChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFRequestDefaultChatChannelResponse::CopyFrom(const CMsgTFRequestDefaultChatChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFRequestDefaultChatChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFRequestDefaultChatChannelResponse::IsInitialized() const {
  return true;
}

void CMsgTFRequestDefaultChatChannelResponse::Swap(CMsgTFRequestDefaultChatChannelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFRequestDefaultChatChannelResponse::InternalSwap(CMsgTFRequestDefaultChatChannelResponse* other) {
  using std::swap;
  channel_name_.Swap(&other->channel_name_);
  swap(channel_id_, other->channel_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFRequestDefaultChatChannelResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFRequestChatChannelList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFRequestChatChannelList::CMsgTFRequestChatChannelList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFRequestChatChannelList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFRequestChatChannelList)
}
CMsgTFRequestChatChannelList::CMsgTFRequestChatChannelList(const CMsgTFRequestChatChannelList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFRequestChatChannelList)
}

void CMsgTFRequestChatChannelList::SharedCtor() {
  _cached_size_ = 0;
}

CMsgTFRequestChatChannelList::~CMsgTFRequestChatChannelList() {
  // @@protoc_insertion_point(destructor:CMsgTFRequestChatChannelList)
  SharedDtor();
}

void CMsgTFRequestChatChannelList::SharedDtor() {
}

void CMsgTFRequestChatChannelList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFRequestChatChannelList::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFRequestChatChannelList& CMsgTFRequestChatChannelList::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFRequestChatChannelList();
  return *internal_default_instance();
}

CMsgTFRequestChatChannelList* CMsgTFRequestChatChannelList::New(::google::protobuf::Arena* arena) const {
  CMsgTFRequestChatChannelList* n = new CMsgTFRequestChatChannelList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFRequestChatChannelList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFRequestChatChannelList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFRequestChatChannelList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFRequestChatChannelList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFRequestChatChannelList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFRequestChatChannelList)
  return false;
#undef DO_
}

void CMsgTFRequestChatChannelList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFRequestChatChannelList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFRequestChatChannelList)
}

::google::protobuf::uint8* CMsgTFRequestChatChannelList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFRequestChatChannelList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFRequestChatChannelList)
  return target;
}

size_t CMsgTFRequestChatChannelList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFRequestChatChannelList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFRequestChatChannelList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFRequestChatChannelList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFRequestChatChannelList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFRequestChatChannelList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFRequestChatChannelList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFRequestChatChannelList)
    MergeFrom(*source);
  }
}

void CMsgTFRequestChatChannelList::MergeFrom(const CMsgTFRequestChatChannelList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFRequestChatChannelList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgTFRequestChatChannelList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFRequestChatChannelList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFRequestChatChannelList::CopyFrom(const CMsgTFRequestChatChannelList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFRequestChatChannelList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFRequestChatChannelList::IsInitialized() const {
  return true;
}

void CMsgTFRequestChatChannelList::Swap(CMsgTFRequestChatChannelList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFRequestChatChannelList::InternalSwap(CMsgTFRequestChatChannelList* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFRequestChatChannelList::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFRequestChatChannelListResponse_ChatChannel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFRequestChatChannelListResponse_ChatChannel::kChannelNameFieldNumber;
const int CMsgTFRequestChatChannelListResponse_ChatChannel::kNumMembersFieldNumber;
const int CMsgTFRequestChatChannelListResponse_ChatChannel::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFRequestChatChannelListResponse_ChatChannel::CMsgTFRequestChatChannelListResponse_ChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFRequestChatChannelListResponse_ChatChannel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFRequestChatChannelListResponse.ChatChannel)
}
CMsgTFRequestChatChannelListResponse_ChatChannel::CMsgTFRequestChatChannelListResponse_ChatChannel(const CMsgTFRequestChatChannelListResponse_ChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  ::memcpy(&num_members_, &from.num_members_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_type_) -
    reinterpret_cast<char*>(&num_members_)) + sizeof(channel_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFRequestChatChannelListResponse.ChatChannel)
}

void CMsgTFRequestChatChannelListResponse_ChatChannel::SharedCtor() {
  _cached_size_ = 0;
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_members_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_type_) -
      reinterpret_cast<char*>(&num_members_)) + sizeof(channel_type_));
}

CMsgTFRequestChatChannelListResponse_ChatChannel::~CMsgTFRequestChatChannelListResponse_ChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgTFRequestChatChannelListResponse.ChatChannel)
  SharedDtor();
}

void CMsgTFRequestChatChannelListResponse_ChatChannel::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTFRequestChatChannelListResponse_ChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFRequestChatChannelListResponse_ChatChannel::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFRequestChatChannelListResponse_ChatChannel& CMsgTFRequestChatChannelListResponse_ChatChannel::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFRequestChatChannelListResponse_ChatChannel();
  return *internal_default_instance();
}

CMsgTFRequestChatChannelListResponse_ChatChannel* CMsgTFRequestChatChannelListResponse_ChatChannel::New(::google::protobuf::Arena* arena) const {
  CMsgTFRequestChatChannelListResponse_ChatChannel* n = new CMsgTFRequestChatChannelListResponse_ChatChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFRequestChatChannelListResponse_ChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFRequestChatChannelListResponse.ChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*channel_name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&num_members_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_type_) -
        reinterpret_cast<char*>(&num_members_)) + sizeof(channel_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFRequestChatChannelListResponse_ChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFRequestChatChannelListResponse.ChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgTFRequestChatChannelListResponse.ChatChannel.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_members();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ChatChannelType_t channel_type = 3 [default = ChatChannelType_Regional];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::ChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFRequestChatChannelListResponse.ChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFRequestChatChannelListResponse.ChatChannel)
  return false;
#undef DO_
}

void CMsgTFRequestChatChannelListResponse_ChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFRequestChatChannelListResponse.ChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFRequestChatChannelListResponse.ChatChannel.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // optional uint32 num_members = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_members(), output);
  }

  // optional .ChatChannelType_t channel_type = 3 [default = ChatChannelType_Regional];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->channel_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFRequestChatChannelListResponse.ChatChannel)
}

::google::protobuf::uint8* CMsgTFRequestChatChannelListResponse_ChatChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFRequestChatChannelListResponse.ChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgTFRequestChatChannelListResponse.ChatChannel.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // optional uint32 num_members = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_members(), target);
  }

  // optional .ChatChannelType_t channel_type = 3 [default = ChatChannelType_Regional];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->channel_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFRequestChatChannelListResponse.ChatChannel)
  return target;
}

size_t CMsgTFRequestChatChannelListResponse_ChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFRequestChatChannelListResponse.ChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string channel_name = 1;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional uint32 num_members = 2;
    if (has_num_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_members());
    }

    // optional .ChatChannelType_t channel_type = 3 [default = ChatChannelType_Regional];
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFRequestChatChannelListResponse_ChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFRequestChatChannelListResponse.ChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFRequestChatChannelListResponse_ChatChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFRequestChatChannelListResponse_ChatChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFRequestChatChannelListResponse.ChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFRequestChatChannelListResponse.ChatChannel)
    MergeFrom(*source);
  }
}

void CMsgTFRequestChatChannelListResponse_ChatChannel::MergeFrom(const CMsgTFRequestChatChannelListResponse_ChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFRequestChatChannelListResponse.ChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_channel_name();
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_members_ = from.num_members_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_type_ = from.channel_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFRequestChatChannelListResponse_ChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFRequestChatChannelListResponse.ChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFRequestChatChannelListResponse_ChatChannel::CopyFrom(const CMsgTFRequestChatChannelListResponse_ChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFRequestChatChannelListResponse.ChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFRequestChatChannelListResponse_ChatChannel::IsInitialized() const {
  return true;
}

void CMsgTFRequestChatChannelListResponse_ChatChannel::Swap(CMsgTFRequestChatChannelListResponse_ChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFRequestChatChannelListResponse_ChatChannel::InternalSwap(CMsgTFRequestChatChannelListResponse_ChatChannel* other) {
  using std::swap;
  channel_name_.Swap(&other->channel_name_);
  swap(num_members_, other->num_members_);
  swap(channel_type_, other->channel_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFRequestChatChannelListResponse_ChatChannel::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFRequestChatChannelListResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFRequestChatChannelListResponse::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFRequestChatChannelListResponse::CMsgTFRequestChatChannelListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFRequestChatChannelListResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFRequestChatChannelListResponse)
}
CMsgTFRequestChatChannelListResponse::CMsgTFRequestChatChannelListResponse(const CMsgTFRequestChatChannelListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFRequestChatChannelListResponse)
}

void CMsgTFRequestChatChannelListResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgTFRequestChatChannelListResponse::~CMsgTFRequestChatChannelListResponse() {
  // @@protoc_insertion_point(destructor:CMsgTFRequestChatChannelListResponse)
  SharedDtor();
}

void CMsgTFRequestChatChannelListResponse::SharedDtor() {
}

void CMsgTFRequestChatChannelListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFRequestChatChannelListResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFRequestChatChannelListResponse& CMsgTFRequestChatChannelListResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFRequestChatChannelListResponse();
  return *internal_default_instance();
}

CMsgTFRequestChatChannelListResponse* CMsgTFRequestChatChannelListResponse::New(::google::protobuf::Arena* arena) const {
  CMsgTFRequestChatChannelListResponse* n = new CMsgTFRequestChatChannelListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFRequestChatChannelListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFRequestChatChannelListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFRequestChatChannelListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFRequestChatChannelListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgTFRequestChatChannelListResponse.ChatChannel channels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_channels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFRequestChatChannelListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFRequestChatChannelListResponse)
  return false;
#undef DO_
}

void CMsgTFRequestChatChannelListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFRequestChatChannelListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgTFRequestChatChannelListResponse.ChatChannel channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channels(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFRequestChatChannelListResponse)
}

::google::protobuf::uint8* CMsgTFRequestChatChannelListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFRequestChatChannelListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgTFRequestChatChannelListResponse.ChatChannel channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->channels(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFRequestChatChannelListResponse)
  return target;
}

size_t CMsgTFRequestChatChannelListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFRequestChatChannelListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgTFRequestChatChannelListResponse.ChatChannel channels = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->channels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channels(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFRequestChatChannelListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFRequestChatChannelListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFRequestChatChannelListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFRequestChatChannelListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFRequestChatChannelListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFRequestChatChannelListResponse)
    MergeFrom(*source);
  }
}

void CMsgTFRequestChatChannelListResponse::MergeFrom(const CMsgTFRequestChatChannelListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFRequestChatChannelListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void CMsgTFRequestChatChannelListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFRequestChatChannelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFRequestChatChannelListResponse::CopyFrom(const CMsgTFRequestChatChannelListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFRequestChatChannelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFRequestChatChannelListResponse::IsInitialized() const {
  return true;
}

void CMsgTFRequestChatChannelListResponse::Swap(CMsgTFRequestChatChannelListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFRequestChatChannelListResponse::InternalSwap(CMsgTFRequestChatChannelListResponse* other) {
  using std::swap;
  channels_.InternalSwap(&other->channels_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFRequestChatChannelListResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameServerMatchmakingStatus_Player::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameServerMatchmakingStatus_Player::kSteamIdFieldNumber;
const int CMsgGameServerMatchmakingStatus_Player::kConnectStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameServerMatchmakingStatus_Player::CMsgGameServerMatchmakingStatus_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGameServerMatchmakingStatus_Player();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameServerMatchmakingStatus.Player)
}
CMsgGameServerMatchmakingStatus_Player::CMsgGameServerMatchmakingStatus_Player(const CMsgGameServerMatchmakingStatus_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&connect_state_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(connect_state_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerMatchmakingStatus.Player)
}

void CMsgGameServerMatchmakingStatus_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connect_state_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(connect_state_));
}

CMsgGameServerMatchmakingStatus_Player::~CMsgGameServerMatchmakingStatus_Player() {
  // @@protoc_insertion_point(destructor:CMsgGameServerMatchmakingStatus.Player)
  SharedDtor();
}

void CMsgGameServerMatchmakingStatus_Player::SharedDtor() {
}

void CMsgGameServerMatchmakingStatus_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerMatchmakingStatus_Player::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameServerMatchmakingStatus_Player& CMsgGameServerMatchmakingStatus_Player::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGameServerMatchmakingStatus_Player();
  return *internal_default_instance();
}

CMsgGameServerMatchmakingStatus_Player* CMsgGameServerMatchmakingStatus_Player::New(::google::protobuf::Arena* arena) const {
  CMsgGameServerMatchmakingStatus_Player* n = new CMsgGameServerMatchmakingStatus_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameServerMatchmakingStatus_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerMatchmakingStatus.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connect_state_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(connect_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameServerMatchmakingStatus_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameServerMatchmakingStatus.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGameServerMatchmakingStatus.PlayerConnectState connect_state = 2 [default = INVALID];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGameServerMatchmakingStatus_PlayerConnectState_IsValid(value)) {
            set_connect_state(static_cast< ::CMsgGameServerMatchmakingStatus_PlayerConnectState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameServerMatchmakingStatus.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameServerMatchmakingStatus.Player)
  return false;
#undef DO_
}

void CMsgGameServerMatchmakingStatus_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameServerMatchmakingStatus.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional .CMsgGameServerMatchmakingStatus.PlayerConnectState connect_state = 2 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connect_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameServerMatchmakingStatus.Player)
}

::google::protobuf::uint8* CMsgGameServerMatchmakingStatus_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerMatchmakingStatus.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional .CMsgGameServerMatchmakingStatus.PlayerConnectState connect_state = 2 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->connect_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerMatchmakingStatus.Player)
  return target;
}

size_t CMsgGameServerMatchmakingStatus_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerMatchmakingStatus.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional .CMsgGameServerMatchmakingStatus.PlayerConnectState connect_state = 2 [default = INVALID];
    if (has_connect_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connect_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerMatchmakingStatus_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerMatchmakingStatus.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerMatchmakingStatus_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameServerMatchmakingStatus_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerMatchmakingStatus.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerMatchmakingStatus.Player)
    MergeFrom(*source);
  }
}

void CMsgGameServerMatchmakingStatus_Player::MergeFrom(const CMsgGameServerMatchmakingStatus_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerMatchmakingStatus.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      connect_state_ = from.connect_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameServerMatchmakingStatus_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerMatchmakingStatus.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerMatchmakingStatus_Player::CopyFrom(const CMsgGameServerMatchmakingStatus_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerMatchmakingStatus.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerMatchmakingStatus_Player::IsInitialized() const {
  return true;
}

void CMsgGameServerMatchmakingStatus_Player::Swap(CMsgGameServerMatchmakingStatus_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameServerMatchmakingStatus_Player::InternalSwap(CMsgGameServerMatchmakingStatus_Player* other) {
  using std::swap;
  swap(steam_id_, other->steam_id_);
  swap(connect_state_, other->connect_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameServerMatchmakingStatus_Player::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameServerMatchmakingStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameServerMatchmakingStatus::kServerVersionFieldNumber;
const int CMsgGameServerMatchmakingStatus::kMatchmakingStateFieldNumber;
const int CMsgGameServerMatchmakingStatus::kMatchmakingModeFieldNumber;
const int CMsgGameServerMatchmakingStatus::kMapFieldNumber;
const int CMsgGameServerMatchmakingStatus::kTagsFieldNumber;
const int CMsgGameServerMatchmakingStatus::kBotCountFieldNumber;
const int CMsgGameServerMatchmakingStatus::kNumSpectatorsFieldNumber;
const int CMsgGameServerMatchmakingStatus::kMaxPlayersFieldNumber;
const int CMsgGameServerMatchmakingStatus::kSlotsFreeFieldNumber;
const int CMsgGameServerMatchmakingStatus::kServerRegionFieldNumber;
const int CMsgGameServerMatchmakingStatus::kServerLoadavgFieldNumber;
const int CMsgGameServerMatchmakingStatus::kServerTrustedFieldNumber;
const int CMsgGameServerMatchmakingStatus::kServerDedicatedFieldNumber;
const int CMsgGameServerMatchmakingStatus::kStrictFieldNumber;
const int CMsgGameServerMatchmakingStatus::kPlayersFieldNumber;
const int CMsgGameServerMatchmakingStatus::kGameStateFieldNumber;
const int CMsgGameServerMatchmakingStatus::kEventFieldNumber;
const int CMsgGameServerMatchmakingStatus::kMvmWaveFieldNumber;
const int CMsgGameServerMatchmakingStatus::kMvmCreditsAcquiredFieldNumber;
const int CMsgGameServerMatchmakingStatus::kMvmCreditsDroppedFieldNumber;
const int CMsgGameServerMatchmakingStatus::kMatchGroupFieldNumber;
const int CMsgGameServerMatchmakingStatus::kLobbyMmVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameServerMatchmakingStatus::CMsgGameServerMatchmakingStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGameServerMatchmakingStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameServerMatchmakingStatus)
}
CMsgGameServerMatchmakingStatus::CMsgGameServerMatchmakingStatus(const CMsgGameServerMatchmakingStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map()) {
    map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
  }
  tags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tags()) {
    tags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tags_);
  }
  ::memcpy(&matchmaking_state_, &from.matchmaking_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_group_) -
    reinterpret_cast<char*>(&matchmaking_state_)) + sizeof(match_group_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerMatchmakingStatus)
}

void CMsgGameServerMatchmakingStatus::SharedCtor() {
  _cached_size_ = 0;
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&matchmaking_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lobby_mm_version_) -
      reinterpret_cast<char*>(&matchmaking_state_)) + sizeof(lobby_mm_version_));
  server_version_ = 1225u;
  match_group_ = -1;
}

CMsgGameServerMatchmakingStatus::~CMsgGameServerMatchmakingStatus() {
  // @@protoc_insertion_point(destructor:CMsgGameServerMatchmakingStatus)
  SharedDtor();
}

void CMsgGameServerMatchmakingStatus::SharedDtor() {
  map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tags_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerMatchmakingStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerMatchmakingStatus::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameServerMatchmakingStatus& CMsgGameServerMatchmakingStatus::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGameServerMatchmakingStatus();
  return *internal_default_instance();
}

CMsgGameServerMatchmakingStatus* CMsgGameServerMatchmakingStatus::New(::google::protobuf::Arena* arena) const {
  CMsgGameServerMatchmakingStatus* n = new CMsgGameServerMatchmakingStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameServerMatchmakingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerMatchmakingStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!map_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!tags_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tags_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&matchmaking_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slots_free_) -
        reinterpret_cast<char*>(&matchmaking_state_)) + sizeof(slots_free_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&server_region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mvm_wave_) -
        reinterpret_cast<char*>(&server_region_)) + sizeof(mvm_wave_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&mvm_credits_acquired_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_mm_version_) -
        reinterpret_cast<char*>(&mvm_credits_acquired_)) + sizeof(lobby_mm_version_));
    server_version_ = 1225u;
    match_group_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameServerMatchmakingStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameServerMatchmakingStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ServerMatchmakingState matchmaking_state = 1 [default = ServerMatchmakingState_INVALID];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ServerMatchmakingState_IsValid(value)) {
            set_matchmaking_state(static_cast< ::ServerMatchmakingState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TF_MatchmakingMode matchmaking_mode = 2 [default = TF_Matchmaking_INVALID];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TF_MatchmakingMode_IsValid(value)) {
            set_matchmaking_mode(static_cast< ::TF_MatchmakingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map().data(), static_cast<int>(this->map().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGameServerMatchmakingStatus.map");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags().data(), static_cast<int>(this->tags().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGameServerMatchmakingStatus.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bot_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_bot_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_spectators = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_num_spectators();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_spectators_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_players = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_max_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slots_free = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_slots_free();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slots_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_region = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float server_loadavg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_server_loadavg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_loadavg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool server_trusted = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_server_trusted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_trusted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool server_dedicated = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_server_dedicated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_dedicated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgGameServerMatchmakingStatus.Player players = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TF_GC_GameState game_state = 14 [default = TF_GC_GAMESTATE_STATE_INIT];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TF_GC_GameState_IsValid(value)) {
            set_game_state(static_cast< ::TF_GC_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGameServerMatchmakingStatus.Event event = 15 [default = None];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGameServerMatchmakingStatus_Event_IsValid(value)) {
            set_event(static_cast< ::CMsgGameServerMatchmakingStatus_Event >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                15, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_version = 16 [default = 1225];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_server_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 strict = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_strict();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strict_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mvm_wave = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_mvm_wave();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mvm_wave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mvm_credits_acquired = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_mvm_credits_acquired();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mvm_credits_acquired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mvm_credits_dropped = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_mvm_credits_dropped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mvm_credits_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 match_group = 23 [default = -1];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_match_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &match_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_mm_version = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_lobby_mm_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_mm_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameServerMatchmakingStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameServerMatchmakingStatus)
  return false;
#undef DO_
}

void CMsgGameServerMatchmakingStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameServerMatchmakingStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ServerMatchmakingState matchmaking_state = 1 [default = ServerMatchmakingState_INVALID];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->matchmaking_state(), output);
  }

  // optional .TF_MatchmakingMode matchmaking_mode = 2 [default = TF_Matchmaking_INVALID];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->matchmaking_mode(), output);
  }

  // optional string map = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGameServerMatchmakingStatus.map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->map(), output);
  }

  // optional string tags = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags().data(), static_cast<int>(this->tags().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGameServerMatchmakingStatus.tags");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tags(), output);
  }

  // optional uint32 bot_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bot_count(), output);
  }

  // optional uint32 num_spectators = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_spectators(), output);
  }

  // optional uint32 max_players = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_players(), output);
  }

  // optional uint32 slots_free = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->slots_free(), output);
  }

  // optional uint32 server_region = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->server_region(), output);
  }

  // optional float server_loadavg = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->server_loadavg(), output);
  }

  // optional bool server_trusted = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->server_trusted(), output);
  }

  // optional bool server_dedicated = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->server_dedicated(), output);
  }

  // repeated .CMsgGameServerMatchmakingStatus.Player players = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->players(static_cast<int>(i)), output);
  }

  // optional .TF_GC_GameState game_state = 14 [default = TF_GC_GAMESTATE_STATE_INIT];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->game_state(), output);
  }

  // optional .CMsgGameServerMatchmakingStatus.Event event = 15 [default = None];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->event(), output);
  }

  // optional uint32 server_version = 16 [default = 1225];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->server_version(), output);
  }

  // optional uint32 strict = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->strict(), output);
  }

  // optional uint32 mvm_wave = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->mvm_wave(), output);
  }

  // optional uint32 mvm_credits_acquired = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->mvm_credits_acquired(), output);
  }

  // optional uint32 mvm_credits_dropped = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->mvm_credits_dropped(), output);
  }

  // optional sint32 match_group = 23 [default = -1];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(23, this->match_group(), output);
  }

  // optional uint32 lobby_mm_version = 24;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->lobby_mm_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameServerMatchmakingStatus)
}

::google::protobuf::uint8* CMsgGameServerMatchmakingStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerMatchmakingStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ServerMatchmakingState matchmaking_state = 1 [default = ServerMatchmakingState_INVALID];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->matchmaking_state(), target);
  }

  // optional .TF_MatchmakingMode matchmaking_mode = 2 [default = TF_Matchmaking_INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->matchmaking_mode(), target);
  }

  // optional string map = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGameServerMatchmakingStatus.map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->map(), target);
  }

  // optional string tags = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags().data(), static_cast<int>(this->tags().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGameServerMatchmakingStatus.tags");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tags(), target);
  }

  // optional uint32 bot_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bot_count(), target);
  }

  // optional uint32 num_spectators = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_spectators(), target);
  }

  // optional uint32 max_players = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_players(), target);
  }

  // optional uint32 slots_free = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->slots_free(), target);
  }

  // optional uint32 server_region = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->server_region(), target);
  }

  // optional float server_loadavg = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->server_loadavg(), target);
  }

  // optional bool server_trusted = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->server_trusted(), target);
  }

  // optional bool server_dedicated = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->server_dedicated(), target);
  }

  // repeated .CMsgGameServerMatchmakingStatus.Player players = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->players(static_cast<int>(i)), deterministic, target);
  }

  // optional .TF_GC_GameState game_state = 14 [default = TF_GC_GAMESTATE_STATE_INIT];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->game_state(), target);
  }

  // optional .CMsgGameServerMatchmakingStatus.Event event = 15 [default = None];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->event(), target);
  }

  // optional uint32 server_version = 16 [default = 1225];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->server_version(), target);
  }

  // optional uint32 strict = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->strict(), target);
  }

  // optional uint32 mvm_wave = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->mvm_wave(), target);
  }

  // optional uint32 mvm_credits_acquired = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->mvm_credits_acquired(), target);
  }

  // optional uint32 mvm_credits_dropped = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->mvm_credits_dropped(), target);
  }

  // optional sint32 match_group = 23 [default = -1];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(23, this->match_group(), target);
  }

  // optional uint32 lobby_mm_version = 24;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->lobby_mm_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerMatchmakingStatus)
  return target;
}

size_t CMsgGameServerMatchmakingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerMatchmakingStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGameServerMatchmakingStatus.Player players = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string map = 3;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional string tags = 4;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tags());
    }

    // optional .ServerMatchmakingState matchmaking_state = 1 [default = ServerMatchmakingState_INVALID];
    if (has_matchmaking_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->matchmaking_state());
    }

    // optional .TF_MatchmakingMode matchmaking_mode = 2 [default = TF_Matchmaking_INVALID];
    if (has_matchmaking_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->matchmaking_mode());
    }

    // optional uint32 bot_count = 5;
    if (has_bot_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot_count());
    }

    // optional uint32 num_spectators = 6;
    if (has_num_spectators()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_spectators());
    }

    // optional uint32 max_players = 7;
    if (has_max_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_players());
    }

    // optional uint32 slots_free = 8;
    if (has_slots_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slots_free());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 server_region = 9;
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional float server_loadavg = 10;
    if (has_server_loadavg()) {
      total_size += 1 + 4;
    }

    // optional bool server_trusted = 11;
    if (has_server_trusted()) {
      total_size += 1 + 1;
    }

    // optional bool server_dedicated = 12;
    if (has_server_dedicated()) {
      total_size += 1 + 1;
    }

    // optional .TF_GC_GameState game_state = 14 [default = TF_GC_GAMESTATE_STATE_INIT];
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional .CMsgGameServerMatchmakingStatus.Event event = 15 [default = None];
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

    // optional uint32 strict = 17;
    if (has_strict()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strict());
    }

    // optional uint32 mvm_wave = 18;
    if (has_mvm_wave()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mvm_wave());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional uint32 mvm_credits_acquired = 19;
    if (has_mvm_credits_acquired()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mvm_credits_acquired());
    }

    // optional uint32 mvm_credits_dropped = 20;
    if (has_mvm_credits_dropped()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mvm_credits_dropped());
    }

    // optional uint32 lobby_mm_version = 24;
    if (has_lobby_mm_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_mm_version());
    }

    // optional uint32 server_version = 16 [default = 1225];
    if (has_server_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

    // optional sint32 match_group = 23 [default = -1];
    if (has_match_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->match_group());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerMatchmakingStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerMatchmakingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerMatchmakingStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameServerMatchmakingStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerMatchmakingStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerMatchmakingStatus)
    MergeFrom(*source);
  }
}

void CMsgGameServerMatchmakingStatus::MergeFrom(const CMsgGameServerMatchmakingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerMatchmakingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map();
      map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tags();
      tags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tags_);
    }
    if (cached_has_bits & 0x00000004u) {
      matchmaking_state_ = from.matchmaking_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      matchmaking_mode_ = from.matchmaking_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      bot_count_ = from.bot_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_spectators_ = from.num_spectators_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_players_ = from.max_players_;
    }
    if (cached_has_bits & 0x00000080u) {
      slots_free_ = from.slots_free_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00000200u) {
      server_loadavg_ = from.server_loadavg_;
    }
    if (cached_has_bits & 0x00000400u) {
      server_trusted_ = from.server_trusted_;
    }
    if (cached_has_bits & 0x00000800u) {
      server_dedicated_ = from.server_dedicated_;
    }
    if (cached_has_bits & 0x00001000u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00002000u) {
      event_ = from.event_;
    }
    if (cached_has_bits & 0x00004000u) {
      strict_ = from.strict_;
    }
    if (cached_has_bits & 0x00008000u) {
      mvm_wave_ = from.mvm_wave_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      mvm_credits_acquired_ = from.mvm_credits_acquired_;
    }
    if (cached_has_bits & 0x00020000u) {
      mvm_credits_dropped_ = from.mvm_credits_dropped_;
    }
    if (cached_has_bits & 0x00040000u) {
      lobby_mm_version_ = from.lobby_mm_version_;
    }
    if (cached_has_bits & 0x00080000u) {
      server_version_ = from.server_version_;
    }
    if (cached_has_bits & 0x00100000u) {
      match_group_ = from.match_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameServerMatchmakingStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerMatchmakingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerMatchmakingStatus::CopyFrom(const CMsgGameServerMatchmakingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerMatchmakingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerMatchmakingStatus::IsInitialized() const {
  return true;
}

void CMsgGameServerMatchmakingStatus::Swap(CMsgGameServerMatchmakingStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameServerMatchmakingStatus::InternalSwap(CMsgGameServerMatchmakingStatus* other) {
  using std::swap;
  players_.InternalSwap(&other->players_);
  map_.Swap(&other->map_);
  tags_.Swap(&other->tags_);
  swap(matchmaking_state_, other->matchmaking_state_);
  swap(matchmaking_mode_, other->matchmaking_mode_);
  swap(bot_count_, other->bot_count_);
  swap(num_spectators_, other->num_spectators_);
  swap(max_players_, other->max_players_);
  swap(slots_free_, other->slots_free_);
  swap(server_region_, other->server_region_);
  swap(server_loadavg_, other->server_loadavg_);
  swap(server_trusted_, other->server_trusted_);
  swap(server_dedicated_, other->server_dedicated_);
  swap(game_state_, other->game_state_);
  swap(event_, other->event_);
  swap(strict_, other->strict_);
  swap(mvm_wave_, other->mvm_wave_);
  swap(mvm_credits_acquired_, other->mvm_credits_acquired_);
  swap(mvm_credits_dropped_, other->mvm_credits_dropped_);
  swap(lobby_mm_version_, other->lobby_mm_version_);
  swap(server_version_, other->server_version_);
  swap(match_group_, other->match_group_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameServerMatchmakingStatus::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgMatchmakingProgress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMatchmakingProgress::kAvgWaitTimeNewFieldNumber;
const int CMsgMatchmakingProgress::kAvgWaitTimeJoinLateFieldNumber;
const int CMsgMatchmakingProgress::kYourWaitTimeFieldNumber;
const int CMsgMatchmakingProgress::kMatchingWorldwideSearchingPlayersFieldNumber;
const int CMsgMatchmakingProgress::kMatchingNearYouSearchingPlayersFieldNumber;
const int CMsgMatchmakingProgress::kTotalWorldwideSearchingPlayersFieldNumber;
const int CMsgMatchmakingProgress::kTotalNearYouSearchingPlayersFieldNumber;
const int CMsgMatchmakingProgress::kMatchingWorldwideActivePlayersFieldNumber;
const int CMsgMatchmakingProgress::kMatchingNearYouActivePlayersFieldNumber;
const int CMsgMatchmakingProgress::kTotalWorldwideActivePlayersFieldNumber;
const int CMsgMatchmakingProgress::kTotalNearYouActivePlayersFieldNumber;
const int CMsgMatchmakingProgress::kMatchingWorldwideEmptyGameserversFieldNumber;
const int CMsgMatchmakingProgress::kMatchingNearYouEmptyGameserversFieldNumber;
const int CMsgMatchmakingProgress::kTotalWorldwideEmptyGameserversFieldNumber;
const int CMsgMatchmakingProgress::kTotalNearYouEmptyGameserversFieldNumber;
const int CMsgMatchmakingProgress::kUrgencyPctFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMatchmakingProgress::CMsgMatchmakingProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMatchmakingProgress();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgMatchmakingProgress)
}
CMsgMatchmakingProgress::CMsgMatchmakingProgress(const CMsgMatchmakingProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&urgency_pct_, &from.urgency_pct_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_near_you_empty_gameservers_) -
    reinterpret_cast<char*>(&urgency_pct_)) + sizeof(total_near_you_empty_gameservers_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchmakingProgress)
}

void CMsgMatchmakingProgress::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&urgency_pct_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_near_you_empty_gameservers_) -
      reinterpret_cast<char*>(&urgency_pct_)) + sizeof(total_near_you_empty_gameservers_));
}

CMsgMatchmakingProgress::~CMsgMatchmakingProgress() {
  // @@protoc_insertion_point(destructor:CMsgMatchmakingProgress)
  SharedDtor();
}

void CMsgMatchmakingProgress::SharedDtor() {
}

void CMsgMatchmakingProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMatchmakingProgress::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMatchmakingProgress& CMsgMatchmakingProgress::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMatchmakingProgress();
  return *internal_default_instance();
}

CMsgMatchmakingProgress* CMsgMatchmakingProgress::New(::google::protobuf::Arena* arena) const {
  CMsgMatchmakingProgress* n = new CMsgMatchmakingProgress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMatchmakingProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchmakingProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&urgency_pct_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_near_you_searching_players_) -
        reinterpret_cast<char*>(&urgency_pct_)) + sizeof(total_near_you_searching_players_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&matching_worldwide_active_players_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_near_you_empty_gameservers_) -
        reinterpret_cast<char*>(&matching_worldwide_active_players_)) + sizeof(total_near_you_empty_gameservers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMatchmakingProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgMatchmakingProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 urgency_pct = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_urgency_pct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &urgency_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_wait_time_new = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_avg_wait_time_new();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_wait_time_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_wait_time_join_late = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_avg_wait_time_join_late();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_wait_time_join_late_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 your_wait_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_your_wait_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &your_wait_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matching_worldwide_searching_players = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_matching_worldwide_searching_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_worldwide_searching_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matching_near_you_searching_players = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_matching_near_you_searching_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_near_you_searching_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_worldwide_searching_players = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_total_worldwide_searching_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_worldwide_searching_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_near_you_searching_players = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_total_near_you_searching_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_near_you_searching_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matching_worldwide_active_players = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_matching_worldwide_active_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_worldwide_active_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matching_near_you_active_players = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_matching_near_you_active_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_near_you_active_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_worldwide_active_players = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_total_worldwide_active_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_worldwide_active_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_near_you_active_players = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_total_near_you_active_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_near_you_active_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matching_worldwide_empty_gameservers = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_matching_worldwide_empty_gameservers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_worldwide_empty_gameservers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matching_near_you_empty_gameservers = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_matching_near_you_empty_gameservers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_near_you_empty_gameservers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_worldwide_empty_gameservers = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_total_worldwide_empty_gameservers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_worldwide_empty_gameservers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_near_you_empty_gameservers = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_total_near_you_empty_gameservers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_near_you_empty_gameservers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgMatchmakingProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgMatchmakingProgress)
  return false;
#undef DO_
}

void CMsgMatchmakingProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgMatchmakingProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 urgency_pct = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->urgency_pct(), output);
  }

  // optional uint32 avg_wait_time_new = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->avg_wait_time_new(), output);
  }

  // optional uint32 avg_wait_time_join_late = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->avg_wait_time_join_late(), output);
  }

  // optional uint32 your_wait_time = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->your_wait_time(), output);
  }

  // optional uint32 matching_worldwide_searching_players = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->matching_worldwide_searching_players(), output);
  }

  // optional uint32 matching_near_you_searching_players = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->matching_near_you_searching_players(), output);
  }

  // optional uint32 total_worldwide_searching_players = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->total_worldwide_searching_players(), output);
  }

  // optional uint32 total_near_you_searching_players = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->total_near_you_searching_players(), output);
  }

  // optional uint32 matching_worldwide_active_players = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->matching_worldwide_active_players(), output);
  }

  // optional uint32 matching_near_you_active_players = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->matching_near_you_active_players(), output);
  }

  // optional uint32 total_worldwide_active_players = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->total_worldwide_active_players(), output);
  }

  // optional uint32 total_near_you_active_players = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->total_near_you_active_players(), output);
  }

  // optional uint32 matching_worldwide_empty_gameservers = 19;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->matching_worldwide_empty_gameservers(), output);
  }

  // optional uint32 matching_near_you_empty_gameservers = 20;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->matching_near_you_empty_gameservers(), output);
  }

  // optional uint32 total_worldwide_empty_gameservers = 21;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->total_worldwide_empty_gameservers(), output);
  }

  // optional uint32 total_near_you_empty_gameservers = 22;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->total_near_you_empty_gameservers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgMatchmakingProgress)
}

::google::protobuf::uint8* CMsgMatchmakingProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchmakingProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 urgency_pct = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->urgency_pct(), target);
  }

  // optional uint32 avg_wait_time_new = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->avg_wait_time_new(), target);
  }

  // optional uint32 avg_wait_time_join_late = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->avg_wait_time_join_late(), target);
  }

  // optional uint32 your_wait_time = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->your_wait_time(), target);
  }

  // optional uint32 matching_worldwide_searching_players = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->matching_worldwide_searching_players(), target);
  }

  // optional uint32 matching_near_you_searching_players = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->matching_near_you_searching_players(), target);
  }

  // optional uint32 total_worldwide_searching_players = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->total_worldwide_searching_players(), target);
  }

  // optional uint32 total_near_you_searching_players = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->total_near_you_searching_players(), target);
  }

  // optional uint32 matching_worldwide_active_players = 15;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->matching_worldwide_active_players(), target);
  }

  // optional uint32 matching_near_you_active_players = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->matching_near_you_active_players(), target);
  }

  // optional uint32 total_worldwide_active_players = 17;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->total_worldwide_active_players(), target);
  }

  // optional uint32 total_near_you_active_players = 18;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->total_near_you_active_players(), target);
  }

  // optional uint32 matching_worldwide_empty_gameservers = 19;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->matching_worldwide_empty_gameservers(), target);
  }

  // optional uint32 matching_near_you_empty_gameservers = 20;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->matching_near_you_empty_gameservers(), target);
  }

  // optional uint32 total_worldwide_empty_gameservers = 21;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->total_worldwide_empty_gameservers(), target);
  }

  // optional uint32 total_near_you_empty_gameservers = 22;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->total_near_you_empty_gameservers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchmakingProgress)
  return target;
}

size_t CMsgMatchmakingProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchmakingProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 urgency_pct = 1;
    if (has_urgency_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->urgency_pct());
    }

    // optional uint32 avg_wait_time_new = 4;
    if (has_avg_wait_time_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_wait_time_new());
    }

    // optional uint32 avg_wait_time_join_late = 5;
    if (has_avg_wait_time_join_late()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_wait_time_join_late());
    }

    // optional uint32 your_wait_time = 6;
    if (has_your_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->your_wait_time());
    }

    // optional uint32 matching_worldwide_searching_players = 8;
    if (has_matching_worldwide_searching_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_worldwide_searching_players());
    }

    // optional uint32 matching_near_you_searching_players = 9;
    if (has_matching_near_you_searching_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_near_you_searching_players());
    }

    // optional uint32 total_worldwide_searching_players = 13;
    if (has_total_worldwide_searching_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_worldwide_searching_players());
    }

    // optional uint32 total_near_you_searching_players = 14;
    if (has_total_near_you_searching_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_near_you_searching_players());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 matching_worldwide_active_players = 15;
    if (has_matching_worldwide_active_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_worldwide_active_players());
    }

    // optional uint32 matching_near_you_active_players = 16;
    if (has_matching_near_you_active_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_near_you_active_players());
    }

    // optional uint32 total_worldwide_active_players = 17;
    if (has_total_worldwide_active_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_worldwide_active_players());
    }

    // optional uint32 total_near_you_active_players = 18;
    if (has_total_near_you_active_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_near_you_active_players());
    }

    // optional uint32 matching_worldwide_empty_gameservers = 19;
    if (has_matching_worldwide_empty_gameservers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_worldwide_empty_gameservers());
    }

    // optional uint32 matching_near_you_empty_gameservers = 20;
    if (has_matching_near_you_empty_gameservers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_near_you_empty_gameservers());
    }

    // optional uint32 total_worldwide_empty_gameservers = 21;
    if (has_total_worldwide_empty_gameservers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_worldwide_empty_gameservers());
    }

    // optional uint32 total_near_you_empty_gameservers = 22;
    if (has_total_near_you_empty_gameservers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_near_you_empty_gameservers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMatchmakingProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchmakingProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchmakingProgress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMatchmakingProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchmakingProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchmakingProgress)
    MergeFrom(*source);
  }
}

void CMsgMatchmakingProgress::MergeFrom(const CMsgMatchmakingProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchmakingProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      urgency_pct_ = from.urgency_pct_;
    }
    if (cached_has_bits & 0x00000002u) {
      avg_wait_time_new_ = from.avg_wait_time_new_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_wait_time_join_late_ = from.avg_wait_time_join_late_;
    }
    if (cached_has_bits & 0x00000008u) {
      your_wait_time_ = from.your_wait_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      matching_worldwide_searching_players_ = from.matching_worldwide_searching_players_;
    }
    if (cached_has_bits & 0x00000020u) {
      matching_near_you_searching_players_ = from.matching_near_you_searching_players_;
    }
    if (cached_has_bits & 0x00000040u) {
      total_worldwide_searching_players_ = from.total_worldwide_searching_players_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_near_you_searching_players_ = from.total_near_you_searching_players_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      matching_worldwide_active_players_ = from.matching_worldwide_active_players_;
    }
    if (cached_has_bits & 0x00000200u) {
      matching_near_you_active_players_ = from.matching_near_you_active_players_;
    }
    if (cached_has_bits & 0x00000400u) {
      total_worldwide_active_players_ = from.total_worldwide_active_players_;
    }
    if (cached_has_bits & 0x00000800u) {
      total_near_you_active_players_ = from.total_near_you_active_players_;
    }
    if (cached_has_bits & 0x00001000u) {
      matching_worldwide_empty_gameservers_ = from.matching_worldwide_empty_gameservers_;
    }
    if (cached_has_bits & 0x00002000u) {
      matching_near_you_empty_gameservers_ = from.matching_near_you_empty_gameservers_;
    }
    if (cached_has_bits & 0x00004000u) {
      total_worldwide_empty_gameservers_ = from.total_worldwide_empty_gameservers_;
    }
    if (cached_has_bits & 0x00008000u) {
      total_near_you_empty_gameservers_ = from.total_near_you_empty_gameservers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMatchmakingProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchmakingProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchmakingProgress::CopyFrom(const CMsgMatchmakingProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchmakingProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchmakingProgress::IsInitialized() const {
  return true;
}

void CMsgMatchmakingProgress::Swap(CMsgMatchmakingProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMatchmakingProgress::InternalSwap(CMsgMatchmakingProgress* other) {
  using std::swap;
  swap(urgency_pct_, other->urgency_pct_);
  swap(avg_wait_time_new_, other->avg_wait_time_new_);
  swap(avg_wait_time_join_late_, other->avg_wait_time_join_late_);
  swap(your_wait_time_, other->your_wait_time_);
  swap(matching_worldwide_searching_players_, other->matching_worldwide_searching_players_);
  swap(matching_near_you_searching_players_, other->matching_near_you_searching_players_);
  swap(total_worldwide_searching_players_, other->total_worldwide_searching_players_);
  swap(total_near_you_searching_players_, other->total_near_you_searching_players_);
  swap(matching_worldwide_active_players_, other->matching_worldwide_active_players_);
  swap(matching_near_you_active_players_, other->matching_near_you_active_players_);
  swap(total_worldwide_active_players_, other->total_worldwide_active_players_);
  swap(total_near_you_active_players_, other->total_near_you_active_players_);
  swap(matching_worldwide_empty_gameservers_, other->matching_worldwide_empty_gameservers_);
  swap(matching_near_you_empty_gameservers_, other->matching_near_you_empty_gameservers_);
  swap(total_worldwide_empty_gameservers_, other->total_worldwide_empty_gameservers_);
  swap(total_near_you_empty_gameservers_, other->total_near_you_empty_gameservers_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMatchmakingProgress::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgMvMVictoryInfo_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMvMVictoryInfo_Item::kGrantReasonFieldNumber;
const int CMsgMvMVictoryInfo_Item::kItemDataFieldNumber;
const int CMsgMvMVictoryInfo_Item::kSquadSurplusClaimerSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMvMVictoryInfo_Item::CMsgMvMVictoryInfo_Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMvMVictoryInfo_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgMvMVictoryInfo.Item)
}
CMsgMvMVictoryInfo_Item::CMsgMvMVictoryInfo_Item(const CMsgMvMVictoryInfo_Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_item_data()) {
    item_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_data_);
  }
  ::memcpy(&squad_surplus_claimer_steam_id_, &from.squad_surplus_claimer_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&grant_reason_) -
    reinterpret_cast<char*>(&squad_surplus_claimer_steam_id_)) + sizeof(grant_reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgMvMVictoryInfo.Item)
}

void CMsgMvMVictoryInfo_Item::SharedCtor() {
  _cached_size_ = 0;
  item_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&squad_surplus_claimer_steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grant_reason_) -
      reinterpret_cast<char*>(&squad_surplus_claimer_steam_id_)) + sizeof(grant_reason_));
}

CMsgMvMVictoryInfo_Item::~CMsgMvMVictoryInfo_Item() {
  // @@protoc_insertion_point(destructor:CMsgMvMVictoryInfo.Item)
  SharedDtor();
}

void CMsgMvMVictoryInfo_Item::SharedDtor() {
  item_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgMvMVictoryInfo_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMvMVictoryInfo_Item::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMvMVictoryInfo_Item& CMsgMvMVictoryInfo_Item::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMvMVictoryInfo_Item();
  return *internal_default_instance();
}

CMsgMvMVictoryInfo_Item* CMsgMvMVictoryInfo_Item::New(::google::protobuf::Arena* arena) const {
  CMsgMvMVictoryInfo_Item* n = new CMsgMvMVictoryInfo_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMvMVictoryInfo_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMvMVictoryInfo.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!item_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*item_data_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&squad_surplus_claimer_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grant_reason_) -
        reinterpret_cast<char*>(&squad_surplus_claimer_steam_id_)) + sizeof(grant_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMvMVictoryInfo_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgMvMVictoryInfo.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgMvMVictoryInfo.GrantReason grant_reason = 1 [default = INVALID];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgMvMVictoryInfo_GrantReason_IsValid(value)) {
            set_grant_reason(static_cast< ::CMsgMvMVictoryInfo_GrantReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes item_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_item_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 squad_surplus_claimer_steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_squad_surplus_claimer_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &squad_surplus_claimer_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgMvMVictoryInfo.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgMvMVictoryInfo.Item)
  return false;
#undef DO_
}

void CMsgMvMVictoryInfo_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgMvMVictoryInfo.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgMvMVictoryInfo.GrantReason grant_reason = 1 [default = INVALID];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->grant_reason(), output);
  }

  // optional bytes item_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->item_data(), output);
  }

  // optional fixed64 squad_surplus_claimer_steam_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->squad_surplus_claimer_steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgMvMVictoryInfo.Item)
}

::google::protobuf::uint8* CMsgMvMVictoryInfo_Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMvMVictoryInfo.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgMvMVictoryInfo.GrantReason grant_reason = 1 [default = INVALID];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->grant_reason(), target);
  }

  // optional bytes item_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->item_data(), target);
  }

  // optional fixed64 squad_surplus_claimer_steam_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->squad_surplus_claimer_steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMvMVictoryInfo.Item)
  return target;
}

size_t CMsgMvMVictoryInfo_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMvMVictoryInfo.Item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes item_data = 2;
    if (has_item_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->item_data());
    }

    // optional fixed64 squad_surplus_claimer_steam_id = 3;
    if (has_squad_surplus_claimer_steam_id()) {
      total_size += 1 + 8;
    }

    // optional .CMsgMvMVictoryInfo.GrantReason grant_reason = 1 [default = INVALID];
    if (has_grant_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->grant_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMvMVictoryInfo_Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMvMVictoryInfo.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMvMVictoryInfo_Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMvMVictoryInfo_Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMvMVictoryInfo.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMvMVictoryInfo.Item)
    MergeFrom(*source);
  }
}

void CMsgMvMVictoryInfo_Item::MergeFrom(const CMsgMvMVictoryInfo_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMvMVictoryInfo.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_item_data();
      item_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      squad_surplus_claimer_steam_id_ = from.squad_surplus_claimer_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      grant_reason_ = from.grant_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMvMVictoryInfo_Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMvMVictoryInfo.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMVictoryInfo_Item::CopyFrom(const CMsgMvMVictoryInfo_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMvMVictoryInfo.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMVictoryInfo_Item::IsInitialized() const {
  return true;
}

void CMsgMvMVictoryInfo_Item::Swap(CMsgMvMVictoryInfo_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMvMVictoryInfo_Item::InternalSwap(CMsgMvMVictoryInfo_Item* other) {
  using std::swap;
  item_data_.Swap(&other->item_data_);
  swap(squad_surplus_claimer_steam_id_, other->squad_surplus_claimer_steam_id_);
  swap(grant_reason_, other->grant_reason_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMvMVictoryInfo_Item::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgMvMVictoryInfo_Player::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMvMVictoryInfo_Player::kSteamIdFieldNumber;
const int CMsgMvMVictoryInfo_Player::kBadgeGrantedFieldNumber;
const int CMsgMvMVictoryInfo_Player::kBadgeProgressUpdatedFieldNumber;
const int CMsgMvMVictoryInfo_Player::kBadgeLeveledFieldNumber;
const int CMsgMvMVictoryInfo_Player::kBadgeLevelFieldNumber;
const int CMsgMvMVictoryInfo_Player::kBadgeProgressBitsFieldNumber;
const int CMsgMvMVictoryInfo_Player::kItemsFieldNumber;
const int CMsgMvMVictoryInfo_Player::kVoucherMissingFieldNumber;
const int CMsgMvMVictoryInfo_Player::kBadgePointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMvMVictoryInfo_Player::CMsgMvMVictoryInfo_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMvMVictoryInfo_Player();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgMvMVictoryInfo.Player)
}
CMsgMvMVictoryInfo_Player::CMsgMvMVictoryInfo_Player(const CMsgMvMVictoryInfo_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&badge_points_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(badge_points_));
  // @@protoc_insertion_point(copy_constructor:CMsgMvMVictoryInfo.Player)
}

void CMsgMvMVictoryInfo_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&badge_points_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(badge_points_));
}

CMsgMvMVictoryInfo_Player::~CMsgMvMVictoryInfo_Player() {
  // @@protoc_insertion_point(destructor:CMsgMvMVictoryInfo.Player)
  SharedDtor();
}

void CMsgMvMVictoryInfo_Player::SharedDtor() {
}

void CMsgMvMVictoryInfo_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMvMVictoryInfo_Player::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMvMVictoryInfo_Player& CMsgMvMVictoryInfo_Player::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMvMVictoryInfo_Player();
  return *internal_default_instance();
}

CMsgMvMVictoryInfo_Player* CMsgMvMVictoryInfo_Player::New(::google::protobuf::Arena* arena) const {
  CMsgMvMVictoryInfo_Player* n = new CMsgMvMVictoryInfo_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMvMVictoryInfo_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMvMVictoryInfo.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&badge_points_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(badge_points_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMvMVictoryInfo_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgMvMVictoryInfo.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool badge_granted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_badge_granted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &badge_granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool badge_progress_updated = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_badge_progress_updated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &badge_progress_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool badge_leveled = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_badge_leveled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &badge_leveled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 badge_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_badge_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 badge_progress_bits = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_badge_progress_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_progress_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgMvMVictoryInfo.Item items = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool voucher_missing = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_voucher_missing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voucher_missing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 badge_points = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_badge_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgMvMVictoryInfo.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgMvMVictoryInfo.Player)
  return false;
#undef DO_
}

void CMsgMvMVictoryInfo_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgMvMVictoryInfo.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional bool badge_granted = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->badge_granted(), output);
  }

  // optional bool badge_progress_updated = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->badge_progress_updated(), output);
  }

  // optional bool badge_leveled = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->badge_leveled(), output);
  }

  // optional uint32 badge_level = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->badge_level(), output);
  }

  // optional uint32 badge_progress_bits = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->badge_progress_bits(), output);
  }

  // repeated .CMsgMvMVictoryInfo.Item items = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->items(static_cast<int>(i)), output);
  }

  // optional bool voucher_missing = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->voucher_missing(), output);
  }

  // optional uint32 badge_points = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->badge_points(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgMvMVictoryInfo.Player)
}

::google::protobuf::uint8* CMsgMvMVictoryInfo_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMvMVictoryInfo.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional bool badge_granted = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->badge_granted(), target);
  }

  // optional bool badge_progress_updated = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->badge_progress_updated(), target);
  }

  // optional bool badge_leveled = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->badge_leveled(), target);
  }

  // optional uint32 badge_level = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->badge_level(), target);
  }

  // optional uint32 badge_progress_bits = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->badge_progress_bits(), target);
  }

  // repeated .CMsgMvMVictoryInfo.Item items = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->items(static_cast<int>(i)), deterministic, target);
  }

  // optional bool voucher_missing = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->voucher_missing(), target);
  }

  // optional uint32 badge_points = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->badge_points(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMvMVictoryInfo.Player)
  return target;
}

size_t CMsgMvMVictoryInfo_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMvMVictoryInfo.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgMvMVictoryInfo.Item items = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional bool badge_granted = 3;
    if (has_badge_granted()) {
      total_size += 1 + 1;
    }

    // optional bool badge_progress_updated = 4;
    if (has_badge_progress_updated()) {
      total_size += 1 + 1;
    }

    // optional bool badge_leveled = 5;
    if (has_badge_leveled()) {
      total_size += 1 + 1;
    }

    // optional bool voucher_missing = 9;
    if (has_voucher_missing()) {
      total_size += 1 + 1;
    }

    // optional uint32 badge_level = 6;
    if (has_badge_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_level());
    }

    // optional uint32 badge_progress_bits = 7;
    if (has_badge_progress_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_progress_bits());
    }

    // optional uint32 badge_points = 10;
    if (has_badge_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_points());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMvMVictoryInfo_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMvMVictoryInfo.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMvMVictoryInfo_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMvMVictoryInfo_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMvMVictoryInfo.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMvMVictoryInfo.Player)
    MergeFrom(*source);
  }
}

void CMsgMvMVictoryInfo_Player::MergeFrom(const CMsgMvMVictoryInfo_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMvMVictoryInfo.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      badge_granted_ = from.badge_granted_;
    }
    if (cached_has_bits & 0x00000004u) {
      badge_progress_updated_ = from.badge_progress_updated_;
    }
    if (cached_has_bits & 0x00000008u) {
      badge_leveled_ = from.badge_leveled_;
    }
    if (cached_has_bits & 0x00000010u) {
      voucher_missing_ = from.voucher_missing_;
    }
    if (cached_has_bits & 0x00000020u) {
      badge_level_ = from.badge_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      badge_progress_bits_ = from.badge_progress_bits_;
    }
    if (cached_has_bits & 0x00000080u) {
      badge_points_ = from.badge_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMvMVictoryInfo_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMvMVictoryInfo.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMVictoryInfo_Player::CopyFrom(const CMsgMvMVictoryInfo_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMvMVictoryInfo.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMVictoryInfo_Player::IsInitialized() const {
  return true;
}

void CMsgMvMVictoryInfo_Player::Swap(CMsgMvMVictoryInfo_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMvMVictoryInfo_Player::InternalSwap(CMsgMvMVictoryInfo_Player* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  swap(steam_id_, other->steam_id_);
  swap(badge_granted_, other->badge_granted_);
  swap(badge_progress_updated_, other->badge_progress_updated_);
  swap(badge_leveled_, other->badge_leveled_);
  swap(voucher_missing_, other->voucher_missing_);
  swap(badge_level_, other->badge_level_);
  swap(badge_progress_bits_, other->badge_progress_bits_);
  swap(badge_points_, other->badge_points_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMvMVictoryInfo_Player::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgMvMVictoryInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMvMVictoryInfo::kPlayersFieldNumber;
const int CMsgMvMVictoryInfo::kTourNameFieldNumber;
const int CMsgMvMVictoryInfo::kMissionNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMvMVictoryInfo::CMsgMvMVictoryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMvMVictoryInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgMvMVictoryInfo)
}
CMsgMvMVictoryInfo::CMsgMvMVictoryInfo(const CMsgMvMVictoryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tour_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tour_name()) {
    tour_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tour_name_);
  }
  mission_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mission_name()) {
    mission_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mission_name_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgMvMVictoryInfo)
}

void CMsgMvMVictoryInfo::SharedCtor() {
  _cached_size_ = 0;
  tour_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mission_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgMvMVictoryInfo::~CMsgMvMVictoryInfo() {
  // @@protoc_insertion_point(destructor:CMsgMvMVictoryInfo)
  SharedDtor();
}

void CMsgMvMVictoryInfo::SharedDtor() {
  tour_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mission_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgMvMVictoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMvMVictoryInfo::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMvMVictoryInfo& CMsgMvMVictoryInfo::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMvMVictoryInfo();
  return *internal_default_instance();
}

CMsgMvMVictoryInfo* CMsgMvMVictoryInfo::New(::google::protobuf::Arena* arena) const {
  CMsgMvMVictoryInfo* n = new CMsgMvMVictoryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMvMVictoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMvMVictoryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!tour_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tour_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mission_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mission_name_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMvMVictoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgMvMVictoryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgMvMVictoryInfo.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tour_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tour_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tour_name().data(), static_cast<int>(this->tour_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgMvMVictoryInfo.tour_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mission_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mission_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mission_name().data(), static_cast<int>(this->mission_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgMvMVictoryInfo.mission_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgMvMVictoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgMvMVictoryInfo)
  return false;
#undef DO_
}

void CMsgMvMVictoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgMvMVictoryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMvMVictoryInfo.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string tour_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tour_name().data(), static_cast<int>(this->tour_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgMvMVictoryInfo.tour_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tour_name(), output);
  }

  // optional string mission_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mission_name().data(), static_cast<int>(this->mission_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgMvMVictoryInfo.mission_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mission_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgMvMVictoryInfo)
}

::google::protobuf::uint8* CMsgMvMVictoryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMvMVictoryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMvMVictoryInfo.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string tour_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tour_name().data(), static_cast<int>(this->tour_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgMvMVictoryInfo.tour_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tour_name(), target);
  }

  // optional string mission_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mission_name().data(), static_cast<int>(this->mission_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgMvMVictoryInfo.mission_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mission_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMvMVictoryInfo)
  return target;
}

size_t CMsgMvMVictoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMvMVictoryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgMvMVictoryInfo.Player players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string tour_name = 2;
    if (has_tour_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tour_name());
    }

    // optional string mission_name = 3;
    if (has_mission_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mission_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMvMVictoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMvMVictoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMvMVictoryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMvMVictoryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMvMVictoryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMvMVictoryInfo)
    MergeFrom(*source);
  }
}

void CMsgMvMVictoryInfo::MergeFrom(const CMsgMvMVictoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMvMVictoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tour_name();
      tour_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tour_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mission_name();
      mission_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mission_name_);
    }
  }
}

void CMsgMvMVictoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMvMVictoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMVictoryInfo::CopyFrom(const CMsgMvMVictoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMvMVictoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMVictoryInfo::IsInitialized() const {
  return true;
}

void CMsgMvMVictoryInfo::Swap(CMsgMvMVictoryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMvMVictoryInfo::InternalSwap(CMsgMvMVictoryInfo* other) {
  using std::swap;
  players_.InternalSwap(&other->players_);
  tour_name_.Swap(&other->tour_name_);
  mission_name_.Swap(&other->mission_name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMvMVictoryInfo::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgTFHelloResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgTFHelloResponse::kVersionCheckFieldNumber;
const int CGCMsgTFHelloResponse::kVersionChecksumFieldNumber;
const int CGCMsgTFHelloResponse::kVersionVerboseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgTFHelloResponse::CGCMsgTFHelloResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgTFHelloResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCMsgTFHelloResponse)
}
CGCMsgTFHelloResponse::CGCMsgTFHelloResponse(const CGCMsgTFHelloResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      version_checksum_(from.version_checksum_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_check_, &from.version_check_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_verbose_) -
    reinterpret_cast<char*>(&version_check_)) + sizeof(version_verbose_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgTFHelloResponse)
}

void CGCMsgTFHelloResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_check_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_verbose_) -
      reinterpret_cast<char*>(&version_check_)) + sizeof(version_verbose_));
}

CGCMsgTFHelloResponse::~CGCMsgTFHelloResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgTFHelloResponse)
  SharedDtor();
}

void CGCMsgTFHelloResponse::SharedDtor() {
}

void CGCMsgTFHelloResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgTFHelloResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgTFHelloResponse& CGCMsgTFHelloResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgTFHelloResponse();
  return *internal_default_instance();
}

CGCMsgTFHelloResponse* CGCMsgTFHelloResponse::New(::google::protobuf::Arena* arena) const {
  CGCMsgTFHelloResponse* n = new CGCMsgTFHelloResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgTFHelloResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgTFHelloResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_checksum_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&version_check_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_verbose_) -
        reinterpret_cast<char*>(&version_check_)) + sizeof(version_verbose_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgTFHelloResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCMsgTFHelloResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version_check = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 version_checksum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_version_checksum())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_version_checksum())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version_verbose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_version_verbose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_verbose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCMsgTFHelloResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCMsgTFHelloResponse)
  return false;
#undef DO_
}

void CGCMsgTFHelloResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCMsgTFHelloResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version_check = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version_check(), output);
  }

  // repeated uint64 version_checksum = 2;
  for (int i = 0, n = this->version_checksum_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->version_checksum(i), output);
  }

  // optional uint32 version_verbose = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version_verbose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCMsgTFHelloResponse)
}

::google::protobuf::uint8* CGCMsgTFHelloResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgTFHelloResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version_check = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version_check(), target);
  }

  // repeated uint64 version_checksum = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->version_checksum_, target);

  // optional uint32 version_verbose = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version_verbose(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgTFHelloResponse)
  return target;
}

size_t CGCMsgTFHelloResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgTFHelloResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 version_checksum = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->version_checksum_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->version_checksum_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 version_check = 1;
    if (has_version_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_check());
    }

    // optional uint32 version_verbose = 3;
    if (has_version_verbose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_verbose());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgTFHelloResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgTFHelloResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgTFHelloResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgTFHelloResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgTFHelloResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgTFHelloResponse)
    MergeFrom(*source);
  }
}

void CGCMsgTFHelloResponse::MergeFrom(const CGCMsgTFHelloResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgTFHelloResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  version_checksum_.MergeFrom(from.version_checksum_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      version_check_ = from.version_check_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_verbose_ = from.version_verbose_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgTFHelloResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgTFHelloResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgTFHelloResponse::CopyFrom(const CGCMsgTFHelloResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgTFHelloResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgTFHelloResponse::IsInitialized() const {
  return true;
}

void CGCMsgTFHelloResponse::Swap(CGCMsgTFHelloResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgTFHelloResponse::InternalSwap(CGCMsgTFHelloResponse* other) {
  using std::swap;
  version_checksum_.InternalSwap(&other->version_checksum_);
  swap(version_check_, other->version_check_);
  swap(version_verbose_, other->version_verbose_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgTFHelloResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgTFSync::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgTFSync::kVersionChecksumFieldNumber;
const int CGCMsgTFSync::kVersionCheckFieldNumber;
const int CGCMsgTFSync::kVersionCheckExFieldNumber;
const int CGCMsgTFSync::kVersionCheckEx2FieldNumber;
const int CGCMsgTFSync::kVersionChecksumExFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgTFSync::CGCMsgTFSync()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgTFSync();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCMsgTFSync)
}
CGCMsgTFSync::CGCMsgTFSync(const CGCMsgTFSync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version_checksum()) {
    version_checksum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_checksum_);
  }
  version_checksum_ex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version_checksum_ex()) {
    version_checksum_ex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_checksum_ex_);
  }
  ::memcpy(&version_check_, &from.version_check_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_check_ex2_) -
    reinterpret_cast<char*>(&version_check_)) + sizeof(version_check_ex2_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgTFSync)
}

void CGCMsgTFSync::SharedCtor() {
  _cached_size_ = 0;
  version_checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_checksum_ex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_check_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_check_ex2_) -
      reinterpret_cast<char*>(&version_check_)) + sizeof(version_check_ex2_));
}

CGCMsgTFSync::~CGCMsgTFSync() {
  // @@protoc_insertion_point(destructor:CGCMsgTFSync)
  SharedDtor();
}

void CGCMsgTFSync::SharedDtor() {
  version_checksum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_checksum_ex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgTFSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgTFSync::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgTFSync& CGCMsgTFSync::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgTFSync();
  return *internal_default_instance();
}

CGCMsgTFSync* CGCMsgTFSync::New(::google::protobuf::Arena* arena) const {
  CGCMsgTFSync* n = new CGCMsgTFSync;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgTFSync::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgTFSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!version_checksum_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_checksum_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!version_checksum_ex_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_checksum_ex_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&version_check_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_check_ex2_) -
        reinterpret_cast<char*>(&version_check_)) + sizeof(version_check_ex2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgTFSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCMsgTFSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes version_checksum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version_checksum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version_check = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_version_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version_check_ex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_version_check_ex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_check_ex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version_check_ex2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_version_check_ex2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_check_ex2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes version_checksum_ex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version_checksum_ex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCMsgTFSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCMsgTFSync)
  return false;
#undef DO_
}

void CGCMsgTFSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCMsgTFSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes version_checksum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->version_checksum(), output);
  }

  // optional uint32 version_check = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version_check(), output);
  }

  // optional uint32 version_check_ex = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version_check_ex(), output);
  }

  // optional uint32 version_check_ex2 = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->version_check_ex2(), output);
  }

  // optional bytes version_checksum_ex = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->version_checksum_ex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCMsgTFSync)
}

::google::protobuf::uint8* CGCMsgTFSync::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgTFSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes version_checksum = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->version_checksum(), target);
  }

  // optional uint32 version_check = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version_check(), target);
  }

  // optional uint32 version_check_ex = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version_check_ex(), target);
  }

  // optional uint32 version_check_ex2 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->version_check_ex2(), target);
  }

  // optional bytes version_checksum_ex = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->version_checksum_ex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgTFSync)
  return target;
}

size_t CGCMsgTFSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgTFSync)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes version_checksum = 1;
    if (has_version_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version_checksum());
    }

    // optional bytes version_checksum_ex = 5;
    if (has_version_checksum_ex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version_checksum_ex());
    }

    // optional uint32 version_check = 2;
    if (has_version_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_check());
    }

    // optional uint32 version_check_ex = 3;
    if (has_version_check_ex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_check_ex());
    }

    // optional uint32 version_check_ex2 = 4;
    if (has_version_check_ex2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_check_ex2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgTFSync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgTFSync)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgTFSync* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgTFSync>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgTFSync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgTFSync)
    MergeFrom(*source);
  }
}

void CGCMsgTFSync::MergeFrom(const CGCMsgTFSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgTFSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_version_checksum();
      version_checksum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_checksum_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version_checksum_ex();
      version_checksum_ex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_checksum_ex_);
    }
    if (cached_has_bits & 0x00000004u) {
      version_check_ = from.version_check_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_check_ex_ = from.version_check_ex_;
    }
    if (cached_has_bits & 0x00000010u) {
      version_check_ex2_ = from.version_check_ex2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgTFSync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgTFSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgTFSync::CopyFrom(const CGCMsgTFSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgTFSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgTFSync::IsInitialized() const {
  return true;
}

void CGCMsgTFSync::Swap(CGCMsgTFSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgTFSync::InternalSwap(CGCMsgTFSync* other) {
  using std::swap;
  version_checksum_.Swap(&other->version_checksum_);
  version_checksum_ex_.Swap(&other->version_checksum_ex_);
  swap(version_check_, other->version_check_);
  swap(version_check_ex_, other->version_check_ex_);
  swap(version_check_ex2_, other->version_check_ex2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgTFSync::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgTFSyncEx::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgTFSyncEx::kVersionChecksumFieldNumber;
const int CGCMsgTFSyncEx::kVersionChecksumExFieldNumber;
const int CGCMsgTFSyncEx::kVersionCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgTFSyncEx::CGCMsgTFSyncEx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgTFSyncEx();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCMsgTFSyncEx)
}
CGCMsgTFSyncEx::CGCMsgTFSyncEx(const CGCMsgTFSyncEx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version_checksum()) {
    version_checksum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_checksum_);
  }
  version_checksum_ex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version_checksum_ex()) {
    version_checksum_ex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_checksum_ex_);
  }
  version_check_ = from.version_check_;
  // @@protoc_insertion_point(copy_constructor:CGCMsgTFSyncEx)
}

void CGCMsgTFSyncEx::SharedCtor() {
  _cached_size_ = 0;
  version_checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_checksum_ex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_check_ = 0u;
}

CGCMsgTFSyncEx::~CGCMsgTFSyncEx() {
  // @@protoc_insertion_point(destructor:CGCMsgTFSyncEx)
  SharedDtor();
}

void CGCMsgTFSyncEx::SharedDtor() {
  version_checksum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_checksum_ex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgTFSyncEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgTFSyncEx::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgTFSyncEx& CGCMsgTFSyncEx::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgTFSyncEx();
  return *internal_default_instance();
}

CGCMsgTFSyncEx* CGCMsgTFSyncEx::New(::google::protobuf::Arena* arena) const {
  CGCMsgTFSyncEx* n = new CGCMsgTFSyncEx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgTFSyncEx::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgTFSyncEx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!version_checksum_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_checksum_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!version_checksum_ex_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_checksum_ex_.UnsafeRawStringPointer())->clear();
    }
  }
  version_check_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgTFSyncEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCMsgTFSyncEx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version_checksum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_checksum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version_checksum().data(), static_cast<int>(this->version_checksum().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGCMsgTFSyncEx.version_checksum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes version_checksum_ex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version_checksum_ex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version_check = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_version_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCMsgTFSyncEx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCMsgTFSyncEx)
  return false;
#undef DO_
}

void CGCMsgTFSyncEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCMsgTFSyncEx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version_checksum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version_checksum().data(), static_cast<int>(this->version_checksum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCMsgTFSyncEx.version_checksum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version_checksum(), output);
  }

  // optional bytes version_checksum_ex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->version_checksum_ex(), output);
  }

  // optional uint32 version_check = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version_check(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCMsgTFSyncEx)
}

::google::protobuf::uint8* CGCMsgTFSyncEx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgTFSyncEx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version_checksum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version_checksum().data(), static_cast<int>(this->version_checksum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCMsgTFSyncEx.version_checksum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version_checksum(), target);
  }

  // optional bytes version_checksum_ex = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->version_checksum_ex(), target);
  }

  // optional uint32 version_check = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version_check(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgTFSyncEx)
  return target;
}

size_t CGCMsgTFSyncEx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgTFSyncEx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string version_checksum = 1;
    if (has_version_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version_checksum());
    }

    // optional bytes version_checksum_ex = 2;
    if (has_version_checksum_ex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version_checksum_ex());
    }

    // optional uint32 version_check = 3;
    if (has_version_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_check());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgTFSyncEx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgTFSyncEx)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgTFSyncEx* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgTFSyncEx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgTFSyncEx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgTFSyncEx)
    MergeFrom(*source);
  }
}

void CGCMsgTFSyncEx::MergeFrom(const CGCMsgTFSyncEx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgTFSyncEx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_version_checksum();
      version_checksum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_checksum_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version_checksum_ex();
      version_checksum_ex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_checksum_ex_);
    }
    if (cached_has_bits & 0x00000004u) {
      version_check_ = from.version_check_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgTFSyncEx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgTFSyncEx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgTFSyncEx::CopyFrom(const CGCMsgTFSyncEx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgTFSyncEx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgTFSyncEx::IsInitialized() const {
  return true;
}

void CGCMsgTFSyncEx::Swap(CGCMsgTFSyncEx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgTFSyncEx::InternalSwap(CGCMsgTFSyncEx* other) {
  using std::swap;
  version_checksum_.Swap(&other->version_checksum_);
  version_checksum_ex_.Swap(&other->version_checksum_ex_);
  swap(version_check_, other->version_check_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgTFSyncEx::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgMvMVictory_Player::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMvMVictory_Player::kSteamIdFieldNumber;
const int CMsgMvMVictory_Player::kSquadSurplusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMvMVictory_Player::CMsgMvMVictory_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMvMVictory_Player();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgMvMVictory.Player)
}
CMsgMvMVictory_Player::CMsgMvMVictory_Player(const CMsgMvMVictory_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&squad_surplus_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(squad_surplus_));
  // @@protoc_insertion_point(copy_constructor:CMsgMvMVictory.Player)
}

void CMsgMvMVictory_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&squad_surplus_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(squad_surplus_));
}

CMsgMvMVictory_Player::~CMsgMvMVictory_Player() {
  // @@protoc_insertion_point(destructor:CMsgMvMVictory.Player)
  SharedDtor();
}

void CMsgMvMVictory_Player::SharedDtor() {
}

void CMsgMvMVictory_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMvMVictory_Player::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMvMVictory_Player& CMsgMvMVictory_Player::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMvMVictory_Player();
  return *internal_default_instance();
}

CMsgMvMVictory_Player* CMsgMvMVictory_Player::New(::google::protobuf::Arena* arena) const {
  CMsgMvMVictory_Player* n = new CMsgMvMVictory_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMvMVictory_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMvMVictory.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&squad_surplus_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(squad_surplus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMvMVictory_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgMvMVictory.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool squad_surplus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_squad_surplus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &squad_surplus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgMvMVictory.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgMvMVictory.Player)
  return false;
#undef DO_
}

void CMsgMvMVictory_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgMvMVictory.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional bool squad_surplus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->squad_surplus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgMvMVictory.Player)
}

::google::protobuf::uint8* CMsgMvMVictory_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMvMVictory.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional bool squad_surplus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->squad_surplus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMvMVictory.Player)
  return target;
}

size_t CMsgMvMVictory_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMvMVictory.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional bool squad_surplus = 2;
    if (has_squad_surplus()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMvMVictory_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMvMVictory.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMvMVictory_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMvMVictory_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMvMVictory.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMvMVictory.Player)
    MergeFrom(*source);
  }
}

void CMsgMvMVictory_Player::MergeFrom(const CMsgMvMVictory_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMvMVictory.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      squad_surplus_ = from.squad_surplus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMvMVictory_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMvMVictory.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMVictory_Player::CopyFrom(const CMsgMvMVictory_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMvMVictory.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMVictory_Player::IsInitialized() const {
  return true;
}

void CMsgMvMVictory_Player::Swap(CMsgMvMVictory_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMvMVictory_Player::InternalSwap(CMsgMvMVictory_Player* other) {
  using std::swap;
  swap(steam_id_, other->steam_id_);
  swap(squad_surplus_, other->squad_surplus_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMvMVictory_Player::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgMvMVictory::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMvMVictory::kLegacyMissionIndexFieldNumber;
const int CMsgMvMVictory::kTourNameMannupFieldNumber;
const int CMsgMvMVictory::kMissionNameFieldNumber;
const int CMsgMvMVictory::kPlayersFieldNumber;
const int CMsgMvMVictory::kLobbyIdFieldNumber;
const int CMsgMvMVictory::kEventTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMvMVictory::CMsgMvMVictory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMvMVictory();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgMvMVictory)
}
CMsgMvMVictory::CMsgMvMVictory(const CMsgMvMVictory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tour_name_mannup_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tour_name_mannup()) {
    tour_name_mannup_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tour_name_mannup_);
  }
  mission_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mission_name()) {
    mission_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mission_name_);
  }
  ::memcpy(&legacy_mission_index_, &from.legacy_mission_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobby_id_) -
    reinterpret_cast<char*>(&legacy_mission_index_)) + sizeof(lobby_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgMvMVictory)
}

void CMsgMvMVictory::SharedCtor() {
  _cached_size_ = 0;
  tour_name_mannup_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mission_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&legacy_mission_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lobby_id_) -
      reinterpret_cast<char*>(&legacy_mission_index_)) + sizeof(lobby_id_));
}

CMsgMvMVictory::~CMsgMvMVictory() {
  // @@protoc_insertion_point(destructor:CMsgMvMVictory)
  SharedDtor();
}

void CMsgMvMVictory::SharedDtor() {
  tour_name_mannup_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mission_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgMvMVictory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMvMVictory::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMvMVictory& CMsgMvMVictory::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMvMVictory();
  return *internal_default_instance();
}

CMsgMvMVictory* CMsgMvMVictory::New(::google::protobuf::Arena* arena) const {
  CMsgMvMVictory* n = new CMsgMvMVictory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMvMVictory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMvMVictory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!tour_name_mannup_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tour_name_mannup_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mission_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mission_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&legacy_mission_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_id_) -
        reinterpret_cast<char*>(&legacy_mission_index_)) + sizeof(lobby_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMvMVictory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgMvMVictory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 legacy_mission_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_legacy_mission_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_mission_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgMvMVictory.Player players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lobby_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 event_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_event_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &event_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tour_name_mannup = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tour_name_mannup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tour_name_mannup().data(), static_cast<int>(this->tour_name_mannup().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgMvMVictory.tour_name_mannup");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mission_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mission_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mission_name().data(), static_cast<int>(this->mission_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgMvMVictory.mission_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgMvMVictory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgMvMVictory)
  return false;
#undef DO_
}

void CMsgMvMVictory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgMvMVictory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_mission_index = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->legacy_mission_index(), output);
  }

  // repeated .CMsgMvMVictory.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(static_cast<int>(i)), output);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lobby_id(), output);
  }

  // optional fixed32 event_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->event_time(), output);
  }

  // optional string tour_name_mannup = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tour_name_mannup().data(), static_cast<int>(this->tour_name_mannup().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgMvMVictory.tour_name_mannup");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tour_name_mannup(), output);
  }

  // optional string mission_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mission_name().data(), static_cast<int>(this->mission_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgMvMVictory.mission_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mission_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgMvMVictory)
}

::google::protobuf::uint8* CMsgMvMVictory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMvMVictory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_mission_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->legacy_mission_index(), target);
  }

  // repeated .CMsgMvMVictory.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->players(static_cast<int>(i)), deterministic, target);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lobby_id(), target);
  }

  // optional fixed32 event_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->event_time(), target);
  }

  // optional string tour_name_mannup = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tour_name_mannup().data(), static_cast<int>(this->tour_name_mannup().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgMvMVictory.tour_name_mannup");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tour_name_mannup(), target);
  }

  // optional string mission_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mission_name().data(), static_cast<int>(this->mission_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgMvMVictory.mission_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mission_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMvMVictory)
  return target;
}

size_t CMsgMvMVictory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMvMVictory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgMvMVictory.Player players = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string tour_name_mannup = 5;
    if (has_tour_name_mannup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tour_name_mannup());
    }

    // optional string mission_name = 6;
    if (has_mission_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mission_name());
    }

    // optional uint32 legacy_mission_index = 1;
    if (has_legacy_mission_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_mission_index());
    }

    // optional fixed32 event_time = 4;
    if (has_event_time()) {
      total_size += 1 + 4;
    }

    // optional uint64 lobby_id = 3;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMvMVictory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMvMVictory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMvMVictory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMvMVictory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMvMVictory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMvMVictory)
    MergeFrom(*source);
  }
}

void CMsgMvMVictory::MergeFrom(const CMsgMvMVictory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMvMVictory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tour_name_mannup();
      tour_name_mannup_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tour_name_mannup_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mission_name();
      mission_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mission_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      legacy_mission_index_ = from.legacy_mission_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_time_ = from.event_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      lobby_id_ = from.lobby_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMvMVictory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMvMVictory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMVictory::CopyFrom(const CMsgMvMVictory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMvMVictory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMVictory::IsInitialized() const {
  return true;
}

void CMsgMvMVictory::Swap(CMsgMvMVictory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMvMVictory::InternalSwap(CMsgMvMVictory* other) {
  using std::swap;
  players_.InternalSwap(&other->players_);
  tour_name_mannup_.Swap(&other->tour_name_mannup_);
  mission_name_.Swap(&other->mission_name_);
  swap(legacy_mission_index_, other->legacy_mission_index_);
  swap(event_time_, other->event_time_);
  swap(lobby_id_, other->lobby_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMvMVictory::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgMvMMannUpVictoryReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMvMMannUpVictoryReply::CMsgMvMMannUpVictoryReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMvMMannUpVictoryReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgMvMMannUpVictoryReply)
}
CMsgMvMMannUpVictoryReply::CMsgMvMMannUpVictoryReply(const CMsgMvMMannUpVictoryReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMvMMannUpVictoryReply)
}

void CMsgMvMMannUpVictoryReply::SharedCtor() {
  _cached_size_ = 0;
}

CMsgMvMMannUpVictoryReply::~CMsgMvMMannUpVictoryReply() {
  // @@protoc_insertion_point(destructor:CMsgMvMMannUpVictoryReply)
  SharedDtor();
}

void CMsgMvMMannUpVictoryReply::SharedDtor() {
}

void CMsgMvMMannUpVictoryReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMvMMannUpVictoryReply::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMvMMannUpVictoryReply& CMsgMvMMannUpVictoryReply::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgMvMMannUpVictoryReply();
  return *internal_default_instance();
}

CMsgMvMMannUpVictoryReply* CMsgMvMMannUpVictoryReply::New(::google::protobuf::Arena* arena) const {
  CMsgMvMMannUpVictoryReply* n = new CMsgMvMMannUpVictoryReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMvMMannUpVictoryReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMvMMannUpVictoryReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMvMMannUpVictoryReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgMvMMannUpVictoryReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgMvMMannUpVictoryReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgMvMMannUpVictoryReply)
  return false;
#undef DO_
}

void CMsgMvMMannUpVictoryReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgMvMMannUpVictoryReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgMvMMannUpVictoryReply)
}

::google::protobuf::uint8* CMsgMvMMannUpVictoryReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMvMMannUpVictoryReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMvMMannUpVictoryReply)
  return target;
}

size_t CMsgMvMMannUpVictoryReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMvMMannUpVictoryReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMvMMannUpVictoryReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMvMMannUpVictoryReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMvMMannUpVictoryReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMvMMannUpVictoryReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMvMMannUpVictoryReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMvMMannUpVictoryReply)
    MergeFrom(*source);
  }
}

void CMsgMvMMannUpVictoryReply::MergeFrom(const CMsgMvMMannUpVictoryReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMvMMannUpVictoryReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgMvMMannUpVictoryReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMvMMannUpVictoryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMMannUpVictoryReply::CopyFrom(const CMsgMvMMannUpVictoryReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMvMMannUpVictoryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMMannUpVictoryReply::IsInitialized() const {
  return true;
}

void CMsgMvMMannUpVictoryReply::Swap(CMsgMvMMannUpVictoryReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMvMMannUpVictoryReply::InternalSwap(CMsgMvMMannUpVictoryReply* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMvMMannUpVictoryReply::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameServerKickingLobby::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameServerKickingLobby::kConnectedPlayersFieldNumber;
const int CMsgGameServerKickingLobby::kCreatePartyFieldNumber;
const int CMsgGameServerKickingLobby::kLobbyIdFieldNumber;
const int CMsgGameServerKickingLobby::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameServerKickingLobby::CMsgGameServerKickingLobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGameServerKickingLobby();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameServerKickingLobby)
}
CMsgGameServerKickingLobby::CMsgGameServerKickingLobby(const CMsgGameServerKickingLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      connected_players_(from.connected_players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_party_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(create_party_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerKickingLobby)
}

void CMsgGameServerKickingLobby::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lobby_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_id_) -
      reinterpret_cast<char*>(&lobby_id_)) + sizeof(match_id_));
  create_party_ = true;
}

CMsgGameServerKickingLobby::~CMsgGameServerKickingLobby() {
  // @@protoc_insertion_point(destructor:CMsgGameServerKickingLobby)
  SharedDtor();
}

void CMsgGameServerKickingLobby::SharedDtor() {
}

void CMsgGameServerKickingLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerKickingLobby::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameServerKickingLobby& CMsgGameServerKickingLobby::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGameServerKickingLobby();
  return *internal_default_instance();
}

CMsgGameServerKickingLobby* CMsgGameServerKickingLobby::New(::google::protobuf::Arena* arena) const {
  CMsgGameServerKickingLobby* n = new CMsgGameServerKickingLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameServerKickingLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerKickingLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connected_players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(match_id_));
    create_party_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameServerKickingLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameServerKickingLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 connected_players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_connected_players())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_connected_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool create_party = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_create_party();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_party_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lobby_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameServerKickingLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameServerKickingLobby)
  return false;
#undef DO_
}

void CMsgGameServerKickingLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameServerKickingLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 connected_players = 1;
  for (int i = 0, n = this->connected_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->connected_players(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool create_party = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->create_party(), output);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lobby_id(), output);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameServerKickingLobby)
}

::google::protobuf::uint8* CMsgGameServerKickingLobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerKickingLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 connected_players = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->connected_players_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool create_party = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->create_party(), target);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lobby_id(), target);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerKickingLobby)
  return target;
}

size_t CMsgGameServerKickingLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerKickingLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated fixed64 connected_players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->connected_players_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->connected_players_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 lobby_id = 3;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint64 match_id = 4;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional bool create_party = 2 [default = true];
    if (has_create_party()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerKickingLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerKickingLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerKickingLobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameServerKickingLobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerKickingLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerKickingLobby)
    MergeFrom(*source);
  }
}

void CMsgGameServerKickingLobby::MergeFrom(const CMsgGameServerKickingLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerKickingLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connected_players_.MergeFrom(from.connected_players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      create_party_ = from.create_party_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameServerKickingLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerKickingLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerKickingLobby::CopyFrom(const CMsgGameServerKickingLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerKickingLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerKickingLobby::IsInitialized() const {
  return true;
}

void CMsgGameServerKickingLobby::Swap(CMsgGameServerKickingLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameServerKickingLobby::InternalSwap(CMsgGameServerKickingLobby* other) {
  using std::swap;
  connected_players_.InternalSwap(&other->connected_players_);
  swap(lobby_id_, other->lobby_id_);
  swap(match_id_, other->match_id_);
  swap(create_party_, other->create_party_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameServerKickingLobby::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameServerKickingLobbyResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameServerKickingLobbyResponse::CMsgGameServerKickingLobbyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGameServerKickingLobbyResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGameServerKickingLobbyResponse)
}
CMsgGameServerKickingLobbyResponse::CMsgGameServerKickingLobbyResponse(const CMsgGameServerKickingLobbyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerKickingLobbyResponse)
}

void CMsgGameServerKickingLobbyResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGameServerKickingLobbyResponse::~CMsgGameServerKickingLobbyResponse() {
  // @@protoc_insertion_point(destructor:CMsgGameServerKickingLobbyResponse)
  SharedDtor();
}

void CMsgGameServerKickingLobbyResponse::SharedDtor() {
}

void CMsgGameServerKickingLobbyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerKickingLobbyResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameServerKickingLobbyResponse& CMsgGameServerKickingLobbyResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGameServerKickingLobbyResponse();
  return *internal_default_instance();
}

CMsgGameServerKickingLobbyResponse* CMsgGameServerKickingLobbyResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGameServerKickingLobbyResponse* n = new CMsgGameServerKickingLobbyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameServerKickingLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerKickingLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameServerKickingLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGameServerKickingLobbyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGameServerKickingLobbyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGameServerKickingLobbyResponse)
  return false;
#undef DO_
}

void CMsgGameServerKickingLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGameServerKickingLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGameServerKickingLobbyResponse)
}

::google::protobuf::uint8* CMsgGameServerKickingLobbyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerKickingLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerKickingLobbyResponse)
  return target;
}

size_t CMsgGameServerKickingLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerKickingLobbyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerKickingLobbyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerKickingLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerKickingLobbyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameServerKickingLobbyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerKickingLobbyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerKickingLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgGameServerKickingLobbyResponse::MergeFrom(const CMsgGameServerKickingLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerKickingLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGameServerKickingLobbyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerKickingLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerKickingLobbyResponse::CopyFrom(const CMsgGameServerKickingLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerKickingLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerKickingLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgGameServerKickingLobbyResponse::Swap(CMsgGameServerKickingLobbyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameServerKickingLobbyResponse::InternalSwap(CMsgGameServerKickingLobbyResponse* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameServerKickingLobbyResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgLeaveGameAndPrepareToJoinParty::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLeaveGameAndPrepareToJoinParty::kPartyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLeaveGameAndPrepareToJoinParty::CMsgLeaveGameAndPrepareToJoinParty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgLeaveGameAndPrepareToJoinParty();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLeaveGameAndPrepareToJoinParty)
}
CMsgLeaveGameAndPrepareToJoinParty::CMsgLeaveGameAndPrepareToJoinParty(const CMsgLeaveGameAndPrepareToJoinParty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  party_id_ = from.party_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgLeaveGameAndPrepareToJoinParty)
}

void CMsgLeaveGameAndPrepareToJoinParty::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
}

CMsgLeaveGameAndPrepareToJoinParty::~CMsgLeaveGameAndPrepareToJoinParty() {
  // @@protoc_insertion_point(destructor:CMsgLeaveGameAndPrepareToJoinParty)
  SharedDtor();
}

void CMsgLeaveGameAndPrepareToJoinParty::SharedDtor() {
}

void CMsgLeaveGameAndPrepareToJoinParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaveGameAndPrepareToJoinParty::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLeaveGameAndPrepareToJoinParty& CMsgLeaveGameAndPrepareToJoinParty::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgLeaveGameAndPrepareToJoinParty();
  return *internal_default_instance();
}

CMsgLeaveGameAndPrepareToJoinParty* CMsgLeaveGameAndPrepareToJoinParty::New(::google::protobuf::Arena* arena) const {
  CMsgLeaveGameAndPrepareToJoinParty* n = new CMsgLeaveGameAndPrepareToJoinParty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLeaveGameAndPrepareToJoinParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLeaveGameAndPrepareToJoinParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLeaveGameAndPrepareToJoinParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLeaveGameAndPrepareToJoinParty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 party_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLeaveGameAndPrepareToJoinParty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLeaveGameAndPrepareToJoinParty)
  return false;
#undef DO_
}

void CMsgLeaveGameAndPrepareToJoinParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLeaveGameAndPrepareToJoinParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->party_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLeaveGameAndPrepareToJoinParty)
}

::google::protobuf::uint8* CMsgLeaveGameAndPrepareToJoinParty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeaveGameAndPrepareToJoinParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->party_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeaveGameAndPrepareToJoinParty)
  return target;
}

size_t CMsgLeaveGameAndPrepareToJoinParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLeaveGameAndPrepareToJoinParty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional fixed64 party_id = 1;
  if (has_party_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaveGameAndPrepareToJoinParty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLeaveGameAndPrepareToJoinParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeaveGameAndPrepareToJoinParty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLeaveGameAndPrepareToJoinParty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLeaveGameAndPrepareToJoinParty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLeaveGameAndPrepareToJoinParty)
    MergeFrom(*source);
  }
}

void CMsgLeaveGameAndPrepareToJoinParty::MergeFrom(const CMsgLeaveGameAndPrepareToJoinParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLeaveGameAndPrepareToJoinParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_party_id()) {
    set_party_id(from.party_id());
  }
}

void CMsgLeaveGameAndPrepareToJoinParty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLeaveGameAndPrepareToJoinParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaveGameAndPrepareToJoinParty::CopyFrom(const CMsgLeaveGameAndPrepareToJoinParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLeaveGameAndPrepareToJoinParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaveGameAndPrepareToJoinParty::IsInitialized() const {
  return true;
}

void CMsgLeaveGameAndPrepareToJoinParty::Swap(CMsgLeaveGameAndPrepareToJoinParty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLeaveGameAndPrepareToJoinParty::InternalSwap(CMsgLeaveGameAndPrepareToJoinParty* other) {
  using std::swap;
  swap(party_id_, other->party_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLeaveGameAndPrepareToJoinParty::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgPlayerLeftMatch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPlayerLeftMatch::kSteamIdFieldNumber;
const int CMsgPlayerLeftMatch::kLeaveReasonFieldNumber;
const int CMsgPlayerLeftMatch::kWasAbandonFieldNumber;
const int CMsgPlayerLeftMatch::kLobbyIdFieldNumber;
const int CMsgPlayerLeftMatch::kMatchIdFieldNumber;
const int CMsgPlayerLeftMatch::kXpBreakdownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPlayerLeftMatch::CMsgPlayerLeftMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgPlayerLeftMatch();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPlayerLeftMatch)
}
CMsgPlayerLeftMatch::CMsgPlayerLeftMatch(const CMsgPlayerLeftMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      xp_breakdown_(from.xp_breakdown_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerLeftMatch)
}

void CMsgPlayerLeftMatch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_id_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(match_id_));
}

CMsgPlayerLeftMatch::~CMsgPlayerLeftMatch() {
  // @@protoc_insertion_point(destructor:CMsgPlayerLeftMatch)
  SharedDtor();
}

void CMsgPlayerLeftMatch::SharedDtor() {
}

void CMsgPlayerLeftMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPlayerLeftMatch::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPlayerLeftMatch& CMsgPlayerLeftMatch::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgPlayerLeftMatch();
  return *internal_default_instance();
}

CMsgPlayerLeftMatch* CMsgPlayerLeftMatch::New(::google::protobuf::Arena* arena) const {
  CMsgPlayerLeftMatch* n = new CMsgPlayerLeftMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPlayerLeftMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerLeftMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xp_breakdown_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(match_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPlayerLeftMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPlayerLeftMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TFMatchLeaveReason leave_reason = 2 [default = TFMatchLeaveReason_UNSPECIFIED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TFMatchLeaveReason_IsValid(value)) {
            set_leave_reason(static_cast< ::TFMatchLeaveReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool was_abandon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_was_abandon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_abandon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lobby_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgTFXPSource xp_breakdown = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_xp_breakdown()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPlayerLeftMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPlayerLeftMatch)
  return false;
#undef DO_
}

void CMsgPlayerLeftMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPlayerLeftMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional .TFMatchLeaveReason leave_reason = 2 [default = TFMatchLeaveReason_UNSPECIFIED];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->leave_reason(), output);
  }

  // optional bool was_abandon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->was_abandon(), output);
  }

  // optional uint64 lobby_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lobby_id(), output);
  }

  // optional uint64 match_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->match_id(), output);
  }

  // repeated .CMsgTFXPSource xp_breakdown = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xp_breakdown_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->xp_breakdown(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPlayerLeftMatch)
}

::google::protobuf::uint8* CMsgPlayerLeftMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerLeftMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional .TFMatchLeaveReason leave_reason = 2 [default = TFMatchLeaveReason_UNSPECIFIED];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->leave_reason(), target);
  }

  // optional bool was_abandon = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->was_abandon(), target);
  }

  // optional uint64 lobby_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lobby_id(), target);
  }

  // optional uint64 match_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->match_id(), target);
  }

  // repeated .CMsgTFXPSource xp_breakdown = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xp_breakdown_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->xp_breakdown(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerLeftMatch)
  return target;
}

size_t CMsgPlayerLeftMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerLeftMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgTFXPSource xp_breakdown = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->xp_breakdown_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->xp_breakdown(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional .TFMatchLeaveReason leave_reason = 2 [default = TFMatchLeaveReason_UNSPECIFIED];
    if (has_leave_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leave_reason());
    }

    // optional bool was_abandon = 3;
    if (has_was_abandon()) {
      total_size += 1 + 1;
    }

    // optional uint64 lobby_id = 4;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint64 match_id = 5;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPlayerLeftMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerLeftMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerLeftMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPlayerLeftMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerLeftMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerLeftMatch)
    MergeFrom(*source);
  }
}

void CMsgPlayerLeftMatch::MergeFrom(const CMsgPlayerLeftMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerLeftMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  xp_breakdown_.MergeFrom(from.xp_breakdown_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      leave_reason_ = from.leave_reason_;
    }
    if (cached_has_bits & 0x00000004u) {
      was_abandon_ = from.was_abandon_;
    }
    if (cached_has_bits & 0x00000008u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPlayerLeftMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerLeftMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerLeftMatch::CopyFrom(const CMsgPlayerLeftMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerLeftMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerLeftMatch::IsInitialized() const {
  return true;
}

void CMsgPlayerLeftMatch::Swap(CMsgPlayerLeftMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPlayerLeftMatch::InternalSwap(CMsgPlayerLeftMatch* other) {
  using std::swap;
  xp_breakdown_.InternalSwap(&other->xp_breakdown_);
  swap(steam_id_, other->steam_id_);
  swap(leave_reason_, other->leave_reason_);
  swap(was_abandon_, other->was_abandon_);
  swap(lobby_id_, other->lobby_id_);
  swap(match_id_, other->match_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPlayerLeftMatch::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgPlayerLeftMatchResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPlayerLeftMatchResponse::CMsgPlayerLeftMatchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgPlayerLeftMatchResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPlayerLeftMatchResponse)
}
CMsgPlayerLeftMatchResponse::CMsgPlayerLeftMatchResponse(const CMsgPlayerLeftMatchResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerLeftMatchResponse)
}

void CMsgPlayerLeftMatchResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgPlayerLeftMatchResponse::~CMsgPlayerLeftMatchResponse() {
  // @@protoc_insertion_point(destructor:CMsgPlayerLeftMatchResponse)
  SharedDtor();
}

void CMsgPlayerLeftMatchResponse::SharedDtor() {
}

void CMsgPlayerLeftMatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPlayerLeftMatchResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPlayerLeftMatchResponse& CMsgPlayerLeftMatchResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgPlayerLeftMatchResponse();
  return *internal_default_instance();
}

CMsgPlayerLeftMatchResponse* CMsgPlayerLeftMatchResponse::New(::google::protobuf::Arena* arena) const {
  CMsgPlayerLeftMatchResponse* n = new CMsgPlayerLeftMatchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPlayerLeftMatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerLeftMatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPlayerLeftMatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPlayerLeftMatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPlayerLeftMatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPlayerLeftMatchResponse)
  return false;
#undef DO_
}

void CMsgPlayerLeftMatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPlayerLeftMatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPlayerLeftMatchResponse)
}

::google::protobuf::uint8* CMsgPlayerLeftMatchResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerLeftMatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerLeftMatchResponse)
  return target;
}

size_t CMsgPlayerLeftMatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerLeftMatchResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPlayerLeftMatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerLeftMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerLeftMatchResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPlayerLeftMatchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerLeftMatchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerLeftMatchResponse)
    MergeFrom(*source);
  }
}

void CMsgPlayerLeftMatchResponse::MergeFrom(const CMsgPlayerLeftMatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerLeftMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPlayerLeftMatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerLeftMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerLeftMatchResponse::CopyFrom(const CMsgPlayerLeftMatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerLeftMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerLeftMatchResponse::IsInitialized() const {
  return true;
}

void CMsgPlayerLeftMatchResponse::Swap(CMsgPlayerLeftMatchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPlayerLeftMatchResponse::InternalSwap(CMsgPlayerLeftMatchResponse* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPlayerLeftMatchResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgPlayerVoteKickedAfterLeavingMatch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPlayerVoteKickedAfterLeavingMatch::kSteamIdFieldNumber;
const int CMsgPlayerVoteKickedAfterLeavingMatch::kLobbyIdFieldNumber;
const int CMsgPlayerVoteKickedAfterLeavingMatch::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPlayerVoteKickedAfterLeavingMatch::CMsgPlayerVoteKickedAfterLeavingMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgPlayerVoteKickedAfterLeavingMatch();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPlayerVoteKickedAfterLeavingMatch)
}
CMsgPlayerVoteKickedAfterLeavingMatch::CMsgPlayerVoteKickedAfterLeavingMatch(const CMsgPlayerVoteKickedAfterLeavingMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerVoteKickedAfterLeavingMatch)
}

void CMsgPlayerVoteKickedAfterLeavingMatch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_id_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(match_id_));
}

CMsgPlayerVoteKickedAfterLeavingMatch::~CMsgPlayerVoteKickedAfterLeavingMatch() {
  // @@protoc_insertion_point(destructor:CMsgPlayerVoteKickedAfterLeavingMatch)
  SharedDtor();
}

void CMsgPlayerVoteKickedAfterLeavingMatch::SharedDtor() {
}

void CMsgPlayerVoteKickedAfterLeavingMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPlayerVoteKickedAfterLeavingMatch::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPlayerVoteKickedAfterLeavingMatch& CMsgPlayerVoteKickedAfterLeavingMatch::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgPlayerVoteKickedAfterLeavingMatch();
  return *internal_default_instance();
}

CMsgPlayerVoteKickedAfterLeavingMatch* CMsgPlayerVoteKickedAfterLeavingMatch::New(::google::protobuf::Arena* arena) const {
  CMsgPlayerVoteKickedAfterLeavingMatch* n = new CMsgPlayerVoteKickedAfterLeavingMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPlayerVoteKickedAfterLeavingMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerVoteKickedAfterLeavingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(match_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPlayerVoteKickedAfterLeavingMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPlayerVoteKickedAfterLeavingMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 lobby_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 match_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPlayerVoteKickedAfterLeavingMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPlayerVoteKickedAfterLeavingMatch)
  return false;
#undef DO_
}

void CMsgPlayerVoteKickedAfterLeavingMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPlayerVoteKickedAfterLeavingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->lobby_id(), output);
  }

  // optional fixed64 match_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPlayerVoteKickedAfterLeavingMatch)
}

::google::protobuf::uint8* CMsgPlayerVoteKickedAfterLeavingMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerVoteKickedAfterLeavingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional fixed64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->lobby_id(), target);
  }

  // optional fixed64 match_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerVoteKickedAfterLeavingMatch)
  return target;
}

size_t CMsgPlayerVoteKickedAfterLeavingMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerVoteKickedAfterLeavingMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 lobby_id = 2;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 match_id = 3;
    if (has_match_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPlayerVoteKickedAfterLeavingMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerVoteKickedAfterLeavingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerVoteKickedAfterLeavingMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPlayerVoteKickedAfterLeavingMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerVoteKickedAfterLeavingMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerVoteKickedAfterLeavingMatch)
    MergeFrom(*source);
  }
}

void CMsgPlayerVoteKickedAfterLeavingMatch::MergeFrom(const CMsgPlayerVoteKickedAfterLeavingMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerVoteKickedAfterLeavingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPlayerVoteKickedAfterLeavingMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerVoteKickedAfterLeavingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerVoteKickedAfterLeavingMatch::CopyFrom(const CMsgPlayerVoteKickedAfterLeavingMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerVoteKickedAfterLeavingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerVoteKickedAfterLeavingMatch::IsInitialized() const {
  return true;
}

void CMsgPlayerVoteKickedAfterLeavingMatch::Swap(CMsgPlayerVoteKickedAfterLeavingMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPlayerVoteKickedAfterLeavingMatch::InternalSwap(CMsgPlayerVoteKickedAfterLeavingMatch* other) {
  using std::swap;
  swap(steam_id_, other->steam_id_);
  swap(lobby_id_, other->lobby_id_);
  swap(match_id_, other->match_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPlayerVoteKickedAfterLeavingMatch::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPlayerVoteKickedAfterLeavingMatchResponse::CMsgPlayerVoteKickedAfterLeavingMatchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgPlayerVoteKickedAfterLeavingMatchResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
}
CMsgPlayerVoteKickedAfterLeavingMatchResponse::CMsgPlayerVoteKickedAfterLeavingMatchResponse(const CMsgPlayerVoteKickedAfterLeavingMatchResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgPlayerVoteKickedAfterLeavingMatchResponse::~CMsgPlayerVoteKickedAfterLeavingMatchResponse() {
  // @@protoc_insertion_point(destructor:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  SharedDtor();
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::SharedDtor() {
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPlayerVoteKickedAfterLeavingMatchResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPlayerVoteKickedAfterLeavingMatchResponse& CMsgPlayerVoteKickedAfterLeavingMatchResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgPlayerVoteKickedAfterLeavingMatchResponse();
  return *internal_default_instance();
}

CMsgPlayerVoteKickedAfterLeavingMatchResponse* CMsgPlayerVoteKickedAfterLeavingMatchResponse::New(::google::protobuf::Arena* arena) const {
  CMsgPlayerVoteKickedAfterLeavingMatchResponse* n = new CMsgPlayerVoteKickedAfterLeavingMatchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPlayerVoteKickedAfterLeavingMatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  return false;
#undef DO_
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
}

::google::protobuf::uint8* CMsgPlayerVoteKickedAfterLeavingMatchResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  return target;
}

size_t CMsgPlayerVoteKickedAfterLeavingMatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerVoteKickedAfterLeavingMatchResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPlayerVoteKickedAfterLeavingMatchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
    MergeFrom(*source);
  }
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::MergeFrom(const CMsgPlayerVoteKickedAfterLeavingMatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::CopyFrom(const CMsgPlayerVoteKickedAfterLeavingMatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerVoteKickedAfterLeavingMatchResponse::IsInitialized() const {
  return true;
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::Swap(CMsgPlayerVoteKickedAfterLeavingMatchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPlayerVoteKickedAfterLeavingMatchResponse::InternalSwap(CMsgPlayerVoteKickedAfterLeavingMatchResponse* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPlayerVoteKickedAfterLeavingMatchResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgHalloween_ServerBossEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHalloween_ServerBossEvent::kEventCounterFieldNumber;
const int CMsgHalloween_ServerBossEvent::kTimestampFieldNumber;
const int CMsgHalloween_ServerBossEvent::kBossTypeFieldNumber;
const int CMsgHalloween_ServerBossEvent::kBossLevelFieldNumber;
const int CMsgHalloween_ServerBossEvent::kEventTypeFieldNumber;
const int CMsgHalloween_ServerBossEvent::kPlayersInvolvedFieldNumber;
const int CMsgHalloween_ServerBossEvent::kElapsedTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHalloween_ServerBossEvent::CMsgHalloween_ServerBossEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgHalloween_ServerBossEvent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgHalloween_ServerBossEvent)
}
CMsgHalloween_ServerBossEvent::CMsgHalloween_ServerBossEvent(const CMsgHalloween_ServerBossEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_counter_, &from.event_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&elapsed_time_) -
    reinterpret_cast<char*>(&event_counter_)) + sizeof(elapsed_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgHalloween_ServerBossEvent)
}

void CMsgHalloween_ServerBossEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elapsed_time_) -
      reinterpret_cast<char*>(&event_counter_)) + sizeof(elapsed_time_));
}

CMsgHalloween_ServerBossEvent::~CMsgHalloween_ServerBossEvent() {
  // @@protoc_insertion_point(destructor:CMsgHalloween_ServerBossEvent)
  SharedDtor();
}

void CMsgHalloween_ServerBossEvent::SharedDtor() {
}

void CMsgHalloween_ServerBossEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHalloween_ServerBossEvent::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgHalloween_ServerBossEvent& CMsgHalloween_ServerBossEvent::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgHalloween_ServerBossEvent();
  return *internal_default_instance();
}

CMsgHalloween_ServerBossEvent* CMsgHalloween_ServerBossEvent::New(::google::protobuf::Arena* arena) const {
  CMsgHalloween_ServerBossEvent* n = new CMsgHalloween_ServerBossEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgHalloween_ServerBossEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHalloween_ServerBossEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&event_counter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&elapsed_time_) -
        reinterpret_cast<char*>(&event_counter_)) + sizeof(elapsed_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgHalloween_ServerBossEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgHalloween_ServerBossEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_counter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_event_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 boss_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_boss_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 boss_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_boss_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_event_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players_involved = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_players_involved();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_involved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float elapsed_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_elapsed_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elapsed_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgHalloween_ServerBossEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgHalloween_ServerBossEvent)
  return false;
#undef DO_
}

void CMsgHalloween_ServerBossEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgHalloween_ServerBossEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_counter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_counter(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional uint32 boss_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->boss_type(), output);
  }

  // optional uint32 boss_level = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->boss_level(), output);
  }

  // optional uint32 event_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->event_type(), output);
  }

  // optional uint32 players_involved = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->players_involved(), output);
  }

  // optional float elapsed_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->elapsed_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgHalloween_ServerBossEvent)
}

::google::protobuf::uint8* CMsgHalloween_ServerBossEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHalloween_ServerBossEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_counter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_counter(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional uint32 boss_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->boss_type(), target);
  }

  // optional uint32 boss_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->boss_level(), target);
  }

  // optional uint32 event_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->event_type(), target);
  }

  // optional uint32 players_involved = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->players_involved(), target);
  }

  // optional float elapsed_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->elapsed_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHalloween_ServerBossEvent)
  return target;
}

size_t CMsgHalloween_ServerBossEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHalloween_ServerBossEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 event_counter = 1;
    if (has_event_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_counter());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 boss_type = 3;
    if (has_boss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_type());
    }

    // optional uint32 boss_level = 4;
    if (has_boss_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_level());
    }

    // optional uint32 event_type = 5;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }

    // optional uint32 players_involved = 6;
    if (has_players_involved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_involved());
    }

    // optional float elapsed_time = 7;
    if (has_elapsed_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHalloween_ServerBossEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgHalloween_ServerBossEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHalloween_ServerBossEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgHalloween_ServerBossEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgHalloween_ServerBossEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgHalloween_ServerBossEvent)
    MergeFrom(*source);
  }
}

void CMsgHalloween_ServerBossEvent::MergeFrom(const CMsgHalloween_ServerBossEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHalloween_ServerBossEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      event_counter_ = from.event_counter_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      boss_type_ = from.boss_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      boss_level_ = from.boss_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      players_involved_ = from.players_involved_;
    }
    if (cached_has_bits & 0x00000040u) {
      elapsed_time_ = from.elapsed_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHalloween_ServerBossEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgHalloween_ServerBossEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHalloween_ServerBossEvent::CopyFrom(const CMsgHalloween_ServerBossEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHalloween_ServerBossEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHalloween_ServerBossEvent::IsInitialized() const {
  return true;
}

void CMsgHalloween_ServerBossEvent::Swap(CMsgHalloween_ServerBossEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHalloween_ServerBossEvent::InternalSwap(CMsgHalloween_ServerBossEvent* other) {
  using std::swap;
  swap(event_counter_, other->event_counter_);
  swap(timestamp_, other->timestamp_);
  swap(boss_type_, other->boss_type_);
  swap(boss_level_, other->boss_level_);
  swap(event_type_, other->event_type_);
  swap(players_involved_, other->players_involved_);
  swap(elapsed_time_, other->elapsed_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgHalloween_ServerBossEvent::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgHalloween_Merasmus2012::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHalloween_Merasmus2012::kEventCounterFieldNumber;
const int CMsgHalloween_Merasmus2012::kTimeSubmittedFieldNumber;
const int CMsgHalloween_Merasmus2012::kIsValveServerFieldNumber;
const int CMsgHalloween_Merasmus2012::kBossLevelFieldNumber;
const int CMsgHalloween_Merasmus2012::kSpawnedHealthFieldNumber;
const int CMsgHalloween_Merasmus2012::kRemainingHealthFieldNumber;
const int CMsgHalloween_Merasmus2012::kLifeTimeFieldNumber;
const int CMsgHalloween_Merasmus2012::kBombKillsFieldNumber;
const int CMsgHalloween_Merasmus2012::kStaffKillsFieldNumber;
const int CMsgHalloween_Merasmus2012::kPvpKillsFieldNumber;
const int CMsgHalloween_Merasmus2012::kProphuntTime1FieldNumber;
const int CMsgHalloween_Merasmus2012::kProphuntTime2FieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgScoutFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgSniperFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgSoldierFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgDemoFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgMedicFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgHeavyFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgPyroFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgSpyFieldNumber;
const int CMsgHalloween_Merasmus2012::kDmgEngineerFieldNumber;
const int CMsgHalloween_Merasmus2012::kScoutCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kSniperCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kSoliderCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kDemoCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kMedicCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kHeavyCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kPyroCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kSpyCountFieldNumber;
const int CMsgHalloween_Merasmus2012::kEngineerCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHalloween_Merasmus2012::CMsgHalloween_Merasmus2012()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgHalloween_Merasmus2012();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgHalloween_Merasmus2012)
}
CMsgHalloween_Merasmus2012::CMsgHalloween_Merasmus2012(const CMsgHalloween_Merasmus2012& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_counter_, &from.event_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&engineer_count_) -
    reinterpret_cast<char*>(&event_counter_)) + sizeof(engineer_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgHalloween_Merasmus2012)
}

void CMsgHalloween_Merasmus2012::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&engineer_count_) -
      reinterpret_cast<char*>(&event_counter_)) + sizeof(engineer_count_));
}

CMsgHalloween_Merasmus2012::~CMsgHalloween_Merasmus2012() {
  // @@protoc_insertion_point(destructor:CMsgHalloween_Merasmus2012)
  SharedDtor();
}

void CMsgHalloween_Merasmus2012::SharedDtor() {
}

void CMsgHalloween_Merasmus2012::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHalloween_Merasmus2012::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgHalloween_Merasmus2012& CMsgHalloween_Merasmus2012::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgHalloween_Merasmus2012();
  return *internal_default_instance();
}

CMsgHalloween_Merasmus2012* CMsgHalloween_Merasmus2012::New(::google::protobuf::Arena* arena) const {
  CMsgHalloween_Merasmus2012* n = new CMsgHalloween_Merasmus2012;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgHalloween_Merasmus2012::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHalloween_Merasmus2012)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&event_counter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bomb_kills_) -
        reinterpret_cast<char*>(&event_counter_)) + sizeof(bomb_kills_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&staff_kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dmg_demo_) -
        reinterpret_cast<char*>(&staff_kills_)) + sizeof(dmg_demo_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&dmg_medic_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&solider_count_) -
        reinterpret_cast<char*>(&dmg_medic_)) + sizeof(solider_count_));
  }
  if (cached_has_bits & 1056964608u) {
    ::memset(&demo_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engineer_count_) -
        reinterpret_cast<char*>(&demo_count_)) + sizeof(engineer_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgHalloween_Merasmus2012::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgHalloween_Merasmus2012)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_counter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_event_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 time_submitted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_time_submitted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_submitted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_valve_server = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_valve_server();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valve_server_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 boss_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_boss_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spawned_health = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_spawned_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawned_health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remaining_health = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_remaining_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaining_health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 life_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_life_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bomb_kills = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_bomb_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bomb_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 staff_kills = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_staff_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &staff_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pvp_kills = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_pvp_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvp_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prophunt_time1 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_prophunt_time1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prophunt_time1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prophunt_time2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_prophunt_time2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prophunt_time2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dmg_scout = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_dmg_scout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_scout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dmg_sniper = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_dmg_sniper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_sniper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dmg_soldier = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_dmg_soldier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_soldier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dmg_demo = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_dmg_demo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_demo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dmg_medic = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_dmg_medic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_medic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dmg_heavy = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_dmg_heavy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_heavy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dmg_pyro = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_dmg_pyro();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_pyro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dmg_spy = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_dmg_spy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_spy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dmg_engineer = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_dmg_engineer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmg_engineer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scout_count = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_scout_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scout_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sniper_count = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_sniper_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sniper_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solider_count = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_solider_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solider_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 demo_count = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_demo_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &demo_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 medic_count = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_medic_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medic_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heavy_count = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_heavy_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heavy_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pyro_count = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_pyro_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pyro_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spy_count = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_spy_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spy_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 engineer_count = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_engineer_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engineer_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgHalloween_Merasmus2012)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgHalloween_Merasmus2012)
  return false;
#undef DO_
}

void CMsgHalloween_Merasmus2012::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgHalloween_Merasmus2012)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_counter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_counter(), output);
  }

  // optional fixed32 time_submitted = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->time_submitted(), output);
  }

  // optional bool is_valve_server = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_valve_server(), output);
  }

  // optional uint32 boss_level = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->boss_level(), output);
  }

  // optional uint32 spawned_health = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->spawned_health(), output);
  }

  // optional uint32 remaining_health = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->remaining_health(), output);
  }

  // optional uint32 life_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->life_time(), output);
  }

  // optional uint32 bomb_kills = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bomb_kills(), output);
  }

  // optional uint32 staff_kills = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->staff_kills(), output);
  }

  // optional uint32 pvp_kills = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pvp_kills(), output);
  }

  // optional uint32 prophunt_time1 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->prophunt_time1(), output);
  }

  // optional uint32 prophunt_time2 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->prophunt_time2(), output);
  }

  // optional uint32 dmg_scout = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->dmg_scout(), output);
  }

  // optional uint32 dmg_sniper = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->dmg_sniper(), output);
  }

  // optional uint32 dmg_soldier = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->dmg_soldier(), output);
  }

  // optional uint32 dmg_demo = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->dmg_demo(), output);
  }

  // optional uint32 dmg_medic = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->dmg_medic(), output);
  }

  // optional uint32 dmg_heavy = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->dmg_heavy(), output);
  }

  // optional uint32 dmg_pyro = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->dmg_pyro(), output);
  }

  // optional uint32 dmg_spy = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->dmg_spy(), output);
  }

  // optional uint32 dmg_engineer = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->dmg_engineer(), output);
  }

  // optional uint32 scout_count = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->scout_count(), output);
  }

  // optional uint32 sniper_count = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->sniper_count(), output);
  }

  // optional uint32 solider_count = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->solider_count(), output);
  }

  // optional uint32 demo_count = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->demo_count(), output);
  }

  // optional uint32 medic_count = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->medic_count(), output);
  }

  // optional uint32 heavy_count = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->heavy_count(), output);
  }

  // optional uint32 pyro_count = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->pyro_count(), output);
  }

  // optional uint32 spy_count = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->spy_count(), output);
  }

  // optional uint32 engineer_count = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->engineer_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgHalloween_Merasmus2012)
}

::google::protobuf::uint8* CMsgHalloween_Merasmus2012::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHalloween_Merasmus2012)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_counter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_counter(), target);
  }

  // optional fixed32 time_submitted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->time_submitted(), target);
  }

  // optional bool is_valve_server = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_valve_server(), target);
  }

  // optional uint32 boss_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->boss_level(), target);
  }

  // optional uint32 spawned_health = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->spawned_health(), target);
  }

  // optional uint32 remaining_health = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->remaining_health(), target);
  }

  // optional uint32 life_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->life_time(), target);
  }

  // optional uint32 bomb_kills = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bomb_kills(), target);
  }

  // optional uint32 staff_kills = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->staff_kills(), target);
  }

  // optional uint32 pvp_kills = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pvp_kills(), target);
  }

  // optional uint32 prophunt_time1 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->prophunt_time1(), target);
  }

  // optional uint32 prophunt_time2 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->prophunt_time2(), target);
  }

  // optional uint32 dmg_scout = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->dmg_scout(), target);
  }

  // optional uint32 dmg_sniper = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->dmg_sniper(), target);
  }

  // optional uint32 dmg_soldier = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->dmg_soldier(), target);
  }

  // optional uint32 dmg_demo = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->dmg_demo(), target);
  }

  // optional uint32 dmg_medic = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->dmg_medic(), target);
  }

  // optional uint32 dmg_heavy = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->dmg_heavy(), target);
  }

  // optional uint32 dmg_pyro = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->dmg_pyro(), target);
  }

  // optional uint32 dmg_spy = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->dmg_spy(), target);
  }

  // optional uint32 dmg_engineer = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->dmg_engineer(), target);
  }

  // optional uint32 scout_count = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->scout_count(), target);
  }

  // optional uint32 sniper_count = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->sniper_count(), target);
  }

  // optional uint32 solider_count = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->solider_count(), target);
  }

  // optional uint32 demo_count = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->demo_count(), target);
  }

  // optional uint32 medic_count = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->medic_count(), target);
  }

  // optional uint32 heavy_count = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->heavy_count(), target);
  }

  // optional uint32 pyro_count = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->pyro_count(), target);
  }

  // optional uint32 spy_count = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->spy_count(), target);
  }

  // optional uint32 engineer_count = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->engineer_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHalloween_Merasmus2012)
  return target;
}

size_t CMsgHalloween_Merasmus2012::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHalloween_Merasmus2012)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 event_counter = 1;
    if (has_event_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_counter());
    }

    // optional fixed32 time_submitted = 2;
    if (has_time_submitted()) {
      total_size += 1 + 4;
    }

    // optional bool is_valve_server = 3;
    if (has_is_valve_server()) {
      total_size += 1 + 1;
    }

    // optional uint32 boss_level = 4;
    if (has_boss_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_level());
    }

    // optional uint32 spawned_health = 5;
    if (has_spawned_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawned_health());
    }

    // optional uint32 remaining_health = 6;
    if (has_remaining_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaining_health());
    }

    // optional uint32 life_time = 7;
    if (has_life_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->life_time());
    }

    // optional uint32 bomb_kills = 8;
    if (has_bomb_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bomb_kills());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 staff_kills = 9;
    if (has_staff_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->staff_kills());
    }

    // optional uint32 pvp_kills = 10;
    if (has_pvp_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pvp_kills());
    }

    // optional uint32 prophunt_time1 = 11;
    if (has_prophunt_time1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prophunt_time1());
    }

    // optional uint32 prophunt_time2 = 12;
    if (has_prophunt_time2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prophunt_time2());
    }

    // optional uint32 dmg_scout = 13;
    if (has_dmg_scout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_scout());
    }

    // optional uint32 dmg_sniper = 14;
    if (has_dmg_sniper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_sniper());
    }

    // optional uint32 dmg_soldier = 15;
    if (has_dmg_soldier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_soldier());
    }

    // optional uint32 dmg_demo = 16;
    if (has_dmg_demo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_demo());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 dmg_medic = 17;
    if (has_dmg_medic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_medic());
    }

    // optional uint32 dmg_heavy = 18;
    if (has_dmg_heavy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_heavy());
    }

    // optional uint32 dmg_pyro = 19;
    if (has_dmg_pyro()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_pyro());
    }

    // optional uint32 dmg_spy = 20;
    if (has_dmg_spy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_spy());
    }

    // optional uint32 dmg_engineer = 21;
    if (has_dmg_engineer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmg_engineer());
    }

    // optional uint32 scout_count = 22;
    if (has_scout_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scout_count());
    }

    // optional uint32 sniper_count = 23;
    if (has_sniper_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sniper_count());
    }

    // optional uint32 solider_count = 24;
    if (has_solider_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solider_count());
    }

  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    // optional uint32 demo_count = 25;
    if (has_demo_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->demo_count());
    }

    // optional uint32 medic_count = 26;
    if (has_medic_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medic_count());
    }

    // optional uint32 heavy_count = 27;
    if (has_heavy_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heavy_count());
    }

    // optional uint32 pyro_count = 28;
    if (has_pyro_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pyro_count());
    }

    // optional uint32 spy_count = 29;
    if (has_spy_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spy_count());
    }

    // optional uint32 engineer_count = 30;
    if (has_engineer_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->engineer_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHalloween_Merasmus2012::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgHalloween_Merasmus2012)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHalloween_Merasmus2012* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgHalloween_Merasmus2012>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgHalloween_Merasmus2012)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgHalloween_Merasmus2012)
    MergeFrom(*source);
  }
}

void CMsgHalloween_Merasmus2012::MergeFrom(const CMsgHalloween_Merasmus2012& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHalloween_Merasmus2012)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      event_counter_ = from.event_counter_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_submitted_ = from.time_submitted_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_valve_server_ = from.is_valve_server_;
    }
    if (cached_has_bits & 0x00000008u) {
      boss_level_ = from.boss_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      spawned_health_ = from.spawned_health_;
    }
    if (cached_has_bits & 0x00000020u) {
      remaining_health_ = from.remaining_health_;
    }
    if (cached_has_bits & 0x00000040u) {
      life_time_ = from.life_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      bomb_kills_ = from.bomb_kills_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      staff_kills_ = from.staff_kills_;
    }
    if (cached_has_bits & 0x00000200u) {
      pvp_kills_ = from.pvp_kills_;
    }
    if (cached_has_bits & 0x00000400u) {
      prophunt_time1_ = from.prophunt_time1_;
    }
    if (cached_has_bits & 0x00000800u) {
      prophunt_time2_ = from.prophunt_time2_;
    }
    if (cached_has_bits & 0x00001000u) {
      dmg_scout_ = from.dmg_scout_;
    }
    if (cached_has_bits & 0x00002000u) {
      dmg_sniper_ = from.dmg_sniper_;
    }
    if (cached_has_bits & 0x00004000u) {
      dmg_soldier_ = from.dmg_soldier_;
    }
    if (cached_has_bits & 0x00008000u) {
      dmg_demo_ = from.dmg_demo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      dmg_medic_ = from.dmg_medic_;
    }
    if (cached_has_bits & 0x00020000u) {
      dmg_heavy_ = from.dmg_heavy_;
    }
    if (cached_has_bits & 0x00040000u) {
      dmg_pyro_ = from.dmg_pyro_;
    }
    if (cached_has_bits & 0x00080000u) {
      dmg_spy_ = from.dmg_spy_;
    }
    if (cached_has_bits & 0x00100000u) {
      dmg_engineer_ = from.dmg_engineer_;
    }
    if (cached_has_bits & 0x00200000u) {
      scout_count_ = from.scout_count_;
    }
    if (cached_has_bits & 0x00400000u) {
      sniper_count_ = from.sniper_count_;
    }
    if (cached_has_bits & 0x00800000u) {
      solider_count_ = from.solider_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      demo_count_ = from.demo_count_;
    }
    if (cached_has_bits & 0x02000000u) {
      medic_count_ = from.medic_count_;
    }
    if (cached_has_bits & 0x04000000u) {
      heavy_count_ = from.heavy_count_;
    }
    if (cached_has_bits & 0x08000000u) {
      pyro_count_ = from.pyro_count_;
    }
    if (cached_has_bits & 0x10000000u) {
      spy_count_ = from.spy_count_;
    }
    if (cached_has_bits & 0x20000000u) {
      engineer_count_ = from.engineer_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHalloween_Merasmus2012::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgHalloween_Merasmus2012)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHalloween_Merasmus2012::CopyFrom(const CMsgHalloween_Merasmus2012& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHalloween_Merasmus2012)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHalloween_Merasmus2012::IsInitialized() const {
  return true;
}

void CMsgHalloween_Merasmus2012::Swap(CMsgHalloween_Merasmus2012* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHalloween_Merasmus2012::InternalSwap(CMsgHalloween_Merasmus2012* other) {
  using std::swap;
  swap(event_counter_, other->event_counter_);
  swap(time_submitted_, other->time_submitted_);
  swap(is_valve_server_, other->is_valve_server_);
  swap(boss_level_, other->boss_level_);
  swap(spawned_health_, other->spawned_health_);
  swap(remaining_health_, other->remaining_health_);
  swap(life_time_, other->life_time_);
  swap(bomb_kills_, other->bomb_kills_);
  swap(staff_kills_, other->staff_kills_);
  swap(pvp_kills_, other->pvp_kills_);
  swap(prophunt_time1_, other->prophunt_time1_);
  swap(prophunt_time2_, other->prophunt_time2_);
  swap(dmg_scout_, other->dmg_scout_);
  swap(dmg_sniper_, other->dmg_sniper_);
  swap(dmg_soldier_, other->dmg_soldier_);
  swap(dmg_demo_, other->dmg_demo_);
  swap(dmg_medic_, other->dmg_medic_);
  swap(dmg_heavy_, other->dmg_heavy_);
  swap(dmg_pyro_, other->dmg_pyro_);
  swap(dmg_spy_, other->dmg_spy_);
  swap(dmg_engineer_, other->dmg_engineer_);
  swap(scout_count_, other->scout_count_);
  swap(sniper_count_, other->sniper_count_);
  swap(solider_count_, other->solider_count_);
  swap(demo_count_, other->demo_count_);
  swap(medic_count_, other->medic_count_);
  swap(heavy_count_, other->heavy_count_);
  swap(pyro_count_, other->pyro_count_);
  swap(spy_count_, other->spy_count_);
  swap(engineer_count_, other->engineer_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgHalloween_Merasmus2012::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgUpdateHalloweenMerasmusLootLevel_Player::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgUpdateHalloweenMerasmusLootLevel_Player::kSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgUpdateHalloweenMerasmusLootLevel_Player::CMsgUpdateHalloweenMerasmusLootLevel_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgUpdateHalloweenMerasmusLootLevel_Player();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgUpdateHalloweenMerasmusLootLevel.Player)
}
CMsgUpdateHalloweenMerasmusLootLevel_Player::CMsgUpdateHalloweenMerasmusLootLevel_Player(const CMsgUpdateHalloweenMerasmusLootLevel_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgUpdateHalloweenMerasmusLootLevel.Player)
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
}

CMsgUpdateHalloweenMerasmusLootLevel_Player::~CMsgUpdateHalloweenMerasmusLootLevel_Player() {
  // @@protoc_insertion_point(destructor:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  SharedDtor();
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::SharedDtor() {
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUpdateHalloweenMerasmusLootLevel_Player::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgUpdateHalloweenMerasmusLootLevel_Player& CMsgUpdateHalloweenMerasmusLootLevel_Player::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgUpdateHalloweenMerasmusLootLevel_Player();
  return *internal_default_instance();
}

CMsgUpdateHalloweenMerasmusLootLevel_Player* CMsgUpdateHalloweenMerasmusLootLevel_Player::New(::google::protobuf::Arena* arena) const {
  CMsgUpdateHalloweenMerasmusLootLevel_Player* n = new CMsgUpdateHalloweenMerasmusLootLevel_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgUpdateHalloweenMerasmusLootLevel_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  return false;
#undef DO_
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgUpdateHalloweenMerasmusLootLevel.Player)
}

::google::protobuf::uint8* CMsgUpdateHalloweenMerasmusLootLevel_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  return target;
}

size_t CMsgUpdateHalloweenMerasmusLootLevel_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUpdateHalloweenMerasmusLootLevel_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgUpdateHalloweenMerasmusLootLevel_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgUpdateHalloweenMerasmusLootLevel.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgUpdateHalloweenMerasmusLootLevel.Player)
    MergeFrom(*source);
  }
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::MergeFrom(const CMsgUpdateHalloweenMerasmusLootLevel_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steam_id()) {
    set_steam_id(from.steam_id());
  }
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::CopyFrom(const CMsgUpdateHalloweenMerasmusLootLevel_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateHalloweenMerasmusLootLevel_Player::IsInitialized() const {
  return true;
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::Swap(CMsgUpdateHalloweenMerasmusLootLevel_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgUpdateHalloweenMerasmusLootLevel_Player::InternalSwap(CMsgUpdateHalloweenMerasmusLootLevel_Player* other) {
  using std::swap;
  swap(steam_id_, other->steam_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgUpdateHalloweenMerasmusLootLevel_Player::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgUpdateHalloweenMerasmusLootLevel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgUpdateHalloweenMerasmusLootLevel::kPlayersFieldNumber;
const int CMsgUpdateHalloweenMerasmusLootLevel::kMerasmusLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgUpdateHalloweenMerasmusLootLevel::CMsgUpdateHalloweenMerasmusLootLevel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgUpdateHalloweenMerasmusLootLevel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgUpdateHalloweenMerasmusLootLevel)
}
CMsgUpdateHalloweenMerasmusLootLevel::CMsgUpdateHalloweenMerasmusLootLevel(const CMsgUpdateHalloweenMerasmusLootLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  merasmus_level_ = from.merasmus_level_;
  // @@protoc_insertion_point(copy_constructor:CMsgUpdateHalloweenMerasmusLootLevel)
}

void CMsgUpdateHalloweenMerasmusLootLevel::SharedCtor() {
  _cached_size_ = 0;
  merasmus_level_ = 0u;
}

CMsgUpdateHalloweenMerasmusLootLevel::~CMsgUpdateHalloweenMerasmusLootLevel() {
  // @@protoc_insertion_point(destructor:CMsgUpdateHalloweenMerasmusLootLevel)
  SharedDtor();
}

void CMsgUpdateHalloweenMerasmusLootLevel::SharedDtor() {
}

void CMsgUpdateHalloweenMerasmusLootLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUpdateHalloweenMerasmusLootLevel::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgUpdateHalloweenMerasmusLootLevel& CMsgUpdateHalloweenMerasmusLootLevel::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgUpdateHalloweenMerasmusLootLevel();
  return *internal_default_instance();
}

CMsgUpdateHalloweenMerasmusLootLevel* CMsgUpdateHalloweenMerasmusLootLevel::New(::google::protobuf::Arena* arena) const {
  CMsgUpdateHalloweenMerasmusLootLevel* n = new CMsgUpdateHalloweenMerasmusLootLevel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgUpdateHalloweenMerasmusLootLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUpdateHalloweenMerasmusLootLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  merasmus_level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgUpdateHalloweenMerasmusLootLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgUpdateHalloweenMerasmusLootLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgUpdateHalloweenMerasmusLootLevel.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 merasmus_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_merasmus_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &merasmus_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgUpdateHalloweenMerasmusLootLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgUpdateHalloweenMerasmusLootLevel)
  return false;
#undef DO_
}

void CMsgUpdateHalloweenMerasmusLootLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgUpdateHalloweenMerasmusLootLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgUpdateHalloweenMerasmusLootLevel.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 merasmus_level = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->merasmus_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgUpdateHalloweenMerasmusLootLevel)
}

::google::protobuf::uint8* CMsgUpdateHalloweenMerasmusLootLevel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUpdateHalloweenMerasmusLootLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgUpdateHalloweenMerasmusLootLevel.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 merasmus_level = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->merasmus_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUpdateHalloweenMerasmusLootLevel)
  return target;
}

size_t CMsgUpdateHalloweenMerasmusLootLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUpdateHalloweenMerasmusLootLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgUpdateHalloweenMerasmusLootLevel.Player players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // optional uint32 merasmus_level = 2;
  if (has_merasmus_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->merasmus_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUpdateHalloweenMerasmusLootLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgUpdateHalloweenMerasmusLootLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUpdateHalloweenMerasmusLootLevel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgUpdateHalloweenMerasmusLootLevel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgUpdateHalloweenMerasmusLootLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgUpdateHalloweenMerasmusLootLevel)
    MergeFrom(*source);
  }
}

void CMsgUpdateHalloweenMerasmusLootLevel::MergeFrom(const CMsgUpdateHalloweenMerasmusLootLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgUpdateHalloweenMerasmusLootLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.has_merasmus_level()) {
    set_merasmus_level(from.merasmus_level());
  }
}

void CMsgUpdateHalloweenMerasmusLootLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgUpdateHalloweenMerasmusLootLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateHalloweenMerasmusLootLevel::CopyFrom(const CMsgUpdateHalloweenMerasmusLootLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUpdateHalloweenMerasmusLootLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateHalloweenMerasmusLootLevel::IsInitialized() const {
  return true;
}

void CMsgUpdateHalloweenMerasmusLootLevel::Swap(CMsgUpdateHalloweenMerasmusLootLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgUpdateHalloweenMerasmusLootLevel::InternalSwap(CMsgUpdateHalloweenMerasmusLootLevel* other) {
  using std::swap;
  players_.InternalSwap(&other->players_);
  swap(merasmus_level_, other->merasmus_level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgUpdateHalloweenMerasmusLootLevel::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAttribute_String::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAttribute_String::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAttribute_String::CAttribute_String()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCAttribute_String();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAttribute_String)
}
CAttribute_String::CAttribute_String(const CAttribute_String& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:CAttribute_String)
}

void CAttribute_String::SharedCtor() {
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CAttribute_String::~CAttribute_String() {
  // @@protoc_insertion_point(destructor:CAttribute_String)
  SharedDtor();
}

void CAttribute_String::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAttribute_String::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAttribute_String::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAttribute_String& CAttribute_String::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCAttribute_String();
  return *internal_default_instance();
}

CAttribute_String* CAttribute_String::New(::google::protobuf::Arena* arena) const {
  CAttribute_String* n = new CAttribute_String;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAttribute_String::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_String)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*value_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAttribute_String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAttribute_String)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAttribute_String.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAttribute_String)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAttribute_String)
  return false;
#undef DO_
}

void CAttribute_String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAttribute_String)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_String.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAttribute_String)
}

::google::protobuf::uint8* CAttribute_String::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_String)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_String.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_String)
  return target;
}

size_t CAttribute_String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_String)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string value = 1;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAttribute_String::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAttribute_String)
  GOOGLE_DCHECK_NE(&from, this);
  const CAttribute_String* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAttribute_String>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAttribute_String)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAttribute_String)
    MergeFrom(*source);
  }
}

void CAttribute_String::MergeFrom(const CAttribute_String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_String)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    set_has_value();
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void CAttribute_String::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAttribute_String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_String::CopyFrom(const CAttribute_String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_String::IsInitialized() const {
  return true;
}

void CAttribute_String::Swap(CAttribute_String* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAttribute_String::InternalSwap(CAttribute_String* other) {
  using std::swap;
  value_.Swap(&other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAttribute_String::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAttribute_DynamicRecipeComponent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAttribute_DynamicRecipeComponent::kDefIndexFieldNumber;
const int CAttribute_DynamicRecipeComponent::kItemQualityFieldNumber;
const int CAttribute_DynamicRecipeComponent::kComponentFlagsFieldNumber;
const int CAttribute_DynamicRecipeComponent::kAttributesStringFieldNumber;
const int CAttribute_DynamicRecipeComponent::kNumRequiredFieldNumber;
const int CAttribute_DynamicRecipeComponent::kNumFulfilledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAttribute_DynamicRecipeComponent::CAttribute_DynamicRecipeComponent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCAttribute_DynamicRecipeComponent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAttribute_DynamicRecipeComponent)
}
CAttribute_DynamicRecipeComponent::CAttribute_DynamicRecipeComponent(const CAttribute_DynamicRecipeComponent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attributes_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attributes_string()) {
    attributes_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attributes_string_);
  }
  ::memcpy(&def_index_, &from.def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_fulfilled_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(num_fulfilled_));
  // @@protoc_insertion_point(copy_constructor:CAttribute_DynamicRecipeComponent)
}

void CAttribute_DynamicRecipeComponent::SharedCtor() {
  _cached_size_ = 0;
  attributes_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&def_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_fulfilled_) -
      reinterpret_cast<char*>(&def_index_)) + sizeof(num_fulfilled_));
}

CAttribute_DynamicRecipeComponent::~CAttribute_DynamicRecipeComponent() {
  // @@protoc_insertion_point(destructor:CAttribute_DynamicRecipeComponent)
  SharedDtor();
}

void CAttribute_DynamicRecipeComponent::SharedDtor() {
  attributes_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAttribute_DynamicRecipeComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAttribute_DynamicRecipeComponent::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAttribute_DynamicRecipeComponent& CAttribute_DynamicRecipeComponent::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCAttribute_DynamicRecipeComponent();
  return *internal_default_instance();
}

CAttribute_DynamicRecipeComponent* CAttribute_DynamicRecipeComponent::New(::google::protobuf::Arena* arena) const {
  CAttribute_DynamicRecipeComponent* n = new CAttribute_DynamicRecipeComponent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAttribute_DynamicRecipeComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_DynamicRecipeComponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!attributes_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*attributes_string_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 62u) {
    ::memset(&def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_fulfilled_) -
        reinterpret_cast<char*>(&def_index_)) + sizeof(num_fulfilled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAttribute_DynamicRecipeComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAttribute_DynamicRecipeComponent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_item_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 component_flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_component_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &component_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string attributes_string = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attributes_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attributes_string().data(), static_cast<int>(this->attributes_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAttribute_DynamicRecipeComponent.attributes_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_required = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_num_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_fulfilled = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_num_fulfilled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_fulfilled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAttribute_DynamicRecipeComponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAttribute_DynamicRecipeComponent)
  return false;
#undef DO_
}

void CAttribute_DynamicRecipeComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAttribute_DynamicRecipeComponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }

  // optional uint32 item_quality = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_quality(), output);
  }

  // optional uint32 component_flags = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->component_flags(), output);
  }

  // optional string attributes_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attributes_string().data(), static_cast<int>(this->attributes_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_DynamicRecipeComponent.attributes_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->attributes_string(), output);
  }

  // optional uint32 num_required = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_required(), output);
  }

  // optional uint32 num_fulfilled = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_fulfilled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAttribute_DynamicRecipeComponent)
}

::google::protobuf::uint8* CAttribute_DynamicRecipeComponent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_DynamicRecipeComponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }

  // optional uint32 item_quality = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_quality(), target);
  }

  // optional uint32 component_flags = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->component_flags(), target);
  }

  // optional string attributes_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attributes_string().data(), static_cast<int>(this->attributes_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_DynamicRecipeComponent.attributes_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->attributes_string(), target);
  }

  // optional uint32 num_required = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_required(), target);
  }

  // optional uint32 num_fulfilled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_fulfilled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_DynamicRecipeComponent)
  return target;
}

size_t CAttribute_DynamicRecipeComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_DynamicRecipeComponent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string attributes_string = 4;
    if (has_attributes_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attributes_string());
    }

    // optional uint32 def_index = 1;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint32 item_quality = 2;
    if (has_item_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_quality());
    }

    // optional uint32 component_flags = 3;
    if (has_component_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->component_flags());
    }

    // optional uint32 num_required = 5;
    if (has_num_required()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_required());
    }

    // optional uint32 num_fulfilled = 6;
    if (has_num_fulfilled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_fulfilled());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAttribute_DynamicRecipeComponent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAttribute_DynamicRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const CAttribute_DynamicRecipeComponent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAttribute_DynamicRecipeComponent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAttribute_DynamicRecipeComponent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAttribute_DynamicRecipeComponent)
    MergeFrom(*source);
  }
}

void CAttribute_DynamicRecipeComponent::MergeFrom(const CAttribute_DynamicRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_DynamicRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_attributes_string();
      attributes_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attributes_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_quality_ = from.item_quality_;
    }
    if (cached_has_bits & 0x00000008u) {
      component_flags_ = from.component_flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_required_ = from.num_required_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_fulfilled_ = from.num_fulfilled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAttribute_DynamicRecipeComponent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAttribute_DynamicRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_DynamicRecipeComponent::CopyFrom(const CAttribute_DynamicRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_DynamicRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_DynamicRecipeComponent::IsInitialized() const {
  return true;
}

void CAttribute_DynamicRecipeComponent::Swap(CAttribute_DynamicRecipeComponent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAttribute_DynamicRecipeComponent::InternalSwap(CAttribute_DynamicRecipeComponent* other) {
  using std::swap;
  attributes_string_.Swap(&other->attributes_string_);
  swap(def_index_, other->def_index_);
  swap(item_quality_, other->item_quality_);
  swap(component_flags_, other->component_flags_);
  swap(num_required_, other->num_required_);
  swap(num_fulfilled_, other->num_fulfilled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAttribute_DynamicRecipeComponent::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kDefIndexFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kItemDefFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kItemQualityFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kComponentFlagsFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kItemFlagsFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kAttributesStringFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kNumRequiredFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kItemCountFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kNumFulfilledFieldNumber;
const int CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::kItemsFulfilledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
}
CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT(const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attributes_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attributes_string()) {
    attributes_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attributes_string_);
  }
  ::memcpy(&def_index_, &from.def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&items_fulfilled_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(items_fulfilled_));
  // @@protoc_insertion_point(copy_constructor:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::SharedCtor() {
  _cached_size_ = 0;
  attributes_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&def_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&items_fulfilled_) -
      reinterpret_cast<char*>(&def_index_)) + sizeof(items_fulfilled_));
}

CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::~CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT() {
  // @@protoc_insertion_point(destructor:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  SharedDtor();
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::SharedDtor() {
  attributes_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT();
  return *internal_default_instance();
}

CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::New(::google::protobuf::Arena* arena) const {
  CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* n = new CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!attributes_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*attributes_string_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_count_) -
        reinterpret_cast<char*>(&def_index_)) + sizeof(item_count_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&num_fulfilled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&items_fulfilled_) -
        reinterpret_cast<char*>(&num_fulfilled_)) + sizeof(items_fulfilled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_def = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_item_def();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_quality = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_item_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 component_flags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_component_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &component_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_flags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_item_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string attributes_string = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attributes_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attributes_string().data(), static_cast<int>(this->attributes_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.attributes_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_required = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_num_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_item_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_fulfilled = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_num_fulfilled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_fulfilled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 items_fulfilled = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_items_fulfilled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &items_fulfilled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  return false;
#undef DO_
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }

  // optional uint32 item_def = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_def(), output);
  }

  // optional uint32 item_quality = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_quality(), output);
  }

  // optional uint32 component_flags = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->component_flags(), output);
  }

  // optional uint32 item_flags = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->item_flags(), output);
  }

  // optional string attributes_string = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attributes_string().data(), static_cast<int>(this->attributes_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.attributes_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->attributes_string(), output);
  }

  // optional uint32 num_required = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_required(), output);
  }

  // optional uint32 item_count = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->item_count(), output);
  }

  // optional uint32 num_fulfilled = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->num_fulfilled(), output);
  }

  // optional uint32 items_fulfilled = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->items_fulfilled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
}

::google::protobuf::uint8* CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }

  // optional uint32 item_def = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_def(), target);
  }

  // optional uint32 item_quality = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_quality(), target);
  }

  // optional uint32 component_flags = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->component_flags(), target);
  }

  // optional uint32 item_flags = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->item_flags(), target);
  }

  // optional string attributes_string = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attributes_string().data(), static_cast<int>(this->attributes_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.attributes_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->attributes_string(), target);
  }

  // optional uint32 num_required = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_required(), target);
  }

  // optional uint32 item_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->item_count(), target);
  }

  // optional uint32 num_fulfilled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->num_fulfilled(), target);
  }

  // optional uint32 items_fulfilled = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->items_fulfilled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  return target;
}

size_t CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string attributes_string = 6;
    if (has_attributes_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attributes_string());
    }

    // optional uint32 def_index = 1;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint32 item_def = 2;
    if (has_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }

    // optional uint32 item_quality = 3;
    if (has_item_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_quality());
    }

    // optional uint32 component_flags = 4;
    if (has_component_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->component_flags());
    }

    // optional uint32 item_flags = 5;
    if (has_item_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_flags());
    }

    // optional uint32 num_required = 7;
    if (has_num_required()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_required());
    }

    // optional uint32 item_count = 8;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 num_fulfilled = 9;
    if (has_num_fulfilled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_fulfilled());
    }

    // optional uint32 items_fulfilled = 10;
    if (has_items_fulfilled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->items_fulfilled());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  GOOGLE_DCHECK_NE(&from, this);
  const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
    MergeFrom(*source);
  }
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::MergeFrom(const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_attributes_string();
      attributes_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attributes_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000008u) {
      item_quality_ = from.item_quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      component_flags_ = from.component_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_flags_ = from.item_flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_required_ = from.num_required_;
    }
    if (cached_has_bits & 0x00000080u) {
      item_count_ = from.item_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      num_fulfilled_ = from.num_fulfilled_;
    }
    if (cached_has_bits & 0x00000200u) {
      items_fulfilled_ = from.items_fulfilled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::CopyFrom(const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::IsInitialized() const {
  return true;
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::Swap(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::InternalSwap(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* other) {
  using std::swap;
  attributes_string_.Swap(&other->attributes_string_);
  swap(def_index_, other->def_index_);
  swap(item_def_, other->item_def_);
  swap(item_quality_, other->item_quality_);
  swap(component_flags_, other->component_flags_);
  swap(item_flags_, other->item_flags_);
  swap(num_required_, other->num_required_);
  swap(item_count_, other->item_count_);
  swap(num_fulfilled_, other->num_fulfilled_);
  swap(items_fulfilled_, other->items_fulfilled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAttribute_ItemSlotCriteria::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAttribute_ItemSlotCriteria::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAttribute_ItemSlotCriteria::CAttribute_ItemSlotCriteria()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCAttribute_ItemSlotCriteria();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAttribute_ItemSlotCriteria)
}
CAttribute_ItemSlotCriteria::CAttribute_ItemSlotCriteria(const CAttribute_ItemSlotCriteria& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tags()) {
    tags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tags_);
  }
  // @@protoc_insertion_point(copy_constructor:CAttribute_ItemSlotCriteria)
}

void CAttribute_ItemSlotCriteria::SharedCtor() {
  _cached_size_ = 0;
  tags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CAttribute_ItemSlotCriteria::~CAttribute_ItemSlotCriteria() {
  // @@protoc_insertion_point(destructor:CAttribute_ItemSlotCriteria)
  SharedDtor();
}

void CAttribute_ItemSlotCriteria::SharedDtor() {
  tags_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAttribute_ItemSlotCriteria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAttribute_ItemSlotCriteria::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAttribute_ItemSlotCriteria& CAttribute_ItemSlotCriteria::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCAttribute_ItemSlotCriteria();
  return *internal_default_instance();
}

CAttribute_ItemSlotCriteria* CAttribute_ItemSlotCriteria::New(::google::protobuf::Arena* arena) const {
  CAttribute_ItemSlotCriteria* n = new CAttribute_ItemSlotCriteria;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAttribute_ItemSlotCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_ItemSlotCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!tags_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*tags_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAttribute_ItemSlotCriteria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAttribute_ItemSlotCriteria)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags().data(), static_cast<int>(this->tags().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CAttribute_ItemSlotCriteria.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAttribute_ItemSlotCriteria)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAttribute_ItemSlotCriteria)
  return false;
#undef DO_
}

void CAttribute_ItemSlotCriteria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAttribute_ItemSlotCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tags = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags().data(), static_cast<int>(this->tags().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_ItemSlotCriteria.tags");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAttribute_ItemSlotCriteria)
}

::google::protobuf::uint8* CAttribute_ItemSlotCriteria::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_ItemSlotCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tags = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags().data(), static_cast<int>(this->tags().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CAttribute_ItemSlotCriteria.tags");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_ItemSlotCriteria)
  return target;
}

size_t CAttribute_ItemSlotCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_ItemSlotCriteria)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string tags = 1;
  if (has_tags()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAttribute_ItemSlotCriteria::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAttribute_ItemSlotCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const CAttribute_ItemSlotCriteria* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAttribute_ItemSlotCriteria>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAttribute_ItemSlotCriteria)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAttribute_ItemSlotCriteria)
    MergeFrom(*source);
  }
}

void CAttribute_ItemSlotCriteria::MergeFrom(const CAttribute_ItemSlotCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_ItemSlotCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tags()) {
    set_has_tags();
    tags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tags_);
  }
}

void CAttribute_ItemSlotCriteria::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAttribute_ItemSlotCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_ItemSlotCriteria::CopyFrom(const CAttribute_ItemSlotCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_ItemSlotCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_ItemSlotCriteria::IsInitialized() const {
  return true;
}

void CAttribute_ItemSlotCriteria::Swap(CAttribute_ItemSlotCriteria* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAttribute_ItemSlotCriteria::InternalSwap(CAttribute_ItemSlotCriteria* other) {
  using std::swap;
  tags_.Swap(&other->tags_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAttribute_ItemSlotCriteria::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetItemSlotAttribute::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetItemSlotAttribute::kItemIdFieldNumber;
const int CMsgSetItemSlotAttribute::kSlotItemOriginalIdFieldNumber;
const int CMsgSetItemSlotAttribute::kSlotIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetItemSlotAttribute::CMsgSetItemSlotAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgSetItemSlotAttribute();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSetItemSlotAttribute)
}
CMsgSetItemSlotAttribute::CMsgSetItemSlotAttribute(const CMsgSetItemSlotAttribute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_index_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(slot_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetItemSlotAttribute)
}

void CMsgSetItemSlotAttribute::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_index_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(slot_index_));
}

CMsgSetItemSlotAttribute::~CMsgSetItemSlotAttribute() {
  // @@protoc_insertion_point(destructor:CMsgSetItemSlotAttribute)
  SharedDtor();
}

void CMsgSetItemSlotAttribute::SharedDtor() {
}

void CMsgSetItemSlotAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetItemSlotAttribute::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetItemSlotAttribute& CMsgSetItemSlotAttribute::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgSetItemSlotAttribute();
  return *internal_default_instance();
}

CMsgSetItemSlotAttribute* CMsgSetItemSlotAttribute::New(::google::protobuf::Arena* arena) const {
  CMsgSetItemSlotAttribute* n = new CMsgSetItemSlotAttribute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetItemSlotAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetItemSlotAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slot_index_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(slot_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetItemSlotAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSetItemSlotAttribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 slot_item_original_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_slot_item_original_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &slot_item_original_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_slot_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSetItemSlotAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSetItemSlotAttribute)
  return false;
#undef DO_
}

void CMsgSetItemSlotAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSetItemSlotAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional uint64 slot_item_original_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->slot_item_original_id(), output);
  }

  // optional uint32 slot_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slot_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSetItemSlotAttribute)
}

::google::protobuf::uint8* CMsgSetItemSlotAttribute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetItemSlotAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional uint64 slot_item_original_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->slot_item_original_id(), target);
  }

  // optional uint32 slot_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slot_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetItemSlotAttribute)
  return target;
}

size_t CMsgSetItemSlotAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetItemSlotAttribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint64 slot_item_original_id = 2;
    if (has_slot_item_original_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->slot_item_original_id());
    }

    // optional uint32 slot_index = 3;
    if (has_slot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetItemSlotAttribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetItemSlotAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetItemSlotAttribute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetItemSlotAttribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetItemSlotAttribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetItemSlotAttribute)
    MergeFrom(*source);
  }
}

void CMsgSetItemSlotAttribute::MergeFrom(const CMsgSetItemSlotAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetItemSlotAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_item_original_id_ = from.slot_item_original_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      slot_index_ = from.slot_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetItemSlotAttribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetItemSlotAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetItemSlotAttribute::CopyFrom(const CMsgSetItemSlotAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetItemSlotAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemSlotAttribute::IsInitialized() const {
  return true;
}

void CMsgSetItemSlotAttribute::Swap(CMsgSetItemSlotAttribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetItemSlotAttribute::InternalSwap(CMsgSetItemSlotAttribute* other) {
  using std::swap;
  swap(item_id_, other->item_id_);
  swap(slot_item_original_id_, other->slot_item_original_id_);
  swap(slot_index_, other->slot_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetItemSlotAttribute::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSOWarData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOWarData::kAccountIdFieldNumber;
const int CSOWarData::kWarIdFieldNumber;
const int CSOWarData::kAffiliationFieldNumber;
const int CSOWarData::kPointsScoredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOWarData::CSOWarData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOWarData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSOWarData)
}
CSOWarData::CSOWarData(const CSOWarData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&points_scored_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(points_scored_));
  // @@protoc_insertion_point(copy_constructor:CSOWarData)
}

void CSOWarData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&points_scored_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(points_scored_));
}

CSOWarData::~CSOWarData() {
  // @@protoc_insertion_point(destructor:CSOWarData)
  SharedDtor();
}

void CSOWarData::SharedDtor() {
}

void CSOWarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOWarData::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOWarData& CSOWarData::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOWarData();
  return *internal_default_instance();
}

CSOWarData* CSOWarData::New(::google::protobuf::Arena* arena) const {
  CSOWarData* n = new CSOWarData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOWarData::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOWarData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&points_scored_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(points_scored_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOWarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSOWarData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 war_id = 2 [(.key_field) = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_war_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &war_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 affiliation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_affiliation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &affiliation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 points_scored = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_points_scored();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_scored_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSOWarData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSOWarData)
  return false;
#undef DO_
}

void CSOWarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSOWarData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 war_id = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->war_id(), output);
  }

  // optional uint32 affiliation = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->affiliation(), output);
  }

  // optional uint32 points_scored = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->points_scored(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSOWarData)
}

::google::protobuf::uint8* CSOWarData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSOWarData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 war_id = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->war_id(), target);
  }

  // optional uint32 affiliation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->affiliation(), target);
  }

  // optional uint32 points_scored = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->points_scored(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOWarData)
  return target;
}

size_t CSOWarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOWarData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 war_id = 2 [(.key_field) = true];
    if (has_war_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->war_id());
    }

    // optional uint32 affiliation = 3;
    if (has_affiliation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->affiliation());
    }

    // optional uint32 points_scored = 4;
    if (has_points_scored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_scored());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOWarData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOWarData)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOWarData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOWarData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOWarData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOWarData)
    MergeFrom(*source);
  }
}

void CSOWarData::MergeFrom(const CSOWarData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOWarData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      war_id_ = from.war_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      affiliation_ = from.affiliation_;
    }
    if (cached_has_bits & 0x00000008u) {
      points_scored_ = from.points_scored_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOWarData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOWarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOWarData::CopyFrom(const CSOWarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOWarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOWarData::IsInitialized() const {
  return true;
}

void CSOWarData::Swap(CSOWarData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOWarData::InternalSwap(CSOWarData* other) {
  using std::swap;
  swap(account_id_, other->account_id_);
  swap(war_id_, other->war_id_);
  swap(affiliation_, other->affiliation_);
  swap(points_scored_, other->points_scored_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOWarData::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgGC_War_IndividualUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGC_War_IndividualUpdate::kSteamIdFieldNumber;
const int CGCMsgGC_War_IndividualUpdate::kWarIdFieldNumber;
const int CGCMsgGC_War_IndividualUpdate::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGC_War_IndividualUpdate::CGCMsgGC_War_IndividualUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgGC_War_IndividualUpdate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCMsgGC_War_IndividualUpdate)
}
CGCMsgGC_War_IndividualUpdate::CGCMsgGC_War_IndividualUpdate(const CGCMsgGC_War_IndividualUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgGC_War_IndividualUpdate)
}

void CGCMsgGC_War_IndividualUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(score_));
}

CGCMsgGC_War_IndividualUpdate::~CGCMsgGC_War_IndividualUpdate() {
  // @@protoc_insertion_point(destructor:CGCMsgGC_War_IndividualUpdate)
  SharedDtor();
}

void CGCMsgGC_War_IndividualUpdate::SharedDtor() {
}

void CGCMsgGC_War_IndividualUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGC_War_IndividualUpdate::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgGC_War_IndividualUpdate& CGCMsgGC_War_IndividualUpdate::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgGC_War_IndividualUpdate();
  return *internal_default_instance();
}

CGCMsgGC_War_IndividualUpdate* CGCMsgGC_War_IndividualUpdate::New(::google::protobuf::Arena* arena) const {
  CGCMsgGC_War_IndividualUpdate* n = new CGCMsgGC_War_IndividualUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgGC_War_IndividualUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGC_War_IndividualUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgGC_War_IndividualUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCMsgGC_War_IndividualUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 war_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_war_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &war_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCMsgGC_War_IndividualUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCMsgGC_War_IndividualUpdate)
  return false;
#undef DO_
}

void CGCMsgGC_War_IndividualUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCMsgGC_War_IndividualUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 war_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->war_id(), output);
  }

  // optional uint32 score = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCMsgGC_War_IndividualUpdate)
}

::google::protobuf::uint8* CGCMsgGC_War_IndividualUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGC_War_IndividualUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 war_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->war_id(), target);
  }

  // optional uint32 score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGC_War_IndividualUpdate)
  return target;
}

size_t CGCMsgGC_War_IndividualUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGC_War_IndividualUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 war_id = 2;
    if (has_war_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->war_id());
    }

    // optional uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGC_War_IndividualUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgGC_War_IndividualUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGC_War_IndividualUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgGC_War_IndividualUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgGC_War_IndividualUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgGC_War_IndividualUpdate)
    MergeFrom(*source);
  }
}

void CGCMsgGC_War_IndividualUpdate::MergeFrom(const CGCMsgGC_War_IndividualUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGC_War_IndividualUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      war_id_ = from.war_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgGC_War_IndividualUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgGC_War_IndividualUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_War_IndividualUpdate::CopyFrom(const CGCMsgGC_War_IndividualUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGC_War_IndividualUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_War_IndividualUpdate::IsInitialized() const {
  return true;
}

void CGCMsgGC_War_IndividualUpdate::Swap(CGCMsgGC_War_IndividualUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGC_War_IndividualUpdate::InternalSwap(CGCMsgGC_War_IndividualUpdate* other) {
  using std::swap;
  swap(steam_id_, other->steam_id_);
  swap(war_id_, other->war_id_);
  swap(score_, other->score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgGC_War_IndividualUpdate::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgGC_War_JoinWar::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGC_War_JoinWar::kAffiliationFieldNumber;
const int CGCMsgGC_War_JoinWar::kWarIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGC_War_JoinWar::CGCMsgGC_War_JoinWar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgGC_War_JoinWar();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCMsgGC_War_JoinWar)
}
CGCMsgGC_War_JoinWar::CGCMsgGC_War_JoinWar(const CGCMsgGC_War_JoinWar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&affiliation_, &from.affiliation_,
    static_cast<size_t>(reinterpret_cast<char*>(&war_id_) -
    reinterpret_cast<char*>(&affiliation_)) + sizeof(war_id_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgGC_War_JoinWar)
}

void CGCMsgGC_War_JoinWar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&affiliation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&war_id_) -
      reinterpret_cast<char*>(&affiliation_)) + sizeof(war_id_));
}

CGCMsgGC_War_JoinWar::~CGCMsgGC_War_JoinWar() {
  // @@protoc_insertion_point(destructor:CGCMsgGC_War_JoinWar)
  SharedDtor();
}

void CGCMsgGC_War_JoinWar::SharedDtor() {
}

void CGCMsgGC_War_JoinWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGC_War_JoinWar::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgGC_War_JoinWar& CGCMsgGC_War_JoinWar::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgGC_War_JoinWar();
  return *internal_default_instance();
}

CGCMsgGC_War_JoinWar* CGCMsgGC_War_JoinWar::New(::google::protobuf::Arena* arena) const {
  CGCMsgGC_War_JoinWar* n = new CGCMsgGC_War_JoinWar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgGC_War_JoinWar::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGC_War_JoinWar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&affiliation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&war_id_) -
        reinterpret_cast<char*>(&affiliation_)) + sizeof(war_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgGC_War_JoinWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCMsgGC_War_JoinWar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 affiliation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_affiliation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &affiliation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 war_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_war_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &war_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCMsgGC_War_JoinWar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCMsgGC_War_JoinWar)
  return false;
#undef DO_
}

void CGCMsgGC_War_JoinWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCMsgGC_War_JoinWar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 affiliation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->affiliation(), output);
  }

  // optional uint32 war_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->war_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCMsgGC_War_JoinWar)
}

::google::protobuf::uint8* CGCMsgGC_War_JoinWar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGC_War_JoinWar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 affiliation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->affiliation(), target);
  }

  // optional uint32 war_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->war_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGC_War_JoinWar)
  return target;
}

size_t CGCMsgGC_War_JoinWar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGC_War_JoinWar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 affiliation = 1;
    if (has_affiliation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->affiliation());
    }

    // optional uint32 war_id = 2;
    if (has_war_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->war_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGC_War_JoinWar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgGC_War_JoinWar)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGC_War_JoinWar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgGC_War_JoinWar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgGC_War_JoinWar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgGC_War_JoinWar)
    MergeFrom(*source);
  }
}

void CGCMsgGC_War_JoinWar::MergeFrom(const CGCMsgGC_War_JoinWar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGC_War_JoinWar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      affiliation_ = from.affiliation_;
    }
    if (cached_has_bits & 0x00000002u) {
      war_id_ = from.war_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgGC_War_JoinWar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgGC_War_JoinWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_War_JoinWar::CopyFrom(const CGCMsgGC_War_JoinWar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGC_War_JoinWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_War_JoinWar::IsInitialized() const {
  return true;
}

void CGCMsgGC_War_JoinWar::Swap(CGCMsgGC_War_JoinWar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGC_War_JoinWar::InternalSwap(CGCMsgGC_War_JoinWar* other) {
  using std::swap;
  swap(affiliation_, other->affiliation_);
  swap(war_id_, other->war_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgGC_War_JoinWar::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgGC_War_RequestGlobalStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGC_War_RequestGlobalStats::kWarIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGC_War_RequestGlobalStats::CGCMsgGC_War_RequestGlobalStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgGC_War_RequestGlobalStats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCMsgGC_War_RequestGlobalStats)
}
CGCMsgGC_War_RequestGlobalStats::CGCMsgGC_War_RequestGlobalStats(const CGCMsgGC_War_RequestGlobalStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  war_id_ = from.war_id_;
  // @@protoc_insertion_point(copy_constructor:CGCMsgGC_War_RequestGlobalStats)
}

void CGCMsgGC_War_RequestGlobalStats::SharedCtor() {
  _cached_size_ = 0;
  war_id_ = 0u;
}

CGCMsgGC_War_RequestGlobalStats::~CGCMsgGC_War_RequestGlobalStats() {
  // @@protoc_insertion_point(destructor:CGCMsgGC_War_RequestGlobalStats)
  SharedDtor();
}

void CGCMsgGC_War_RequestGlobalStats::SharedDtor() {
}

void CGCMsgGC_War_RequestGlobalStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGC_War_RequestGlobalStats::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgGC_War_RequestGlobalStats& CGCMsgGC_War_RequestGlobalStats::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgGC_War_RequestGlobalStats();
  return *internal_default_instance();
}

CGCMsgGC_War_RequestGlobalStats* CGCMsgGC_War_RequestGlobalStats::New(::google::protobuf::Arena* arena) const {
  CGCMsgGC_War_RequestGlobalStats* n = new CGCMsgGC_War_RequestGlobalStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgGC_War_RequestGlobalStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGC_War_RequestGlobalStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  war_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgGC_War_RequestGlobalStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCMsgGC_War_RequestGlobalStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 war_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_war_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &war_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCMsgGC_War_RequestGlobalStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCMsgGC_War_RequestGlobalStats)
  return false;
#undef DO_
}

void CGCMsgGC_War_RequestGlobalStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCMsgGC_War_RequestGlobalStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 war_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->war_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCMsgGC_War_RequestGlobalStats)
}

::google::protobuf::uint8* CGCMsgGC_War_RequestGlobalStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGC_War_RequestGlobalStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 war_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->war_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGC_War_RequestGlobalStats)
  return target;
}

size_t CGCMsgGC_War_RequestGlobalStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGC_War_RequestGlobalStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 war_id = 1;
  if (has_war_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->war_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGC_War_RequestGlobalStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgGC_War_RequestGlobalStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGC_War_RequestGlobalStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgGC_War_RequestGlobalStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgGC_War_RequestGlobalStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgGC_War_RequestGlobalStats)
    MergeFrom(*source);
  }
}

void CGCMsgGC_War_RequestGlobalStats::MergeFrom(const CGCMsgGC_War_RequestGlobalStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGC_War_RequestGlobalStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_war_id()) {
    set_war_id(from.war_id());
  }
}

void CGCMsgGC_War_RequestGlobalStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgGC_War_RequestGlobalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_War_RequestGlobalStats::CopyFrom(const CGCMsgGC_War_RequestGlobalStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGC_War_RequestGlobalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_War_RequestGlobalStats::IsInitialized() const {
  return true;
}

void CGCMsgGC_War_RequestGlobalStats::Swap(CGCMsgGC_War_RequestGlobalStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGC_War_RequestGlobalStats::InternalSwap(CGCMsgGC_War_RequestGlobalStats* other) {
  using std::swap;
  swap(war_id_, other->war_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgGC_War_RequestGlobalStats::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgGC_War_GlobalStatsResponse_SideScore::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGC_War_GlobalStatsResponse_SideScore::kSideFieldNumber;
const int CGCMsgGC_War_GlobalStatsResponse_SideScore::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGC_War_GlobalStatsResponse_SideScore::CGCMsgGC_War_GlobalStatsResponse_SideScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgGC_War_GlobalStatsResponse_SideScore();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCMsgGC_War_GlobalStatsResponse.SideScore)
}
CGCMsgGC_War_GlobalStatsResponse_SideScore::CGCMsgGC_War_GlobalStatsResponse_SideScore(const CGCMsgGC_War_GlobalStatsResponse_SideScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&score_)) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgGC_War_GlobalStatsResponse.SideScore)
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&score_)) + sizeof(side_));
}

CGCMsgGC_War_GlobalStatsResponse_SideScore::~CGCMsgGC_War_GlobalStatsResponse_SideScore() {
  // @@protoc_insertion_point(destructor:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  SharedDtor();
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::SharedDtor() {
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGC_War_GlobalStatsResponse_SideScore::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgGC_War_GlobalStatsResponse_SideScore& CGCMsgGC_War_GlobalStatsResponse_SideScore::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgGC_War_GlobalStatsResponse_SideScore();
  return *internal_default_instance();
}

CGCMsgGC_War_GlobalStatsResponse_SideScore* CGCMsgGC_War_GlobalStatsResponse_SideScore::New(::google::protobuf::Arena* arena) const {
  CGCMsgGC_War_GlobalStatsResponse_SideScore* n = new CGCMsgGC_War_GlobalStatsResponse_SideScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&side_) -
        reinterpret_cast<char*>(&score_)) + sizeof(side_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgGC_War_GlobalStatsResponse_SideScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 side = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_side();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  return false;
#undef DO_
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 side = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->side(), output);
  }

  // optional uint64 score = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCMsgGC_War_GlobalStatsResponse.SideScore)
}

::google::protobuf::uint8* CGCMsgGC_War_GlobalStatsResponse_SideScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 side = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->side(), target);
  }

  // optional uint64 score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  return target;
}

size_t CGCMsgGC_War_GlobalStatsResponse_SideScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }

    // optional uint32 side = 1;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->side());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGC_War_GlobalStatsResponse_SideScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgGC_War_GlobalStatsResponse_SideScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgGC_War_GlobalStatsResponse.SideScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgGC_War_GlobalStatsResponse.SideScore)
    MergeFrom(*source);
  }
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::MergeFrom(const CGCMsgGC_War_GlobalStatsResponse_SideScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      side_ = from.side_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::CopyFrom(const CGCMsgGC_War_GlobalStatsResponse_SideScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_War_GlobalStatsResponse_SideScore::IsInitialized() const {
  return true;
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::Swap(CGCMsgGC_War_GlobalStatsResponse_SideScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGC_War_GlobalStatsResponse_SideScore::InternalSwap(CGCMsgGC_War_GlobalStatsResponse_SideScore* other) {
  using std::swap;
  swap(score_, other->score_);
  swap(side_, other->side_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgGC_War_GlobalStatsResponse_SideScore::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgGC_War_GlobalStatsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGC_War_GlobalStatsResponse::kSideScoresFieldNumber;
const int CGCMsgGC_War_GlobalStatsResponse::kWarIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGC_War_GlobalStatsResponse::CGCMsgGC_War_GlobalStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgGC_War_GlobalStatsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCMsgGC_War_GlobalStatsResponse)
}
CGCMsgGC_War_GlobalStatsResponse::CGCMsgGC_War_GlobalStatsResponse(const CGCMsgGC_War_GlobalStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      side_scores_(from.side_scores_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  war_id_ = from.war_id_;
  // @@protoc_insertion_point(copy_constructor:CGCMsgGC_War_GlobalStatsResponse)
}

void CGCMsgGC_War_GlobalStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  war_id_ = 0u;
}

CGCMsgGC_War_GlobalStatsResponse::~CGCMsgGC_War_GlobalStatsResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgGC_War_GlobalStatsResponse)
  SharedDtor();
}

void CGCMsgGC_War_GlobalStatsResponse::SharedDtor() {
}

void CGCMsgGC_War_GlobalStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGC_War_GlobalStatsResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgGC_War_GlobalStatsResponse& CGCMsgGC_War_GlobalStatsResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgGC_War_GlobalStatsResponse();
  return *internal_default_instance();
}

CGCMsgGC_War_GlobalStatsResponse* CGCMsgGC_War_GlobalStatsResponse::New(::google::protobuf::Arena* arena) const {
  CGCMsgGC_War_GlobalStatsResponse* n = new CGCMsgGC_War_GlobalStatsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgGC_War_GlobalStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGC_War_GlobalStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  side_scores_.Clear();
  war_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgGC_War_GlobalStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCMsgGC_War_GlobalStatsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CGCMsgGC_War_GlobalStatsResponse.SideScore side_scores = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_side_scores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 war_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_war_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &war_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCMsgGC_War_GlobalStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCMsgGC_War_GlobalStatsResponse)
  return false;
#undef DO_
}

void CGCMsgGC_War_GlobalStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCMsgGC_War_GlobalStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGCMsgGC_War_GlobalStatsResponse.SideScore side_scores = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->side_scores_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->side_scores(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 war_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->war_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCMsgGC_War_GlobalStatsResponse)
}

::google::protobuf::uint8* CGCMsgGC_War_GlobalStatsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGC_War_GlobalStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGCMsgGC_War_GlobalStatsResponse.SideScore side_scores = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->side_scores_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->side_scores(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 war_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->war_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGC_War_GlobalStatsResponse)
  return target;
}

size_t CGCMsgGC_War_GlobalStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGC_War_GlobalStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CGCMsgGC_War_GlobalStatsResponse.SideScore side_scores = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->side_scores_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->side_scores(static_cast<int>(i)));
    }
  }

  // optional uint32 war_id = 2;
  if (has_war_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->war_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGC_War_GlobalStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgGC_War_GlobalStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGC_War_GlobalStatsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgGC_War_GlobalStatsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgGC_War_GlobalStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgGC_War_GlobalStatsResponse)
    MergeFrom(*source);
  }
}

void CGCMsgGC_War_GlobalStatsResponse::MergeFrom(const CGCMsgGC_War_GlobalStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGC_War_GlobalStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  side_scores_.MergeFrom(from.side_scores_);
  if (from.has_war_id()) {
    set_war_id(from.war_id());
  }
}

void CGCMsgGC_War_GlobalStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgGC_War_GlobalStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_War_GlobalStatsResponse::CopyFrom(const CGCMsgGC_War_GlobalStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGC_War_GlobalStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_War_GlobalStatsResponse::IsInitialized() const {
  return true;
}

void CGCMsgGC_War_GlobalStatsResponse::Swap(CGCMsgGC_War_GlobalStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGC_War_GlobalStatsResponse::InternalSwap(CGCMsgGC_War_GlobalStatsResponse* other) {
  using std::swap;
  side_scores_.InternalSwap(&other->side_scores_);
  swap(war_id_, other->war_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgGC_War_GlobalStatsResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::kScoreFieldNumber;
const int CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::kTypeFieldNumber;
const int CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::kScoreIdFieldNumber;
const int CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::kScoreCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
}
CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate(const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  score_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_score_id()) {
    score_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.score_id_);
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_check_) -
    reinterpret_cast<char*>(&score_)) + sizeof(score_check_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::SharedCtor() {
  _cached_size_ = 0;
  score_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_check_) -
      reinterpret_cast<char*>(&score_)) + sizeof(score_check_));
}

CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::~CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate() {
  // @@protoc_insertion_point(destructor:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  SharedDtor();
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::SharedDtor() {
  score_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate();
  return *internal_default_instance();
}

CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::New(::google::protobuf::Arena* arena) const {
  CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* n = new CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!score_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*score_id_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_check_) -
        reinterpret_cast<char*>(&score_)) + sizeof(score_check_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes score_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_score_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score_check = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_score_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  return false;
#undef DO_
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional bytes score_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->score_id(), output);
  }

  // optional uint32 score_check = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score_check(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
}

::google::protobuf::uint8* CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional bytes score_id = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->score_id(), target);
  }

  // optional uint32 score_check = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score_check(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  return target;
}

size_t CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes score_id = 4;
    if (has_score_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->score_id());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 score_check = 5;
    if (has_score_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_check());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
    MergeFrom(*source);
  }
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::MergeFrom(const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_score_id();
      score_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.score_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_check_ = from.score_check_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::CopyFrom(const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::IsInitialized() const {
  return true;
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::Swap(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::InternalSwap(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* other) {
  using std::swap;
  score_id_.Swap(&other->score_id_);
  swap(score_, other->score_);
  swap(type_, other->type_);
  swap(score_check_, other->score_check_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAttribute_WorldItemPlacement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAttribute_WorldItemPlacement::kOriginalItemIdFieldNumber;
const int CAttribute_WorldItemPlacement::kPosXFieldNumber;
const int CAttribute_WorldItemPlacement::kPosYFieldNumber;
const int CAttribute_WorldItemPlacement::kPosZFieldNumber;
const int CAttribute_WorldItemPlacement::kAngXFieldNumber;
const int CAttribute_WorldItemPlacement::kAngYFieldNumber;
const int CAttribute_WorldItemPlacement::kAngZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAttribute_WorldItemPlacement::CAttribute_WorldItemPlacement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCAttribute_WorldItemPlacement();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAttribute_WorldItemPlacement)
}
CAttribute_WorldItemPlacement::CAttribute_WorldItemPlacement(const CAttribute_WorldItemPlacement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&original_item_id_, &from.original_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ang_z_) -
    reinterpret_cast<char*>(&original_item_id_)) + sizeof(ang_z_));
  // @@protoc_insertion_point(copy_constructor:CAttribute_WorldItemPlacement)
}

void CAttribute_WorldItemPlacement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&original_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ang_z_) -
      reinterpret_cast<char*>(&original_item_id_)) + sizeof(ang_z_));
}

CAttribute_WorldItemPlacement::~CAttribute_WorldItemPlacement() {
  // @@protoc_insertion_point(destructor:CAttribute_WorldItemPlacement)
  SharedDtor();
}

void CAttribute_WorldItemPlacement::SharedDtor() {
}

void CAttribute_WorldItemPlacement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAttribute_WorldItemPlacement::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAttribute_WorldItemPlacement& CAttribute_WorldItemPlacement::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCAttribute_WorldItemPlacement();
  return *internal_default_instance();
}

CAttribute_WorldItemPlacement* CAttribute_WorldItemPlacement::New(::google::protobuf::Arena* arena) const {
  CAttribute_WorldItemPlacement* n = new CAttribute_WorldItemPlacement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAttribute_WorldItemPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_WorldItemPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&original_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ang_z_) -
        reinterpret_cast<char*>(&original_item_id_)) + sizeof(ang_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAttribute_WorldItemPlacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAttribute_WorldItemPlacement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 original_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_original_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &original_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pos_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pos_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pos_z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_pos_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ang_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_ang_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ang_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ang_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_ang_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ang_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ang_z = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_ang_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ang_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAttribute_WorldItemPlacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAttribute_WorldItemPlacement)
  return false;
#undef DO_
}

void CAttribute_WorldItemPlacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAttribute_WorldItemPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 original_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->original_item_id(), output);
  }

  // optional float pos_x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pos_x(), output);
  }

  // optional float pos_y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_y(), output);
  }

  // optional float pos_z = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_z(), output);
  }

  // optional float ang_x = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ang_x(), output);
  }

  // optional float ang_y = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ang_y(), output);
  }

  // optional float ang_z = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ang_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAttribute_WorldItemPlacement)
}

::google::protobuf::uint8* CAttribute_WorldItemPlacement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_WorldItemPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 original_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->original_item_id(), target);
  }

  // optional float pos_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pos_x(), target);
  }

  // optional float pos_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_y(), target);
  }

  // optional float pos_z = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_z(), target);
  }

  // optional float ang_x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ang_x(), target);
  }

  // optional float ang_y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->ang_y(), target);
  }

  // optional float ang_z = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->ang_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_WorldItemPlacement)
  return target;
}

size_t CAttribute_WorldItemPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_WorldItemPlacement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint64 original_item_id = 1;
    if (has_original_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->original_item_id());
    }

    // optional float pos_x = 2;
    if (has_pos_x()) {
      total_size += 1 + 4;
    }

    // optional float pos_y = 3;
    if (has_pos_y()) {
      total_size += 1 + 4;
    }

    // optional float pos_z = 4;
    if (has_pos_z()) {
      total_size += 1 + 4;
    }

    // optional float ang_x = 5;
    if (has_ang_x()) {
      total_size += 1 + 4;
    }

    // optional float ang_y = 6;
    if (has_ang_y()) {
      total_size += 1 + 4;
    }

    // optional float ang_z = 7;
    if (has_ang_z()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAttribute_WorldItemPlacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAttribute_WorldItemPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  const CAttribute_WorldItemPlacement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAttribute_WorldItemPlacement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAttribute_WorldItemPlacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAttribute_WorldItemPlacement)
    MergeFrom(*source);
  }
}

void CAttribute_WorldItemPlacement::MergeFrom(const CAttribute_WorldItemPlacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_WorldItemPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      original_item_id_ = from.original_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      pos_z_ = from.pos_z_;
    }
    if (cached_has_bits & 0x00000010u) {
      ang_x_ = from.ang_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      ang_y_ = from.ang_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      ang_z_ = from.ang_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAttribute_WorldItemPlacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAttribute_WorldItemPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_WorldItemPlacement::CopyFrom(const CAttribute_WorldItemPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_WorldItemPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_WorldItemPlacement::IsInitialized() const {
  return true;
}

void CAttribute_WorldItemPlacement::Swap(CAttribute_WorldItemPlacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAttribute_WorldItemPlacement::InternalSwap(CAttribute_WorldItemPlacement* other) {
  using std::swap;
  swap(original_item_id_, other->original_item_id_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(pos_z_, other->pos_z_);
  swap(ang_x_, other->ang_x_);
  swap(ang_y_, other->ang_y_);
  swap(ang_z_, other->ang_z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAttribute_WorldItemPlacement::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCMsg_WorldItemPlacement_Update::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsg_WorldItemPlacement_Update::kOriginalItemIdFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kPosXFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kPosYFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kPosZFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kAngXFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kAngYFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kAngZFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kForceRemoveAllFieldNumber;
const int CGCMsg_WorldItemPlacement_Update::kAttribNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsg_WorldItemPlacement_Update::CGCMsg_WorldItemPlacement_Update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsg_WorldItemPlacement_Update();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCMsg_WorldItemPlacement_Update)
}
CGCMsg_WorldItemPlacement_Update::CGCMsg_WorldItemPlacement_Update(const CGCMsg_WorldItemPlacement_Update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attrib_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attrib_name()) {
    attrib_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attrib_name_);
  }
  ::memcpy(&original_item_id_, &from.original_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_remove_all_) -
    reinterpret_cast<char*>(&original_item_id_)) + sizeof(force_remove_all_));
  // @@protoc_insertion_point(copy_constructor:CGCMsg_WorldItemPlacement_Update)
}

void CGCMsg_WorldItemPlacement_Update::SharedCtor() {
  _cached_size_ = 0;
  attrib_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&original_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_remove_all_) -
      reinterpret_cast<char*>(&original_item_id_)) + sizeof(force_remove_all_));
}

CGCMsg_WorldItemPlacement_Update::~CGCMsg_WorldItemPlacement_Update() {
  // @@protoc_insertion_point(destructor:CGCMsg_WorldItemPlacement_Update)
  SharedDtor();
}

void CGCMsg_WorldItemPlacement_Update::SharedDtor() {
  attrib_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCMsg_WorldItemPlacement_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsg_WorldItemPlacement_Update::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsg_WorldItemPlacement_Update& CGCMsg_WorldItemPlacement_Update::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCGCMsg_WorldItemPlacement_Update();
  return *internal_default_instance();
}

CGCMsg_WorldItemPlacement_Update* CGCMsg_WorldItemPlacement_Update::New(::google::protobuf::Arena* arena) const {
  CGCMsg_WorldItemPlacement_Update* n = new CGCMsg_WorldItemPlacement_Update;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsg_WorldItemPlacement_Update::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsg_WorldItemPlacement_Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!attrib_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*attrib_name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&original_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ang_z_) -
        reinterpret_cast<char*>(&original_item_id_)) + sizeof(ang_z_));
  }
  force_remove_all_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsg_WorldItemPlacement_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCMsg_WorldItemPlacement_Update)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 original_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_original_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &original_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pos_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pos_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pos_z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_pos_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ang_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_ang_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ang_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ang_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_ang_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ang_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ang_z = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_ang_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ang_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_remove_all = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_force_remove_all();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_remove_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string attrib_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attrib_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attrib_name().data(), static_cast<int>(this->attrib_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGCMsg_WorldItemPlacement_Update.attrib_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCMsg_WorldItemPlacement_Update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCMsg_WorldItemPlacement_Update)
  return false;
#undef DO_
}

void CGCMsg_WorldItemPlacement_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCMsg_WorldItemPlacement_Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 original_item_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->original_item_id(), output);
  }

  // optional float pos_x = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pos_x(), output);
  }

  // optional float pos_y = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_y(), output);
  }

  // optional float pos_z = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_z(), output);
  }

  // optional float ang_x = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ang_x(), output);
  }

  // optional float ang_y = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ang_y(), output);
  }

  // optional float ang_z = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ang_z(), output);
  }

  // optional bool force_remove_all = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->force_remove_all(), output);
  }

  // optional string attrib_name = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attrib_name().data(), static_cast<int>(this->attrib_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCMsg_WorldItemPlacement_Update.attrib_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->attrib_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCMsg_WorldItemPlacement_Update)
}

::google::protobuf::uint8* CGCMsg_WorldItemPlacement_Update::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsg_WorldItemPlacement_Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 original_item_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->original_item_id(), target);
  }

  // optional float pos_x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pos_x(), target);
  }

  // optional float pos_y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_y(), target);
  }

  // optional float pos_z = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_z(), target);
  }

  // optional float ang_x = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ang_x(), target);
  }

  // optional float ang_y = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->ang_y(), target);
  }

  // optional float ang_z = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->ang_z(), target);
  }

  // optional bool force_remove_all = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->force_remove_all(), target);
  }

  // optional string attrib_name = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attrib_name().data(), static_cast<int>(this->attrib_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCMsg_WorldItemPlacement_Update.attrib_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->attrib_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsg_WorldItemPlacement_Update)
  return target;
}

size_t CGCMsg_WorldItemPlacement_Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsg_WorldItemPlacement_Update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string attrib_name = 9;
    if (has_attrib_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attrib_name());
    }

    // optional uint64 original_item_id = 1;
    if (has_original_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->original_item_id());
    }

    // optional float pos_x = 2;
    if (has_pos_x()) {
      total_size += 1 + 4;
    }

    // optional float pos_y = 3;
    if (has_pos_y()) {
      total_size += 1 + 4;
    }

    // optional float pos_z = 4;
    if (has_pos_z()) {
      total_size += 1 + 4;
    }

    // optional float ang_x = 5;
    if (has_ang_x()) {
      total_size += 1 + 4;
    }

    // optional float ang_y = 6;
    if (has_ang_y()) {
      total_size += 1 + 4;
    }

    // optional float ang_z = 7;
    if (has_ang_z()) {
      total_size += 1 + 4;
    }

  }
  // optional bool force_remove_all = 8;
  if (has_force_remove_all()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsg_WorldItemPlacement_Update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsg_WorldItemPlacement_Update)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsg_WorldItemPlacement_Update* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsg_WorldItemPlacement_Update>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsg_WorldItemPlacement_Update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsg_WorldItemPlacement_Update)
    MergeFrom(*source);
  }
}

void CGCMsg_WorldItemPlacement_Update::MergeFrom(const CGCMsg_WorldItemPlacement_Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsg_WorldItemPlacement_Update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_attrib_name();
      attrib_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attrib_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      original_item_id_ = from.original_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      pos_z_ = from.pos_z_;
    }
    if (cached_has_bits & 0x00000020u) {
      ang_x_ = from.ang_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      ang_y_ = from.ang_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      ang_z_ = from.ang_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_force_remove_all(from.force_remove_all());
  }
}

void CGCMsg_WorldItemPlacement_Update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsg_WorldItemPlacement_Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsg_WorldItemPlacement_Update::CopyFrom(const CGCMsg_WorldItemPlacement_Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsg_WorldItemPlacement_Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsg_WorldItemPlacement_Update::IsInitialized() const {
  return true;
}

void CGCMsg_WorldItemPlacement_Update::Swap(CGCMsg_WorldItemPlacement_Update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsg_WorldItemPlacement_Update::InternalSwap(CGCMsg_WorldItemPlacement_Update* other) {
  using std::swap;
  attrib_name_.Swap(&other->attrib_name_);
  swap(original_item_id_, other->original_item_id_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(pos_z_, other->pos_z_);
  swap(ang_x_, other->ang_x_);
  swap(ang_y_, other->ang_y_);
  swap(ang_z_, other->ang_z_);
  swap(force_remove_all_, other->force_remove_all_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsg_WorldItemPlacement_Update::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgAcknowledgeXP::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAcknowledgeXP::kMatchGroupFieldNumber;
const int CMsgAcknowledgeXP::kPredictedExperienceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAcknowledgeXP::CMsgAcknowledgeXP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgAcknowledgeXP();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgAcknowledgeXP)
}
CMsgAcknowledgeXP::CMsgAcknowledgeXP(const CMsgAcknowledgeXP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_group_, &from.match_group_,
    static_cast<size_t>(reinterpret_cast<char*>(&predicted_experience_) -
    reinterpret_cast<char*>(&match_group_)) + sizeof(predicted_experience_));
  // @@protoc_insertion_point(copy_constructor:CMsgAcknowledgeXP)
}

void CMsgAcknowledgeXP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predicted_experience_) -
      reinterpret_cast<char*>(&match_group_)) + sizeof(predicted_experience_));
}

CMsgAcknowledgeXP::~CMsgAcknowledgeXP() {
  // @@protoc_insertion_point(destructor:CMsgAcknowledgeXP)
  SharedDtor();
}

void CMsgAcknowledgeXP::SharedDtor() {
}

void CMsgAcknowledgeXP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAcknowledgeXP::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAcknowledgeXP& CMsgAcknowledgeXP::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgAcknowledgeXP();
  return *internal_default_instance();
}

CMsgAcknowledgeXP* CMsgAcknowledgeXP::New(::google::protobuf::Arena* arena) const {
  CMsgAcknowledgeXP* n = new CMsgAcknowledgeXP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAcknowledgeXP::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAcknowledgeXP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&match_group_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&predicted_experience_) -
        reinterpret_cast<char*>(&match_group_)) + sizeof(predicted_experience_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAcknowledgeXP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgAcknowledgeXP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 match_group = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_match_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 predicted_experience = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_predicted_experience();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &predicted_experience_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgAcknowledgeXP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgAcknowledgeXP)
  return false;
#undef DO_
}

void CMsgAcknowledgeXP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgAcknowledgeXP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 match_group = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->match_group(), output);
  }

  // optional uint32 predicted_experience = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->predicted_experience(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgAcknowledgeXP)
}

::google::protobuf::uint8* CMsgAcknowledgeXP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAcknowledgeXP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 match_group = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->match_group(), target);
  }

  // optional uint32 predicted_experience = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->predicted_experience(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAcknowledgeXP)
  return target;
}

size_t CMsgAcknowledgeXP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAcknowledgeXP)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 match_group = 1;
    if (has_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_group());
    }

    // optional uint32 predicted_experience = 2;
    if (has_predicted_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->predicted_experience());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAcknowledgeXP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAcknowledgeXP)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAcknowledgeXP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAcknowledgeXP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAcknowledgeXP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAcknowledgeXP)
    MergeFrom(*source);
  }
}

void CMsgAcknowledgeXP::MergeFrom(const CMsgAcknowledgeXP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAcknowledgeXP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      match_group_ = from.match_group_;
    }
    if (cached_has_bits & 0x00000002u) {
      predicted_experience_ = from.predicted_experience_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAcknowledgeXP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAcknowledgeXP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAcknowledgeXP::CopyFrom(const CMsgAcknowledgeXP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAcknowledgeXP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAcknowledgeXP::IsInitialized() const {
  return true;
}

void CMsgAcknowledgeXP::Swap(CMsgAcknowledgeXP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAcknowledgeXP::InternalSwap(CMsgAcknowledgeXP* other) {
  using std::swap;
  swap(match_group_, other->match_group_);
  swap(predicted_experience_, other->predicted_experience_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAcknowledgeXP::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFXPSource::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFXPSource::kTypeFieldNumber;
const int CMsgTFXPSource::kAmountFieldNumber;
const int CMsgTFXPSource::kMatchGroupFieldNumber;
const int CMsgTFXPSource::kAccountIdFieldNumber;
const int CMsgTFXPSource::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFXPSource::CMsgTFXPSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFXPSource();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFXPSource)
}
CMsgTFXPSource::CMsgTFXPSource(const CMsgTFXPSource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFXPSource)
}

void CMsgTFXPSource::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(match_id_));
}

CMsgTFXPSource::~CMsgTFXPSource() {
  // @@protoc_insertion_point(destructor:CMsgTFXPSource)
  SharedDtor();
}

void CMsgTFXPSource::SharedDtor() {
}

void CMsgTFXPSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFXPSource::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFXPSource& CMsgTFXPSource::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFXPSource();
  return *internal_default_instance();
}

CMsgTFXPSource* CMsgTFXPSource::New(::google::protobuf::Arena* arena) const {
  CMsgTFXPSource* n = new CMsgTFXPSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFXPSource::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFXPSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&type_)) + sizeof(match_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFXPSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFXPSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgTFXPSource.XPSourceType type = 1 [default = SOURCE_SCORE, (.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgTFXPSource_XPSourceType_IsValid(value)) {
            set_type(static_cast< ::CMsgTFXPSource_XPSourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 match_group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_match_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 4 [(.key_field) = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 5 [(.key_field) = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFXPSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFXPSource)
  return false;
#undef DO_
}

void CMsgTFXPSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFXPSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgTFXPSource.XPSourceType type = 1 [default = SOURCE_SCORE, (.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }

  // optional int32 match_group = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->match_group(), output);
  }

  // optional uint32 account_id = 4 [(.key_field) = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account_id(), output);
  }

  // optional uint64 match_id = 5 [(.key_field) = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFXPSource)
}

::google::protobuf::uint8* CMsgTFXPSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFXPSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgTFXPSource.XPSourceType type = 1 [default = SOURCE_SCORE, (.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }

  // optional int32 match_group = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->match_group(), target);
  }

  // optional uint32 account_id = 4 [(.key_field) = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account_id(), target);
  }

  // optional uint64 match_id = 5 [(.key_field) = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFXPSource)
  return target;
}

size_t CMsgTFXPSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFXPSource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .CMsgTFXPSource.XPSourceType type = 1 [default = SOURCE_SCORE, (.key_field) = true];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // optional int32 match_group = 3;
    if (has_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_group());
    }

    // optional uint32 account_id = 4 [(.key_field) = true];
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint64 match_id = 5 [(.key_field) = true];
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFXPSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFXPSource)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFXPSource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFXPSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFXPSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFXPSource)
    MergeFrom(*source);
  }
}

void CMsgTFXPSource::MergeFrom(const CMsgTFXPSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFXPSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_group_ = from.match_group_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFXPSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFXPSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFXPSource::CopyFrom(const CMsgTFXPSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFXPSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFXPSource::IsInitialized() const {
  return true;
}

void CMsgTFXPSource::Swap(CMsgTFXPSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFXPSource::InternalSwap(CMsgTFXPSource* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(amount_, other->amount_);
  swap(match_group_, other->match_group_);
  swap(account_id_, other->account_id_);
  swap(match_id_, other->match_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFXPSource::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFXPSourceBreakdown::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFXPSourceBreakdown::kSourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFXPSourceBreakdown::CMsgTFXPSourceBreakdown()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFXPSourceBreakdown();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFXPSourceBreakdown)
}
CMsgTFXPSourceBreakdown::CMsgTFXPSourceBreakdown(const CMsgTFXPSourceBreakdown& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sources_(from.sources_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFXPSourceBreakdown)
}

void CMsgTFXPSourceBreakdown::SharedCtor() {
  _cached_size_ = 0;
}

CMsgTFXPSourceBreakdown::~CMsgTFXPSourceBreakdown() {
  // @@protoc_insertion_point(destructor:CMsgTFXPSourceBreakdown)
  SharedDtor();
}

void CMsgTFXPSourceBreakdown::SharedDtor() {
}

void CMsgTFXPSourceBreakdown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFXPSourceBreakdown::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFXPSourceBreakdown& CMsgTFXPSourceBreakdown::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFXPSourceBreakdown();
  return *internal_default_instance();
}

CMsgTFXPSourceBreakdown* CMsgTFXPSourceBreakdown::New(::google::protobuf::Arena* arena) const {
  CMsgTFXPSourceBreakdown* n = new CMsgTFXPSourceBreakdown;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFXPSourceBreakdown::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFXPSourceBreakdown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFXPSourceBreakdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFXPSourceBreakdown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgTFXPSource sources = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFXPSourceBreakdown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFXPSourceBreakdown)
  return false;
#undef DO_
}

void CMsgTFXPSourceBreakdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFXPSourceBreakdown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgTFXPSource sources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sources(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFXPSourceBreakdown)
}

::google::protobuf::uint8* CMsgTFXPSourceBreakdown::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFXPSourceBreakdown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgTFXPSource sources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sources(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFXPSourceBreakdown)
  return target;
}

size_t CMsgTFXPSourceBreakdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFXPSourceBreakdown)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgTFXPSource sources = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sources(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFXPSourceBreakdown::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFXPSourceBreakdown)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFXPSourceBreakdown* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFXPSourceBreakdown>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFXPSourceBreakdown)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFXPSourceBreakdown)
    MergeFrom(*source);
  }
}

void CMsgTFXPSourceBreakdown::MergeFrom(const CMsgTFXPSourceBreakdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFXPSourceBreakdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sources_.MergeFrom(from.sources_);
}

void CMsgTFXPSourceBreakdown::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFXPSourceBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFXPSourceBreakdown::CopyFrom(const CMsgTFXPSourceBreakdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFXPSourceBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFXPSourceBreakdown::IsInitialized() const {
  return true;
}

void CMsgTFXPSourceBreakdown::Swap(CMsgTFXPSourceBreakdown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFXPSourceBreakdown::InternalSwap(CMsgTFXPSourceBreakdown* other) {
  using std::swap;
  sources_.InternalSwap(&other->sources_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFXPSourceBreakdown::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgTFClientInit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTFClientInit::kClientVersionFieldNumber;
const int CMsgTFClientInit::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTFClientInit::CMsgTFClientInit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFClientInit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTFClientInit)
}
CMsgTFClientInit::CMsgTFClientInit(const CMsgTFClientInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFClientInit)
}

void CMsgTFClientInit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&client_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&language_) -
      reinterpret_cast<char*>(&client_version_)) + sizeof(language_));
}

CMsgTFClientInit::~CMsgTFClientInit() {
  // @@protoc_insertion_point(destructor:CMsgTFClientInit)
  SharedDtor();
}

void CMsgTFClientInit::SharedDtor() {
}

void CMsgTFClientInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFClientInit::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTFClientInit& CMsgTFClientInit::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgTFClientInit();
  return *internal_default_instance();
}

CMsgTFClientInit* CMsgTFClientInit::New(::google::protobuf::Arena* arena) const {
  CMsgTFClientInit* n = new CMsgTFClientInit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTFClientInit::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFClientInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTFClientInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTFClientInit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 language = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTFClientInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTFClientInit)
  return false;
#undef DO_
}

void CMsgTFClientInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTFClientInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_version(), output);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTFClientInit)
}

::google::protobuf::uint8* CMsgTFClientInit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFClientInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_version(), target);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFClientInit)
  return target;
}

size_t CMsgTFClientInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFClientInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 client_version = 1;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional int32 language = 2;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFClientInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFClientInit)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFClientInit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTFClientInit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFClientInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFClientInit)
    MergeFrom(*source);
  }
}

void CMsgTFClientInit::MergeFrom(const CMsgTFClientInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFClientInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFClientInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFClientInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFClientInit::CopyFrom(const CMsgTFClientInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFClientInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFClientInit::IsInitialized() const {
  return true;
}

void CMsgTFClientInit::Swap(CMsgTFClientInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTFClientInit::InternalSwap(CMsgTFClientInit* other) {
  using std::swap;
  swap(client_version_, other->client_version_);
  swap(language_, other->language_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTFClientInit::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCNotification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCNotification::kNotificationIdFieldNumber;
const int CMsgGCNotification::kAccountIdFieldNumber;
const int CMsgGCNotification::kExpirationTimeFieldNumber;
const int CMsgGCNotification::kTypeFieldNumber;
const int CMsgGCNotification::kNotificationStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCNotification::CMsgGCNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCNotification();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCNotification)
}
CMsgGCNotification::CMsgGCNotification(const CMsgGCNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  notification_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notification_string()) {
    notification_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notification_string_);
  }
  ::memcpy(&notification_id_, &from.notification_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&notification_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCNotification)
}

void CMsgGCNotification::SharedCtor() {
  _cached_size_ = 0;
  notification_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&notification_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_time_) -
      reinterpret_cast<char*>(&notification_id_)) + sizeof(expiration_time_));
  type_ = 1;
}

CMsgGCNotification::~CMsgGCNotification() {
  // @@protoc_insertion_point(destructor:CMsgGCNotification)
  SharedDtor();
}

void CMsgGCNotification::SharedDtor() {
  notification_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCNotification::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCNotification& CMsgGCNotification::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCNotification();
  return *internal_default_instance();
}

CMsgGCNotification* CMsgGCNotification::New(::google::protobuf::Arena* arena) const {
  CMsgGCNotification* n = new CMsgGCNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!notification_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*notification_string_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&notification_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_time_) -
        reinterpret_cast<char*>(&notification_id_)) + sizeof(expiration_time_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 notification_id = 1 [(.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_notification_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &notification_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 expiration_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_expiration_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &expiration_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGCNotification.NotificationType type = 4 [default = NOTIFICATION_CUSTOM_STRING];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGCNotification_NotificationType_IsValid(value)) {
            set_type(static_cast< ::CMsgGCNotification_NotificationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notification_string = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notification_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notification_string().data(), static_cast<int>(this->notification_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCNotification.notification_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCNotification)
  return false;
#undef DO_
}

void CMsgGCNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 notification_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->notification_id(), output);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional fixed32 expiration_time = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->expiration_time(), output);
  }

  // optional .CMsgGCNotification.NotificationType type = 4 [default = NOTIFICATION_CUSTOM_STRING];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional string notification_string = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notification_string().data(), static_cast<int>(this->notification_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCNotification.notification_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->notification_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCNotification)
}

::google::protobuf::uint8* CMsgGCNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 notification_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->notification_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional fixed32 expiration_time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->expiration_time(), target);
  }

  // optional .CMsgGCNotification.NotificationType type = 4 [default = NOTIFICATION_CUSTOM_STRING];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional string notification_string = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notification_string().data(), static_cast<int>(this->notification_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCNotification.notification_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->notification_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCNotification)
  return target;
}

size_t CMsgGCNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCNotification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string notification_string = 5;
    if (has_notification_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notification_string());
    }

    // optional uint64 notification_id = 1 [(.key_field) = true];
    if (has_notification_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->notification_id());
    }

    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional fixed32 expiration_time = 3;
    if (has_expiration_time()) {
      total_size += 1 + 4;
    }

    // optional .CMsgGCNotification.NotificationType type = 4 [default = NOTIFICATION_CUSTOM_STRING];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCNotification)
    MergeFrom(*source);
  }
}

void CMsgGCNotification::MergeFrom(const CMsgGCNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_notification_string();
      notification_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notification_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      notification_id_ = from.notification_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      expiration_time_ = from.expiration_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNotification::CopyFrom(const CMsgGCNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNotification::IsInitialized() const {
  return true;
}

void CMsgGCNotification::Swap(CMsgGCNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCNotification::InternalSwap(CMsgGCNotification* other) {
  using std::swap;
  notification_string_.Swap(&other->notification_string_);
  swap(notification_id_, other->notification_id_);
  swap(account_id_, other->account_id_);
  swap(expiration_time_, other->expiration_time_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCNotification::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCNotificationQueue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCNotificationQueue::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCNotificationQueue::CMsgGCNotificationQueue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCNotificationQueue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCNotificationQueue)
}
CMsgGCNotificationQueue::CMsgGCNotificationQueue(const CMsgGCNotificationQueue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCNotificationQueue)
}

void CMsgGCNotificationQueue::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCNotificationQueue::~CMsgGCNotificationQueue() {
  // @@protoc_insertion_point(destructor:CMsgGCNotificationQueue)
  SharedDtor();
}

void CMsgGCNotificationQueue::SharedDtor() {
}

void CMsgGCNotificationQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCNotificationQueue::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCNotificationQueue& CMsgGCNotificationQueue::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCNotificationQueue();
  return *internal_default_instance();
}

CMsgGCNotificationQueue* CMsgGCNotificationQueue::New(::google::protobuf::Arena* arena) const {
  CMsgGCNotificationQueue* n = new CMsgGCNotificationQueue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCNotificationQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCNotificationQueue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCNotificationQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCNotificationQueue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCNotification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCNotificationQueue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCNotificationQueue)
  return false;
#undef DO_
}

void CMsgGCNotificationQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCNotificationQueue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notifications(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCNotificationQueue)
}

::google::protobuf::uint8* CMsgGCNotificationQueue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCNotificationQueue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCNotificationQueue)
  return target;
}

size_t CMsgGCNotificationQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCNotificationQueue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGCNotification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCNotificationQueue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCNotificationQueue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCNotificationQueue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCNotificationQueue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCNotificationQueue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCNotificationQueue)
    MergeFrom(*source);
  }
}

void CMsgGCNotificationQueue::MergeFrom(const CMsgGCNotificationQueue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCNotificationQueue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void CMsgGCNotificationQueue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCNotificationQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNotificationQueue::CopyFrom(const CMsgGCNotificationQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCNotificationQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNotificationQueue::IsInitialized() const {
  return true;
}

void CMsgGCNotificationQueue::Swap(CMsgGCNotificationQueue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCNotificationQueue::InternalSwap(CMsgGCNotificationQueue* other) {
  using std::swap;
  notifications_.InternalSwap(&other->notifications_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCNotificationQueue::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgNotificationAcknowledge::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgNotificationAcknowledge::kAccountIdFieldNumber;
const int CMsgNotificationAcknowledge::kNotificationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgNotificationAcknowledge::CMsgNotificationAcknowledge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgNotificationAcknowledge();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgNotificationAcknowledge)
}
CMsgNotificationAcknowledge::CMsgNotificationAcknowledge(const CMsgNotificationAcknowledge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&notification_id_, &from.notification_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&notification_id_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgNotificationAcknowledge)
}

void CMsgNotificationAcknowledge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&notification_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&notification_id_)) + sizeof(account_id_));
}

CMsgNotificationAcknowledge::~CMsgNotificationAcknowledge() {
  // @@protoc_insertion_point(destructor:CMsgNotificationAcknowledge)
  SharedDtor();
}

void CMsgNotificationAcknowledge::SharedDtor() {
}

void CMsgNotificationAcknowledge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgNotificationAcknowledge::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgNotificationAcknowledge& CMsgNotificationAcknowledge::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgNotificationAcknowledge();
  return *internal_default_instance();
}

CMsgNotificationAcknowledge* CMsgNotificationAcknowledge::New(::google::protobuf::Arena* arena) const {
  CMsgNotificationAcknowledge* n = new CMsgNotificationAcknowledge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgNotificationAcknowledge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNotificationAcknowledge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&notification_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_) -
        reinterpret_cast<char*>(&notification_id_)) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgNotificationAcknowledge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgNotificationAcknowledge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 notification_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_notification_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &notification_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgNotificationAcknowledge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgNotificationAcknowledge)
  return false;
#undef DO_
}

void CMsgNotificationAcknowledge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgNotificationAcknowledge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 notification_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->notification_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgNotificationAcknowledge)
}

::google::protobuf::uint8* CMsgNotificationAcknowledge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNotificationAcknowledge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 notification_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->notification_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNotificationAcknowledge)
  return target;
}

size_t CMsgNotificationAcknowledge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNotificationAcknowledge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 notification_id = 2;
    if (has_notification_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->notification_id());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNotificationAcknowledge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgNotificationAcknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNotificationAcknowledge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgNotificationAcknowledge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgNotificationAcknowledge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgNotificationAcknowledge)
    MergeFrom(*source);
  }
}

void CMsgNotificationAcknowledge::MergeFrom(const CMsgNotificationAcknowledge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgNotificationAcknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      notification_id_ = from.notification_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgNotificationAcknowledge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgNotificationAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNotificationAcknowledge::CopyFrom(const CMsgNotificationAcknowledge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNotificationAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotificationAcknowledge::IsInitialized() const {
  return true;
}

void CMsgNotificationAcknowledge::Swap(CMsgNotificationAcknowledge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgNotificationAcknowledge::InternalSwap(CMsgNotificationAcknowledge* other) {
  using std::swap;
  swap(notification_id_, other->notification_id_);
  swap(account_id_, other->account_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgNotificationAcknowledge::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgNotificationAcknowledgeReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgNotificationAcknowledgeReply::CMsgNotificationAcknowledgeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgNotificationAcknowledgeReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgNotificationAcknowledgeReply)
}
CMsgNotificationAcknowledgeReply::CMsgNotificationAcknowledgeReply(const CMsgNotificationAcknowledgeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgNotificationAcknowledgeReply)
}

void CMsgNotificationAcknowledgeReply::SharedCtor() {
  _cached_size_ = 0;
}

CMsgNotificationAcknowledgeReply::~CMsgNotificationAcknowledgeReply() {
  // @@protoc_insertion_point(destructor:CMsgNotificationAcknowledgeReply)
  SharedDtor();
}

void CMsgNotificationAcknowledgeReply::SharedDtor() {
}

void CMsgNotificationAcknowledgeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgNotificationAcknowledgeReply::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgNotificationAcknowledgeReply& CMsgNotificationAcknowledgeReply::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgNotificationAcknowledgeReply();
  return *internal_default_instance();
}

CMsgNotificationAcknowledgeReply* CMsgNotificationAcknowledgeReply::New(::google::protobuf::Arena* arena) const {
  CMsgNotificationAcknowledgeReply* n = new CMsgNotificationAcknowledgeReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgNotificationAcknowledgeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNotificationAcknowledgeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgNotificationAcknowledgeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgNotificationAcknowledgeReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgNotificationAcknowledgeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgNotificationAcknowledgeReply)
  return false;
#undef DO_
}

void CMsgNotificationAcknowledgeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgNotificationAcknowledgeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgNotificationAcknowledgeReply)
}

::google::protobuf::uint8* CMsgNotificationAcknowledgeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNotificationAcknowledgeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNotificationAcknowledgeReply)
  return target;
}

size_t CMsgNotificationAcknowledgeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNotificationAcknowledgeReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNotificationAcknowledgeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgNotificationAcknowledgeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNotificationAcknowledgeReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgNotificationAcknowledgeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgNotificationAcknowledgeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgNotificationAcknowledgeReply)
    MergeFrom(*source);
  }
}

void CMsgNotificationAcknowledgeReply::MergeFrom(const CMsgNotificationAcknowledgeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgNotificationAcknowledgeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgNotificationAcknowledgeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgNotificationAcknowledgeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNotificationAcknowledgeReply::CopyFrom(const CMsgNotificationAcknowledgeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNotificationAcknowledgeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotificationAcknowledgeReply::IsInitialized() const {
  return true;
}

void CMsgNotificationAcknowledgeReply::Swap(CMsgNotificationAcknowledgeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgNotificationAcknowledgeReply::InternalSwap(CMsgNotificationAcknowledgeReply* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgNotificationAcknowledgeReply::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_Match_Result_Player::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_Match_Result_Player::kSteamIdFieldNumber;
const int CMsgGC_Match_Result_Player::kPartyIdFieldNumber;
const int CMsgGC_Match_Result_Player::kTeamFieldNumber;
const int CMsgGC_Match_Result_Player::kScoreFieldNumber;
const int CMsgGC_Match_Result_Player::kPingFieldNumber;
const int CMsgGC_Match_Result_Player::kFlagsFieldNumber;
const int CMsgGC_Match_Result_Player::kRankFieldNumber;
const int CMsgGC_Match_Result_Player::kClassesPlayedFieldNumber;
const int CMsgGC_Match_Result_Player::kKillsFieldNumber;
const int CMsgGC_Match_Result_Player::kDeathsFieldNumber;
const int CMsgGC_Match_Result_Player::kDamageFieldNumber;
const int CMsgGC_Match_Result_Player::kHealingFieldNumber;
const int CMsgGC_Match_Result_Player::kSupportFieldNumber;
const int CMsgGC_Match_Result_Player::kScoreMedalFieldNumber;
const int CMsgGC_Match_Result_Player::kKillsMedalFieldNumber;
const int CMsgGC_Match_Result_Player::kDamageMedalFieldNumber;
const int CMsgGC_Match_Result_Player::kHealingMedalFieldNumber;
const int CMsgGC_Match_Result_Player::kSupportMedalFieldNumber;
const int CMsgGC_Match_Result_Player::kXpBreakdownFieldNumber;
const int CMsgGC_Match_Result_Player::kLeaveTimeFieldNumber;
const int CMsgGC_Match_Result_Player::kLeaveReasonFieldNumber;
const int CMsgGC_Match_Result_Player::kConnectTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_Match_Result_Player::CMsgGC_Match_Result_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Match_Result_Player();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_Match_Result.Player)
}
CMsgGC_Match_Result_Player::CMsgGC_Match_Result_Player(const CMsgGC_Match_Result_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      xp_breakdown_(from.xp_breakdown_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&connect_time_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(connect_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Match_Result.Player)
}

void CMsgGC_Match_Result_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connect_time_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(connect_time_));
}

CMsgGC_Match_Result_Player::~CMsgGC_Match_Result_Player() {
  // @@protoc_insertion_point(destructor:CMsgGC_Match_Result.Player)
  SharedDtor();
}

void CMsgGC_Match_Result_Player::SharedDtor() {
}

void CMsgGC_Match_Result_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Match_Result_Player::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_Match_Result_Player& CMsgGC_Match_Result_Player::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Match_Result_Player();
  return *internal_default_instance();
}

CMsgGC_Match_Result_Player* CMsgGC_Match_Result_Player::New(::google::protobuf::Arena* arena) const {
  CMsgGC_Match_Result_Player* n = new CMsgGC_Match_Result_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_Match_Result_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Match_Result.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xp_breakdown_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&classes_played_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(classes_played_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&damage_medal_) -
        reinterpret_cast<char*>(&kills_)) + sizeof(damage_medal_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&healing_medal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connect_time_) -
        reinterpret_cast<char*>(&healing_medal_)) + sizeof(connect_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_Match_Result_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_Match_Result.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 party_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 classes_played = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_classes_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classes_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 healing = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_healing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_support();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score_medal = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_score_medal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_medal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills_medal = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_kills_medal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_medal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_medal = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_damage_medal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_medal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 healing_medal = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_healing_medal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_medal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support_medal = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_support_medal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_medal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgTFXPSource xp_breakdown = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_xp_breakdown()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leave_time = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_leave_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leave_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TFMatchLeaveReason leave_reason = 23 [default = TFMatchLeaveReason_UNSPECIFIED];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TFMatchLeaveReason_IsValid(value)) {
            set_leave_reason(static_cast< ::TFMatchLeaveReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 connect_time = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_connect_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_Match_Result.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_Match_Result.Player)
  return false;
#undef DO_
}

void CMsgGC_Match_Result_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_Match_Result.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint64 party_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->party_id(), output);
  }

  // optional uint32 team = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team(), output);
  }

  // optional uint32 score = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  // optional uint32 ping = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ping(), output);
  }

  // optional uint32 flags = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->flags(), output);
  }

  // optional uint32 rank = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rank(), output);
  }

  // optional uint32 classes_played = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->classes_played(), output);
  }

  // optional uint32 kills = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kills(), output);
  }

  // optional uint32 deaths = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->deaths(), output);
  }

  // optional uint32 damage = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->damage(), output);
  }

  // optional uint32 healing = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->healing(), output);
  }

  // optional uint32 support = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->support(), output);
  }

  // optional uint32 score_medal = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->score_medal(), output);
  }

  // optional uint32 kills_medal = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->kills_medal(), output);
  }

  // optional uint32 damage_medal = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->damage_medal(), output);
  }

  // optional uint32 healing_medal = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->healing_medal(), output);
  }

  // optional uint32 support_medal = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->support_medal(), output);
  }

  // repeated .CMsgTFXPSource xp_breakdown = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xp_breakdown_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->xp_breakdown(static_cast<int>(i)), output);
  }

  // optional uint32 leave_time = 22;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->leave_time(), output);
  }

  // optional .TFMatchLeaveReason leave_reason = 23 [default = TFMatchLeaveReason_UNSPECIFIED];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->leave_reason(), output);
  }

  // optional uint32 connect_time = 24;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->connect_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_Match_Result.Player)
}

::google::protobuf::uint8* CMsgGC_Match_Result_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Match_Result.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint64 party_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->party_id(), target);
  }

  // optional uint32 team = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team(), target);
  }

  // optional uint32 score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score(), target);
  }

  // optional uint32 ping = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ping(), target);
  }

  // optional uint32 flags = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->flags(), target);
  }

  // optional uint32 rank = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->rank(), target);
  }

  // optional uint32 classes_played = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->classes_played(), target);
  }

  // optional uint32 kills = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kills(), target);
  }

  // optional uint32 deaths = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->deaths(), target);
  }

  // optional uint32 damage = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->damage(), target);
  }

  // optional uint32 healing = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->healing(), target);
  }

  // optional uint32 support = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->support(), target);
  }

  // optional uint32 score_medal = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->score_medal(), target);
  }

  // optional uint32 kills_medal = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->kills_medal(), target);
  }

  // optional uint32 damage_medal = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->damage_medal(), target);
  }

  // optional uint32 healing_medal = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->healing_medal(), target);
  }

  // optional uint32 support_medal = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->support_medal(), target);
  }

  // repeated .CMsgTFXPSource xp_breakdown = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xp_breakdown_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->xp_breakdown(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 leave_time = 22;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->leave_time(), target);
  }

  // optional .TFMatchLeaveReason leave_reason = 23 [default = TFMatchLeaveReason_UNSPECIFIED];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->leave_reason(), target);
  }

  // optional uint32 connect_time = 24;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->connect_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Match_Result.Player)
  return target;
}

size_t CMsgGC_Match_Result_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Match_Result.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgTFXPSource xp_breakdown = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->xp_breakdown_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->xp_breakdown(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 party_id = 2;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional uint32 team = 3;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 ping = 5;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping());
    }

    // optional uint32 flags = 6;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 rank = 9;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 classes_played = 10;
    if (has_classes_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->classes_played());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 kills = 11;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 12;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 damage = 13;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 healing = 14;
    if (has_healing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing());
    }

    // optional uint32 support = 15;
    if (has_support()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support());
    }

    // optional uint32 score_medal = 16;
    if (has_score_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_medal());
    }

    // optional uint32 kills_medal = 17;
    if (has_kills_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills_medal());
    }

    // optional uint32 damage_medal = 18;
    if (has_damage_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_medal());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional uint32 healing_medal = 19;
    if (has_healing_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing_medal());
    }

    // optional uint32 support_medal = 20;
    if (has_support_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_medal());
    }

    // optional uint32 leave_time = 22;
    if (has_leave_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leave_time());
    }

    // optional .TFMatchLeaveReason leave_reason = 23 [default = TFMatchLeaveReason_UNSPECIFIED];
    if (has_leave_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leave_reason());
    }

    // optional uint32 connect_time = 24;
    if (has_connect_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Match_Result_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Match_Result.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Match_Result_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_Match_Result_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Match_Result.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Match_Result.Player)
    MergeFrom(*source);
  }
}

void CMsgGC_Match_Result_Player::MergeFrom(const CMsgGC_Match_Result_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Match_Result.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  xp_breakdown_.MergeFrom(from.xp_breakdown_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000010u) {
      ping_ = from.ping_;
    }
    if (cached_has_bits & 0x00000020u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000080u) {
      classes_played_ = from.classes_played_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000200u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000400u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x00000800u) {
      healing_ = from.healing_;
    }
    if (cached_has_bits & 0x00001000u) {
      support_ = from.support_;
    }
    if (cached_has_bits & 0x00002000u) {
      score_medal_ = from.score_medal_;
    }
    if (cached_has_bits & 0x00004000u) {
      kills_medal_ = from.kills_medal_;
    }
    if (cached_has_bits & 0x00008000u) {
      damage_medal_ = from.damage_medal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      healing_medal_ = from.healing_medal_;
    }
    if (cached_has_bits & 0x00020000u) {
      support_medal_ = from.support_medal_;
    }
    if (cached_has_bits & 0x00040000u) {
      leave_time_ = from.leave_time_;
    }
    if (cached_has_bits & 0x00080000u) {
      leave_reason_ = from.leave_reason_;
    }
    if (cached_has_bits & 0x00100000u) {
      connect_time_ = from.connect_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_Match_Result_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Match_Result.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Match_Result_Player::CopyFrom(const CMsgGC_Match_Result_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Match_Result.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Match_Result_Player::IsInitialized() const {
  return true;
}

void CMsgGC_Match_Result_Player::Swap(CMsgGC_Match_Result_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_Match_Result_Player::InternalSwap(CMsgGC_Match_Result_Player* other) {
  using std::swap;
  xp_breakdown_.InternalSwap(&other->xp_breakdown_);
  swap(steam_id_, other->steam_id_);
  swap(party_id_, other->party_id_);
  swap(team_, other->team_);
  swap(score_, other->score_);
  swap(ping_, other->ping_);
  swap(flags_, other->flags_);
  swap(rank_, other->rank_);
  swap(classes_played_, other->classes_played_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
  swap(damage_, other->damage_);
  swap(healing_, other->healing_);
  swap(support_, other->support_);
  swap(score_medal_, other->score_medal_);
  swap(kills_medal_, other->kills_medal_);
  swap(damage_medal_, other->damage_medal_);
  swap(healing_medal_, other->healing_medal_);
  swap(support_medal_, other->support_medal_);
  swap(leave_time_, other->leave_time_);
  swap(leave_reason_, other->leave_reason_);
  swap(connect_time_, other->connect_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_Match_Result_Player::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_Match_Result::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_Match_Result::kMatchIdFieldNumber;
const int CMsgGC_Match_Result::kMatchGroupFieldNumber;
const int CMsgGC_Match_Result::kStatusFieldNumber;
const int CMsgGC_Match_Result::kDurationFieldNumber;
const int CMsgGC_Match_Result::kRedScoreFieldNumber;
const int CMsgGC_Match_Result::kBlueScoreFieldNumber;
const int CMsgGC_Match_Result::kWinningTeamFieldNumber;
const int CMsgGC_Match_Result::kMapIndexFieldNumber;
const int CMsgGC_Match_Result::kGameTypeFieldNumber;
const int CMsgGC_Match_Result::kPlayersFieldNumber;
const int CMsgGC_Match_Result::kWinReasonFieldNumber;
const int CMsgGC_Match_Result::kFlagsFieldNumber;
const int CMsgGC_Match_Result::kBotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_Match_Result::CMsgGC_Match_Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Match_Result();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_Match_Result)
}
CMsgGC_Match_Result::CMsgGC_Match_Result(const CMsgGC_Match_Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bots_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(bots_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Match_Result)
}

void CMsgGC_Match_Result::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bots_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(bots_));
}

CMsgGC_Match_Result::~CMsgGC_Match_Result() {
  // @@protoc_insertion_point(destructor:CMsgGC_Match_Result)
  SharedDtor();
}

void CMsgGC_Match_Result::SharedDtor() {
}

void CMsgGC_Match_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Match_Result::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_Match_Result& CMsgGC_Match_Result::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Match_Result();
  return *internal_default_instance();
}

CMsgGC_Match_Result* CMsgGC_Match_Result::New(::google::protobuf::Arena* arena) const {
  CMsgGC_Match_Result* n = new CMsgGC_Match_Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_Match_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Match_Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&map_index_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(map_index_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&game_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bots_) -
        reinterpret_cast<char*>(&game_type_)) + sizeof(bots_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_Match_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_Match_Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1 [(.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 match_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_match_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGC_Match_Result.Status status = 3 [default = MATCH_SUCCEEDED];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGC_Match_Result_Status_IsValid(value)) {
            set_status(static_cast< ::CMsgGC_Match_Result_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 red_score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_red_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 blue_score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_blue_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 winning_team = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_winning_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winning_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 map_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_map_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_type = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_game_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgGC_Match_Result.Player players = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 win_reason = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_win_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bots = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_bots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_Match_Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_Match_Result)
  return false;
#undef DO_
}

void CMsgGC_Match_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_Match_Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional int32 match_group = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->match_group(), output);
  }

  // optional .CMsgGC_Match_Result.Status status = 3 [default = MATCH_SUCCEEDED];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional uint32 duration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->duration(), output);
  }

  // optional uint32 red_score = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->red_score(), output);
  }

  // optional uint32 blue_score = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->blue_score(), output);
  }

  // optional uint32 winning_team = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->winning_team(), output);
  }

  // optional uint32 map_index = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->map_index(), output);
  }

  // optional uint32 game_type = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->game_type(), output);
  }

  // repeated .CMsgGC_Match_Result.Player players = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->players(static_cast<int>(i)), output);
  }

  // optional uint32 win_reason = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->win_reason(), output);
  }

  // optional uint32 flags = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->flags(), output);
  }

  // optional uint32 bots = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->bots(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_Match_Result)
}

::google::protobuf::uint8* CMsgGC_Match_Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Match_Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional int32 match_group = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->match_group(), target);
  }

  // optional .CMsgGC_Match_Result.Status status = 3 [default = MATCH_SUCCEEDED];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional uint32 duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->duration(), target);
  }

  // optional uint32 red_score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->red_score(), target);
  }

  // optional uint32 blue_score = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->blue_score(), target);
  }

  // optional uint32 winning_team = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->winning_team(), target);
  }

  // optional uint32 map_index = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->map_index(), target);
  }

  // optional uint32 game_type = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->game_type(), target);
  }

  // repeated .CMsgGC_Match_Result.Player players = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->players(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 win_reason = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->win_reason(), target);
  }

  // optional uint32 flags = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->flags(), target);
  }

  // optional uint32 bots = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->bots(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Match_Result)
  return target;
}

size_t CMsgGC_Match_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Match_Result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGC_Match_Result.Player players = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 match_id = 1 [(.key_field) = true];
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional int32 match_group = 2;
    if (has_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_group());
    }

    // optional .CMsgGC_Match_Result.Status status = 3 [default = MATCH_SUCCEEDED];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 duration = 4;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional uint32 red_score = 5;
    if (has_red_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->red_score());
    }

    // optional uint32 blue_score = 6;
    if (has_blue_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue_score());
    }

    // optional uint32 winning_team = 7;
    if (has_winning_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winning_team());
    }

    // optional uint32 map_index = 8;
    if (has_map_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_index());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 game_type = 9 [default = 0];
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional uint32 win_reason = 13;
    if (has_win_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_reason());
    }

    // optional uint32 flags = 14;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 bots = 16;
    if (has_bots()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bots());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Match_Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Match_Result)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Match_Result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_Match_Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Match_Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Match_Result)
    MergeFrom(*source);
  }
}

void CMsgGC_Match_Result::MergeFrom(const CMsgGC_Match_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Match_Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_group_ = from.match_group_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      red_score_ = from.red_score_;
    }
    if (cached_has_bits & 0x00000020u) {
      blue_score_ = from.blue_score_;
    }
    if (cached_has_bits & 0x00000040u) {
      winning_team_ = from.winning_team_;
    }
    if (cached_has_bits & 0x00000080u) {
      map_index_ = from.map_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      game_type_ = from.game_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      win_reason_ = from.win_reason_;
    }
    if (cached_has_bits & 0x00000400u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000800u) {
      bots_ = from.bots_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_Match_Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Match_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Match_Result::CopyFrom(const CMsgGC_Match_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Match_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Match_Result::IsInitialized() const {
  return true;
}

void CMsgGC_Match_Result::Swap(CMsgGC_Match_Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_Match_Result::InternalSwap(CMsgGC_Match_Result* other) {
  using std::swap;
  players_.InternalSwap(&other->players_);
  swap(match_id_, other->match_id_);
  swap(match_group_, other->match_group_);
  swap(status_, other->status_);
  swap(duration_, other->duration_);
  swap(red_score_, other->red_score_);
  swap(blue_score_, other->blue_score_);
  swap(winning_team_, other->winning_team_);
  swap(map_index_, other->map_index_);
  swap(game_type_, other->game_type_);
  swap(win_reason_, other->win_reason_);
  swap(flags_, other->flags_);
  swap(bots_, other->bots_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_Match_Result::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_Match_ResultResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_Match_ResultResponse::CMsgGC_Match_ResultResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Match_ResultResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_Match_ResultResponse)
}
CMsgGC_Match_ResultResponse::CMsgGC_Match_ResultResponse(const CMsgGC_Match_ResultResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Match_ResultResponse)
}

void CMsgGC_Match_ResultResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGC_Match_ResultResponse::~CMsgGC_Match_ResultResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_Match_ResultResponse)
  SharedDtor();
}

void CMsgGC_Match_ResultResponse::SharedDtor() {
}

void CMsgGC_Match_ResultResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Match_ResultResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_Match_ResultResponse& CMsgGC_Match_ResultResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Match_ResultResponse();
  return *internal_default_instance();
}

CMsgGC_Match_ResultResponse* CMsgGC_Match_ResultResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGC_Match_ResultResponse* n = new CMsgGC_Match_ResultResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_Match_ResultResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Match_ResultResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_Match_ResultResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_Match_ResultResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_Match_ResultResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_Match_ResultResponse)
  return false;
#undef DO_
}

void CMsgGC_Match_ResultResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_Match_ResultResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_Match_ResultResponse)
}

::google::protobuf::uint8* CMsgGC_Match_ResultResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Match_ResultResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Match_ResultResponse)
  return target;
}

size_t CMsgGC_Match_ResultResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Match_ResultResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Match_ResultResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Match_ResultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Match_ResultResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_Match_ResultResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Match_ResultResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Match_ResultResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_Match_ResultResponse::MergeFrom(const CMsgGC_Match_ResultResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Match_ResultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGC_Match_ResultResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Match_ResultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Match_ResultResponse::CopyFrom(const CMsgGC_Match_ResultResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Match_ResultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Match_ResultResponse::IsInitialized() const {
  return true;
}

void CMsgGC_Match_ResultResponse::Swap(CMsgGC_Match_ResultResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_Match_ResultResponse::InternalSwap(CMsgGC_Match_ResultResponse* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_Match_ResultResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CEconItemPreviewDataBlock::InitAsDefaultInstance() {
  ::_CEconItemPreviewDataBlock_default_instance_._instance.get_mutable()->econitem_ = const_cast< ::CSOEconItem*>(
      ::CSOEconItem::internal_default_instance());
}
void CEconItemPreviewDataBlock::clear_econitem() {
  if (econitem_ != NULL) econitem_->Clear();
  clear_has_econitem();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEconItemPreviewDataBlock::kEconitemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEconItemPreviewDataBlock::CEconItemPreviewDataBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCEconItemPreviewDataBlock();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CEconItemPreviewDataBlock)
}
CEconItemPreviewDataBlock::CEconItemPreviewDataBlock(const CEconItemPreviewDataBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_econitem()) {
    econitem_ = new ::CSOEconItem(*from.econitem_);
  } else {
    econitem_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CEconItemPreviewDataBlock)
}

void CEconItemPreviewDataBlock::SharedCtor() {
  _cached_size_ = 0;
  econitem_ = NULL;
}

CEconItemPreviewDataBlock::~CEconItemPreviewDataBlock() {
  // @@protoc_insertion_point(destructor:CEconItemPreviewDataBlock)
  SharedDtor();
}

void CEconItemPreviewDataBlock::SharedDtor() {
  if (this != internal_default_instance()) delete econitem_;
}

void CEconItemPreviewDataBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEconItemPreviewDataBlock::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CEconItemPreviewDataBlock& CEconItemPreviewDataBlock::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCEconItemPreviewDataBlock();
  return *internal_default_instance();
}

CEconItemPreviewDataBlock* CEconItemPreviewDataBlock::New(::google::protobuf::Arena* arena) const {
  CEconItemPreviewDataBlock* n = new CEconItemPreviewDataBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CEconItemPreviewDataBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:CEconItemPreviewDataBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(econitem_ != NULL);
    econitem_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CEconItemPreviewDataBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CEconItemPreviewDataBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSOEconItem econitem = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_econitem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CEconItemPreviewDataBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CEconItemPreviewDataBlock)
  return false;
#undef DO_
}

void CEconItemPreviewDataBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CEconItemPreviewDataBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CSOEconItem econitem = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->econitem_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CEconItemPreviewDataBlock)
}

::google::protobuf::uint8* CEconItemPreviewDataBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CEconItemPreviewDataBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CSOEconItem econitem = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->econitem_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEconItemPreviewDataBlock)
  return target;
}

size_t CEconItemPreviewDataBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEconItemPreviewDataBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CSOEconItem econitem = 1;
  if (has_econitem()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->econitem_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEconItemPreviewDataBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEconItemPreviewDataBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const CEconItemPreviewDataBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CEconItemPreviewDataBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEconItemPreviewDataBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEconItemPreviewDataBlock)
    MergeFrom(*source);
  }
}

void CEconItemPreviewDataBlock::MergeFrom(const CEconItemPreviewDataBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEconItemPreviewDataBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_econitem()) {
    mutable_econitem()->::CSOEconItem::MergeFrom(from.econitem());
  }
}

void CEconItemPreviewDataBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEconItemPreviewDataBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock::CopyFrom(const CEconItemPreviewDataBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEconItemPreviewDataBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItemPreviewDataBlock::IsInitialized() const {
  return true;
}

void CEconItemPreviewDataBlock::Swap(CEconItemPreviewDataBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEconItemPreviewDataBlock::InternalSwap(CEconItemPreviewDataBlock* other) {
  using std::swap;
  swap(econitem_, other->econitem_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CEconItemPreviewDataBlock::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_Client2GCEconPreviewDataBlockRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_Client2GCEconPreviewDataBlockRequest::kParamSFieldNumber;
const int CMsgGC_Client2GCEconPreviewDataBlockRequest::kParamAFieldNumber;
const int CMsgGC_Client2GCEconPreviewDataBlockRequest::kParamDFieldNumber;
const int CMsgGC_Client2GCEconPreviewDataBlockRequest::kParamMFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_Client2GCEconPreviewDataBlockRequest::CMsgGC_Client2GCEconPreviewDataBlockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Client2GCEconPreviewDataBlockRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_Client2GCEconPreviewDataBlockRequest)
}
CMsgGC_Client2GCEconPreviewDataBlockRequest::CMsgGC_Client2GCEconPreviewDataBlockRequest(const CMsgGC_Client2GCEconPreviewDataBlockRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&param_s_, &from.param_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&param_m_) -
    reinterpret_cast<char*>(&param_s_)) + sizeof(param_m_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Client2GCEconPreviewDataBlockRequest)
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&param_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_m_) -
      reinterpret_cast<char*>(&param_s_)) + sizeof(param_m_));
}

CMsgGC_Client2GCEconPreviewDataBlockRequest::~CMsgGC_Client2GCEconPreviewDataBlockRequest() {
  // @@protoc_insertion_point(destructor:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  SharedDtor();
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::SharedDtor() {
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Client2GCEconPreviewDataBlockRequest::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_Client2GCEconPreviewDataBlockRequest& CMsgGC_Client2GCEconPreviewDataBlockRequest::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Client2GCEconPreviewDataBlockRequest();
  return *internal_default_instance();
}

CMsgGC_Client2GCEconPreviewDataBlockRequest* CMsgGC_Client2GCEconPreviewDataBlockRequest::New(::google::protobuf::Arena* arena) const {
  CMsgGC_Client2GCEconPreviewDataBlockRequest* n = new CMsgGC_Client2GCEconPreviewDataBlockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&param_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&param_m_) -
        reinterpret_cast<char*>(&param_s_)) + sizeof(param_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_Client2GCEconPreviewDataBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 param_s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_param_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 param_a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_param_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 param_d = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_param_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 param_m = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_param_m();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  return false;
#undef DO_
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 param_s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->param_s(), output);
  }

  // optional uint64 param_a = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->param_a(), output);
  }

  // optional uint64 param_d = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->param_d(), output);
  }

  // optional uint64 param_m = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->param_m(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_Client2GCEconPreviewDataBlockRequest)
}

::google::protobuf::uint8* CMsgGC_Client2GCEconPreviewDataBlockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 param_s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->param_s(), target);
  }

  // optional uint64 param_a = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->param_a(), target);
  }

  // optional uint64 param_d = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->param_d(), target);
  }

  // optional uint64 param_m = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->param_m(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  return target;
}

size_t CMsgGC_Client2GCEconPreviewDataBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 param_s = 1;
    if (has_param_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_s());
    }

    // optional uint64 param_a = 2;
    if (has_param_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_a());
    }

    // optional uint64 param_d = 3;
    if (has_param_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_d());
    }

    // optional uint64 param_m = 4;
    if (has_param_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_m());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Client2GCEconPreviewDataBlockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_Client2GCEconPreviewDataBlockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Client2GCEconPreviewDataBlockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Client2GCEconPreviewDataBlockRequest)
    MergeFrom(*source);
  }
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::MergeFrom(const CMsgGC_Client2GCEconPreviewDataBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      param_s_ = from.param_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      param_a_ = from.param_a_;
    }
    if (cached_has_bits & 0x00000004u) {
      param_d_ = from.param_d_;
    }
    if (cached_has_bits & 0x00000008u) {
      param_m_ = from.param_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::CopyFrom(const CMsgGC_Client2GCEconPreviewDataBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Client2GCEconPreviewDataBlockRequest::IsInitialized() const {
  return true;
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::Swap(CMsgGC_Client2GCEconPreviewDataBlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_Client2GCEconPreviewDataBlockRequest::InternalSwap(CMsgGC_Client2GCEconPreviewDataBlockRequest* other) {
  using std::swap;
  swap(param_s_, other->param_s_);
  swap(param_a_, other->param_a_);
  swap(param_d_, other->param_d_);
  swap(param_m_, other->param_m_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_Client2GCEconPreviewDataBlockRequest::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_Client2GCEconPreviewDataBlockResponse::InitAsDefaultInstance() {
  ::_CMsgGC_Client2GCEconPreviewDataBlockResponse_default_instance_._instance.get_mutable()->iteminfo_ = const_cast< ::CEconItemPreviewDataBlock*>(
      ::CEconItemPreviewDataBlock::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_Client2GCEconPreviewDataBlockResponse::kIteminfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_Client2GCEconPreviewDataBlockResponse::CMsgGC_Client2GCEconPreviewDataBlockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Client2GCEconPreviewDataBlockResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_Client2GCEconPreviewDataBlockResponse)
}
CMsgGC_Client2GCEconPreviewDataBlockResponse::CMsgGC_Client2GCEconPreviewDataBlockResponse(const CMsgGC_Client2GCEconPreviewDataBlockResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_iteminfo()) {
    iteminfo_ = new ::CEconItemPreviewDataBlock(*from.iteminfo_);
  } else {
    iteminfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Client2GCEconPreviewDataBlockResponse)
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::SharedCtor() {
  _cached_size_ = 0;
  iteminfo_ = NULL;
}

CMsgGC_Client2GCEconPreviewDataBlockResponse::~CMsgGC_Client2GCEconPreviewDataBlockResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  SharedDtor();
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::SharedDtor() {
  if (this != internal_default_instance()) delete iteminfo_;
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_Client2GCEconPreviewDataBlockResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_Client2GCEconPreviewDataBlockResponse& CMsgGC_Client2GCEconPreviewDataBlockResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_Client2GCEconPreviewDataBlockResponse();
  return *internal_default_instance();
}

CMsgGC_Client2GCEconPreviewDataBlockResponse* CMsgGC_Client2GCEconPreviewDataBlockResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGC_Client2GCEconPreviewDataBlockResponse* n = new CMsgGC_Client2GCEconPreviewDataBlockResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(iteminfo_ != NULL);
    iteminfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_Client2GCEconPreviewDataBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CEconItemPreviewDataBlock iteminfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  return false;
#undef DO_
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->iteminfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_Client2GCEconPreviewDataBlockResponse)
}

::google::protobuf::uint8* CMsgGC_Client2GCEconPreviewDataBlockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->iteminfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  return target;
}

size_t CMsgGC_Client2GCEconPreviewDataBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (has_iteminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->iteminfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Client2GCEconPreviewDataBlockResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_Client2GCEconPreviewDataBlockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Client2GCEconPreviewDataBlockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Client2GCEconPreviewDataBlockResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::MergeFrom(const CMsgGC_Client2GCEconPreviewDataBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_iteminfo()) {
    mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(from.iteminfo());
  }
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::CopyFrom(const CMsgGC_Client2GCEconPreviewDataBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Client2GCEconPreviewDataBlockResponse::IsInitialized() const {
  return true;
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::Swap(CMsgGC_Client2GCEconPreviewDataBlockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_Client2GCEconPreviewDataBlockResponse::InternalSwap(CMsgGC_Client2GCEconPreviewDataBlockResponse* other) {
  using std::swap;
  swap(iteminfo_, other->iteminfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_Client2GCEconPreviewDataBlockResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSOTFLadderPlayerStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOTFLadderPlayerStats::kAccountIdFieldNumber;
const int CSOTFLadderPlayerStats::kMatchGroupFieldNumber;
const int CSOTFLadderPlayerStats::kSeasonIdFieldNumber;
const int CSOTFLadderPlayerStats::kRankFieldNumber;
const int CSOTFLadderPlayerStats::kHighestRankFieldNumber;
const int CSOTFLadderPlayerStats::kExperienceFieldNumber;
const int CSOTFLadderPlayerStats::kLastAckdExperienceFieldNumber;
const int CSOTFLadderPlayerStats::kGamesFieldNumber;
const int CSOTFLadderPlayerStats::kScoreFieldNumber;
const int CSOTFLadderPlayerStats::kKillsFieldNumber;
const int CSOTFLadderPlayerStats::kDeathsFieldNumber;
const int CSOTFLadderPlayerStats::kDamageFieldNumber;
const int CSOTFLadderPlayerStats::kHealingFieldNumber;
const int CSOTFLadderPlayerStats::kSupportFieldNumber;
const int CSOTFLadderPlayerStats::kScoreBronzeFieldNumber;
const int CSOTFLadderPlayerStats::kScoreSilverFieldNumber;
const int CSOTFLadderPlayerStats::kScoreGoldFieldNumber;
const int CSOTFLadderPlayerStats::kKillsBronzeFieldNumber;
const int CSOTFLadderPlayerStats::kKillsSilverFieldNumber;
const int CSOTFLadderPlayerStats::kKillsGoldFieldNumber;
const int CSOTFLadderPlayerStats::kDamageBronzeFieldNumber;
const int CSOTFLadderPlayerStats::kDamageSilverFieldNumber;
const int CSOTFLadderPlayerStats::kDamageGoldFieldNumber;
const int CSOTFLadderPlayerStats::kHealingBronzeFieldNumber;
const int CSOTFLadderPlayerStats::kHealingSilverFieldNumber;
const int CSOTFLadderPlayerStats::kHealingGoldFieldNumber;
const int CSOTFLadderPlayerStats::kSupportBronzeFieldNumber;
const int CSOTFLadderPlayerStats::kSupportSilverFieldNumber;
const int CSOTFLadderPlayerStats::kSupportGoldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOTFLadderPlayerStats::CSOTFLadderPlayerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFLadderPlayerStats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSOTFLadderPlayerStats)
}
CSOTFLadderPlayerStats::CSOTFLadderPlayerStats(const CSOTFLadderPlayerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_ackd_experience_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(last_ackd_experience_));
  // @@protoc_insertion_point(copy_constructor:CSOTFLadderPlayerStats)
}

void CSOTFLadderPlayerStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_ackd_experience_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(last_ackd_experience_));
}

CSOTFLadderPlayerStats::~CSOTFLadderPlayerStats() {
  // @@protoc_insertion_point(destructor:CSOTFLadderPlayerStats)
  SharedDtor();
}

void CSOTFLadderPlayerStats::SharedDtor() {
}

void CSOTFLadderPlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFLadderPlayerStats::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOTFLadderPlayerStats& CSOTFLadderPlayerStats::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFLadderPlayerStats();
  return *internal_default_instance();
}

CSOTFLadderPlayerStats* CSOTFLadderPlayerStats::New(::google::protobuf::Arena* arena) const {
  CSOTFLadderPlayerStats* n = new CSOTFLadderPlayerStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOTFLadderPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFLadderPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(score_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_gold_) -
        reinterpret_cast<char*>(&kills_)) + sizeof(score_gold_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&kills_bronze_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&healing_silver_) -
        reinterpret_cast<char*>(&kills_bronze_)) + sizeof(healing_silver_));
  }
  if (cached_has_bits & 520093696u) {
    ::memset(&healing_gold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_ackd_experience_) -
        reinterpret_cast<char*>(&healing_gold_)) + sizeof(last_ackd_experience_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOTFLadderPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSOTFLadderPlayerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 match_group = 2 [(.key_field) = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_match_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_id = 3 [(.key_field) = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_season_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 highest_rank = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_highest_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highest_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 experience = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_experience();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experience_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 games = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_games();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &games_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 healing = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_healing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_support();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score_bronze = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_score_bronze();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_bronze_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score_silver = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_score_silver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_silver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score_gold = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_score_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills_bronze = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_kills_bronze();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_bronze_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills_silver = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_kills_silver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_silver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills_gold = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_kills_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_bronze = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_damage_bronze();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_bronze_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_silver = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_damage_silver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_silver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_gold = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_damage_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 healing_bronze = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_healing_bronze();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_bronze_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 healing_silver = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_healing_silver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_silver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 healing_gold = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_healing_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support_bronze = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_support_bronze();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_bronze_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support_silver = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_support_silver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_silver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support_gold = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_support_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_ackd_experience = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_last_ackd_experience();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_ackd_experience_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSOTFLadderPlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSOTFLadderPlayerStats)
  return false;
#undef DO_
}

void CSOTFLadderPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSOTFLadderPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional int32 match_group = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->match_group(), output);
  }

  // optional uint32 season_id = 3 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->season_id(), output);
  }

  // optional uint32 rank = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rank(), output);
  }

  // optional uint32 highest_rank = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->highest_rank(), output);
  }

  // optional uint32 experience = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->experience(), output);
  }

  // optional uint32 games = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->games(), output);
  }

  // optional uint32 score = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->score(), output);
  }

  // optional uint32 kills = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kills(), output);
  }

  // optional uint32 deaths = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->deaths(), output);
  }

  // optional uint32 damage = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->damage(), output);
  }

  // optional uint32 healing = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->healing(), output);
  }

  // optional uint32 support = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->support(), output);
  }

  // optional uint32 score_bronze = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->score_bronze(), output);
  }

  // optional uint32 score_silver = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->score_silver(), output);
  }

  // optional uint32 score_gold = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->score_gold(), output);
  }

  // optional uint32 kills_bronze = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->kills_bronze(), output);
  }

  // optional uint32 kills_silver = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->kills_silver(), output);
  }

  // optional uint32 kills_gold = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->kills_gold(), output);
  }

  // optional uint32 damage_bronze = 22;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->damage_bronze(), output);
  }

  // optional uint32 damage_silver = 23;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->damage_silver(), output);
  }

  // optional uint32 damage_gold = 24;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->damage_gold(), output);
  }

  // optional uint32 healing_bronze = 25;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->healing_bronze(), output);
  }

  // optional uint32 healing_silver = 26;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->healing_silver(), output);
  }

  // optional uint32 healing_gold = 27;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->healing_gold(), output);
  }

  // optional uint32 support_bronze = 28;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->support_bronze(), output);
  }

  // optional uint32 support_silver = 29;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->support_silver(), output);
  }

  // optional uint32 support_gold = 30;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->support_gold(), output);
  }

  // optional uint32 last_ackd_experience = 32;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->last_ackd_experience(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSOTFLadderPlayerStats)
}

::google::protobuf::uint8* CSOTFLadderPlayerStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFLadderPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional int32 match_group = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->match_group(), target);
  }

  // optional uint32 season_id = 3 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->season_id(), target);
  }

  // optional uint32 rank = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rank(), target);
  }

  // optional uint32 highest_rank = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->highest_rank(), target);
  }

  // optional uint32 experience = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->experience(), target);
  }

  // optional uint32 games = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->games(), target);
  }

  // optional uint32 score = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->score(), target);
  }

  // optional uint32 kills = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kills(), target);
  }

  // optional uint32 deaths = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->deaths(), target);
  }

  // optional uint32 damage = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->damage(), target);
  }

  // optional uint32 healing = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->healing(), target);
  }

  // optional uint32 support = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->support(), target);
  }

  // optional uint32 score_bronze = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->score_bronze(), target);
  }

  // optional uint32 score_silver = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->score_silver(), target);
  }

  // optional uint32 score_gold = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->score_gold(), target);
  }

  // optional uint32 kills_bronze = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->kills_bronze(), target);
  }

  // optional uint32 kills_silver = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->kills_silver(), target);
  }

  // optional uint32 kills_gold = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->kills_gold(), target);
  }

  // optional uint32 damage_bronze = 22;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->damage_bronze(), target);
  }

  // optional uint32 damage_silver = 23;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->damage_silver(), target);
  }

  // optional uint32 damage_gold = 24;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->damage_gold(), target);
  }

  // optional uint32 healing_bronze = 25;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->healing_bronze(), target);
  }

  // optional uint32 healing_silver = 26;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->healing_silver(), target);
  }

  // optional uint32 healing_gold = 27;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->healing_gold(), target);
  }

  // optional uint32 support_bronze = 28;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->support_bronze(), target);
  }

  // optional uint32 support_silver = 29;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->support_silver(), target);
  }

  // optional uint32 support_gold = 30;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->support_gold(), target);
  }

  // optional uint32 last_ackd_experience = 32;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->last_ackd_experience(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFLadderPlayerStats)
  return target;
}

size_t CSOTFLadderPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFLadderPlayerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional int32 match_group = 2 [(.key_field) = true];
    if (has_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_group());
    }

    // optional uint32 season_id = 3 [(.key_field) = true];
    if (has_season_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_id());
    }

    // optional uint32 rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 highest_rank = 7;
    if (has_highest_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highest_rank());
    }

    // optional uint32 experience = 8;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->experience());
    }

    // optional uint32 games = 9;
    if (has_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->games());
    }

    // optional uint32 score = 10;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 kills = 11;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 12;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 damage = 13;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 healing = 14;
    if (has_healing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing());
    }

    // optional uint32 support = 15;
    if (has_support()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support());
    }

    // optional uint32 score_bronze = 16;
    if (has_score_bronze()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_bronze());
    }

    // optional uint32 score_silver = 17;
    if (has_score_silver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_silver());
    }

    // optional uint32 score_gold = 18;
    if (has_score_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_gold());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 kills_bronze = 19;
    if (has_kills_bronze()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills_bronze());
    }

    // optional uint32 kills_silver = 20;
    if (has_kills_silver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills_silver());
    }

    // optional uint32 kills_gold = 21;
    if (has_kills_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills_gold());
    }

    // optional uint32 damage_bronze = 22;
    if (has_damage_bronze()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_bronze());
    }

    // optional uint32 damage_silver = 23;
    if (has_damage_silver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_silver());
    }

    // optional uint32 damage_gold = 24;
    if (has_damage_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_gold());
    }

    // optional uint32 healing_bronze = 25;
    if (has_healing_bronze()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing_bronze());
    }

    // optional uint32 healing_silver = 26;
    if (has_healing_silver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing_silver());
    }

  }
  if (_has_bits_[24 / 32] & 520093696u) {
    // optional uint32 healing_gold = 27;
    if (has_healing_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing_gold());
    }

    // optional uint32 support_bronze = 28;
    if (has_support_bronze()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_bronze());
    }

    // optional uint32 support_silver = 29;
    if (has_support_silver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_silver());
    }

    // optional uint32 support_gold = 30;
    if (has_support_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_gold());
    }

    // optional uint32 last_ackd_experience = 32;
    if (has_last_ackd_experience()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_ackd_experience());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFLadderPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFLadderPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFLadderPlayerStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOTFLadderPlayerStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFLadderPlayerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFLadderPlayerStats)
    MergeFrom(*source);
  }
}

void CSOTFLadderPlayerStats::MergeFrom(const CSOTFLadderPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFLadderPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_group_ = from.match_group_;
    }
    if (cached_has_bits & 0x00000004u) {
      season_id_ = from.season_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000010u) {
      highest_rank_ = from.highest_rank_;
    }
    if (cached_has_bits & 0x00000020u) {
      experience_ = from.experience_;
    }
    if (cached_has_bits & 0x00000040u) {
      games_ = from.games_;
    }
    if (cached_has_bits & 0x00000080u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000200u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000400u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x00000800u) {
      healing_ = from.healing_;
    }
    if (cached_has_bits & 0x00001000u) {
      support_ = from.support_;
    }
    if (cached_has_bits & 0x00002000u) {
      score_bronze_ = from.score_bronze_;
    }
    if (cached_has_bits & 0x00004000u) {
      score_silver_ = from.score_silver_;
    }
    if (cached_has_bits & 0x00008000u) {
      score_gold_ = from.score_gold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      kills_bronze_ = from.kills_bronze_;
    }
    if (cached_has_bits & 0x00020000u) {
      kills_silver_ = from.kills_silver_;
    }
    if (cached_has_bits & 0x00040000u) {
      kills_gold_ = from.kills_gold_;
    }
    if (cached_has_bits & 0x00080000u) {
      damage_bronze_ = from.damage_bronze_;
    }
    if (cached_has_bits & 0x00100000u) {
      damage_silver_ = from.damage_silver_;
    }
    if (cached_has_bits & 0x00200000u) {
      damage_gold_ = from.damage_gold_;
    }
    if (cached_has_bits & 0x00400000u) {
      healing_bronze_ = from.healing_bronze_;
    }
    if (cached_has_bits & 0x00800000u) {
      healing_silver_ = from.healing_silver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 520093696u) {
    if (cached_has_bits & 0x01000000u) {
      healing_gold_ = from.healing_gold_;
    }
    if (cached_has_bits & 0x02000000u) {
      support_bronze_ = from.support_bronze_;
    }
    if (cached_has_bits & 0x04000000u) {
      support_silver_ = from.support_silver_;
    }
    if (cached_has_bits & 0x08000000u) {
      support_gold_ = from.support_gold_;
    }
    if (cached_has_bits & 0x10000000u) {
      last_ackd_experience_ = from.last_ackd_experience_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFLadderPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFLadderPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFLadderPlayerStats::CopyFrom(const CSOTFLadderPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFLadderPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFLadderPlayerStats::IsInitialized() const {
  return true;
}

void CSOTFLadderPlayerStats::Swap(CSOTFLadderPlayerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOTFLadderPlayerStats::InternalSwap(CSOTFLadderPlayerStats* other) {
  using std::swap;
  swap(account_id_, other->account_id_);
  swap(match_group_, other->match_group_);
  swap(season_id_, other->season_id_);
  swap(rank_, other->rank_);
  swap(highest_rank_, other->highest_rank_);
  swap(experience_, other->experience_);
  swap(games_, other->games_);
  swap(score_, other->score_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
  swap(damage_, other->damage_);
  swap(healing_, other->healing_);
  swap(support_, other->support_);
  swap(score_bronze_, other->score_bronze_);
  swap(score_silver_, other->score_silver_);
  swap(score_gold_, other->score_gold_);
  swap(kills_bronze_, other->kills_bronze_);
  swap(kills_silver_, other->kills_silver_);
  swap(kills_gold_, other->kills_gold_);
  swap(damage_bronze_, other->damage_bronze_);
  swap(damage_silver_, other->damage_silver_);
  swap(damage_gold_, other->damage_gold_);
  swap(healing_bronze_, other->healing_bronze_);
  swap(healing_silver_, other->healing_silver_);
  swap(healing_gold_, other->healing_gold_);
  swap(support_bronze_, other->support_bronze_);
  swap(support_silver_, other->support_silver_);
  swap(support_gold_, other->support_gold_);
  swap(last_ackd_experience_, other->last_ackd_experience_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOTFLadderPlayerStats::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSOTFRatingData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOTFRatingData::kAccountIdFieldNumber;
const int CSOTFRatingData::kRatingTypeFieldNumber;
const int CSOTFRatingData::kRatingPrimaryFieldNumber;
const int CSOTFRatingData::kRatingSecondaryFieldNumber;
const int CSOTFRatingData::kRatingTertiaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOTFRatingData::CSOTFRatingData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFRatingData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSOTFRatingData)
}
CSOTFRatingData::CSOTFRatingData(const CSOTFRatingData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rating_tertiary_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(rating_tertiary_));
  // @@protoc_insertion_point(copy_constructor:CSOTFRatingData)
}

void CSOTFRatingData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rating_tertiary_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(rating_tertiary_));
}

CSOTFRatingData::~CSOTFRatingData() {
  // @@protoc_insertion_point(destructor:CSOTFRatingData)
  SharedDtor();
}

void CSOTFRatingData::SharedDtor() {
}

void CSOTFRatingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFRatingData::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOTFRatingData& CSOTFRatingData::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFRatingData();
  return *internal_default_instance();
}

CSOTFRatingData* CSOTFRatingData::New(::google::protobuf::Arena* arena) const {
  CSOTFRatingData* n = new CSOTFRatingData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOTFRatingData::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFRatingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rating_tertiary_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(rating_tertiary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOTFRatingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSOTFRatingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rating_type = 2 [(.key_field) = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_rating_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rating_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rating_primary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rating_primary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rating_primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rating_secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rating_secondary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rating_secondary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rating_tertiary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_rating_tertiary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rating_tertiary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSOTFRatingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSOTFRatingData)
  return false;
#undef DO_
}

void CSOTFRatingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSOTFRatingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional int32 rating_type = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rating_type(), output);
  }

  // optional uint32 rating_primary = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rating_primary(), output);
  }

  // optional uint32 rating_secondary = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rating_secondary(), output);
  }

  // optional uint32 rating_tertiary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rating_tertiary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSOTFRatingData)
}

::google::protobuf::uint8* CSOTFRatingData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFRatingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional int32 rating_type = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rating_type(), target);
  }

  // optional uint32 rating_primary = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rating_primary(), target);
  }

  // optional uint32 rating_secondary = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rating_secondary(), target);
  }

  // optional uint32 rating_tertiary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rating_tertiary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFRatingData)
  return target;
}

size_t CSOTFRatingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFRatingData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional int32 rating_type = 2 [(.key_field) = true];
    if (has_rating_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rating_type());
    }

    // optional uint32 rating_primary = 3;
    if (has_rating_primary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rating_primary());
    }

    // optional uint32 rating_secondary = 4;
    if (has_rating_secondary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rating_secondary());
    }

    // optional uint32 rating_tertiary = 5;
    if (has_rating_tertiary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rating_tertiary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFRatingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFRatingData)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFRatingData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOTFRatingData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFRatingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFRatingData)
    MergeFrom(*source);
  }
}

void CSOTFRatingData::MergeFrom(const CSOTFRatingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFRatingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rating_type_ = from.rating_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      rating_primary_ = from.rating_primary_;
    }
    if (cached_has_bits & 0x00000008u) {
      rating_secondary_ = from.rating_secondary_;
    }
    if (cached_has_bits & 0x00000010u) {
      rating_tertiary_ = from.rating_tertiary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFRatingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFRatingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFRatingData::CopyFrom(const CSOTFRatingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFRatingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFRatingData::IsInitialized() const {
  return true;
}

void CSOTFRatingData::Swap(CSOTFRatingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOTFRatingData::InternalSwap(CSOTFRatingData* other) {
  using std::swap;
  swap(account_id_, other->account_id_);
  swap(rating_type_, other->rating_type_);
  swap(rating_primary_, other->rating_primary_);
  swap(rating_secondary_, other->rating_secondary_);
  swap(rating_tertiary_, other->rating_tertiary_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOTFRatingData::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_TFVoteKickPlayerRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_TFVoteKickPlayerRequest::kAccountIdFieldNumber;
const int CMsgGC_TFVoteKickPlayerRequest::kTargetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_TFVoteKickPlayerRequest::CMsgGC_TFVoteKickPlayerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_TFVoteKickPlayerRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_TFVoteKickPlayerRequest)
}
CMsgGC_TFVoteKickPlayerRequest::CMsgGC_TFVoteKickPlayerRequest(const CMsgGC_TFVoteKickPlayerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_id_, &from.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_TFVoteKickPlayerRequest)
}

void CMsgGC_TFVoteKickPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(account_id_));
}

CMsgGC_TFVoteKickPlayerRequest::~CMsgGC_TFVoteKickPlayerRequest() {
  // @@protoc_insertion_point(destructor:CMsgGC_TFVoteKickPlayerRequest)
  SharedDtor();
}

void CMsgGC_TFVoteKickPlayerRequest::SharedDtor() {
}

void CMsgGC_TFVoteKickPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_TFVoteKickPlayerRequest::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_TFVoteKickPlayerRequest& CMsgGC_TFVoteKickPlayerRequest::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_TFVoteKickPlayerRequest();
  return *internal_default_instance();
}

CMsgGC_TFVoteKickPlayerRequest* CMsgGC_TFVoteKickPlayerRequest::New(::google::protobuf::Arena* arena) const {
  CMsgGC_TFVoteKickPlayerRequest* n = new CMsgGC_TFVoteKickPlayerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_TFVoteKickPlayerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_TFVoteKickPlayerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&target_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_) -
        reinterpret_cast<char*>(&target_id_)) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_TFVoteKickPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_TFVoteKickPlayerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_target_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_TFVoteKickPlayerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_TFVoteKickPlayerRequest)
  return false;
#undef DO_
}

void CMsgGC_TFVoteKickPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_TFVoteKickPlayerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 target_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_TFVoteKickPlayerRequest)
}

::google::protobuf::uint8* CMsgGC_TFVoteKickPlayerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_TFVoteKickPlayerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 target_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_TFVoteKickPlayerRequest)
  return target;
}

size_t CMsgGC_TFVoteKickPlayerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_TFVoteKickPlayerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_TFVoteKickPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_TFVoteKickPlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_TFVoteKickPlayerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_TFVoteKickPlayerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_TFVoteKickPlayerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_TFVoteKickPlayerRequest)
    MergeFrom(*source);
  }
}

void CMsgGC_TFVoteKickPlayerRequest::MergeFrom(const CMsgGC_TFVoteKickPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_TFVoteKickPlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      target_id_ = from.target_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_TFVoteKickPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_TFVoteKickPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_TFVoteKickPlayerRequest::CopyFrom(const CMsgGC_TFVoteKickPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_TFVoteKickPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_TFVoteKickPlayerRequest::IsInitialized() const {
  return true;
}

void CMsgGC_TFVoteKickPlayerRequest::Swap(CMsgGC_TFVoteKickPlayerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_TFVoteKickPlayerRequest::InternalSwap(CMsgGC_TFVoteKickPlayerRequest* other) {
  using std::swap;
  swap(target_id_, other->target_id_);
  swap(account_id_, other->account_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_TFVoteKickPlayerRequest::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_VoteKickPlayerRequestResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_VoteKickPlayerRequestResponse::kAllowedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_VoteKickPlayerRequestResponse::CMsgGC_VoteKickPlayerRequestResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_VoteKickPlayerRequestResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_VoteKickPlayerRequestResponse)
}
CMsgGC_VoteKickPlayerRequestResponse::CMsgGC_VoteKickPlayerRequestResponse(const CMsgGC_VoteKickPlayerRequestResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  allowed_ = from.allowed_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_VoteKickPlayerRequestResponse)
}

void CMsgGC_VoteKickPlayerRequestResponse::SharedCtor() {
  _cached_size_ = 0;
  allowed_ = false;
}

CMsgGC_VoteKickPlayerRequestResponse::~CMsgGC_VoteKickPlayerRequestResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_VoteKickPlayerRequestResponse)
  SharedDtor();
}

void CMsgGC_VoteKickPlayerRequestResponse::SharedDtor() {
}

void CMsgGC_VoteKickPlayerRequestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_VoteKickPlayerRequestResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_VoteKickPlayerRequestResponse& CMsgGC_VoteKickPlayerRequestResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_VoteKickPlayerRequestResponse();
  return *internal_default_instance();
}

CMsgGC_VoteKickPlayerRequestResponse* CMsgGC_VoteKickPlayerRequestResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGC_VoteKickPlayerRequestResponse* n = new CMsgGC_VoteKickPlayerRequestResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_VoteKickPlayerRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_VoteKickPlayerRequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_VoteKickPlayerRequestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_VoteKickPlayerRequestResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool allowed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_allowed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_VoteKickPlayerRequestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_VoteKickPlayerRequestResponse)
  return false;
#undef DO_
}

void CMsgGC_VoteKickPlayerRequestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_VoteKickPlayerRequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allowed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allowed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_VoteKickPlayerRequestResponse)
}

::google::protobuf::uint8* CMsgGC_VoteKickPlayerRequestResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_VoteKickPlayerRequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allowed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allowed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_VoteKickPlayerRequestResponse)
  return target;
}

size_t CMsgGC_VoteKickPlayerRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_VoteKickPlayerRequestResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool allowed = 1;
  if (has_allowed()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_VoteKickPlayerRequestResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_VoteKickPlayerRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_VoteKickPlayerRequestResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_VoteKickPlayerRequestResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_VoteKickPlayerRequestResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_VoteKickPlayerRequestResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_VoteKickPlayerRequestResponse::MergeFrom(const CMsgGC_VoteKickPlayerRequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_VoteKickPlayerRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_allowed()) {
    set_allowed(from.allowed());
  }
}

void CMsgGC_VoteKickPlayerRequestResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_VoteKickPlayerRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_VoteKickPlayerRequestResponse::CopyFrom(const CMsgGC_VoteKickPlayerRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_VoteKickPlayerRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_VoteKickPlayerRequestResponse::IsInitialized() const {
  return true;
}

void CMsgGC_VoteKickPlayerRequestResponse::Swap(CMsgGC_VoteKickPlayerRequestResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_VoteKickPlayerRequestResponse::InternalSwap(CMsgGC_VoteKickPlayerRequestResponse* other) {
  using std::swap;
  swap(allowed_, other->allowed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_VoteKickPlayerRequestResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_DailyCompetitiveStatsRollup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_DailyCompetitiveStatsRollup::CMsgGC_DailyCompetitiveStatsRollup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_DailyCompetitiveStatsRollup();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_DailyCompetitiveStatsRollup)
}
CMsgGC_DailyCompetitiveStatsRollup::CMsgGC_DailyCompetitiveStatsRollup(const CMsgGC_DailyCompetitiveStatsRollup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGC_DailyCompetitiveStatsRollup)
}

void CMsgGC_DailyCompetitiveStatsRollup::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGC_DailyCompetitiveStatsRollup::~CMsgGC_DailyCompetitiveStatsRollup() {
  // @@protoc_insertion_point(destructor:CMsgGC_DailyCompetitiveStatsRollup)
  SharedDtor();
}

void CMsgGC_DailyCompetitiveStatsRollup::SharedDtor() {
}

void CMsgGC_DailyCompetitiveStatsRollup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_DailyCompetitiveStatsRollup::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_DailyCompetitiveStatsRollup& CMsgGC_DailyCompetitiveStatsRollup::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_DailyCompetitiveStatsRollup();
  return *internal_default_instance();
}

CMsgGC_DailyCompetitiveStatsRollup* CMsgGC_DailyCompetitiveStatsRollup::New(::google::protobuf::Arena* arena) const {
  CMsgGC_DailyCompetitiveStatsRollup* n = new CMsgGC_DailyCompetitiveStatsRollup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_DailyCompetitiveStatsRollup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_DailyCompetitiveStatsRollup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_DailyCompetitiveStatsRollup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_DailyCompetitiveStatsRollup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_DailyCompetitiveStatsRollup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_DailyCompetitiveStatsRollup)
  return false;
#undef DO_
}

void CMsgGC_DailyCompetitiveStatsRollup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_DailyCompetitiveStatsRollup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_DailyCompetitiveStatsRollup)
}

::google::protobuf::uint8* CMsgGC_DailyCompetitiveStatsRollup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_DailyCompetitiveStatsRollup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_DailyCompetitiveStatsRollup)
  return target;
}

size_t CMsgGC_DailyCompetitiveStatsRollup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_DailyCompetitiveStatsRollup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_DailyCompetitiveStatsRollup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_DailyCompetitiveStatsRollup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_DailyCompetitiveStatsRollup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_DailyCompetitiveStatsRollup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_DailyCompetitiveStatsRollup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_DailyCompetitiveStatsRollup)
    MergeFrom(*source);
  }
}

void CMsgGC_DailyCompetitiveStatsRollup::MergeFrom(const CMsgGC_DailyCompetitiveStatsRollup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_DailyCompetitiveStatsRollup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGC_DailyCompetitiveStatsRollup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_DailyCompetitiveStatsRollup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_DailyCompetitiveStatsRollup::CopyFrom(const CMsgGC_DailyCompetitiveStatsRollup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_DailyCompetitiveStatsRollup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_DailyCompetitiveStatsRollup::IsInitialized() const {
  return true;
}

void CMsgGC_DailyCompetitiveStatsRollup::Swap(CMsgGC_DailyCompetitiveStatsRollup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_DailyCompetitiveStatsRollup::InternalSwap(CMsgGC_DailyCompetitiveStatsRollup* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_DailyCompetitiveStatsRollup::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kRankFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kRecordsFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kAvgScoreFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kStdevScoreFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kAvgKillsFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kStdevKillsFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kAvgDamageFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kStdevDamageFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kAvgHealingFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kStdevHealingFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kAvgSupportFieldNumber;
const int CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::kStdevSupportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
}
CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry(const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&stdev_support_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(stdev_support_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stdev_support_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(stdev_support_));
}

CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::~CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry() {
  // @@protoc_insertion_point(destructor:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  SharedDtor();
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::SharedDtor() {
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry();
  return *internal_default_instance();
}

CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::New(::google::protobuf::Arena* arena) const {
  CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* n = new CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stdev_damage_) -
        reinterpret_cast<char*>(&rank_)) + sizeof(stdev_damage_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&avg_healing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stdev_support_) -
        reinterpret_cast<char*>(&avg_healing_)) + sizeof(stdev_support_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 records = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_records();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &records_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_avg_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stdev_score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_stdev_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stdev_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_kills = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_avg_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stdev_kills = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_stdev_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stdev_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_damage = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_avg_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stdev_damage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_stdev_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stdev_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_healing = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_avg_healing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stdev_healing = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_stdev_healing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stdev_healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_support = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_avg_support();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stdev_support = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_stdev_support();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stdev_support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  return false;
#undef DO_
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rank = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional uint32 records = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->records(), output);
  }

  // optional uint32 avg_score = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->avg_score(), output);
  }

  // optional uint32 stdev_score = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stdev_score(), output);
  }

  // optional uint32 avg_kills = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->avg_kills(), output);
  }

  // optional uint32 stdev_kills = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stdev_kills(), output);
  }

  // optional uint32 avg_damage = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->avg_damage(), output);
  }

  // optional uint32 stdev_damage = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->stdev_damage(), output);
  }

  // optional uint32 avg_healing = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->avg_healing(), output);
  }

  // optional uint32 stdev_healing = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->stdev_healing(), output);
  }

  // optional uint32 avg_support = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->avg_support(), output);
  }

  // optional uint32 stdev_support = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->stdev_support(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
}

::google::protobuf::uint8* CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional uint32 records = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->records(), target);
  }

  // optional uint32 avg_score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->avg_score(), target);
  }

  // optional uint32 stdev_score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stdev_score(), target);
  }

  // optional uint32 avg_kills = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->avg_kills(), target);
  }

  // optional uint32 stdev_kills = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stdev_kills(), target);
  }

  // optional uint32 avg_damage = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->avg_damage(), target);
  }

  // optional uint32 stdev_damage = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->stdev_damage(), target);
  }

  // optional uint32 avg_healing = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->avg_healing(), target);
  }

  // optional uint32 stdev_healing = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->stdev_healing(), target);
  }

  // optional uint32 avg_support = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->avg_support(), target);
  }

  // optional uint32 stdev_support = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->stdev_support(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  return target;
}

size_t CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 records = 2;
    if (has_records()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->records());
    }

    // optional uint32 avg_score = 3;
    if (has_avg_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_score());
    }

    // optional uint32 stdev_score = 4;
    if (has_stdev_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stdev_score());
    }

    // optional uint32 avg_kills = 5;
    if (has_avg_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_kills());
    }

    // optional uint32 stdev_kills = 6;
    if (has_stdev_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stdev_kills());
    }

    // optional uint32 avg_damage = 7;
    if (has_avg_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_damage());
    }

    // optional uint32 stdev_damage = 8;
    if (has_stdev_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stdev_damage());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 avg_healing = 9;
    if (has_avg_healing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_healing());
    }

    // optional uint32 stdev_healing = 10;
    if (has_stdev_healing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stdev_healing());
    }

    // optional uint32 avg_support = 11;
    if (has_avg_support()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_support());
    }

    // optional uint32 stdev_support = 12;
    if (has_stdev_support()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stdev_support());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
    MergeFrom(*source);
  }
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::MergeFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000002u) {
      records_ = from.records_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_score_ = from.avg_score_;
    }
    if (cached_has_bits & 0x00000008u) {
      stdev_score_ = from.stdev_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_kills_ = from.avg_kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      stdev_kills_ = from.stdev_kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      avg_damage_ = from.avg_damage_;
    }
    if (cached_has_bits & 0x00000080u) {
      stdev_damage_ = from.stdev_damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      avg_healing_ = from.avg_healing_;
    }
    if (cached_has_bits & 0x00000200u) {
      stdev_healing_ = from.stdev_healing_;
    }
    if (cached_has_bits & 0x00000400u) {
      avg_support_ = from.avg_support_;
    }
    if (cached_has_bits & 0x00000800u) {
      stdev_support_ = from.stdev_support_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::CopyFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::IsInitialized() const {
  return true;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::Swap(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::InternalSwap(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* other) {
  using std::swap;
  swap(rank_, other->rank_);
  swap(records_, other->records_);
  swap(avg_score_, other->avg_score_);
  swap(stdev_score_, other->stdev_score_);
  swap(avg_kills_, other->avg_kills_);
  swap(stdev_kills_, other->stdev_kills_);
  swap(avg_damage_, other->avg_damage_);
  swap(stdev_damage_, other->stdev_damage_);
  swap(avg_healing_, other->avg_healing_);
  swap(stdev_healing_, other->stdev_healing_);
  swap(avg_support_, other->avg_support_);
  swap(stdev_support_, other->stdev_support_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_DailyCompetitiveStatsRollup_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_DailyCompetitiveStatsRollup_Response::kRankdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_DailyCompetitiveStatsRollup_Response::CMsgGC_DailyCompetitiveStatsRollup_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_DailyCompetitiveStatsRollup_Response();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_DailyCompetitiveStatsRollup_Response)
}
CMsgGC_DailyCompetitiveStatsRollup_Response::CMsgGC_DailyCompetitiveStatsRollup_Response(const CMsgGC_DailyCompetitiveStatsRollup_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rankdata_(from.rankdata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGC_DailyCompetitiveStatsRollup_Response)
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGC_DailyCompetitiveStatsRollup_Response::~CMsgGC_DailyCompetitiveStatsRollup_Response() {
  // @@protoc_insertion_point(destructor:CMsgGC_DailyCompetitiveStatsRollup_Response)
  SharedDtor();
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::SharedDtor() {
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_DailyCompetitiveStatsRollup_Response::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_DailyCompetitiveStatsRollup_Response& CMsgGC_DailyCompetitiveStatsRollup_Response::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_DailyCompetitiveStatsRollup_Response();
  return *internal_default_instance();
}

CMsgGC_DailyCompetitiveStatsRollup_Response* CMsgGC_DailyCompetitiveStatsRollup_Response::New(::google::protobuf::Arena* arena) const {
  CMsgGC_DailyCompetitiveStatsRollup_Response* n = new CMsgGC_DailyCompetitiveStatsRollup_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rankdata_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_DailyCompetitiveStatsRollup_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry rankdata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_rankdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_DailyCompetitiveStatsRollup_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_DailyCompetitiveStatsRollup_Response)
  return false;
#undef DO_
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry rankdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rankdata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankdata(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_DailyCompetitiveStatsRollup_Response)
}

::google::protobuf::uint8* CMsgGC_DailyCompetitiveStatsRollup_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry rankdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rankdata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rankdata(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_DailyCompetitiveStatsRollup_Response)
  return target;
}

size_t CMsgGC_DailyCompetitiveStatsRollup_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry rankdata = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rankdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rankdata(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_DailyCompetitiveStatsRollup_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_DailyCompetitiveStatsRollup_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_DailyCompetitiveStatsRollup_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_DailyCompetitiveStatsRollup_Response)
    MergeFrom(*source);
  }
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::MergeFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rankdata_.MergeFrom(from.rankdata_);
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::CopyFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_DailyCompetitiveStatsRollup_Response::IsInitialized() const {
  return true;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::Swap(CMsgGC_DailyCompetitiveStatsRollup_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_DailyCompetitiveStatsRollup_Response::InternalSwap(CMsgGC_DailyCompetitiveStatsRollup_Response* other) {
  using std::swap;
  rankdata_.InternalSwap(&other->rankdata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_DailyCompetitiveStatsRollup_Response::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_ReportPlayer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_ReportPlayer::kAccountIdTargetFieldNumber;
const int CMsgGC_ReportPlayer::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_ReportPlayer::CMsgGC_ReportPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_ReportPlayer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_ReportPlayer)
}
CMsgGC_ReportPlayer::CMsgGC_ReportPlayer(const CMsgGC_ReportPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_target_, &from.account_id_target_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&account_id_target_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_ReportPlayer)
}

void CMsgGC_ReportPlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&account_id_target_)) + sizeof(reason_));
}

CMsgGC_ReportPlayer::~CMsgGC_ReportPlayer() {
  // @@protoc_insertion_point(destructor:CMsgGC_ReportPlayer)
  SharedDtor();
}

void CMsgGC_ReportPlayer::SharedDtor() {
}

void CMsgGC_ReportPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_ReportPlayer::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_ReportPlayer& CMsgGC_ReportPlayer::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_ReportPlayer();
  return *internal_default_instance();
}

CMsgGC_ReportPlayer* CMsgGC_ReportPlayer::New(::google::protobuf::Arena* arena) const {
  CMsgGC_ReportPlayer* n = new CMsgGC_ReportPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_ReportPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_ReportPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&account_id_target_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&account_id_target_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_ReportPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_ReportPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_target = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGC_ReportPlayer.EReason reason = 2 [default = kReason_INVALID];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGC_ReportPlayer_EReason_IsValid(value)) {
            set_reason(static_cast< ::CMsgGC_ReportPlayer_EReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_ReportPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_ReportPlayer)
  return false;
#undef DO_
}

void CMsgGC_ReportPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_ReportPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_target = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_target(), output);
  }

  // optional .CMsgGC_ReportPlayer.EReason reason = 2 [default = kReason_INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_ReportPlayer)
}

::google::protobuf::uint8* CMsgGC_ReportPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_ReportPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_target(), target);
  }

  // optional .CMsgGC_ReportPlayer.EReason reason = 2 [default = kReason_INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_ReportPlayer)
  return target;
}

size_t CMsgGC_ReportPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_ReportPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id_target = 1;
    if (has_account_id_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_target());
    }

    // optional .CMsgGC_ReportPlayer.EReason reason = 2 [default = kReason_INVALID];
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_ReportPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_ReportPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_ReportPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_ReportPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_ReportPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_ReportPlayer)
    MergeFrom(*source);
  }
}

void CMsgGC_ReportPlayer::MergeFrom(const CMsgGC_ReportPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_ReportPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_target_ = from.account_id_target_;
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_ReportPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_ReportPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_ReportPlayer::CopyFrom(const CMsgGC_ReportPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_ReportPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_ReportPlayer::IsInitialized() const {
  return true;
}

void CMsgGC_ReportPlayer::Swap(CMsgGC_ReportPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_ReportPlayer::InternalSwap(CMsgGC_ReportPlayer* other) {
  using std::swap;
  swap(account_id_target_, other->account_id_target_);
  swap(reason_, other->reason_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_ReportPlayer::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSOTFMatchResultPlayerStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOTFMatchResultPlayerStats::kMatchIdFieldNumber;
const int CSOTFMatchResultPlayerStats::kAccountIdFieldNumber;
const int CSOTFMatchResultPlayerStats::kMatchGroupFieldNumber;
const int CSOTFMatchResultPlayerStats::kEndtimeFieldNumber;
const int CSOTFMatchResultPlayerStats::kSeasonIdFieldNumber;
const int CSOTFMatchResultPlayerStats::kStatusFieldNumber;
const int CSOTFMatchResultPlayerStats::kPartyIdFieldNumber;
const int CSOTFMatchResultPlayerStats::kTeamFieldNumber;
const int CSOTFMatchResultPlayerStats::kScoreFieldNumber;
const int CSOTFMatchResultPlayerStats::kPingFieldNumber;
const int CSOTFMatchResultPlayerStats::kFlagsFieldNumber;
const int CSOTFMatchResultPlayerStats::kDisplayRatingFieldNumber;
const int CSOTFMatchResultPlayerStats::kDisplayRatingChangeFieldNumber;
const int CSOTFMatchResultPlayerStats::kRankFieldNumber;
const int CSOTFMatchResultPlayerStats::kClassesPlayedFieldNumber;
const int CSOTFMatchResultPlayerStats::kKillsFieldNumber;
const int CSOTFMatchResultPlayerStats::kDeathsFieldNumber;
const int CSOTFMatchResultPlayerStats::kDamageFieldNumber;
const int CSOTFMatchResultPlayerStats::kHealingFieldNumber;
const int CSOTFMatchResultPlayerStats::kSupportFieldNumber;
const int CSOTFMatchResultPlayerStats::kScoreMedalFieldNumber;
const int CSOTFMatchResultPlayerStats::kKillsMedalFieldNumber;
const int CSOTFMatchResultPlayerStats::kDamageMedalFieldNumber;
const int CSOTFMatchResultPlayerStats::kHealingMedalFieldNumber;
const int CSOTFMatchResultPlayerStats::kSupportMedalFieldNumber;
const int CSOTFMatchResultPlayerStats::kMapIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOTFMatchResultPlayerStats::CSOTFMatchResultPlayerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFMatchResultPlayerStats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSOTFMatchResultPlayerStats)
}
CSOTFMatchResultPlayerStats::CSOTFMatchResultPlayerStats(const CSOTFMatchResultPlayerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_index_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(map_index_));
  // @@protoc_insertion_point(copy_constructor:CSOTFMatchResultPlayerStats)
}

void CSOTFMatchResultPlayerStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_index_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(map_index_));
}

CSOTFMatchResultPlayerStats::~CSOTFMatchResultPlayerStats() {
  // @@protoc_insertion_point(destructor:CSOTFMatchResultPlayerStats)
  SharedDtor();
}

void CSOTFMatchResultPlayerStats::SharedDtor() {
}

void CSOTFMatchResultPlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFMatchResultPlayerStats::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOTFMatchResultPlayerStats& CSOTFMatchResultPlayerStats::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCSOTFMatchResultPlayerStats();
  return *internal_default_instance();
}

CSOTFMatchResultPlayerStats* CSOTFMatchResultPlayerStats::New(::google::protobuf::Arena* arena) const {
  CSOTFMatchResultPlayerStats* n = new CSOTFMatchResultPlayerStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOTFMatchResultPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFMatchResultPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(team_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kills_) -
        reinterpret_cast<char*>(&score_)) + sizeof(kills_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&deaths_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&healing_medal_) -
        reinterpret_cast<char*>(&deaths_)) + sizeof(healing_medal_));
  }
  if (cached_has_bits & 50331648u) {
    ::memset(&support_medal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&map_index_) -
        reinterpret_cast<char*>(&support_medal_)) + sizeof(map_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOTFMatchResultPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSOTFMatchResultPlayerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1 [(.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 2 [(.key_field) = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 match_group = 3 [(.key_field) = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_match_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 endtime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_endtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_season_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 party_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_ping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 display_rating = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_display_rating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &display_rating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 display_rating_change = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_display_rating_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_rating_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 classes_played = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_classes_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classes_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 healing = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_healing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_support();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score_medal = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_score_medal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_medal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills_medal = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_kills_medal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_medal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_medal = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_damage_medal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_medal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 healing_medal = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_healing_medal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healing_medal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support_medal = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_support_medal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_medal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 map_index = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_map_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSOTFMatchResultPlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSOTFMatchResultPlayerStats)
  return false;
#undef DO_
}

void CSOTFMatchResultPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSOTFMatchResultPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 account_id = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional int32 match_group = 3 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->match_group(), output);
  }

  // optional uint32 endtime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endtime(), output);
  }

  // optional uint32 season_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->season_id(), output);
  }

  // optional uint32 status = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  // optional uint32 party_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->party_id(), output);
  }

  // optional uint32 team = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->team(), output);
  }

  // optional uint32 score = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->score(), output);
  }

  // optional uint32 ping = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ping(), output);
  }

  // optional uint32 flags = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->flags(), output);
  }

  // optional uint32 display_rating = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->display_rating(), output);
  }

  // optional int32 display_rating_change = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->display_rating_change(), output);
  }

  // optional uint32 rank = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->rank(), output);
  }

  // optional uint32 classes_played = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->classes_played(), output);
  }

  // optional uint32 kills = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->kills(), output);
  }

  // optional uint32 deaths = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->deaths(), output);
  }

  // optional uint32 damage = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->damage(), output);
  }

  // optional uint32 healing = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->healing(), output);
  }

  // optional uint32 support = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->support(), output);
  }

  // optional uint32 score_medal = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->score_medal(), output);
  }

  // optional uint32 kills_medal = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->kills_medal(), output);
  }

  // optional uint32 damage_medal = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->damage_medal(), output);
  }

  // optional uint32 healing_medal = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->healing_medal(), output);
  }

  // optional uint32 support_medal = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->support_medal(), output);
  }

  // optional uint32 map_index = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->map_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSOTFMatchResultPlayerStats)
}

::google::protobuf::uint8* CSOTFMatchResultPlayerStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFMatchResultPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 account_id = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional int32 match_group = 3 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->match_group(), target);
  }

  // optional uint32 endtime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->endtime(), target);
  }

  // optional uint32 season_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->season_id(), target);
  }

  // optional uint32 status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  // optional uint32 party_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->party_id(), target);
  }

  // optional uint32 team = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->team(), target);
  }

  // optional uint32 score = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->score(), target);
  }

  // optional uint32 ping = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ping(), target);
  }

  // optional uint32 flags = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->flags(), target);
  }

  // optional uint32 display_rating = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->display_rating(), target);
  }

  // optional int32 display_rating_change = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->display_rating_change(), target);
  }

  // optional uint32 rank = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->rank(), target);
  }

  // optional uint32 classes_played = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->classes_played(), target);
  }

  // optional uint32 kills = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->kills(), target);
  }

  // optional uint32 deaths = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->deaths(), target);
  }

  // optional uint32 damage = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->damage(), target);
  }

  // optional uint32 healing = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->healing(), target);
  }

  // optional uint32 support = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->support(), target);
  }

  // optional uint32 score_medal = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->score_medal(), target);
  }

  // optional uint32 kills_medal = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->kills_medal(), target);
  }

  // optional uint32 damage_medal = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->damage_medal(), target);
  }

  // optional uint32 healing_medal = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->healing_medal(), target);
  }

  // optional uint32 support_medal = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->support_medal(), target);
  }

  // optional uint32 map_index = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->map_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFMatchResultPlayerStats)
  return target;
}

size_t CSOTFMatchResultPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFMatchResultPlayerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 match_id = 1 [(.key_field) = true];
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 account_id = 2 [(.key_field) = true];
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional int32 match_group = 3 [(.key_field) = true];
    if (has_match_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_group());
    }

    // optional uint32 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 season_id = 5;
    if (has_season_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_id());
    }

    // optional uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 party_id = 7;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_id());
    }

    // optional uint32 team = 8;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 score = 9;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 ping = 10;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping());
    }

    // optional uint32 flags = 11;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 display_rating = 12;
    if (has_display_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->display_rating());
    }

    // optional int32 display_rating_change = 13;
    if (has_display_rating_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_rating_change());
    }

    // optional uint32 rank = 14;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 classes_played = 15;
    if (has_classes_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->classes_played());
    }

    // optional uint32 kills = 16;
    if (has_kills()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 deaths = 17;
    if (has_deaths()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 damage = 18;
    if (has_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 healing = 19;
    if (has_healing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing());
    }

    // optional uint32 support = 20;
    if (has_support()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support());
    }

    // optional uint32 score_medal = 21;
    if (has_score_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_medal());
    }

    // optional uint32 kills_medal = 22;
    if (has_kills_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills_medal());
    }

    // optional uint32 damage_medal = 23;
    if (has_damage_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_medal());
    }

    // optional uint32 healing_medal = 24;
    if (has_healing_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healing_medal());
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional uint32 support_medal = 25;
    if (has_support_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_medal());
    }

    // optional uint32 map_index = 26;
    if (has_map_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFMatchResultPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFMatchResultPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFMatchResultPlayerStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOTFMatchResultPlayerStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFMatchResultPlayerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFMatchResultPlayerStats)
    MergeFrom(*source);
  }
}

void CSOTFMatchResultPlayerStats::MergeFrom(const CSOTFMatchResultPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFMatchResultPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_group_ = from.match_group_;
    }
    if (cached_has_bits & 0x00000008u) {
      endtime_ = from.endtime_;
    }
    if (cached_has_bits & 0x00000010u) {
      season_id_ = from.season_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000040u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000200u) {
      ping_ = from.ping_;
    }
    if (cached_has_bits & 0x00000400u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000800u) {
      display_rating_ = from.display_rating_;
    }
    if (cached_has_bits & 0x00001000u) {
      display_rating_change_ = from.display_rating_change_;
    }
    if (cached_has_bits & 0x00002000u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00004000u) {
      classes_played_ = from.classes_played_;
    }
    if (cached_has_bits & 0x00008000u) {
      kills_ = from.kills_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00020000u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x00040000u) {
      healing_ = from.healing_;
    }
    if (cached_has_bits & 0x00080000u) {
      support_ = from.support_;
    }
    if (cached_has_bits & 0x00100000u) {
      score_medal_ = from.score_medal_;
    }
    if (cached_has_bits & 0x00200000u) {
      kills_medal_ = from.kills_medal_;
    }
    if (cached_has_bits & 0x00400000u) {
      damage_medal_ = from.damage_medal_;
    }
    if (cached_has_bits & 0x00800000u) {
      healing_medal_ = from.healing_medal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      support_medal_ = from.support_medal_;
    }
    if (cached_has_bits & 0x02000000u) {
      map_index_ = from.map_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFMatchResultPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFMatchResultPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFMatchResultPlayerStats::CopyFrom(const CSOTFMatchResultPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFMatchResultPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFMatchResultPlayerStats::IsInitialized() const {
  return true;
}

void CSOTFMatchResultPlayerStats::Swap(CSOTFMatchResultPlayerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOTFMatchResultPlayerStats::InternalSwap(CSOTFMatchResultPlayerStats* other) {
  using std::swap;
  swap(match_id_, other->match_id_);
  swap(account_id_, other->account_id_);
  swap(match_group_, other->match_group_);
  swap(endtime_, other->endtime_);
  swap(season_id_, other->season_id_);
  swap(status_, other->status_);
  swap(party_id_, other->party_id_);
  swap(team_, other->team_);
  swap(score_, other->score_);
  swap(ping_, other->ping_);
  swap(flags_, other->flags_);
  swap(display_rating_, other->display_rating_);
  swap(display_rating_change_, other->display_rating_change_);
  swap(rank_, other->rank_);
  swap(classes_played_, other->classes_played_);
  swap(kills_, other->kills_);
  swap(deaths_, other->deaths_);
  swap(damage_, other->damage_);
  swap(healing_, other->healing_);
  swap(support_, other->support_);
  swap(score_medal_, other->score_medal_);
  swap(kills_medal_, other->kills_medal_);
  swap(damage_medal_, other->damage_medal_);
  swap(healing_medal_, other->healing_medal_);
  swap(support_medal_, other->support_medal_);
  swap(map_index_, other->map_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOTFMatchResultPlayerStats::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCRequestMatchMakerStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCRequestMatchMakerStats::CMsgGCRequestMatchMakerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCRequestMatchMakerStats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCRequestMatchMakerStats)
}
CMsgGCRequestMatchMakerStats::CMsgGCRequestMatchMakerStats(const CMsgGCRequestMatchMakerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestMatchMakerStats)
}

void CMsgGCRequestMatchMakerStats::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCRequestMatchMakerStats::~CMsgGCRequestMatchMakerStats() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestMatchMakerStats)
  SharedDtor();
}

void CMsgGCRequestMatchMakerStats::SharedDtor() {
}

void CMsgGCRequestMatchMakerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestMatchMakerStats::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCRequestMatchMakerStats& CMsgGCRequestMatchMakerStats::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCRequestMatchMakerStats();
  return *internal_default_instance();
}

CMsgGCRequestMatchMakerStats* CMsgGCRequestMatchMakerStats::New(::google::protobuf::Arena* arena) const {
  CMsgGCRequestMatchMakerStats* n = new CMsgGCRequestMatchMakerStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCRequestMatchMakerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRequestMatchMakerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCRequestMatchMakerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCRequestMatchMakerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCRequestMatchMakerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCRequestMatchMakerStats)
  return false;
#undef DO_
}

void CMsgGCRequestMatchMakerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCRequestMatchMakerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCRequestMatchMakerStats)
}

::google::protobuf::uint8* CMsgGCRequestMatchMakerStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestMatchMakerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestMatchMakerStats)
  return target;
}

size_t CMsgGCRequestMatchMakerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRequestMatchMakerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestMatchMakerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCRequestMatchMakerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRequestMatchMakerStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCRequestMatchMakerStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCRequestMatchMakerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCRequestMatchMakerStats)
    MergeFrom(*source);
  }
}

void CMsgGCRequestMatchMakerStats::MergeFrom(const CMsgGCRequestMatchMakerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRequestMatchMakerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCRequestMatchMakerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCRequestMatchMakerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestMatchMakerStats::CopyFrom(const CMsgGCRequestMatchMakerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRequestMatchMakerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestMatchMakerStats::IsInitialized() const {
  return true;
}

void CMsgGCRequestMatchMakerStats::Swap(CMsgGCRequestMatchMakerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCRequestMatchMakerStats::InternalSwap(CMsgGCRequestMatchMakerStats* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCRequestMatchMakerStats::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCDataCenterPopulation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCDataCenterPopulation::kNameFieldNumber;
const int CMsgGCDataCenterPopulation::kHealthRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCDataCenterPopulation::CMsgGCDataCenterPopulation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCDataCenterPopulation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCDataCenterPopulation)
}
CMsgGCDataCenterPopulation::CMsgGCDataCenterPopulation(const CMsgGCDataCenterPopulation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  health_ratio_ = from.health_ratio_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCDataCenterPopulation)
}

void CMsgGCDataCenterPopulation::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  health_ratio_ = 0;
}

CMsgGCDataCenterPopulation::~CMsgGCDataCenterPopulation() {
  // @@protoc_insertion_point(destructor:CMsgGCDataCenterPopulation)
  SharedDtor();
}

void CMsgGCDataCenterPopulation::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCDataCenterPopulation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCDataCenterPopulation::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCDataCenterPopulation& CMsgGCDataCenterPopulation::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCDataCenterPopulation();
  return *internal_default_instance();
}

CMsgGCDataCenterPopulation* CMsgGCDataCenterPopulation::New(::google::protobuf::Arena* arena) const {
  CMsgGCDataCenterPopulation* n = new CMsgGCDataCenterPopulation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCDataCenterPopulation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCDataCenterPopulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  health_ratio_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCDataCenterPopulation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCDataCenterPopulation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCDataCenterPopulation.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float health_ratio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_health_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCDataCenterPopulation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCDataCenterPopulation)
  return false;
#undef DO_
}

void CMsgGCDataCenterPopulation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCDataCenterPopulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCDataCenterPopulation.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float health_ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->health_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCDataCenterPopulation)
}

::google::protobuf::uint8* CMsgGCDataCenterPopulation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCDataCenterPopulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCDataCenterPopulation.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float health_ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->health_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCDataCenterPopulation)
  return target;
}

size_t CMsgGCDataCenterPopulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCDataCenterPopulation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float health_ratio = 2;
    if (has_health_ratio()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCDataCenterPopulation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCDataCenterPopulation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCDataCenterPopulation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCDataCenterPopulation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCDataCenterPopulation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCDataCenterPopulation)
    MergeFrom(*source);
  }
}

void CMsgGCDataCenterPopulation::MergeFrom(const CMsgGCDataCenterPopulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCDataCenterPopulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      health_ratio_ = from.health_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCDataCenterPopulation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCDataCenterPopulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCDataCenterPopulation::CopyFrom(const CMsgGCDataCenterPopulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCDataCenterPopulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCDataCenterPopulation::IsInitialized() const {
  return true;
}

void CMsgGCDataCenterPopulation::Swap(CMsgGCDataCenterPopulation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCDataCenterPopulation::InternalSwap(CMsgGCDataCenterPopulation* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(health_ratio_, other->health_ratio_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCDataCenterPopulation::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMatchGroupDataCenterPopulation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMatchGroupDataCenterPopulation::kDataCenterPopulationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMatchGroupDataCenterPopulation::CMsgGCMatchGroupDataCenterPopulation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCMatchGroupDataCenterPopulation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCMatchGroupDataCenterPopulation)
}
CMsgGCMatchGroupDataCenterPopulation::CMsgGCMatchGroupDataCenterPopulation(const CMsgGCMatchGroupDataCenterPopulation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_center_population_(from.data_center_population_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCMatchGroupDataCenterPopulation)
}

void CMsgGCMatchGroupDataCenterPopulation::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCMatchGroupDataCenterPopulation::~CMsgGCMatchGroupDataCenterPopulation() {
  // @@protoc_insertion_point(destructor:CMsgGCMatchGroupDataCenterPopulation)
  SharedDtor();
}

void CMsgGCMatchGroupDataCenterPopulation::SharedDtor() {
}

void CMsgGCMatchGroupDataCenterPopulation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMatchGroupDataCenterPopulation::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMatchGroupDataCenterPopulation& CMsgGCMatchGroupDataCenterPopulation::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCMatchGroupDataCenterPopulation();
  return *internal_default_instance();
}

CMsgGCMatchGroupDataCenterPopulation* CMsgGCMatchGroupDataCenterPopulation::New(::google::protobuf::Arena* arena) const {
  CMsgGCMatchGroupDataCenterPopulation* n = new CMsgGCMatchGroupDataCenterPopulation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMatchGroupDataCenterPopulation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMatchGroupDataCenterPopulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_center_population_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMatchGroupDataCenterPopulation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCMatchGroupDataCenterPopulation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCDataCenterPopulation data_center_population = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data_center_population()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCMatchGroupDataCenterPopulation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCMatchGroupDataCenterPopulation)
  return false;
#undef DO_
}

void CMsgGCMatchGroupDataCenterPopulation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCMatchGroupDataCenterPopulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCDataCenterPopulation data_center_population = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_center_population_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_center_population(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCMatchGroupDataCenterPopulation)
}

::google::protobuf::uint8* CMsgGCMatchGroupDataCenterPopulation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMatchGroupDataCenterPopulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCDataCenterPopulation data_center_population = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_center_population_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->data_center_population(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMatchGroupDataCenterPopulation)
  return target;
}

size_t CMsgGCMatchGroupDataCenterPopulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMatchGroupDataCenterPopulation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGCDataCenterPopulation data_center_population = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_center_population_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data_center_population(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMatchGroupDataCenterPopulation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCMatchGroupDataCenterPopulation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMatchGroupDataCenterPopulation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMatchGroupDataCenterPopulation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCMatchGroupDataCenterPopulation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCMatchGroupDataCenterPopulation)
    MergeFrom(*source);
  }
}

void CMsgGCMatchGroupDataCenterPopulation::MergeFrom(const CMsgGCMatchGroupDataCenterPopulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMatchGroupDataCenterPopulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_center_population_.MergeFrom(from.data_center_population_);
}

void CMsgGCMatchGroupDataCenterPopulation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCMatchGroupDataCenterPopulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMatchGroupDataCenterPopulation::CopyFrom(const CMsgGCMatchGroupDataCenterPopulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMatchGroupDataCenterPopulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMatchGroupDataCenterPopulation::IsInitialized() const {
  return true;
}

void CMsgGCMatchGroupDataCenterPopulation::Swap(CMsgGCMatchGroupDataCenterPopulation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMatchGroupDataCenterPopulation::InternalSwap(CMsgGCMatchGroupDataCenterPopulation* other) {
  using std::swap;
  data_center_population_.InternalSwap(&other->data_center_population_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMatchGroupDataCenterPopulation::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMatchMakerStatsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMatchMakerStatsResponse::kMapCountFieldNumber;
const int CMsgGCMatchMakerStatsResponse::kMatchgroupDataCenterPopulationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMatchMakerStatsResponse::CMsgGCMatchMakerStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCMatchMakerStatsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCMatchMakerStatsResponse)
}
CMsgGCMatchMakerStatsResponse::CMsgGCMatchMakerStatsResponse(const CMsgGCMatchMakerStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      map_count_(from.map_count_),
      matchgroup_data_center_population_(from.matchgroup_data_center_population_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCMatchMakerStatsResponse)
}

void CMsgGCMatchMakerStatsResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCMatchMakerStatsResponse::~CMsgGCMatchMakerStatsResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCMatchMakerStatsResponse)
  SharedDtor();
}

void CMsgGCMatchMakerStatsResponse::SharedDtor() {
}

void CMsgGCMatchMakerStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMatchMakerStatsResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMatchMakerStatsResponse& CMsgGCMatchMakerStatsResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCMatchMakerStatsResponse();
  return *internal_default_instance();
}

CMsgGCMatchMakerStatsResponse* CMsgGCMatchMakerStatsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCMatchMakerStatsResponse* n = new CMsgGCMatchMakerStatsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMatchMakerStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMatchMakerStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_count_.Clear();
  matchgroup_data_center_population_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMatchMakerStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCMatchMakerStatsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 map_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_map_count())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_map_count())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgGCMatchGroupDataCenterPopulation matchgroup_data_center_population = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_matchgroup_data_center_population()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCMatchMakerStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCMatchMakerStatsResponse)
  return false;
#undef DO_
}

void CMsgGCMatchMakerStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCMatchMakerStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 map_count = 1;
  for (int i = 0, n = this->map_count_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->map_count(i), output);
  }

  // repeated .CMsgGCMatchGroupDataCenterPopulation matchgroup_data_center_population = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matchgroup_data_center_population_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matchgroup_data_center_population(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCMatchMakerStatsResponse)
}

::google::protobuf::uint8* CMsgGCMatchMakerStatsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMatchMakerStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 map_count = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->map_count_, target);

  // repeated .CMsgGCMatchGroupDataCenterPopulation matchgroup_data_center_population = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matchgroup_data_center_population_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->matchgroup_data_center_population(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMatchMakerStatsResponse)
  return target;
}

size_t CMsgGCMatchMakerStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMatchMakerStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 map_count = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->map_count_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->map_count_size());
    total_size += data_size;
  }

  // repeated .CMsgGCMatchGroupDataCenterPopulation matchgroup_data_center_population = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->matchgroup_data_center_population_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->matchgroup_data_center_population(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMatchMakerStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCMatchMakerStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMatchMakerStatsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMatchMakerStatsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCMatchMakerStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCMatchMakerStatsResponse)
    MergeFrom(*source);
  }
}

void CMsgGCMatchMakerStatsResponse::MergeFrom(const CMsgGCMatchMakerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMatchMakerStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_count_.MergeFrom(from.map_count_);
  matchgroup_data_center_population_.MergeFrom(from.matchgroup_data_center_population_);
}

void CMsgGCMatchMakerStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCMatchMakerStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMatchMakerStatsResponse::CopyFrom(const CMsgGCMatchMakerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMatchMakerStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMatchMakerStatsResponse::IsInitialized() const {
  return true;
}

void CMsgGCMatchMakerStatsResponse::Swap(CMsgGCMatchMakerStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMatchMakerStatsResponse::InternalSwap(CMsgGCMatchMakerStatsResponse* other) {
  using std::swap;
  map_count_.InternalSwap(&other->map_count_);
  matchgroup_data_center_population_.InternalSwap(&other->matchgroup_data_center_population_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMatchMakerStatsResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMatchHistoryLoad::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMatchHistoryLoad::CMsgGCMatchHistoryLoad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCMatchHistoryLoad();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCMatchHistoryLoad)
}
CMsgGCMatchHistoryLoad::CMsgGCMatchHistoryLoad(const CMsgGCMatchHistoryLoad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCMatchHistoryLoad)
}

void CMsgGCMatchHistoryLoad::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCMatchHistoryLoad::~CMsgGCMatchHistoryLoad() {
  // @@protoc_insertion_point(destructor:CMsgGCMatchHistoryLoad)
  SharedDtor();
}

void CMsgGCMatchHistoryLoad::SharedDtor() {
}

void CMsgGCMatchHistoryLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMatchHistoryLoad::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMatchHistoryLoad& CMsgGCMatchHistoryLoad::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCMatchHistoryLoad();
  return *internal_default_instance();
}

CMsgGCMatchHistoryLoad* CMsgGCMatchHistoryLoad::New(::google::protobuf::Arena* arena) const {
  CMsgGCMatchHistoryLoad* n = new CMsgGCMatchHistoryLoad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMatchHistoryLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMatchHistoryLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMatchHistoryLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCMatchHistoryLoad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCMatchHistoryLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCMatchHistoryLoad)
  return false;
#undef DO_
}

void CMsgGCMatchHistoryLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCMatchHistoryLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCMatchHistoryLoad)
}

::google::protobuf::uint8* CMsgGCMatchHistoryLoad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMatchHistoryLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMatchHistoryLoad)
  return target;
}

size_t CMsgGCMatchHistoryLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMatchHistoryLoad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMatchHistoryLoad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCMatchHistoryLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMatchHistoryLoad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMatchHistoryLoad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCMatchHistoryLoad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCMatchHistoryLoad)
    MergeFrom(*source);
  }
}

void CMsgGCMatchHistoryLoad::MergeFrom(const CMsgGCMatchHistoryLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMatchHistoryLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCMatchHistoryLoad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCMatchHistoryLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMatchHistoryLoad::CopyFrom(const CMsgGCMatchHistoryLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMatchHistoryLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMatchHistoryLoad::IsInitialized() const {
  return true;
}

void CMsgGCMatchHistoryLoad::Swap(CMsgGCMatchHistoryLoad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMatchHistoryLoad::InternalSwap(CMsgGCMatchHistoryLoad* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMatchHistoryLoad::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCDataCenterPing_Update_PingEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCDataCenterPing_Update_PingEntry::kNameFieldNumber;
const int CMsgGCDataCenterPing_Update_PingEntry::kPingFieldNumber;
const int CMsgGCDataCenterPing_Update_PingEntry::kPingStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCDataCenterPing_Update_PingEntry::CMsgGCDataCenterPing_Update_PingEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCDataCenterPing_Update_PingEntry();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCDataCenterPing_Update.PingEntry)
}
CMsgGCDataCenterPing_Update_PingEntry::CMsgGCDataCenterPing_Update_PingEntry(const CMsgGCDataCenterPing_Update_PingEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&ping_, &from.ping_,
    static_cast<size_t>(reinterpret_cast<char*>(&ping_status_) -
    reinterpret_cast<char*>(&ping_)) + sizeof(ping_status_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCDataCenterPing_Update.PingEntry)
}

void CMsgGCDataCenterPing_Update_PingEntry::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ping_ = 0u;
  ping_status_ = 1;
}

CMsgGCDataCenterPing_Update_PingEntry::~CMsgGCDataCenterPing_Update_PingEntry() {
  // @@protoc_insertion_point(destructor:CMsgGCDataCenterPing_Update.PingEntry)
  SharedDtor();
}

void CMsgGCDataCenterPing_Update_PingEntry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCDataCenterPing_Update_PingEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCDataCenterPing_Update_PingEntry::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCDataCenterPing_Update_PingEntry& CMsgGCDataCenterPing_Update_PingEntry::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCDataCenterPing_Update_PingEntry();
  return *internal_default_instance();
}

CMsgGCDataCenterPing_Update_PingEntry* CMsgGCDataCenterPing_Update_PingEntry::New(::google::protobuf::Arena* arena) const {
  CMsgGCDataCenterPing_Update_PingEntry* n = new CMsgGCDataCenterPing_Update_PingEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCDataCenterPing_Update_PingEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCDataCenterPing_Update.PingEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ping_ = 0u;
    ping_status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCDataCenterPing_Update_PingEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCDataCenterPing_Update.PingEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCDataCenterPing_Update.PingEntry.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgGCDataCenterPing_Update.Status ping_status = 3 [default = Normal];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGCDataCenterPing_Update_Status_IsValid(value)) {
            set_ping_status(static_cast< ::CMsgGCDataCenterPing_Update_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCDataCenterPing_Update.PingEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCDataCenterPing_Update.PingEntry)
  return false;
#undef DO_
}

void CMsgGCDataCenterPing_Update_PingEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCDataCenterPing_Update.PingEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCDataCenterPing_Update.PingEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 ping = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ping(), output);
  }

  // optional .CMsgGCDataCenterPing_Update.Status ping_status = 3 [default = Normal];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ping_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCDataCenterPing_Update.PingEntry)
}

::google::protobuf::uint8* CMsgGCDataCenterPing_Update_PingEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCDataCenterPing_Update.PingEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCDataCenterPing_Update.PingEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 ping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ping(), target);
  }

  // optional .CMsgGCDataCenterPing_Update.Status ping_status = 3 [default = Normal];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ping_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCDataCenterPing_Update.PingEntry)
  return target;
}

size_t CMsgGCDataCenterPing_Update_PingEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCDataCenterPing_Update.PingEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 ping = 2;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping());
    }

    // optional .CMsgGCDataCenterPing_Update.Status ping_status = 3 [default = Normal];
    if (has_ping_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ping_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCDataCenterPing_Update_PingEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCDataCenterPing_Update.PingEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCDataCenterPing_Update_PingEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCDataCenterPing_Update_PingEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCDataCenterPing_Update.PingEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCDataCenterPing_Update.PingEntry)
    MergeFrom(*source);
  }
}

void CMsgGCDataCenterPing_Update_PingEntry::MergeFrom(const CMsgGCDataCenterPing_Update_PingEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCDataCenterPing_Update.PingEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      ping_ = from.ping_;
    }
    if (cached_has_bits & 0x00000004u) {
      ping_status_ = from.ping_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCDataCenterPing_Update_PingEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCDataCenterPing_Update.PingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCDataCenterPing_Update_PingEntry::CopyFrom(const CMsgGCDataCenterPing_Update_PingEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCDataCenterPing_Update.PingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCDataCenterPing_Update_PingEntry::IsInitialized() const {
  return true;
}

void CMsgGCDataCenterPing_Update_PingEntry::Swap(CMsgGCDataCenterPing_Update_PingEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCDataCenterPing_Update_PingEntry::InternalSwap(CMsgGCDataCenterPing_Update_PingEntry* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(ping_, other->ping_);
  swap(ping_status_, other->ping_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCDataCenterPing_Update_PingEntry::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCDataCenterPing_Update::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCDataCenterPing_Update::kPingdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCDataCenterPing_Update::CMsgGCDataCenterPing_Update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCDataCenterPing_Update();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCDataCenterPing_Update)
}
CMsgGCDataCenterPing_Update::CMsgGCDataCenterPing_Update(const CMsgGCDataCenterPing_Update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pingdata_(from.pingdata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCDataCenterPing_Update)
}

void CMsgGCDataCenterPing_Update::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCDataCenterPing_Update::~CMsgGCDataCenterPing_Update() {
  // @@protoc_insertion_point(destructor:CMsgGCDataCenterPing_Update)
  SharedDtor();
}

void CMsgGCDataCenterPing_Update::SharedDtor() {
}

void CMsgGCDataCenterPing_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCDataCenterPing_Update::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCDataCenterPing_Update& CMsgGCDataCenterPing_Update::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCDataCenterPing_Update();
  return *internal_default_instance();
}

CMsgGCDataCenterPing_Update* CMsgGCDataCenterPing_Update::New(::google::protobuf::Arena* arena) const {
  CMsgGCDataCenterPing_Update* n = new CMsgGCDataCenterPing_Update;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCDataCenterPing_Update::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCDataCenterPing_Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pingdata_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCDataCenterPing_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCDataCenterPing_Update)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCDataCenterPing_Update.PingEntry pingdata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_pingdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCDataCenterPing_Update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCDataCenterPing_Update)
  return false;
#undef DO_
}

void CMsgGCDataCenterPing_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCDataCenterPing_Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCDataCenterPing_Update.PingEntry pingdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pingdata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pingdata(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCDataCenterPing_Update)
}

::google::protobuf::uint8* CMsgGCDataCenterPing_Update::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCDataCenterPing_Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCDataCenterPing_Update.PingEntry pingdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pingdata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pingdata(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCDataCenterPing_Update)
  return target;
}

size_t CMsgGCDataCenterPing_Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCDataCenterPing_Update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGCDataCenterPing_Update.PingEntry pingdata = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pingdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pingdata(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCDataCenterPing_Update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCDataCenterPing_Update)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCDataCenterPing_Update* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCDataCenterPing_Update>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCDataCenterPing_Update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCDataCenterPing_Update)
    MergeFrom(*source);
  }
}

void CMsgGCDataCenterPing_Update::MergeFrom(const CMsgGCDataCenterPing_Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCDataCenterPing_Update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pingdata_.MergeFrom(from.pingdata_);
}

void CMsgGCDataCenterPing_Update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCDataCenterPing_Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCDataCenterPing_Update::CopyFrom(const CMsgGCDataCenterPing_Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCDataCenterPing_Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCDataCenterPing_Update::IsInitialized() const {
  return true;
}

void CMsgGCDataCenterPing_Update::Swap(CMsgGCDataCenterPing_Update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCDataCenterPing_Update::InternalSwap(CMsgGCDataCenterPing_Update* other) {
  using std::swap;
  pingdata_.InternalSwap(&other->pingdata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCDataCenterPing_Update::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGC_KickPlayerFromLobby::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGC_KickPlayerFromLobby::kTargetIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGC_KickPlayerFromLobby::CMsgGC_KickPlayerFromLobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_KickPlayerFromLobby();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGC_KickPlayerFromLobby)
}
CMsgGC_KickPlayerFromLobby::CMsgGC_KickPlayerFromLobby(const CMsgGC_KickPlayerFromLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  targetid_ = from.targetid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_KickPlayerFromLobby)
}

void CMsgGC_KickPlayerFromLobby::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = GOOGLE_ULONGLONG(0);
}

CMsgGC_KickPlayerFromLobby::~CMsgGC_KickPlayerFromLobby() {
  // @@protoc_insertion_point(destructor:CMsgGC_KickPlayerFromLobby)
  SharedDtor();
}

void CMsgGC_KickPlayerFromLobby::SharedDtor() {
}

void CMsgGC_KickPlayerFromLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_KickPlayerFromLobby::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGC_KickPlayerFromLobby& CMsgGC_KickPlayerFromLobby::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGC_KickPlayerFromLobby();
  return *internal_default_instance();
}

CMsgGC_KickPlayerFromLobby* CMsgGC_KickPlayerFromLobby::New(::google::protobuf::Arena* arena) const {
  CMsgGC_KickPlayerFromLobby* n = new CMsgGC_KickPlayerFromLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGC_KickPlayerFromLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_KickPlayerFromLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGC_KickPlayerFromLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGC_KickPlayerFromLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 targetID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_targetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGC_KickPlayerFromLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGC_KickPlayerFromLobby)
  return false;
#undef DO_
}

void CMsgGC_KickPlayerFromLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGC_KickPlayerFromLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 targetID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->targetid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGC_KickPlayerFromLobby)
}

::google::protobuf::uint8* CMsgGC_KickPlayerFromLobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_KickPlayerFromLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 targetID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->targetid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_KickPlayerFromLobby)
  return target;
}

size_t CMsgGC_KickPlayerFromLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_KickPlayerFromLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 targetID = 1;
  if (has_targetid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->targetid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_KickPlayerFromLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_KickPlayerFromLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_KickPlayerFromLobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGC_KickPlayerFromLobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_KickPlayerFromLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_KickPlayerFromLobby)
    MergeFrom(*source);
  }
}

void CMsgGC_KickPlayerFromLobby::MergeFrom(const CMsgGC_KickPlayerFromLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_KickPlayerFromLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_targetid()) {
    set_targetid(from.targetid());
  }
}

void CMsgGC_KickPlayerFromLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_KickPlayerFromLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_KickPlayerFromLobby::CopyFrom(const CMsgGC_KickPlayerFromLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_KickPlayerFromLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_KickPlayerFromLobby::IsInitialized() const {
  return true;
}

void CMsgGC_KickPlayerFromLobby::Swap(CMsgGC_KickPlayerFromLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGC_KickPlayerFromLobby::InternalSwap(CMsgGC_KickPlayerFromLobby* other) {
  using std::swap;
  swap(targetid_, other->targetid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGC_KickPlayerFromLobby::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCSurveyRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCSurveyRequest::kQuestionTypeFieldNumber;
const int CMsgGCSurveyRequest::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCSurveyRequest::CMsgGCSurveyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCSurveyRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCSurveyRequest)
}
CMsgGCSurveyRequest::CMsgGCSurveyRequest(const CMsgGCSurveyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&question_type_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(question_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCSurveyRequest)
}

void CMsgGCSurveyRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&question_type_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(question_type_));
}

CMsgGCSurveyRequest::~CMsgGCSurveyRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCSurveyRequest)
  SharedDtor();
}

void CMsgGCSurveyRequest::SharedDtor() {
}

void CMsgGCSurveyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCSurveyRequest::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCSurveyRequest& CMsgGCSurveyRequest::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCSurveyRequest();
  return *internal_default_instance();
}

CMsgGCSurveyRequest* CMsgGCSurveyRequest::New(::google::protobuf::Arena* arena) const {
  CMsgGCSurveyRequest* n = new CMsgGCSurveyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCSurveyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCSurveyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&question_type_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(question_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCSurveyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCSurveyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SurveyQuestionType_IsValid(value)) {
            set_question_type(static_cast< ::SurveyQuestionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCSurveyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCSurveyRequest)
  return false;
#undef DO_
}

void CMsgGCSurveyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCSurveyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->question_type(), output);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCSurveyRequest)
}

::google::protobuf::uint8* CMsgGCSurveyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCSurveyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->question_type(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCSurveyRequest)
  return target;
}

size_t CMsgGCSurveyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCSurveyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
    if (has_question_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->question_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCSurveyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCSurveyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCSurveyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCSurveyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCSurveyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCSurveyRequest)
    MergeFrom(*source);
  }
}

void CMsgGCSurveyRequest::MergeFrom(const CMsgGCSurveyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCSurveyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      question_type_ = from.question_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCSurveyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCSurveyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCSurveyRequest::CopyFrom(const CMsgGCSurveyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCSurveyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCSurveyRequest::IsInitialized() const {
  return true;
}

void CMsgGCSurveyRequest::Swap(CMsgGCSurveyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCSurveyRequest::InternalSwap(CMsgGCSurveyRequest* other) {
  using std::swap;
  swap(match_id_, other->match_id_);
  swap(question_type_, other->question_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCSurveyRequest::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCSurveyResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCSurveyResponse::kQuestionTypeFieldNumber;
const int CMsgGCSurveyResponse::kMatchIdFieldNumber;
const int CMsgGCSurveyResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCSurveyResponse::CMsgGCSurveyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCSurveyResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCSurveyResponse)
}
CMsgGCSurveyResponse::CMsgGCSurveyResponse(const CMsgGCSurveyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCSurveyResponse)
}

void CMsgGCSurveyResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(response_));
}

CMsgGCSurveyResponse::~CMsgGCSurveyResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCSurveyResponse)
  SharedDtor();
}

void CMsgGCSurveyResponse::SharedDtor() {
}

void CMsgGCSurveyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCSurveyResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCSurveyResponse& CMsgGCSurveyResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCSurveyResponse();
  return *internal_default_instance();
}

CMsgGCSurveyResponse* CMsgGCSurveyResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCSurveyResponse* n = new CMsgGCSurveyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCSurveyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCSurveyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCSurveyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCSurveyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SurveyQuestionType_IsValid(value)) {
            set_question_type(static_cast< ::SurveyQuestionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_response();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCSurveyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCSurveyResponse)
  return false;
#undef DO_
}

void CMsgGCSurveyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCSurveyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->question_type(), output);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional int32 response = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCSurveyResponse)
}

::google::protobuf::uint8* CMsgGCSurveyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCSurveyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->question_type(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional int32 response = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCSurveyResponse)
  return target;
}

size_t CMsgGCSurveyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCSurveyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
    if (has_question_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->question_type());
    }

    // optional int32 response = 3;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCSurveyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCSurveyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCSurveyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCSurveyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCSurveyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCSurveyResponse)
    MergeFrom(*source);
  }
}

void CMsgGCSurveyResponse::MergeFrom(const CMsgGCSurveyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCSurveyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      question_type_ = from.question_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCSurveyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCSurveyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCSurveyResponse::CopyFrom(const CMsgGCSurveyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCSurveyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCSurveyResponse::IsInitialized() const {
  return true;
}

void CMsgGCSurveyResponse::Swap(CMsgGCSurveyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCSurveyResponse::InternalSwap(CMsgGCSurveyResponse* other) {
  using std::swap;
  swap(match_id_, other->match_id_);
  swap(question_type_, other->question_type_);
  swap(response_, other->response_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCSurveyResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCNewMatchForLobbyRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCNewMatchForLobbyRequest::kCurrentMatchIdFieldNumber;
const int CMsgGCNewMatchForLobbyRequest::kNextMapIdFieldNumber;
const int CMsgGCNewMatchForLobbyRequest::kLobbyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCNewMatchForLobbyRequest::CMsgGCNewMatchForLobbyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCNewMatchForLobbyRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCNewMatchForLobbyRequest)
}
CMsgGCNewMatchForLobbyRequest::CMsgGCNewMatchForLobbyRequest(const CMsgGCNewMatchForLobbyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_match_id_, &from.current_match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_map_id_) -
    reinterpret_cast<char*>(&current_match_id_)) + sizeof(next_map_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCNewMatchForLobbyRequest)
}

void CMsgGCNewMatchForLobbyRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&current_match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_map_id_) -
      reinterpret_cast<char*>(&current_match_id_)) + sizeof(next_map_id_));
}

CMsgGCNewMatchForLobbyRequest::~CMsgGCNewMatchForLobbyRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCNewMatchForLobbyRequest)
  SharedDtor();
}

void CMsgGCNewMatchForLobbyRequest::SharedDtor() {
}

void CMsgGCNewMatchForLobbyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCNewMatchForLobbyRequest::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCNewMatchForLobbyRequest& CMsgGCNewMatchForLobbyRequest::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCNewMatchForLobbyRequest();
  return *internal_default_instance();
}

CMsgGCNewMatchForLobbyRequest* CMsgGCNewMatchForLobbyRequest::New(::google::protobuf::Arena* arena) const {
  CMsgGCNewMatchForLobbyRequest* n = new CMsgGCNewMatchForLobbyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCNewMatchForLobbyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCNewMatchForLobbyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&current_match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&next_map_id_) -
        reinterpret_cast<char*>(&current_match_id_)) + sizeof(next_map_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCNewMatchForLobbyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCNewMatchForLobbyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 current_match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_current_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 next_map_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_next_map_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lobby_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCNewMatchForLobbyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCNewMatchForLobbyRequest)
  return false;
#undef DO_
}

void CMsgGCNewMatchForLobbyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCNewMatchForLobbyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 current_match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->current_match_id(), output);
  }

  // optional uint32 next_map_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->next_map_id(), output);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lobby_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCNewMatchForLobbyRequest)
}

::google::protobuf::uint8* CMsgGCNewMatchForLobbyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCNewMatchForLobbyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 current_match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->current_match_id(), target);
  }

  // optional uint32 next_map_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->next_map_id(), target);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lobby_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCNewMatchForLobbyRequest)
  return target;
}

size_t CMsgGCNewMatchForLobbyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCNewMatchForLobbyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 current_match_id = 1;
    if (has_current_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->current_match_id());
    }

    // optional uint64 lobby_id = 3;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint32 next_map_id = 2;
    if (has_next_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_map_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCNewMatchForLobbyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCNewMatchForLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCNewMatchForLobbyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCNewMatchForLobbyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCNewMatchForLobbyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCNewMatchForLobbyRequest)
    MergeFrom(*source);
  }
}

void CMsgGCNewMatchForLobbyRequest::MergeFrom(const CMsgGCNewMatchForLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCNewMatchForLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      current_match_id_ = from.current_match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      next_map_id_ = from.next_map_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCNewMatchForLobbyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCNewMatchForLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNewMatchForLobbyRequest::CopyFrom(const CMsgGCNewMatchForLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCNewMatchForLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNewMatchForLobbyRequest::IsInitialized() const {
  return true;
}

void CMsgGCNewMatchForLobbyRequest::Swap(CMsgGCNewMatchForLobbyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCNewMatchForLobbyRequest::InternalSwap(CMsgGCNewMatchForLobbyRequest* other) {
  using std::swap;
  swap(current_match_id_, other->current_match_id_);
  swap(lobby_id_, other->lobby_id_);
  swap(next_map_id_, other->next_map_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCNewMatchForLobbyRequest::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCNewMatchForLobbyResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCNewMatchForLobbyResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCNewMatchForLobbyResponse::CMsgGCNewMatchForLobbyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCNewMatchForLobbyResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCNewMatchForLobbyResponse)
}
CMsgGCNewMatchForLobbyResponse::CMsgGCNewMatchForLobbyResponse(const CMsgGCNewMatchForLobbyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCNewMatchForLobbyResponse)
}

void CMsgGCNewMatchForLobbyResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
}

CMsgGCNewMatchForLobbyResponse::~CMsgGCNewMatchForLobbyResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCNewMatchForLobbyResponse)
  SharedDtor();
}

void CMsgGCNewMatchForLobbyResponse::SharedDtor() {
}

void CMsgGCNewMatchForLobbyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCNewMatchForLobbyResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCNewMatchForLobbyResponse& CMsgGCNewMatchForLobbyResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCNewMatchForLobbyResponse();
  return *internal_default_instance();
}

CMsgGCNewMatchForLobbyResponse* CMsgGCNewMatchForLobbyResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCNewMatchForLobbyResponse* n = new CMsgGCNewMatchForLobbyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCNewMatchForLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCNewMatchForLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCNewMatchForLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCNewMatchForLobbyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCNewMatchForLobbyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCNewMatchForLobbyResponse)
  return false;
#undef DO_
}

void CMsgGCNewMatchForLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCNewMatchForLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCNewMatchForLobbyResponse)
}

::google::protobuf::uint8* CMsgGCNewMatchForLobbyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCNewMatchForLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCNewMatchForLobbyResponse)
  return target;
}

size_t CMsgGCNewMatchForLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCNewMatchForLobbyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCNewMatchForLobbyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCNewMatchForLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCNewMatchForLobbyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCNewMatchForLobbyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCNewMatchForLobbyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCNewMatchForLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgGCNewMatchForLobbyResponse::MergeFrom(const CMsgGCNewMatchForLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCNewMatchForLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_success()) {
    set_success(from.success());
  }
}

void CMsgGCNewMatchForLobbyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCNewMatchForLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNewMatchForLobbyResponse::CopyFrom(const CMsgGCNewMatchForLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCNewMatchForLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNewMatchForLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgGCNewMatchForLobbyResponse::Swap(CMsgGCNewMatchForLobbyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCNewMatchForLobbyResponse::InternalSwap(CMsgGCNewMatchForLobbyResponse* other) {
  using std::swap;
  swap(success_, other->success_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCNewMatchForLobbyResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCChangeMatchPlayerTeamsRequest_Member::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCChangeMatchPlayerTeamsRequest_Member::kMemberIdFieldNumber;
const int CMsgGCChangeMatchPlayerTeamsRequest_Member::kNewTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCChangeMatchPlayerTeamsRequest_Member::CMsgGCChangeMatchPlayerTeamsRequest_Member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCChangeMatchPlayerTeamsRequest_Member();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCChangeMatchPlayerTeamsRequest.Member)
}
CMsgGCChangeMatchPlayerTeamsRequest_Member::CMsgGCChangeMatchPlayerTeamsRequest_Member(const CMsgGCChangeMatchPlayerTeamsRequest_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&member_id_, &from.member_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_team_) -
    reinterpret_cast<char*>(&member_id_)) + sizeof(new_team_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCChangeMatchPlayerTeamsRequest.Member)
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::SharedCtor() {
  _cached_size_ = 0;
  member_id_ = GOOGLE_ULONGLONG(0);
  new_team_ = 5;
}

CMsgGCChangeMatchPlayerTeamsRequest_Member::~CMsgGCChangeMatchPlayerTeamsRequest_Member() {
  // @@protoc_insertion_point(destructor:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  SharedDtor();
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::SharedDtor() {
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCChangeMatchPlayerTeamsRequest_Member::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCChangeMatchPlayerTeamsRequest_Member& CMsgGCChangeMatchPlayerTeamsRequest_Member::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCChangeMatchPlayerTeamsRequest_Member();
  return *internal_default_instance();
}

CMsgGCChangeMatchPlayerTeamsRequest_Member* CMsgGCChangeMatchPlayerTeamsRequest_Member::New(::google::protobuf::Arena* arena) const {
  CMsgGCChangeMatchPlayerTeamsRequest_Member* n = new CMsgGCChangeMatchPlayerTeamsRequest_Member;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    member_id_ = GOOGLE_ULONGLONG(0);
    new_team_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCChangeMatchPlayerTeamsRequest_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 member_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_member_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &member_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TF_GC_TEAM new_team = 2 [default = TF_GC_TEAM_NOTEAM];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TF_GC_TEAM_IsValid(value)) {
            set_new_team(static_cast< ::TF_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  return false;
#undef DO_
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 member_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->member_id(), output);
  }

  // optional .TF_GC_TEAM new_team = 2 [default = TF_GC_TEAM_NOTEAM];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->new_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCChangeMatchPlayerTeamsRequest.Member)
}

::google::protobuf::uint8* CMsgGCChangeMatchPlayerTeamsRequest_Member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 member_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->member_id(), target);
  }

  // optional .TF_GC_TEAM new_team = 2 [default = TF_GC_TEAM_NOTEAM];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->new_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  return target;
}

size_t CMsgGCChangeMatchPlayerTeamsRequest_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->member_id());
    }

    // optional .TF_GC_TEAM new_team = 2 [default = TF_GC_TEAM_NOTEAM];
    if (has_new_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCChangeMatchPlayerTeamsRequest_Member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCChangeMatchPlayerTeamsRequest_Member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCChangeMatchPlayerTeamsRequest.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCChangeMatchPlayerTeamsRequest.Member)
    MergeFrom(*source);
  }
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::MergeFrom(const CMsgGCChangeMatchPlayerTeamsRequest_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      member_id_ = from.member_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_team_ = from.new_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::CopyFrom(const CMsgGCChangeMatchPlayerTeamsRequest_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCChangeMatchPlayerTeamsRequest_Member::IsInitialized() const {
  return true;
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::Swap(CMsgGCChangeMatchPlayerTeamsRequest_Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCChangeMatchPlayerTeamsRequest_Member::InternalSwap(CMsgGCChangeMatchPlayerTeamsRequest_Member* other) {
  using std::swap;
  swap(member_id_, other->member_id_);
  swap(new_team_, other->new_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCChangeMatchPlayerTeamsRequest_Member::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCChangeMatchPlayerTeamsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCChangeMatchPlayerTeamsRequest::kMatchIdFieldNumber;
const int CMsgGCChangeMatchPlayerTeamsRequest::kLobbyIdFieldNumber;
const int CMsgGCChangeMatchPlayerTeamsRequest::kMemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCChangeMatchPlayerTeamsRequest::CMsgGCChangeMatchPlayerTeamsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCChangeMatchPlayerTeamsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCChangeMatchPlayerTeamsRequest)
}
CMsgGCChangeMatchPlayerTeamsRequest::CMsgGCChangeMatchPlayerTeamsRequest(const CMsgGCChangeMatchPlayerTeamsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      member_(from.member_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobby_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(lobby_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCChangeMatchPlayerTeamsRequest)
}

void CMsgGCChangeMatchPlayerTeamsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lobby_id_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(lobby_id_));
}

CMsgGCChangeMatchPlayerTeamsRequest::~CMsgGCChangeMatchPlayerTeamsRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCChangeMatchPlayerTeamsRequest)
  SharedDtor();
}

void CMsgGCChangeMatchPlayerTeamsRequest::SharedDtor() {
}

void CMsgGCChangeMatchPlayerTeamsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCChangeMatchPlayerTeamsRequest::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCChangeMatchPlayerTeamsRequest& CMsgGCChangeMatchPlayerTeamsRequest::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCChangeMatchPlayerTeamsRequest();
  return *internal_default_instance();
}

CMsgGCChangeMatchPlayerTeamsRequest* CMsgGCChangeMatchPlayerTeamsRequest::New(::google::protobuf::Arena* arena) const {
  CMsgGCChangeMatchPlayerTeamsRequest* n = new CMsgGCChangeMatchPlayerTeamsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCChangeMatchPlayerTeamsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCChangeMatchPlayerTeamsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(lobby_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCChangeMatchPlayerTeamsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCChangeMatchPlayerTeamsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lobby_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgGCChangeMatchPlayerTeamsRequest.Member member = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCChangeMatchPlayerTeamsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCChangeMatchPlayerTeamsRequest)
  return false;
#undef DO_
}

void CMsgGCChangeMatchPlayerTeamsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCChangeMatchPlayerTeamsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lobby_id(), output);
  }

  // repeated .CMsgGCChangeMatchPlayerTeamsRequest.Member member = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->member_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->member(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCChangeMatchPlayerTeamsRequest)
}

::google::protobuf::uint8* CMsgGCChangeMatchPlayerTeamsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCChangeMatchPlayerTeamsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lobby_id(), target);
  }

  // repeated .CMsgGCChangeMatchPlayerTeamsRequest.Member member = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->member_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->member(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCChangeMatchPlayerTeamsRequest)
  return target;
}

size_t CMsgGCChangeMatchPlayerTeamsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCChangeMatchPlayerTeamsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGCChangeMatchPlayerTeamsRequest.Member member = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->member_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->member(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint64 lobby_id = 2;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCChangeMatchPlayerTeamsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCChangeMatchPlayerTeamsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCChangeMatchPlayerTeamsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCChangeMatchPlayerTeamsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCChangeMatchPlayerTeamsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCChangeMatchPlayerTeamsRequest)
    MergeFrom(*source);
  }
}

void CMsgGCChangeMatchPlayerTeamsRequest::MergeFrom(const CMsgGCChangeMatchPlayerTeamsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCChangeMatchPlayerTeamsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCChangeMatchPlayerTeamsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCChangeMatchPlayerTeamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCChangeMatchPlayerTeamsRequest::CopyFrom(const CMsgGCChangeMatchPlayerTeamsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCChangeMatchPlayerTeamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCChangeMatchPlayerTeamsRequest::IsInitialized() const {
  return true;
}

void CMsgGCChangeMatchPlayerTeamsRequest::Swap(CMsgGCChangeMatchPlayerTeamsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCChangeMatchPlayerTeamsRequest::InternalSwap(CMsgGCChangeMatchPlayerTeamsRequest* other) {
  using std::swap;
  member_.InternalSwap(&other->member_);
  swap(match_id_, other->match_id_);
  swap(lobby_id_, other->lobby_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCChangeMatchPlayerTeamsRequest::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCChangeMatchPlayerTeamsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCChangeMatchPlayerTeamsResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCChangeMatchPlayerTeamsResponse::CMsgGCChangeMatchPlayerTeamsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCChangeMatchPlayerTeamsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCChangeMatchPlayerTeamsResponse)
}
CMsgGCChangeMatchPlayerTeamsResponse::CMsgGCChangeMatchPlayerTeamsResponse(const CMsgGCChangeMatchPlayerTeamsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCChangeMatchPlayerTeamsResponse)
}

void CMsgGCChangeMatchPlayerTeamsResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
}

CMsgGCChangeMatchPlayerTeamsResponse::~CMsgGCChangeMatchPlayerTeamsResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCChangeMatchPlayerTeamsResponse)
  SharedDtor();
}

void CMsgGCChangeMatchPlayerTeamsResponse::SharedDtor() {
}

void CMsgGCChangeMatchPlayerTeamsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCChangeMatchPlayerTeamsResponse::descriptor() {
  ::protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCChangeMatchPlayerTeamsResponse& CMsgGCChangeMatchPlayerTeamsResponse::default_instance() {
  ::protobuf_tf_5fgcmessages_2eproto::InitDefaultsCMsgGCChangeMatchPlayerTeamsResponse();
  return *internal_default_instance();
}

CMsgGCChangeMatchPlayerTeamsResponse* CMsgGCChangeMatchPlayerTeamsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCChangeMatchPlayerTeamsResponse* n = new CMsgGCChangeMatchPlayerTeamsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCChangeMatchPlayerTeamsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCChangeMatchPlayerTeamsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCChangeMatchPlayerTeamsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCChangeMatchPlayerTeamsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCChangeMatchPlayerTeamsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCChangeMatchPlayerTeamsResponse)
  return false;
#undef DO_
}

void CMsgGCChangeMatchPlayerTeamsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCChangeMatchPlayerTeamsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCChangeMatchPlayerTeamsResponse)
}

::google::protobuf::uint8* CMsgGCChangeMatchPlayerTeamsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCChangeMatchPlayerTeamsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCChangeMatchPlayerTeamsResponse)
  return target;
}

size_t CMsgGCChangeMatchPlayerTeamsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCChangeMatchPlayerTeamsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCChangeMatchPlayerTeamsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCChangeMatchPlayerTeamsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCChangeMatchPlayerTeamsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCChangeMatchPlayerTeamsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCChangeMatchPlayerTeamsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCChangeMatchPlayerTeamsResponse)
    MergeFrom(*source);
  }
}

void CMsgGCChangeMatchPlayerTeamsResponse::MergeFrom(const CMsgGCChangeMatchPlayerTeamsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCChangeMatchPlayerTeamsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_success()) {
    set_success(from.success());
  }
}

void CMsgGCChangeMatchPlayerTeamsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCChangeMatchPlayerTeamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCChangeMatchPlayerTeamsResponse::CopyFrom(const CMsgGCChangeMatchPlayerTeamsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCChangeMatchPlayerTeamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCChangeMatchPlayerTeamsResponse::IsInitialized() const {
  return true;
}

void CMsgGCChangeMatchPlayerTeamsResponse::Swap(CMsgGCChangeMatchPlayerTeamsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCChangeMatchPlayerTeamsResponse::InternalSwap(CMsgGCChangeMatchPlayerTeamsResponse* other) {
  using std::swap;
  swap(success_, other->success_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCChangeMatchPlayerTeamsResponse::GetMetadata() const {
  protobuf_tf_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tf_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
