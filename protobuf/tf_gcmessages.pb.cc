// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tf_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgTFGoldenWrenchBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFGoldenWrenchBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFSaxxyBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFSaxxyBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFIncrementKillCountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFIncrementKillCountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOTFDuelSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFDuelSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOTFMapContribution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFMapContribution_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFVoteKickBanPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFVoteKickBanPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFVoteKickBanPlayerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFVoteKickBanPlayerResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFKickPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFKickPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFStartedTraining_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFStartedTraining_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFFreeTrialChooseMostHelpfulFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFFreeTrialChooseMostHelpfulFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFRequestTF2Friends_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFRequestTF2Friends_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFRequestTF2FriendsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFRequestTF2FriendsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOTFPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOTFPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFThankedBySomeone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFThankedBySomeone_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFThankedSomeone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFThankedSomeone_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFFreeTrialConvertedToPremium_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFFreeTrialConvertedToPremium_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSaxxyAwarded_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSaxxyAwarded_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgReplayUploadedToYouTube_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgReplayUploadedToYouTube_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgReplaySubmitContestEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgReplaySubmitContestEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgReplaySubmitContestEntryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgReplaySubmitContestEntryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CReplayCachedContestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CReplayCachedContestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_AddToCoaches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_AddToCoaches_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_RemoveFromCoaches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_RemoveFromCoaches_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_FindCoach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_FindCoach_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_FindCoachResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_FindCoachResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_AskCoach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_AskCoach_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_AskCoachResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_AskCoachResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_CoachJoinGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_CoachJoinGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_CoachJoining_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_CoachJoining_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_CoachJoined_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_CoachJoined_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_LikeCurrentCoach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_LikeCurrentCoach_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFCoaching_RemoveCurrentCoach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFCoaching_RemoveCurrentCoach_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFQuickplay_ScoreServers_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServers_ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFQuickplay_ScoreServers_ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFQuickplay_ScoreServersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServersResponse_ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFQuickplay_ScoreServersResponse_ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTFQuickplay_PlayerJoining_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTFQuickplay_PlayerJoining_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_LevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_LevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AuthChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_AuthChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AuthResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_AuthResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AuthChallengeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_AuthChallengeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_CreateIdentity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_CreateIdentity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_CreateIdentityResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_CreateIdentityResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_List_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_ListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ListResponse_GameServerIdentity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_ListResponse_GameServerIdentity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ResetIdentity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_ResetIdentity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ResetIdentityResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GameServer_ResetIdentityResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tf_5fgcmessages_2eproto() {
  protobuf_AddDesc_tf_5fgcmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tf_gcmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgTFGoldenWrenchBroadcast_descriptor_ = file->message_type(0);
  static const int CMsgTFGoldenWrenchBroadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFGoldenWrenchBroadcast, wrench_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFGoldenWrenchBroadcast, deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFGoldenWrenchBroadcast, user_name_),
  };
  CMsgTFGoldenWrenchBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFGoldenWrenchBroadcast_descriptor_,
      CMsgTFGoldenWrenchBroadcast::default_instance_,
      CMsgTFGoldenWrenchBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFGoldenWrenchBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFGoldenWrenchBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFGoldenWrenchBroadcast));
  CMsgTFSaxxyBroadcast_descriptor_ = file->message_type(1);
  static const int CMsgTFSaxxyBroadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFSaxxyBroadcast, category_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFSaxxyBroadcast, user_name_),
  };
  CMsgTFSaxxyBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFSaxxyBroadcast_descriptor_,
      CMsgTFSaxxyBroadcast::default_instance_,
      CMsgTFSaxxyBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFSaxxyBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFSaxxyBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFSaxxyBroadcast));
  CMsgTFIncrementKillCountResponse_descriptor_ = file->message_type(2);
  static const int CMsgTFIncrementKillCountResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFIncrementKillCountResponse, killer_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFIncrementKillCountResponse, num_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFIncrementKillCountResponse, item_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFIncrementKillCountResponse, new_rank_),
  };
  CMsgTFIncrementKillCountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFIncrementKillCountResponse_descriptor_,
      CMsgTFIncrementKillCountResponse::default_instance_,
      CMsgTFIncrementKillCountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFIncrementKillCountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFIncrementKillCountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFIncrementKillCountResponse));
  CSOTFDuelSummary_descriptor_ = file->message_type(3);
  static const int CSOTFDuelSummary_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, duel_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, duel_losses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, last_duel_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, last_duel_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, last_duel_status_),
  };
  CSOTFDuelSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFDuelSummary_descriptor_,
      CSOTFDuelSummary::default_instance_,
      CSOTFDuelSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFDuelSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFDuelSummary));
  CSOTFMapContribution_descriptor_ = file->message_type(4);
  static const int CSOTFMapContribution_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMapContribution, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMapContribution, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMapContribution, contribution_level_),
  };
  CSOTFMapContribution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFMapContribution_descriptor_,
      CSOTFMapContribution::default_instance_,
      CSOTFMapContribution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMapContribution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFMapContribution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFMapContribution));
  CMsgTFVoteKickBanPlayer_descriptor_ = file->message_type(5);
  static const int CMsgTFVoteKickBanPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayer, account_id_subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayer, kick_reason_),
  };
  CMsgTFVoteKickBanPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFVoteKickBanPlayer_descriptor_,
      CMsgTFVoteKickBanPlayer::default_instance_,
      CMsgTFVoteKickBanPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFVoteKickBanPlayer));
  CMsgTFVoteKickBanPlayerResult_descriptor_ = file->message_type(6);
  static const int CMsgTFVoteKickBanPlayerResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, account_id_initiator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, account_id_subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, kick_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, kick_successful_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, num_yes_votes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, num_no_votes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, num_possible_votes_),
  };
  CMsgTFVoteKickBanPlayerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFVoteKickBanPlayerResult_descriptor_,
      CMsgTFVoteKickBanPlayerResult::default_instance_,
      CMsgTFVoteKickBanPlayerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFVoteKickBanPlayerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFVoteKickBanPlayerResult));
  CMsgTFKickPlayer_descriptor_ = file->message_type(7);
  static const int CMsgTFKickPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFKickPlayer, account_id_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFKickPlayer, kick_reason_),
  };
  CMsgTFKickPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFKickPlayer_descriptor_,
      CMsgTFKickPlayer::default_instance_,
      CMsgTFKickPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFKickPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFKickPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFKickPlayer));
  CMsgTFStartedTraining_descriptor_ = file->message_type(8);
  static const int CMsgTFStartedTraining_offsets_[1] = {
  };
  CMsgTFStartedTraining_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFStartedTraining_descriptor_,
      CMsgTFStartedTraining::default_instance_,
      CMsgTFStartedTraining_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFStartedTraining, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFStartedTraining, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFStartedTraining));
  CMsgTFFreeTrialChooseMostHelpfulFriend_descriptor_ = file->message_type(9);
  static const int CMsgTFFreeTrialChooseMostHelpfulFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFFreeTrialChooseMostHelpfulFriend, account_id_friend_),
  };
  CMsgTFFreeTrialChooseMostHelpfulFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFFreeTrialChooseMostHelpfulFriend_descriptor_,
      CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance_,
      CMsgTFFreeTrialChooseMostHelpfulFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFFreeTrialChooseMostHelpfulFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFFreeTrialChooseMostHelpfulFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFFreeTrialChooseMostHelpfulFriend));
  CMsgTFRequestTF2Friends_descriptor_ = file->message_type(10);
  static const int CMsgTFRequestTF2Friends_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFRequestTF2Friends, account_ids_),
  };
  CMsgTFRequestTF2Friends_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFRequestTF2Friends_descriptor_,
      CMsgTFRequestTF2Friends::default_instance_,
      CMsgTFRequestTF2Friends_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFRequestTF2Friends, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFRequestTF2Friends, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFRequestTF2Friends));
  CMsgTFRequestTF2FriendsResponse_descriptor_ = file->message_type(11);
  static const int CMsgTFRequestTF2FriendsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFRequestTF2FriendsResponse, account_ids_),
  };
  CMsgTFRequestTF2FriendsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFRequestTF2FriendsResponse_descriptor_,
      CMsgTFRequestTF2FriendsResponse::default_instance_,
      CMsgTFRequestTF2FriendsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFRequestTF2FriendsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFRequestTF2FriendsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFRequestTF2FriendsResponse));
  CSOTFPlayerInfo_descriptor_ = file->message_type(12);
  static const int CSOTFPlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPlayerInfo, num_new_users_helped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPlayerInfo, trial_account_),
  };
  CSOTFPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOTFPlayerInfo_descriptor_,
      CSOTFPlayerInfo::default_instance_,
      CSOTFPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOTFPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOTFPlayerInfo));
  CMsgTFThankedBySomeone_descriptor_ = file->message_type(13);
  static const int CMsgTFThankedBySomeone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFThankedBySomeone, thanker_steam_id_),
  };
  CMsgTFThankedBySomeone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFThankedBySomeone_descriptor_,
      CMsgTFThankedBySomeone::default_instance_,
      CMsgTFThankedBySomeone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFThankedBySomeone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFThankedBySomeone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFThankedBySomeone));
  CMsgTFThankedSomeone_descriptor_ = file->message_type(14);
  static const int CMsgTFThankedSomeone_offsets_[1] = {
  };
  CMsgTFThankedSomeone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFThankedSomeone_descriptor_,
      CMsgTFThankedSomeone::default_instance_,
      CMsgTFThankedSomeone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFThankedSomeone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFThankedSomeone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFThankedSomeone));
  CMsgTFFreeTrialConvertedToPremium_descriptor_ = file->message_type(15);
  static const int CMsgTFFreeTrialConvertedToPremium_offsets_[1] = {
  };
  CMsgTFFreeTrialConvertedToPremium_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFFreeTrialConvertedToPremium_descriptor_,
      CMsgTFFreeTrialConvertedToPremium::default_instance_,
      CMsgTFFreeTrialConvertedToPremium_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFFreeTrialConvertedToPremium, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFFreeTrialConvertedToPremium, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFFreeTrialConvertedToPremium));
  CMsgSaxxyAwarded_descriptor_ = file->message_type(16);
  static const int CMsgSaxxyAwarded_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaxxyAwarded, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaxxyAwarded, winner_names_),
  };
  CMsgSaxxyAwarded_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSaxxyAwarded_descriptor_,
      CMsgSaxxyAwarded::default_instance_,
      CMsgSaxxyAwarded_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaxxyAwarded, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaxxyAwarded, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSaxxyAwarded));
  CMsgReplayUploadedToYouTube_descriptor_ = file->message_type(17);
  static const int CMsgReplayUploadedToYouTube_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplayUploadedToYouTube, youtube_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplayUploadedToYouTube, youtube_account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplayUploadedToYouTube, session_id_),
  };
  CMsgReplayUploadedToYouTube_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgReplayUploadedToYouTube_descriptor_,
      CMsgReplayUploadedToYouTube::default_instance_,
      CMsgReplayUploadedToYouTube_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplayUploadedToYouTube, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplayUploadedToYouTube, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgReplayUploadedToYouTube));
  CMsgReplaySubmitContestEntry_descriptor_ = file->message_type(18);
  static const int CMsgReplaySubmitContestEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplaySubmitContestEntry, youtube_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplaySubmitContestEntry, category_),
  };
  CMsgReplaySubmitContestEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgReplaySubmitContestEntry_descriptor_,
      CMsgReplaySubmitContestEntry::default_instance_,
      CMsgReplaySubmitContestEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplaySubmitContestEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplaySubmitContestEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgReplaySubmitContestEntry));
  CMsgReplaySubmitContestEntryResponse_descriptor_ = file->message_type(19);
  static const int CMsgReplaySubmitContestEntryResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplaySubmitContestEntryResponse, success_),
  };
  CMsgReplaySubmitContestEntryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgReplaySubmitContestEntryResponse_descriptor_,
      CMsgReplaySubmitContestEntryResponse::default_instance_,
      CMsgReplaySubmitContestEntryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplaySubmitContestEntryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplaySubmitContestEntryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgReplaySubmitContestEntryResponse));
  CReplayCachedContestData_descriptor_ = file->message_type(20);
  static const int CReplayCachedContestData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReplayCachedContestData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReplayCachedContestData, num_votes_last_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReplayCachedContestData, video_entry_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReplayCachedContestData, num_flags_last_day_),
  };
  CReplayCachedContestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CReplayCachedContestData_descriptor_,
      CReplayCachedContestData::default_instance_,
      CReplayCachedContestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReplayCachedContestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReplayCachedContestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CReplayCachedContestData));
  CMsgTFCoaching_AddToCoaches_descriptor_ = file->message_type(21);
  static const int CMsgTFCoaching_AddToCoaches_offsets_[1] = {
  };
  CMsgTFCoaching_AddToCoaches_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_AddToCoaches_descriptor_,
      CMsgTFCoaching_AddToCoaches::default_instance_,
      CMsgTFCoaching_AddToCoaches_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AddToCoaches, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AddToCoaches, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_AddToCoaches));
  CMsgTFCoaching_RemoveFromCoaches_descriptor_ = file->message_type(22);
  static const int CMsgTFCoaching_RemoveFromCoaches_offsets_[1] = {
  };
  CMsgTFCoaching_RemoveFromCoaches_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_RemoveFromCoaches_descriptor_,
      CMsgTFCoaching_RemoveFromCoaches::default_instance_,
      CMsgTFCoaching_RemoveFromCoaches_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_RemoveFromCoaches, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_RemoveFromCoaches, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_RemoveFromCoaches));
  CMsgTFCoaching_FindCoach_descriptor_ = file->message_type(23);
  static const int CMsgTFCoaching_FindCoach_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoach, account_id_friend_as_coach_),
  };
  CMsgTFCoaching_FindCoach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_FindCoach_descriptor_,
      CMsgTFCoaching_FindCoach::default_instance_,
      CMsgTFCoaching_FindCoach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_FindCoach));
  CMsgTFCoaching_FindCoachResponse_descriptor_ = file->message_type(24);
  static const int CMsgTFCoaching_FindCoachResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoachResponse, found_coach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoachResponse, num_likes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoachResponse, coach_name_),
  };
  CMsgTFCoaching_FindCoachResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_FindCoachResponse_descriptor_,
      CMsgTFCoaching_FindCoachResponse::default_instance_,
      CMsgTFCoaching_FindCoachResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoachResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_FindCoachResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_FindCoachResponse));
  CMsgTFCoaching_AskCoach_descriptor_ = file->message_type(25);
  static const int CMsgTFCoaching_AskCoach_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AskCoach, account_id_student_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AskCoach, student_is_friend_),
  };
  CMsgTFCoaching_AskCoach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_AskCoach_descriptor_,
      CMsgTFCoaching_AskCoach::default_instance_,
      CMsgTFCoaching_AskCoach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AskCoach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AskCoach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_AskCoach));
  CMsgTFCoaching_AskCoachResponse_descriptor_ = file->message_type(26);
  static const int CMsgTFCoaching_AskCoachResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AskCoachResponse, accept_coaching_assignment_),
  };
  CMsgTFCoaching_AskCoachResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_AskCoachResponse_descriptor_,
      CMsgTFCoaching_AskCoachResponse::default_instance_,
      CMsgTFCoaching_AskCoachResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AskCoachResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_AskCoachResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_AskCoachResponse));
  CMsgTFCoaching_CoachJoinGame_descriptor_ = file->message_type(27);
  static const int CMsgTFCoaching_CoachJoinGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoinGame, join_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoinGame, server_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoinGame, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoinGame, account_id_student_),
  };
  CMsgTFCoaching_CoachJoinGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_CoachJoinGame_descriptor_,
      CMsgTFCoaching_CoachJoinGame::default_instance_,
      CMsgTFCoaching_CoachJoinGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoinGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoinGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_CoachJoinGame));
  CMsgTFCoaching_CoachJoining_descriptor_ = file->message_type(28);
  static const int CMsgTFCoaching_CoachJoining_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoining, account_id_coach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoining, account_id_student_),
  };
  CMsgTFCoaching_CoachJoining_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_CoachJoining_descriptor_,
      CMsgTFCoaching_CoachJoining::default_instance_,
      CMsgTFCoaching_CoachJoining_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoining, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoining, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_CoachJoining));
  CMsgTFCoaching_CoachJoined_descriptor_ = file->message_type(29);
  static const int CMsgTFCoaching_CoachJoined_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoined, account_id_coach_),
  };
  CMsgTFCoaching_CoachJoined_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_CoachJoined_descriptor_,
      CMsgTFCoaching_CoachJoined::default_instance_,
      CMsgTFCoaching_CoachJoined_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoined, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_CoachJoined, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_CoachJoined));
  CMsgTFCoaching_LikeCurrentCoach_descriptor_ = file->message_type(30);
  static const int CMsgTFCoaching_LikeCurrentCoach_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_LikeCurrentCoach, like_coach_),
  };
  CMsgTFCoaching_LikeCurrentCoach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_LikeCurrentCoach_descriptor_,
      CMsgTFCoaching_LikeCurrentCoach::default_instance_,
      CMsgTFCoaching_LikeCurrentCoach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_LikeCurrentCoach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_LikeCurrentCoach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_LikeCurrentCoach));
  CMsgTFCoaching_RemoveCurrentCoach_descriptor_ = file->message_type(31);
  static const int CMsgTFCoaching_RemoveCurrentCoach_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_RemoveCurrentCoach, account_id_coach_),
  };
  CMsgTFCoaching_RemoveCurrentCoach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFCoaching_RemoveCurrentCoach_descriptor_,
      CMsgTFCoaching_RemoveCurrentCoach::default_instance_,
      CMsgTFCoaching_RemoveCurrentCoach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_RemoveCurrentCoach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFCoaching_RemoveCurrentCoach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFCoaching_RemoveCurrentCoach));
  CMsgTFQuickplay_ScoreServers_descriptor_ = file->message_type(32);
  static const int CMsgTFQuickplay_ScoreServers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers, servers_),
  };
  CMsgTFQuickplay_ScoreServers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFQuickplay_ScoreServers_descriptor_,
      CMsgTFQuickplay_ScoreServers::default_instance_,
      CMsgTFQuickplay_ScoreServers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFQuickplay_ScoreServers));
  CMsgTFQuickplay_ScoreServers_ServerInfo_descriptor_ = CMsgTFQuickplay_ScoreServers_descriptor_->nested_type(0);
  static const int CMsgTFQuickplay_ScoreServers_ServerInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, server_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, num_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, max_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, user_score_),
  };
  CMsgTFQuickplay_ScoreServers_ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFQuickplay_ScoreServers_ServerInfo_descriptor_,
      CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance_,
      CMsgTFQuickplay_ScoreServers_ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFQuickplay_ScoreServers_ServerInfo));
  CMsgTFQuickplay_ScoreServersResponse_descriptor_ = file->message_type(33);
  static const int CMsgTFQuickplay_ScoreServersResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse, servers_),
  };
  CMsgTFQuickplay_ScoreServersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFQuickplay_ScoreServersResponse_descriptor_,
      CMsgTFQuickplay_ScoreServersResponse::default_instance_,
      CMsgTFQuickplay_ScoreServersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFQuickplay_ScoreServersResponse));
  CMsgTFQuickplay_ScoreServersResponse_ServerInfo_descriptor_ = CMsgTFQuickplay_ScoreServersResponse_descriptor_->nested_type(0);
  static const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse_ServerInfo, server_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse_ServerInfo, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse_ServerInfo, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse_ServerInfo, steam_id_),
  };
  CMsgTFQuickplay_ScoreServersResponse_ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFQuickplay_ScoreServersResponse_ServerInfo_descriptor_,
      CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance_,
      CMsgTFQuickplay_ScoreServersResponse_ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse_ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse_ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFQuickplay_ScoreServersResponse_ServerInfo));
  CMsgTFQuickplay_PlayerJoining_descriptor_ = file->message_type(34);
  static const int CMsgTFQuickplay_PlayerJoining_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_PlayerJoining, account_id_),
  };
  CMsgTFQuickplay_PlayerJoining_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTFQuickplay_PlayerJoining_descriptor_,
      CMsgTFQuickplay_PlayerJoining::default_instance_,
      CMsgTFQuickplay_PlayerJoining_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_PlayerJoining, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTFQuickplay_PlayerJoining, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTFQuickplay_PlayerJoining));
  CMsgGC_GameServer_LevelInfo_descriptor_ = file->message_type(35);
  static const int CMsgGC_GameServer_LevelInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_LevelInfo, level_loaded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_LevelInfo, level_name_),
  };
  CMsgGC_GameServer_LevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_LevelInfo_descriptor_,
      CMsgGC_GameServer_LevelInfo::default_instance_,
      CMsgGC_GameServer_LevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_LevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_LevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_LevelInfo));
  CMsgGC_GameServer_AuthChallenge_descriptor_ = file->message_type(36);
  static const int CMsgGC_GameServer_AuthChallenge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthChallenge, challenge_string_),
  };
  CMsgGC_GameServer_AuthChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_AuthChallenge_descriptor_,
      CMsgGC_GameServer_AuthChallenge::default_instance_,
      CMsgGC_GameServer_AuthChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_AuthChallenge));
  CMsgGC_GameServer_AuthResult_descriptor_ = file->message_type(37);
  static const int CMsgGC_GameServer_AuthResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthResult, authenticated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthResult, game_server_standing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthResult, game_server_standing_trend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthResult, is_valve_server_),
  };
  CMsgGC_GameServer_AuthResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_AuthResult_descriptor_,
      CMsgGC_GameServer_AuthResult::default_instance_,
      CMsgGC_GameServer_AuthResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_AuthResult));
  CMsgGC_GameServer_AuthChallengeResponse_descriptor_ = file->message_type(38);
  static const int CMsgGC_GameServer_AuthChallengeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthChallengeResponse, game_server_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthChallengeResponse, hashed_challenge_string_),
  };
  CMsgGC_GameServer_AuthChallengeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_AuthChallengeResponse_descriptor_,
      CMsgGC_GameServer_AuthChallengeResponse::default_instance_,
      CMsgGC_GameServer_AuthChallengeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthChallengeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_AuthChallengeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_AuthChallengeResponse));
  CMsgGC_GameServer_CreateIdentity_descriptor_ = file->message_type(39);
  static const int CMsgGC_GameServer_CreateIdentity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentity, account_id_),
  };
  CMsgGC_GameServer_CreateIdentity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_CreateIdentity_descriptor_,
      CMsgGC_GameServer_CreateIdentity::default_instance_,
      CMsgGC_GameServer_CreateIdentity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_CreateIdentity));
  CMsgGC_GameServer_CreateIdentityResponse_descriptor_ = file->message_type(40);
  static const int CMsgGC_GameServer_CreateIdentityResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentityResponse, account_created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentityResponse, game_server_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentityResponse, game_server_identity_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentityResponse, status_),
  };
  CMsgGC_GameServer_CreateIdentityResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_CreateIdentityResponse_descriptor_,
      CMsgGC_GameServer_CreateIdentityResponse::default_instance_,
      CMsgGC_GameServer_CreateIdentityResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentityResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentityResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_CreateIdentityResponse));
  CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor_ = CMsgGC_GameServer_CreateIdentityResponse_descriptor_->enum_type(0);
  CMsgGC_GameServer_List_descriptor_ = file->message_type(41);
  static const int CMsgGC_GameServer_List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_List, account_id_),
  };
  CMsgGC_GameServer_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_List_descriptor_,
      CMsgGC_GameServer_List::default_instance_,
      CMsgGC_GameServer_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_List));
  CMsgGC_GameServer_ListResponse_descriptor_ = file->message_type(42);
  static const int CMsgGC_GameServer_ListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse, owned_game_servers_),
  };
  CMsgGC_GameServer_ListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_ListResponse_descriptor_,
      CMsgGC_GameServer_ListResponse::default_instance_,
      CMsgGC_GameServer_ListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_ListResponse));
  CMsgGC_GameServer_ListResponse_GameServerIdentity_descriptor_ = CMsgGC_GameServer_ListResponse_descriptor_->nested_type(0);
  static const int CMsgGC_GameServer_ListResponse_GameServerIdentity_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_identity_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_standing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_standing_trend_),
  };
  CMsgGC_GameServer_ListResponse_GameServerIdentity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_ListResponse_GameServerIdentity_descriptor_,
      CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance_,
      CMsgGC_GameServer_ListResponse_GameServerIdentity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse_GameServerIdentity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ListResponse_GameServerIdentity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_ListResponse_GameServerIdentity));
  CMsgGC_GameServer_ResetIdentity_descriptor_ = file->message_type(43);
  static const int CMsgGC_GameServer_ResetIdentity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentity, game_server_account_id_),
  };
  CMsgGC_GameServer_ResetIdentity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_ResetIdentity_descriptor_,
      CMsgGC_GameServer_ResetIdentity::default_instance_,
      CMsgGC_GameServer_ResetIdentity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_ResetIdentity));
  CMsgGC_GameServer_ResetIdentityResponse_descriptor_ = file->message_type(44);
  static const int CMsgGC_GameServer_ResetIdentityResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentityResponse, game_server_identity_token_reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentityResponse, game_server_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentityResponse, game_server_identity_token_),
  };
  CMsgGC_GameServer_ResetIdentityResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GameServer_ResetIdentityResponse_descriptor_,
      CMsgGC_GameServer_ResetIdentityResponse::default_instance_,
      CMsgGC_GameServer_ResetIdentityResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentityResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentityResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GameServer_ResetIdentityResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tf_5fgcmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFGoldenWrenchBroadcast_descriptor_, &CMsgTFGoldenWrenchBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFSaxxyBroadcast_descriptor_, &CMsgTFSaxxyBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFIncrementKillCountResponse_descriptor_, &CMsgTFIncrementKillCountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFDuelSummary_descriptor_, &CSOTFDuelSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFMapContribution_descriptor_, &CSOTFMapContribution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFVoteKickBanPlayer_descriptor_, &CMsgTFVoteKickBanPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFVoteKickBanPlayerResult_descriptor_, &CMsgTFVoteKickBanPlayerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFKickPlayer_descriptor_, &CMsgTFKickPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFStartedTraining_descriptor_, &CMsgTFStartedTraining::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFFreeTrialChooseMostHelpfulFriend_descriptor_, &CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFRequestTF2Friends_descriptor_, &CMsgTFRequestTF2Friends::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFRequestTF2FriendsResponse_descriptor_, &CMsgTFRequestTF2FriendsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOTFPlayerInfo_descriptor_, &CSOTFPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFThankedBySomeone_descriptor_, &CMsgTFThankedBySomeone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFThankedSomeone_descriptor_, &CMsgTFThankedSomeone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFFreeTrialConvertedToPremium_descriptor_, &CMsgTFFreeTrialConvertedToPremium::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSaxxyAwarded_descriptor_, &CMsgSaxxyAwarded::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgReplayUploadedToYouTube_descriptor_, &CMsgReplayUploadedToYouTube::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgReplaySubmitContestEntry_descriptor_, &CMsgReplaySubmitContestEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgReplaySubmitContestEntryResponse_descriptor_, &CMsgReplaySubmitContestEntryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CReplayCachedContestData_descriptor_, &CReplayCachedContestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_AddToCoaches_descriptor_, &CMsgTFCoaching_AddToCoaches::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_RemoveFromCoaches_descriptor_, &CMsgTFCoaching_RemoveFromCoaches::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_FindCoach_descriptor_, &CMsgTFCoaching_FindCoach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_FindCoachResponse_descriptor_, &CMsgTFCoaching_FindCoachResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_AskCoach_descriptor_, &CMsgTFCoaching_AskCoach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_AskCoachResponse_descriptor_, &CMsgTFCoaching_AskCoachResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_CoachJoinGame_descriptor_, &CMsgTFCoaching_CoachJoinGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_CoachJoining_descriptor_, &CMsgTFCoaching_CoachJoining::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_CoachJoined_descriptor_, &CMsgTFCoaching_CoachJoined::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_LikeCurrentCoach_descriptor_, &CMsgTFCoaching_LikeCurrentCoach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFCoaching_RemoveCurrentCoach_descriptor_, &CMsgTFCoaching_RemoveCurrentCoach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFQuickplay_ScoreServers_descriptor_, &CMsgTFQuickplay_ScoreServers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFQuickplay_ScoreServers_ServerInfo_descriptor_, &CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFQuickplay_ScoreServersResponse_descriptor_, &CMsgTFQuickplay_ScoreServersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFQuickplay_ScoreServersResponse_ServerInfo_descriptor_, &CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTFQuickplay_PlayerJoining_descriptor_, &CMsgTFQuickplay_PlayerJoining::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_LevelInfo_descriptor_, &CMsgGC_GameServer_LevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_AuthChallenge_descriptor_, &CMsgGC_GameServer_AuthChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_AuthResult_descriptor_, &CMsgGC_GameServer_AuthResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_AuthChallengeResponse_descriptor_, &CMsgGC_GameServer_AuthChallengeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_CreateIdentity_descriptor_, &CMsgGC_GameServer_CreateIdentity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_CreateIdentityResponse_descriptor_, &CMsgGC_GameServer_CreateIdentityResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_List_descriptor_, &CMsgGC_GameServer_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_ListResponse_descriptor_, &CMsgGC_GameServer_ListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_ListResponse_GameServerIdentity_descriptor_, &CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_ResetIdentity_descriptor_, &CMsgGC_GameServer_ResetIdentity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GameServer_ResetIdentityResponse_descriptor_, &CMsgGC_GameServer_ResetIdentityResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tf_5fgcmessages_2eproto() {
  delete CMsgTFGoldenWrenchBroadcast::default_instance_;
  delete CMsgTFGoldenWrenchBroadcast_reflection_;
  delete CMsgTFSaxxyBroadcast::default_instance_;
  delete CMsgTFSaxxyBroadcast_reflection_;
  delete CMsgTFIncrementKillCountResponse::default_instance_;
  delete CMsgTFIncrementKillCountResponse_reflection_;
  delete CSOTFDuelSummary::default_instance_;
  delete CSOTFDuelSummary_reflection_;
  delete CSOTFMapContribution::default_instance_;
  delete CSOTFMapContribution_reflection_;
  delete CMsgTFVoteKickBanPlayer::default_instance_;
  delete CMsgTFVoteKickBanPlayer_reflection_;
  delete CMsgTFVoteKickBanPlayerResult::default_instance_;
  delete CMsgTFVoteKickBanPlayerResult_reflection_;
  delete CMsgTFKickPlayer::default_instance_;
  delete CMsgTFKickPlayer_reflection_;
  delete CMsgTFStartedTraining::default_instance_;
  delete CMsgTFStartedTraining_reflection_;
  delete CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance_;
  delete CMsgTFFreeTrialChooseMostHelpfulFriend_reflection_;
  delete CMsgTFRequestTF2Friends::default_instance_;
  delete CMsgTFRequestTF2Friends_reflection_;
  delete CMsgTFRequestTF2FriendsResponse::default_instance_;
  delete CMsgTFRequestTF2FriendsResponse_reflection_;
  delete CSOTFPlayerInfo::default_instance_;
  delete CSOTFPlayerInfo_reflection_;
  delete CMsgTFThankedBySomeone::default_instance_;
  delete CMsgTFThankedBySomeone_reflection_;
  delete CMsgTFThankedSomeone::default_instance_;
  delete CMsgTFThankedSomeone_reflection_;
  delete CMsgTFFreeTrialConvertedToPremium::default_instance_;
  delete CMsgTFFreeTrialConvertedToPremium_reflection_;
  delete CMsgSaxxyAwarded::default_instance_;
  delete CMsgSaxxyAwarded_reflection_;
  delete CMsgReplayUploadedToYouTube::default_instance_;
  delete CMsgReplayUploadedToYouTube_reflection_;
  delete CMsgReplaySubmitContestEntry::default_instance_;
  delete CMsgReplaySubmitContestEntry_reflection_;
  delete CMsgReplaySubmitContestEntryResponse::default_instance_;
  delete CMsgReplaySubmitContestEntryResponse_reflection_;
  delete CReplayCachedContestData::default_instance_;
  delete CReplayCachedContestData_reflection_;
  delete CMsgTFCoaching_AddToCoaches::default_instance_;
  delete CMsgTFCoaching_AddToCoaches_reflection_;
  delete CMsgTFCoaching_RemoveFromCoaches::default_instance_;
  delete CMsgTFCoaching_RemoveFromCoaches_reflection_;
  delete CMsgTFCoaching_FindCoach::default_instance_;
  delete CMsgTFCoaching_FindCoach_reflection_;
  delete CMsgTFCoaching_FindCoachResponse::default_instance_;
  delete CMsgTFCoaching_FindCoachResponse_reflection_;
  delete CMsgTFCoaching_AskCoach::default_instance_;
  delete CMsgTFCoaching_AskCoach_reflection_;
  delete CMsgTFCoaching_AskCoachResponse::default_instance_;
  delete CMsgTFCoaching_AskCoachResponse_reflection_;
  delete CMsgTFCoaching_CoachJoinGame::default_instance_;
  delete CMsgTFCoaching_CoachJoinGame_reflection_;
  delete CMsgTFCoaching_CoachJoining::default_instance_;
  delete CMsgTFCoaching_CoachJoining_reflection_;
  delete CMsgTFCoaching_CoachJoined::default_instance_;
  delete CMsgTFCoaching_CoachJoined_reflection_;
  delete CMsgTFCoaching_LikeCurrentCoach::default_instance_;
  delete CMsgTFCoaching_LikeCurrentCoach_reflection_;
  delete CMsgTFCoaching_RemoveCurrentCoach::default_instance_;
  delete CMsgTFCoaching_RemoveCurrentCoach_reflection_;
  delete CMsgTFQuickplay_ScoreServers::default_instance_;
  delete CMsgTFQuickplay_ScoreServers_reflection_;
  delete CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance_;
  delete CMsgTFQuickplay_ScoreServers_ServerInfo_reflection_;
  delete CMsgTFQuickplay_ScoreServersResponse::default_instance_;
  delete CMsgTFQuickplay_ScoreServersResponse_reflection_;
  delete CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance_;
  delete CMsgTFQuickplay_ScoreServersResponse_ServerInfo_reflection_;
  delete CMsgTFQuickplay_PlayerJoining::default_instance_;
  delete CMsgTFQuickplay_PlayerJoining_reflection_;
  delete CMsgGC_GameServer_LevelInfo::default_instance_;
  delete CMsgGC_GameServer_LevelInfo_reflection_;
  delete CMsgGC_GameServer_AuthChallenge::default_instance_;
  delete CMsgGC_GameServer_AuthChallenge_reflection_;
  delete CMsgGC_GameServer_AuthResult::default_instance_;
  delete CMsgGC_GameServer_AuthResult_reflection_;
  delete CMsgGC_GameServer_AuthChallengeResponse::default_instance_;
  delete CMsgGC_GameServer_AuthChallengeResponse_reflection_;
  delete CMsgGC_GameServer_CreateIdentity::default_instance_;
  delete CMsgGC_GameServer_CreateIdentity_reflection_;
  delete CMsgGC_GameServer_CreateIdentityResponse::default_instance_;
  delete CMsgGC_GameServer_CreateIdentityResponse_reflection_;
  delete CMsgGC_GameServer_List::default_instance_;
  delete CMsgGC_GameServer_List_reflection_;
  delete CMsgGC_GameServer_ListResponse::default_instance_;
  delete CMsgGC_GameServer_ListResponse_reflection_;
  delete CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance_;
  delete CMsgGC_GameServer_ListResponse_GameServerIdentity_reflection_;
  delete CMsgGC_GameServer_ResetIdentity::default_instance_;
  delete CMsgGC_GameServer_ResetIdentity_reflection_;
  delete CMsgGC_GameServer_ResetIdentityResponse::default_instance_;
  delete CMsgGC_GameServer_ResetIdentityResponse_reflection_;
}

void protobuf_AddDesc_tf_5fgcmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023tf_gcmessages.proto\032\023steammessages.pro"
    "to\"X\n\033CMsgTFGoldenWrenchBroadcast\022\025\n\rwre"
    "nch_number\030\001 \001(\005\022\017\n\007deleted\030\002 \001(\010\022\021\n\tuse"
    "r_name\030\003 \001(\t\"B\n\024CMsgTFSaxxyBroadcast\022\027\n\017"
    "category_number\030\001 \001(\005\022\021\n\tuser_name\030\002 \001(\t"
    "\"t\n CMsgTFIncrementKillCountResponse\022\031\n\021"
    "killer_account_id\030\001 \001(\r\022\021\n\tnum_kills\030\002 \001"
    "(\r\022\020\n\010item_def\030\003 \001(\r\022\020\n\010new_rank\030\004 \001(\r\"\243"
    "\001\n\020CSOTFDuelSummary\022\022\n\naccount_id\030\001 \001(\r\022"
    "\021\n\tduel_wins\030\002 \001(\r\022\023\n\013duel_losses\030\003 \001(\r\022"
    "\034\n\024last_duel_account_id\030\004 \001(\r\022\033\n\023last_du"
    "el_timestamp\030\005 \001(\r\022\030\n\020last_duel_status\030\006"
    " \001(\r\"Y\n\024CSOTFMapContribution\022\022\n\naccount_"
    "id\030\001 \001(\r\022\021\n\tdef_index\030\002 \001(\r\022\032\n\022contribut"
    "ion_level\030\003 \001(\r\"J\n\027CMsgTFVoteKickBanPlay"
    "er\022\032\n\022account_id_subject\030\001 \001(\r\022\023\n\013kick_r"
    "eason\030\002 \001(\r\"\320\001\n\035CMsgTFVoteKickBanPlayerR"
    "esult\022\034\n\024account_id_initiator\030\001 \001(\r\022\032\n\022a"
    "ccount_id_subject\030\002 \001(\r\022\023\n\013kick_reason\030\003"
    " \001(\r\022\027\n\017kick_successful\030\004 \001(\010\022\025\n\rnum_yes"
    "_votes\030\005 \001(\r\022\024\n\014num_no_votes\030\006 \001(\r\022\032\n\022nu"
    "m_possible_votes\030\007 \001(\r\"B\n\020CMsgTFKickPlay"
    "er\022\031\n\021account_id_player\030\001 \001(\r\022\023\n\013kick_re"
    "ason\030\002 \001(\r\"\027\n\025CMsgTFStartedTraining\"C\n&C"
    "MsgTFFreeTrialChooseMostHelpfulFriend\022\031\n"
    "\021account_id_friend\030\001 \001(\r\".\n\027CMsgTFReques"
    "tTF2Friends\022\023\n\013account_ids\030\001 \003(\r\"6\n\037CMsg"
    "TFRequestTF2FriendsResponse\022\023\n\013account_i"
    "ds\030\001 \003(\r\"M\n\017CSOTFPlayerInfo\022\034\n\024num_new_u"
    "sers_helped\030\001 \001(\r\022\034\n\rtrial_account\030\002 \001(\010"
    ":\005false\"2\n\026CMsgTFThankedBySomeone\022\030\n\020tha"
    "nker_steam_id\030\001 \001(\004\"\026\n\024CMsgTFThankedSome"
    "one\"#\n!CMsgTFFreeTrialConvertedToPremium"
    "\":\n\020CMsgSaxxyAwarded\022\020\n\010category\030\001 \001(\r\022\024"
    "\n\014winner_names\030\002 \003(\t\"d\n\033CMsgReplayUpload"
    "edToYouTube\022\023\n\013youtube_url\030\001 \001(\t\022\034\n\024yout"
    "ube_account_name\030\002 \001(\t\022\022\n\nsession_id\030\003 \001"
    "(\004\"E\n\034CMsgReplaySubmitContestEntry\022\023\n\013yo"
    "utube_url\030\001 \001(\t\022\020\n\010category\030\002 \001(\r\"7\n$CMs"
    "gReplaySubmitContestEntryResponse\022\017\n\007suc"
    "cess\030\001 \001(\010\"~\n\030CReplayCachedContestData\022\021"
    "\n\ttimestamp\030\001 \001(\007\022\032\n\022num_votes_last_day\030"
    "\002 \001(\r\022\027\n\017video_entry_ids\030\003 \003(\r\022\032\n\022num_fl"
    "ags_last_day\030\004 \001(\r\"\035\n\033CMsgTFCoaching_Add"
    "ToCoaches\"\"\n CMsgTFCoaching_RemoveFromCo"
    "aches\">\n\030CMsgTFCoaching_FindCoach\022\"\n\032acc"
    "ount_id_friend_as_coach\030\001 \001(\r\"^\n CMsgTFC"
    "oaching_FindCoachResponse\022\023\n\013found_coach"
    "\030\001 \001(\010\022\021\n\tnum_likes\030\002 \001(\r\022\022\n\ncoach_name\030"
    "\003 \001(\t\"P\n\027CMsgTFCoaching_AskCoach\022\032\n\022acco"
    "unt_id_student\030\001 \001(\r\022\031\n\021student_is_frien"
    "d\030\002 \001(\010\"E\n\037CMsgTFCoaching_AskCoachRespon"
    "se\022\"\n\032accept_coaching_assignment\030\001 \001(\010\"z"
    "\n\034CMsgTFCoaching_CoachJoinGame\022\021\n\tjoin_g"
    "ame\030\001 \001(\010\022\026\n\016server_address\030\002 \001(\r\022\023\n\013ser"
    "ver_port\030\003 \001(\r\022\032\n\022account_id_student\030\004 \001"
    "(\r\"S\n\033CMsgTFCoaching_CoachJoining\022\030\n\020acc"
    "ount_id_coach\030\001 \001(\r\022\032\n\022account_id_studen"
    "t\030\002 \001(\r\"6\n\032CMsgTFCoaching_CoachJoined\022\030\n"
    "\020account_id_coach\030\001 \001(\r\"5\n\037CMsgTFCoachin"
    "g_LikeCurrentCoach\022\022\n\nlike_coach\030\001 \001(\010\"="
    "\n!CMsgTFCoaching_RemoveCurrentCoach\022\030\n\020a"
    "ccount_id_coach\030\001 \001(\r\"\341\001\n\034CMsgTFQuickpla"
    "y_ScoreServers\0229\n\007servers\030\001 \003(\0132(.CMsgTF"
    "Quickplay_ScoreServers.ServerInfo\032\205\001\n\nSe"
    "rverInfo\022\026\n\016server_address\030\001 \001(\r\022\023\n\013serv"
    "er_port\030\002 \001(\r\022\021\n\tnum_users\030\003 \001(\r\022\020\n\010stea"
    "m_id\030\004 \001(\004\022\021\n\tmax_users\030\005 \001(\r\022\022\n\nuser_sc"
    "ore\030\006 \001(\002\"\313\001\n$CMsgTFQuickplay_ScoreServe"
    "rsResponse\022A\n\007servers\030\001 \003(\01320.CMsgTFQuic"
    "kplay_ScoreServersResponse.ServerInfo\032`\n"
    "\nServerInfo\022\026\n\016server_address\030\001 \001(\r\022\023\n\013s"
    "erver_port\030\002 \001(\r\022\023\n\013total_score\030\003 \001(\002\022\020\n"
    "\010steam_id\030\004 \001(\004\"3\n\035CMsgTFQuickplay_Playe"
    "rJoining\022\022\n\naccount_id\030\001 \001(\r\"G\n\033CMsgGC_G"
    "ameServer_LevelInfo\022\024\n\014level_loaded\030\001 \001("
    "\010\022\022\n\nlevel_name\030\002 \001(\t\";\n\037CMsgGC_GameServ"
    "er_AuthChallenge\022\030\n\020challenge_string\030\001 \001"
    "(\t\"\220\001\n\034CMsgGC_GameServer_AuthResult\022\025\n\ra"
    "uthenticated\030\001 \001(\010\022\034\n\024game_server_standi"
    "ng\030\002 \001(\005\022\"\n\032game_server_standing_trend\030\003"
    " \001(\005\022\027\n\017is_valve_server\030\004 \001(\010\"j\n\'CMsgGC_"
    "GameServer_AuthChallengeResponse\022\036\n\026game"
    "_server_account_id\030\001 \001(\r\022\037\n\027hashed_chall"
    "enge_string\030\002 \001(\014\"6\n CMsgGC_GameServer_C"
    "reateIdentity\022\022\n\naccount_id\030\001 \001(\r\"\332\002\n(CM"
    "sgGC_GameServer_CreateIdentityResponse\022\027"
    "\n\017account_created\030\001 \001(\010\022\036\n\026game_server_a"
    "ccount_id\030\002 \001(\r\022\"\n\032game_server_identity_"
    "token\030\003 \001(\t\022Y\n\006status\030\004 \001(\01621.CMsgGC_Gam"
    "eServer_CreateIdentityResponse.EStatus:\026"
    "kStatus_GenericFailure\"v\n\007EStatus\022\032\n\026kSt"
    "atus_GenericFailure\020\000\022\034\n\017kStatus_TooMany"
    "\020\377\377\377\377\377\377\377\377\377\001\022\034\n\017kStatus_NoPrivs\020\376\377\377\377\377\377\377\377\377"
    "\001\022\023\n\017kStatus_Created\020\001\",\n\026CMsgGC_GameSer"
    "ver_List\022\022\n\naccount_id\030\001 \001(\r\"\215\002\n\036CMsgGC_"
    "GameServer_ListResponse\022N\n\022owned_game_se"
    "rvers\030\001 \003(\01322.CMsgGC_GameServer_ListResp"
    "onse.GameServerIdentity\032\232\001\n\022GameServerId"
    "entity\022\036\n\026game_server_account_id\030\001 \001(\r\022\""
    "\n\032game_server_identity_token\030\002 \001(\t\022\034\n\024ga"
    "me_server_standing\030\003 \001(\005\022\"\n\032game_server_"
    "standing_trend\030\004 \001(\005\"A\n\037CMsgGC_GameServe"
    "r_ResetIdentity\022\036\n\026game_server_account_i"
    "d\030\001 \001(\r\"\227\001\n\'CMsgGC_GameServer_ResetIdent"
    "ityResponse\022(\n game_server_identity_toke"
    "n_reset\030\001 \001(\010\022\036\n\026game_server_account_id\030"
    "\002 \001(\r\022\"\n\032game_server_identity_token\030\003 \001("
    "\t", 4321);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tf_gcmessages.proto", &protobuf_RegisterTypes);
  CMsgTFGoldenWrenchBroadcast::default_instance_ = new CMsgTFGoldenWrenchBroadcast();
  CMsgTFSaxxyBroadcast::default_instance_ = new CMsgTFSaxxyBroadcast();
  CMsgTFIncrementKillCountResponse::default_instance_ = new CMsgTFIncrementKillCountResponse();
  CSOTFDuelSummary::default_instance_ = new CSOTFDuelSummary();
  CSOTFMapContribution::default_instance_ = new CSOTFMapContribution();
  CMsgTFVoteKickBanPlayer::default_instance_ = new CMsgTFVoteKickBanPlayer();
  CMsgTFVoteKickBanPlayerResult::default_instance_ = new CMsgTFVoteKickBanPlayerResult();
  CMsgTFKickPlayer::default_instance_ = new CMsgTFKickPlayer();
  CMsgTFStartedTraining::default_instance_ = new CMsgTFStartedTraining();
  CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance_ = new CMsgTFFreeTrialChooseMostHelpfulFriend();
  CMsgTFRequestTF2Friends::default_instance_ = new CMsgTFRequestTF2Friends();
  CMsgTFRequestTF2FriendsResponse::default_instance_ = new CMsgTFRequestTF2FriendsResponse();
  CSOTFPlayerInfo::default_instance_ = new CSOTFPlayerInfo();
  CMsgTFThankedBySomeone::default_instance_ = new CMsgTFThankedBySomeone();
  CMsgTFThankedSomeone::default_instance_ = new CMsgTFThankedSomeone();
  CMsgTFFreeTrialConvertedToPremium::default_instance_ = new CMsgTFFreeTrialConvertedToPremium();
  CMsgSaxxyAwarded::default_instance_ = new CMsgSaxxyAwarded();
  CMsgReplayUploadedToYouTube::default_instance_ = new CMsgReplayUploadedToYouTube();
  CMsgReplaySubmitContestEntry::default_instance_ = new CMsgReplaySubmitContestEntry();
  CMsgReplaySubmitContestEntryResponse::default_instance_ = new CMsgReplaySubmitContestEntryResponse();
  CReplayCachedContestData::default_instance_ = new CReplayCachedContestData();
  CMsgTFCoaching_AddToCoaches::default_instance_ = new CMsgTFCoaching_AddToCoaches();
  CMsgTFCoaching_RemoveFromCoaches::default_instance_ = new CMsgTFCoaching_RemoveFromCoaches();
  CMsgTFCoaching_FindCoach::default_instance_ = new CMsgTFCoaching_FindCoach();
  CMsgTFCoaching_FindCoachResponse::default_instance_ = new CMsgTFCoaching_FindCoachResponse();
  CMsgTFCoaching_AskCoach::default_instance_ = new CMsgTFCoaching_AskCoach();
  CMsgTFCoaching_AskCoachResponse::default_instance_ = new CMsgTFCoaching_AskCoachResponse();
  CMsgTFCoaching_CoachJoinGame::default_instance_ = new CMsgTFCoaching_CoachJoinGame();
  CMsgTFCoaching_CoachJoining::default_instance_ = new CMsgTFCoaching_CoachJoining();
  CMsgTFCoaching_CoachJoined::default_instance_ = new CMsgTFCoaching_CoachJoined();
  CMsgTFCoaching_LikeCurrentCoach::default_instance_ = new CMsgTFCoaching_LikeCurrentCoach();
  CMsgTFCoaching_RemoveCurrentCoach::default_instance_ = new CMsgTFCoaching_RemoveCurrentCoach();
  CMsgTFQuickplay_ScoreServers::default_instance_ = new CMsgTFQuickplay_ScoreServers();
  CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance_ = new CMsgTFQuickplay_ScoreServers_ServerInfo();
  CMsgTFQuickplay_ScoreServersResponse::default_instance_ = new CMsgTFQuickplay_ScoreServersResponse();
  CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance_ = new CMsgTFQuickplay_ScoreServersResponse_ServerInfo();
  CMsgTFQuickplay_PlayerJoining::default_instance_ = new CMsgTFQuickplay_PlayerJoining();
  CMsgGC_GameServer_LevelInfo::default_instance_ = new CMsgGC_GameServer_LevelInfo();
  CMsgGC_GameServer_AuthChallenge::default_instance_ = new CMsgGC_GameServer_AuthChallenge();
  CMsgGC_GameServer_AuthResult::default_instance_ = new CMsgGC_GameServer_AuthResult();
  CMsgGC_GameServer_AuthChallengeResponse::default_instance_ = new CMsgGC_GameServer_AuthChallengeResponse();
  CMsgGC_GameServer_CreateIdentity::default_instance_ = new CMsgGC_GameServer_CreateIdentity();
  CMsgGC_GameServer_CreateIdentityResponse::default_instance_ = new CMsgGC_GameServer_CreateIdentityResponse();
  CMsgGC_GameServer_List::default_instance_ = new CMsgGC_GameServer_List();
  CMsgGC_GameServer_ListResponse::default_instance_ = new CMsgGC_GameServer_ListResponse();
  CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance_ = new CMsgGC_GameServer_ListResponse_GameServerIdentity();
  CMsgGC_GameServer_ResetIdentity::default_instance_ = new CMsgGC_GameServer_ResetIdentity();
  CMsgGC_GameServer_ResetIdentityResponse::default_instance_ = new CMsgGC_GameServer_ResetIdentityResponse();
  CMsgTFGoldenWrenchBroadcast::default_instance_->InitAsDefaultInstance();
  CMsgTFSaxxyBroadcast::default_instance_->InitAsDefaultInstance();
  CMsgTFIncrementKillCountResponse::default_instance_->InitAsDefaultInstance();
  CSOTFDuelSummary::default_instance_->InitAsDefaultInstance();
  CSOTFMapContribution::default_instance_->InitAsDefaultInstance();
  CMsgTFVoteKickBanPlayer::default_instance_->InitAsDefaultInstance();
  CMsgTFVoteKickBanPlayerResult::default_instance_->InitAsDefaultInstance();
  CMsgTFKickPlayer::default_instance_->InitAsDefaultInstance();
  CMsgTFStartedTraining::default_instance_->InitAsDefaultInstance();
  CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance_->InitAsDefaultInstance();
  CMsgTFRequestTF2Friends::default_instance_->InitAsDefaultInstance();
  CMsgTFRequestTF2FriendsResponse::default_instance_->InitAsDefaultInstance();
  CSOTFPlayerInfo::default_instance_->InitAsDefaultInstance();
  CMsgTFThankedBySomeone::default_instance_->InitAsDefaultInstance();
  CMsgTFThankedSomeone::default_instance_->InitAsDefaultInstance();
  CMsgTFFreeTrialConvertedToPremium::default_instance_->InitAsDefaultInstance();
  CMsgSaxxyAwarded::default_instance_->InitAsDefaultInstance();
  CMsgReplayUploadedToYouTube::default_instance_->InitAsDefaultInstance();
  CMsgReplaySubmitContestEntry::default_instance_->InitAsDefaultInstance();
  CMsgReplaySubmitContestEntryResponse::default_instance_->InitAsDefaultInstance();
  CReplayCachedContestData::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_AddToCoaches::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_RemoveFromCoaches::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_FindCoach::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_FindCoachResponse::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_AskCoach::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_AskCoachResponse::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_CoachJoinGame::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_CoachJoining::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_CoachJoined::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_LikeCurrentCoach::default_instance_->InitAsDefaultInstance();
  CMsgTFCoaching_RemoveCurrentCoach::default_instance_->InitAsDefaultInstance();
  CMsgTFQuickplay_ScoreServers::default_instance_->InitAsDefaultInstance();
  CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance_->InitAsDefaultInstance();
  CMsgTFQuickplay_ScoreServersResponse::default_instance_->InitAsDefaultInstance();
  CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance_->InitAsDefaultInstance();
  CMsgTFQuickplay_PlayerJoining::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_LevelInfo::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_AuthChallenge::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_AuthResult::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_AuthChallengeResponse::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_CreateIdentity::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_CreateIdentityResponse::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_List::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_ListResponse::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_ResetIdentity::default_instance_->InitAsDefaultInstance();
  CMsgGC_GameServer_ResetIdentityResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tf_5fgcmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tf_5fgcmessages_2eproto {
  StaticDescriptorInitializer_tf_5fgcmessages_2eproto() {
    protobuf_AddDesc_tf_5fgcmessages_2eproto();
  }
} static_descriptor_initializer_tf_5fgcmessages_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFGoldenWrenchBroadcast::kWrenchNumberFieldNumber;
const int CMsgTFGoldenWrenchBroadcast::kDeletedFieldNumber;
const int CMsgTFGoldenWrenchBroadcast::kUserNameFieldNumber;
#endif  // !_MSC_VER

CMsgTFGoldenWrenchBroadcast::CMsgTFGoldenWrenchBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFGoldenWrenchBroadcast::InitAsDefaultInstance() {
}

CMsgTFGoldenWrenchBroadcast::CMsgTFGoldenWrenchBroadcast(const CMsgTFGoldenWrenchBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFGoldenWrenchBroadcast::SharedCtor() {
  _cached_size_ = 0;
  wrench_number_ = 0;
  deleted_ = false;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFGoldenWrenchBroadcast::~CMsgTFGoldenWrenchBroadcast() {
  SharedDtor();
}

void CMsgTFGoldenWrenchBroadcast::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgTFGoldenWrenchBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFGoldenWrenchBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFGoldenWrenchBroadcast_descriptor_;
}

const CMsgTFGoldenWrenchBroadcast& CMsgTFGoldenWrenchBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFGoldenWrenchBroadcast* CMsgTFGoldenWrenchBroadcast::default_instance_ = NULL;

CMsgTFGoldenWrenchBroadcast* CMsgTFGoldenWrenchBroadcast::New() const {
  return new CMsgTFGoldenWrenchBroadcast;
}

void CMsgTFGoldenWrenchBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wrench_number_ = 0;
    deleted_ = false;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFGoldenWrenchBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wrench_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrench_number_)));
          set_has_wrench_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_deleted;
        break;
      }
      
      // optional bool deleted = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
          set_has_deleted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }
      
      // optional std::string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFGoldenWrenchBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wrench_number = 1;
  if (has_wrench_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wrench_number(), output);
  }
  
  // optional bool deleted = 2;
  if (has_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->deleted(), output);
  }
  
  // optional std::string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFGoldenWrenchBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wrench_number = 1;
  if (has_wrench_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wrench_number(), target);
  }
  
  // optional bool deleted = 2;
  if (has_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->deleted(), target);
  }
  
  // optional std::string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFGoldenWrenchBroadcast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wrench_number = 1;
    if (has_wrench_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wrench_number());
    }
    
    // optional bool deleted = 2;
    if (has_deleted()) {
      total_size += 1 + 1;
    }
    
    // optional std::string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFGoldenWrenchBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFGoldenWrenchBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFGoldenWrenchBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFGoldenWrenchBroadcast::MergeFrom(const CMsgTFGoldenWrenchBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wrench_number()) {
      set_wrench_number(from.wrench_number());
    }
    if (from.has_deleted()) {
      set_deleted(from.deleted());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFGoldenWrenchBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFGoldenWrenchBroadcast::CopyFrom(const CMsgTFGoldenWrenchBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFGoldenWrenchBroadcast::IsInitialized() const {
  
  return true;
}

void CMsgTFGoldenWrenchBroadcast::Swap(CMsgTFGoldenWrenchBroadcast* other) {
  if (other != this) {
    std::swap(wrench_number_, other->wrench_number_);
    std::swap(deleted_, other->deleted_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFGoldenWrenchBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFGoldenWrenchBroadcast_descriptor_;
  metadata.reflection = CMsgTFGoldenWrenchBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFSaxxyBroadcast::kCategoryNumberFieldNumber;
const int CMsgTFSaxxyBroadcast::kUserNameFieldNumber;
#endif  // !_MSC_VER

CMsgTFSaxxyBroadcast::CMsgTFSaxxyBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFSaxxyBroadcast::InitAsDefaultInstance() {
}

CMsgTFSaxxyBroadcast::CMsgTFSaxxyBroadcast(const CMsgTFSaxxyBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFSaxxyBroadcast::SharedCtor() {
  _cached_size_ = 0;
  category_number_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFSaxxyBroadcast::~CMsgTFSaxxyBroadcast() {
  SharedDtor();
}

void CMsgTFSaxxyBroadcast::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgTFSaxxyBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFSaxxyBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFSaxxyBroadcast_descriptor_;
}

const CMsgTFSaxxyBroadcast& CMsgTFSaxxyBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFSaxxyBroadcast* CMsgTFSaxxyBroadcast::default_instance_ = NULL;

CMsgTFSaxxyBroadcast* CMsgTFSaxxyBroadcast::New() const {
  return new CMsgTFSaxxyBroadcast;
}

void CMsgTFSaxxyBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    category_number_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFSaxxyBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 category_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_number_)));
          set_has_category_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }
      
      // optional std::string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFSaxxyBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 category_number = 1;
  if (has_category_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category_number(), output);
  }
  
  // optional std::string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFSaxxyBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 category_number = 1;
  if (has_category_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->category_number(), target);
  }
  
  // optional std::string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFSaxxyBroadcast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 category_number = 1;
    if (has_category_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_number());
    }
    
    // optional std::string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFSaxxyBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFSaxxyBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFSaxxyBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFSaxxyBroadcast::MergeFrom(const CMsgTFSaxxyBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_category_number()) {
      set_category_number(from.category_number());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFSaxxyBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFSaxxyBroadcast::CopyFrom(const CMsgTFSaxxyBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFSaxxyBroadcast::IsInitialized() const {
  
  return true;
}

void CMsgTFSaxxyBroadcast::Swap(CMsgTFSaxxyBroadcast* other) {
  if (other != this) {
    std::swap(category_number_, other->category_number_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFSaxxyBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFSaxxyBroadcast_descriptor_;
  metadata.reflection = CMsgTFSaxxyBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFIncrementKillCountResponse::kKillerAccountIdFieldNumber;
const int CMsgTFIncrementKillCountResponse::kNumKillsFieldNumber;
const int CMsgTFIncrementKillCountResponse::kItemDefFieldNumber;
const int CMsgTFIncrementKillCountResponse::kNewRankFieldNumber;
#endif  // !_MSC_VER

CMsgTFIncrementKillCountResponse::CMsgTFIncrementKillCountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFIncrementKillCountResponse::InitAsDefaultInstance() {
}

CMsgTFIncrementKillCountResponse::CMsgTFIncrementKillCountResponse(const CMsgTFIncrementKillCountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFIncrementKillCountResponse::SharedCtor() {
  _cached_size_ = 0;
  killer_account_id_ = 0u;
  num_kills_ = 0u;
  item_def_ = 0u;
  new_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFIncrementKillCountResponse::~CMsgTFIncrementKillCountResponse() {
  SharedDtor();
}

void CMsgTFIncrementKillCountResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFIncrementKillCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFIncrementKillCountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFIncrementKillCountResponse_descriptor_;
}

const CMsgTFIncrementKillCountResponse& CMsgTFIncrementKillCountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFIncrementKillCountResponse* CMsgTFIncrementKillCountResponse::default_instance_ = NULL;

CMsgTFIncrementKillCountResponse* CMsgTFIncrementKillCountResponse::New() const {
  return new CMsgTFIncrementKillCountResponse;
}

void CMsgTFIncrementKillCountResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killer_account_id_ = 0u;
    num_kills_ = 0u;
    item_def_ = 0u;
    new_rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFIncrementKillCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 killer_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_account_id_)));
          set_has_killer_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_kills;
        break;
      }
      
      // optional uint32 num_kills = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_kills_)));
          set_has_num_kills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_def;
        break;
      }
      
      // optional uint32 item_def = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
          set_has_item_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_new_rank;
        break;
      }
      
      // optional uint32 new_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_rank_)));
          set_has_new_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFIncrementKillCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 killer_account_id = 1;
  if (has_killer_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->killer_account_id(), output);
  }
  
  // optional uint32 num_kills = 2;
  if (has_num_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_kills(), output);
  }
  
  // optional uint32 item_def = 3;
  if (has_item_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_def(), output);
  }
  
  // optional uint32 new_rank = 4;
  if (has_new_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->new_rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFIncrementKillCountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 killer_account_id = 1;
  if (has_killer_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->killer_account_id(), target);
  }
  
  // optional uint32 num_kills = 2;
  if (has_num_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_kills(), target);
  }
  
  // optional uint32 item_def = 3;
  if (has_item_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_def(), target);
  }
  
  // optional uint32 new_rank = 4;
  if (has_new_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->new_rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFIncrementKillCountResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 killer_account_id = 1;
    if (has_killer_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_account_id());
    }
    
    // optional uint32 num_kills = 2;
    if (has_num_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_kills());
    }
    
    // optional uint32 item_def = 3;
    if (has_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }
    
    // optional uint32 new_rank = 4;
    if (has_new_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_rank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFIncrementKillCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFIncrementKillCountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFIncrementKillCountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFIncrementKillCountResponse::MergeFrom(const CMsgTFIncrementKillCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killer_account_id()) {
      set_killer_account_id(from.killer_account_id());
    }
    if (from.has_num_kills()) {
      set_num_kills(from.num_kills());
    }
    if (from.has_item_def()) {
      set_item_def(from.item_def());
    }
    if (from.has_new_rank()) {
      set_new_rank(from.new_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFIncrementKillCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFIncrementKillCountResponse::CopyFrom(const CMsgTFIncrementKillCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFIncrementKillCountResponse::IsInitialized() const {
  
  return true;
}

void CMsgTFIncrementKillCountResponse::Swap(CMsgTFIncrementKillCountResponse* other) {
  if (other != this) {
    std::swap(killer_account_id_, other->killer_account_id_);
    std::swap(num_kills_, other->num_kills_);
    std::swap(item_def_, other->item_def_);
    std::swap(new_rank_, other->new_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFIncrementKillCountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFIncrementKillCountResponse_descriptor_;
  metadata.reflection = CMsgTFIncrementKillCountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOTFDuelSummary::kAccountIdFieldNumber;
const int CSOTFDuelSummary::kDuelWinsFieldNumber;
const int CSOTFDuelSummary::kDuelLossesFieldNumber;
const int CSOTFDuelSummary::kLastDuelAccountIdFieldNumber;
const int CSOTFDuelSummary::kLastDuelTimestampFieldNumber;
const int CSOTFDuelSummary::kLastDuelStatusFieldNumber;
#endif  // !_MSC_VER

CSOTFDuelSummary::CSOTFDuelSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFDuelSummary::InitAsDefaultInstance() {
}

CSOTFDuelSummary::CSOTFDuelSummary(const CSOTFDuelSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFDuelSummary::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  duel_wins_ = 0u;
  duel_losses_ = 0u;
  last_duel_account_id_ = 0u;
  last_duel_timestamp_ = 0u;
  last_duel_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFDuelSummary::~CSOTFDuelSummary() {
  SharedDtor();
}

void CSOTFDuelSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOTFDuelSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFDuelSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFDuelSummary_descriptor_;
}

const CSOTFDuelSummary& CSOTFDuelSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFDuelSummary* CSOTFDuelSummary::default_instance_ = NULL;

CSOTFDuelSummary* CSOTFDuelSummary::New() const {
  return new CSOTFDuelSummary;
}

void CSOTFDuelSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    duel_wins_ = 0u;
    duel_losses_ = 0u;
    last_duel_account_id_ = 0u;
    last_duel_timestamp_ = 0u;
    last_duel_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFDuelSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duel_wins;
        break;
      }
      
      // optional uint32 duel_wins = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duel_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duel_wins_)));
          set_has_duel_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duel_losses;
        break;
      }
      
      // optional uint32 duel_losses = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duel_losses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duel_losses_)));
          set_has_duel_losses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_duel_account_id;
        break;
      }
      
      // optional uint32 last_duel_account_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_duel_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_duel_account_id_)));
          set_has_last_duel_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_duel_timestamp;
        break;
      }
      
      // optional uint32 last_duel_timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_duel_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_duel_timestamp_)));
          set_has_last_duel_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_duel_status;
        break;
      }
      
      // optional uint32 last_duel_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_duel_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_duel_status_)));
          set_has_last_duel_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFDuelSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 duel_wins = 2;
  if (has_duel_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duel_wins(), output);
  }
  
  // optional uint32 duel_losses = 3;
  if (has_duel_losses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duel_losses(), output);
  }
  
  // optional uint32 last_duel_account_id = 4;
  if (has_last_duel_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_duel_account_id(), output);
  }
  
  // optional uint32 last_duel_timestamp = 5;
  if (has_last_duel_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_duel_timestamp(), output);
  }
  
  // optional uint32 last_duel_status = 6;
  if (has_last_duel_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_duel_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFDuelSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 duel_wins = 2;
  if (has_duel_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duel_wins(), target);
  }
  
  // optional uint32 duel_losses = 3;
  if (has_duel_losses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duel_losses(), target);
  }
  
  // optional uint32 last_duel_account_id = 4;
  if (has_last_duel_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_duel_account_id(), target);
  }
  
  // optional uint32 last_duel_timestamp = 5;
  if (has_last_duel_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_duel_timestamp(), target);
  }
  
  // optional uint32 last_duel_status = 6;
  if (has_last_duel_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_duel_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFDuelSummary::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 duel_wins = 2;
    if (has_duel_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duel_wins());
    }
    
    // optional uint32 duel_losses = 3;
    if (has_duel_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duel_losses());
    }
    
    // optional uint32 last_duel_account_id = 4;
    if (has_last_duel_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_duel_account_id());
    }
    
    // optional uint32 last_duel_timestamp = 5;
    if (has_last_duel_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_duel_timestamp());
    }
    
    // optional uint32 last_duel_status = 6;
    if (has_last_duel_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_duel_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFDuelSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFDuelSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFDuelSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFDuelSummary::MergeFrom(const CSOTFDuelSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_duel_wins()) {
      set_duel_wins(from.duel_wins());
    }
    if (from.has_duel_losses()) {
      set_duel_losses(from.duel_losses());
    }
    if (from.has_last_duel_account_id()) {
      set_last_duel_account_id(from.last_duel_account_id());
    }
    if (from.has_last_duel_timestamp()) {
      set_last_duel_timestamp(from.last_duel_timestamp());
    }
    if (from.has_last_duel_status()) {
      set_last_duel_status(from.last_duel_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFDuelSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFDuelSummary::CopyFrom(const CSOTFDuelSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFDuelSummary::IsInitialized() const {
  
  return true;
}

void CSOTFDuelSummary::Swap(CSOTFDuelSummary* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(duel_wins_, other->duel_wins_);
    std::swap(duel_losses_, other->duel_losses_);
    std::swap(last_duel_account_id_, other->last_duel_account_id_);
    std::swap(last_duel_timestamp_, other->last_duel_timestamp_);
    std::swap(last_duel_status_, other->last_duel_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFDuelSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFDuelSummary_descriptor_;
  metadata.reflection = CSOTFDuelSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOTFMapContribution::kAccountIdFieldNumber;
const int CSOTFMapContribution::kDefIndexFieldNumber;
const int CSOTFMapContribution::kContributionLevelFieldNumber;
#endif  // !_MSC_VER

CSOTFMapContribution::CSOTFMapContribution()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFMapContribution::InitAsDefaultInstance() {
}

CSOTFMapContribution::CSOTFMapContribution(const CSOTFMapContribution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFMapContribution::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  def_index_ = 0u;
  contribution_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFMapContribution::~CSOTFMapContribution() {
  SharedDtor();
}

void CSOTFMapContribution::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOTFMapContribution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFMapContribution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFMapContribution_descriptor_;
}

const CSOTFMapContribution& CSOTFMapContribution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFMapContribution* CSOTFMapContribution::default_instance_ = NULL;

CSOTFMapContribution* CSOTFMapContribution::New() const {
  return new CSOTFMapContribution;
}

void CSOTFMapContribution::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    def_index_ = 0u;
    contribution_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFMapContribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_def_index;
        break;
      }
      
      // optional uint32 def_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          set_has_def_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contribution_level;
        break;
      }
      
      // optional uint32 contribution_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribution_level_)));
          set_has_contribution_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFMapContribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 def_index = 2;
  if (has_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->def_index(), output);
  }
  
  // optional uint32 contribution_level = 3;
  if (has_contribution_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->contribution_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFMapContribution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 def_index = 2;
  if (has_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->def_index(), target);
  }
  
  // optional uint32 contribution_level = 3;
  if (has_contribution_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->contribution_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFMapContribution::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 def_index = 2;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }
    
    // optional uint32 contribution_level = 3;
    if (has_contribution_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribution_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFMapContribution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFMapContribution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFMapContribution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFMapContribution::MergeFrom(const CSOTFMapContribution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_def_index()) {
      set_def_index(from.def_index());
    }
    if (from.has_contribution_level()) {
      set_contribution_level(from.contribution_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFMapContribution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFMapContribution::CopyFrom(const CSOTFMapContribution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFMapContribution::IsInitialized() const {
  
  return true;
}

void CSOTFMapContribution::Swap(CSOTFMapContribution* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(def_index_, other->def_index_);
    std::swap(contribution_level_, other->contribution_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFMapContribution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFMapContribution_descriptor_;
  metadata.reflection = CSOTFMapContribution_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFVoteKickBanPlayer::kAccountIdSubjectFieldNumber;
const int CMsgTFVoteKickBanPlayer::kKickReasonFieldNumber;
#endif  // !_MSC_VER

CMsgTFVoteKickBanPlayer::CMsgTFVoteKickBanPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFVoteKickBanPlayer::InitAsDefaultInstance() {
}

CMsgTFVoteKickBanPlayer::CMsgTFVoteKickBanPlayer(const CMsgTFVoteKickBanPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFVoteKickBanPlayer::SharedCtor() {
  _cached_size_ = 0;
  account_id_subject_ = 0u;
  kick_reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFVoteKickBanPlayer::~CMsgTFVoteKickBanPlayer() {
  SharedDtor();
}

void CMsgTFVoteKickBanPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFVoteKickBanPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFVoteKickBanPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFVoteKickBanPlayer_descriptor_;
}

const CMsgTFVoteKickBanPlayer& CMsgTFVoteKickBanPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFVoteKickBanPlayer* CMsgTFVoteKickBanPlayer::default_instance_ = NULL;

CMsgTFVoteKickBanPlayer* CMsgTFVoteKickBanPlayer::New() const {
  return new CMsgTFVoteKickBanPlayer;
}

void CMsgTFVoteKickBanPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_subject_ = 0u;
    kick_reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFVoteKickBanPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_subject = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_subject_)));
          set_has_account_id_subject();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kick_reason;
        break;
      }
      
      // optional uint32 kick_reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kick_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_reason_)));
          set_has_kick_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFVoteKickBanPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_subject = 1;
  if (has_account_id_subject()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_subject(), output);
  }
  
  // optional uint32 kick_reason = 2;
  if (has_kick_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kick_reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFVoteKickBanPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_subject = 1;
  if (has_account_id_subject()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_subject(), target);
  }
  
  // optional uint32 kick_reason = 2;
  if (has_kick_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kick_reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFVoteKickBanPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_subject = 1;
    if (has_account_id_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_subject());
    }
    
    // optional uint32 kick_reason = 2;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick_reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFVoteKickBanPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFVoteKickBanPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFVoteKickBanPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFVoteKickBanPlayer::MergeFrom(const CMsgTFVoteKickBanPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id_subject()) {
      set_account_id_subject(from.account_id_subject());
    }
    if (from.has_kick_reason()) {
      set_kick_reason(from.kick_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFVoteKickBanPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFVoteKickBanPlayer::CopyFrom(const CMsgTFVoteKickBanPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFVoteKickBanPlayer::IsInitialized() const {
  
  return true;
}

void CMsgTFVoteKickBanPlayer::Swap(CMsgTFVoteKickBanPlayer* other) {
  if (other != this) {
    std::swap(account_id_subject_, other->account_id_subject_);
    std::swap(kick_reason_, other->kick_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFVoteKickBanPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFVoteKickBanPlayer_descriptor_;
  metadata.reflection = CMsgTFVoteKickBanPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFVoteKickBanPlayerResult::kAccountIdInitiatorFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kAccountIdSubjectFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kKickReasonFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kKickSuccessfulFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kNumYesVotesFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kNumNoVotesFieldNumber;
const int CMsgTFVoteKickBanPlayerResult::kNumPossibleVotesFieldNumber;
#endif  // !_MSC_VER

CMsgTFVoteKickBanPlayerResult::CMsgTFVoteKickBanPlayerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFVoteKickBanPlayerResult::InitAsDefaultInstance() {
}

CMsgTFVoteKickBanPlayerResult::CMsgTFVoteKickBanPlayerResult(const CMsgTFVoteKickBanPlayerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFVoteKickBanPlayerResult::SharedCtor() {
  _cached_size_ = 0;
  account_id_initiator_ = 0u;
  account_id_subject_ = 0u;
  kick_reason_ = 0u;
  kick_successful_ = false;
  num_yes_votes_ = 0u;
  num_no_votes_ = 0u;
  num_possible_votes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFVoteKickBanPlayerResult::~CMsgTFVoteKickBanPlayerResult() {
  SharedDtor();
}

void CMsgTFVoteKickBanPlayerResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFVoteKickBanPlayerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFVoteKickBanPlayerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFVoteKickBanPlayerResult_descriptor_;
}

const CMsgTFVoteKickBanPlayerResult& CMsgTFVoteKickBanPlayerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFVoteKickBanPlayerResult* CMsgTFVoteKickBanPlayerResult::default_instance_ = NULL;

CMsgTFVoteKickBanPlayerResult* CMsgTFVoteKickBanPlayerResult::New() const {
  return new CMsgTFVoteKickBanPlayerResult;
}

void CMsgTFVoteKickBanPlayerResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_initiator_ = 0u;
    account_id_subject_ = 0u;
    kick_reason_ = 0u;
    kick_successful_ = false;
    num_yes_votes_ = 0u;
    num_no_votes_ = 0u;
    num_possible_votes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFVoteKickBanPlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_initiator = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_initiator_)));
          set_has_account_id_initiator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id_subject;
        break;
      }
      
      // optional uint32 account_id_subject = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id_subject:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_subject_)));
          set_has_account_id_subject();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kick_reason;
        break;
      }
      
      // optional uint32 kick_reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kick_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_reason_)));
          set_has_kick_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kick_successful;
        break;
      }
      
      // optional bool kick_successful = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kick_successful:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kick_successful_)));
          set_has_kick_successful();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_yes_votes;
        break;
      }
      
      // optional uint32 num_yes_votes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_yes_votes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_yes_votes_)));
          set_has_num_yes_votes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_no_votes;
        break;
      }
      
      // optional uint32 num_no_votes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_no_votes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_no_votes_)));
          set_has_num_no_votes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_num_possible_votes;
        break;
      }
      
      // optional uint32 num_possible_votes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_possible_votes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_possible_votes_)));
          set_has_num_possible_votes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFVoteKickBanPlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_initiator = 1;
  if (has_account_id_initiator()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_initiator(), output);
  }
  
  // optional uint32 account_id_subject = 2;
  if (has_account_id_subject()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id_subject(), output);
  }
  
  // optional uint32 kick_reason = 3;
  if (has_kick_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kick_reason(), output);
  }
  
  // optional bool kick_successful = 4;
  if (has_kick_successful()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->kick_successful(), output);
  }
  
  // optional uint32 num_yes_votes = 5;
  if (has_num_yes_votes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_yes_votes(), output);
  }
  
  // optional uint32 num_no_votes = 6;
  if (has_num_no_votes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_no_votes(), output);
  }
  
  // optional uint32 num_possible_votes = 7;
  if (has_num_possible_votes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_possible_votes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFVoteKickBanPlayerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_initiator = 1;
  if (has_account_id_initiator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_initiator(), target);
  }
  
  // optional uint32 account_id_subject = 2;
  if (has_account_id_subject()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id_subject(), target);
  }
  
  // optional uint32 kick_reason = 3;
  if (has_kick_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kick_reason(), target);
  }
  
  // optional bool kick_successful = 4;
  if (has_kick_successful()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->kick_successful(), target);
  }
  
  // optional uint32 num_yes_votes = 5;
  if (has_num_yes_votes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_yes_votes(), target);
  }
  
  // optional uint32 num_no_votes = 6;
  if (has_num_no_votes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_no_votes(), target);
  }
  
  // optional uint32 num_possible_votes = 7;
  if (has_num_possible_votes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_possible_votes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFVoteKickBanPlayerResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_initiator = 1;
    if (has_account_id_initiator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_initiator());
    }
    
    // optional uint32 account_id_subject = 2;
    if (has_account_id_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_subject());
    }
    
    // optional uint32 kick_reason = 3;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick_reason());
    }
    
    // optional bool kick_successful = 4;
    if (has_kick_successful()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 num_yes_votes = 5;
    if (has_num_yes_votes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_yes_votes());
    }
    
    // optional uint32 num_no_votes = 6;
    if (has_num_no_votes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_no_votes());
    }
    
    // optional uint32 num_possible_votes = 7;
    if (has_num_possible_votes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_possible_votes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFVoteKickBanPlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFVoteKickBanPlayerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFVoteKickBanPlayerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFVoteKickBanPlayerResult::MergeFrom(const CMsgTFVoteKickBanPlayerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id_initiator()) {
      set_account_id_initiator(from.account_id_initiator());
    }
    if (from.has_account_id_subject()) {
      set_account_id_subject(from.account_id_subject());
    }
    if (from.has_kick_reason()) {
      set_kick_reason(from.kick_reason());
    }
    if (from.has_kick_successful()) {
      set_kick_successful(from.kick_successful());
    }
    if (from.has_num_yes_votes()) {
      set_num_yes_votes(from.num_yes_votes());
    }
    if (from.has_num_no_votes()) {
      set_num_no_votes(from.num_no_votes());
    }
    if (from.has_num_possible_votes()) {
      set_num_possible_votes(from.num_possible_votes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFVoteKickBanPlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFVoteKickBanPlayerResult::CopyFrom(const CMsgTFVoteKickBanPlayerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFVoteKickBanPlayerResult::IsInitialized() const {
  
  return true;
}

void CMsgTFVoteKickBanPlayerResult::Swap(CMsgTFVoteKickBanPlayerResult* other) {
  if (other != this) {
    std::swap(account_id_initiator_, other->account_id_initiator_);
    std::swap(account_id_subject_, other->account_id_subject_);
    std::swap(kick_reason_, other->kick_reason_);
    std::swap(kick_successful_, other->kick_successful_);
    std::swap(num_yes_votes_, other->num_yes_votes_);
    std::swap(num_no_votes_, other->num_no_votes_);
    std::swap(num_possible_votes_, other->num_possible_votes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFVoteKickBanPlayerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFVoteKickBanPlayerResult_descriptor_;
  metadata.reflection = CMsgTFVoteKickBanPlayerResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFKickPlayer::kAccountIdPlayerFieldNumber;
const int CMsgTFKickPlayer::kKickReasonFieldNumber;
#endif  // !_MSC_VER

CMsgTFKickPlayer::CMsgTFKickPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFKickPlayer::InitAsDefaultInstance() {
}

CMsgTFKickPlayer::CMsgTFKickPlayer(const CMsgTFKickPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFKickPlayer::SharedCtor() {
  _cached_size_ = 0;
  account_id_player_ = 0u;
  kick_reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFKickPlayer::~CMsgTFKickPlayer() {
  SharedDtor();
}

void CMsgTFKickPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFKickPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFKickPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFKickPlayer_descriptor_;
}

const CMsgTFKickPlayer& CMsgTFKickPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFKickPlayer* CMsgTFKickPlayer::default_instance_ = NULL;

CMsgTFKickPlayer* CMsgTFKickPlayer::New() const {
  return new CMsgTFKickPlayer;
}

void CMsgTFKickPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_player_ = 0u;
    kick_reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFKickPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_player_)));
          set_has_account_id_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kick_reason;
        break;
      }
      
      // optional uint32 kick_reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kick_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_reason_)));
          set_has_kick_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFKickPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_player = 1;
  if (has_account_id_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_player(), output);
  }
  
  // optional uint32 kick_reason = 2;
  if (has_kick_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kick_reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFKickPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_player = 1;
  if (has_account_id_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_player(), target);
  }
  
  // optional uint32 kick_reason = 2;
  if (has_kick_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kick_reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFKickPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_player = 1;
    if (has_account_id_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_player());
    }
    
    // optional uint32 kick_reason = 2;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick_reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFKickPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFKickPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFKickPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFKickPlayer::MergeFrom(const CMsgTFKickPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id_player()) {
      set_account_id_player(from.account_id_player());
    }
    if (from.has_kick_reason()) {
      set_kick_reason(from.kick_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFKickPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFKickPlayer::CopyFrom(const CMsgTFKickPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFKickPlayer::IsInitialized() const {
  
  return true;
}

void CMsgTFKickPlayer::Swap(CMsgTFKickPlayer* other) {
  if (other != this) {
    std::swap(account_id_player_, other->account_id_player_);
    std::swap(kick_reason_, other->kick_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFKickPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFKickPlayer_descriptor_;
  metadata.reflection = CMsgTFKickPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgTFStartedTraining::CMsgTFStartedTraining()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFStartedTraining::InitAsDefaultInstance() {
}

CMsgTFStartedTraining::CMsgTFStartedTraining(const CMsgTFStartedTraining& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFStartedTraining::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFStartedTraining::~CMsgTFStartedTraining() {
  SharedDtor();
}

void CMsgTFStartedTraining::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFStartedTraining::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFStartedTraining::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFStartedTraining_descriptor_;
}

const CMsgTFStartedTraining& CMsgTFStartedTraining::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFStartedTraining* CMsgTFStartedTraining::default_instance_ = NULL;

CMsgTFStartedTraining* CMsgTFStartedTraining::New() const {
  return new CMsgTFStartedTraining;
}

void CMsgTFStartedTraining::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFStartedTraining::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgTFStartedTraining::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFStartedTraining::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFStartedTraining::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFStartedTraining::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFStartedTraining* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFStartedTraining*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFStartedTraining::MergeFrom(const CMsgTFStartedTraining& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFStartedTraining::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFStartedTraining::CopyFrom(const CMsgTFStartedTraining& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFStartedTraining::IsInitialized() const {
  
  return true;
}

void CMsgTFStartedTraining::Swap(CMsgTFStartedTraining* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFStartedTraining::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFStartedTraining_descriptor_;
  metadata.reflection = CMsgTFStartedTraining_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFFreeTrialChooseMostHelpfulFriend::kAccountIdFriendFieldNumber;
#endif  // !_MSC_VER

CMsgTFFreeTrialChooseMostHelpfulFriend::CMsgTFFreeTrialChooseMostHelpfulFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::InitAsDefaultInstance() {
}

CMsgTFFreeTrialChooseMostHelpfulFriend::CMsgTFFreeTrialChooseMostHelpfulFriend(const CMsgTFFreeTrialChooseMostHelpfulFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::SharedCtor() {
  _cached_size_ = 0;
  account_id_friend_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFFreeTrialChooseMostHelpfulFriend::~CMsgTFFreeTrialChooseMostHelpfulFriend() {
  SharedDtor();
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFFreeTrialChooseMostHelpfulFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFFreeTrialChooseMostHelpfulFriend_descriptor_;
}

const CMsgTFFreeTrialChooseMostHelpfulFriend& CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFFreeTrialChooseMostHelpfulFriend* CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance_ = NULL;

CMsgTFFreeTrialChooseMostHelpfulFriend* CMsgTFFreeTrialChooseMostHelpfulFriend::New() const {
  return new CMsgTFFreeTrialChooseMostHelpfulFriend;
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_friend_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFFreeTrialChooseMostHelpfulFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_friend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_friend_)));
          set_has_account_id_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_friend = 1;
  if (has_account_id_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_friend(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFFreeTrialChooseMostHelpfulFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_friend = 1;
  if (has_account_id_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_friend(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFFreeTrialChooseMostHelpfulFriend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_friend = 1;
    if (has_account_id_friend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_friend());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFFreeTrialChooseMostHelpfulFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFFreeTrialChooseMostHelpfulFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::MergeFrom(const CMsgTFFreeTrialChooseMostHelpfulFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id_friend()) {
      set_account_id_friend(from.account_id_friend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::CopyFrom(const CMsgTFFreeTrialChooseMostHelpfulFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFFreeTrialChooseMostHelpfulFriend::IsInitialized() const {
  
  return true;
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::Swap(CMsgTFFreeTrialChooseMostHelpfulFriend* other) {
  if (other != this) {
    std::swap(account_id_friend_, other->account_id_friend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFFreeTrialChooseMostHelpfulFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFFreeTrialChooseMostHelpfulFriend_descriptor_;
  metadata.reflection = CMsgTFFreeTrialChooseMostHelpfulFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFRequestTF2Friends::kAccountIdsFieldNumber;
#endif  // !_MSC_VER

CMsgTFRequestTF2Friends::CMsgTFRequestTF2Friends()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFRequestTF2Friends::InitAsDefaultInstance() {
}

CMsgTFRequestTF2Friends::CMsgTFRequestTF2Friends(const CMsgTFRequestTF2Friends& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFRequestTF2Friends::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFRequestTF2Friends::~CMsgTFRequestTF2Friends() {
  SharedDtor();
}

void CMsgTFRequestTF2Friends::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFRequestTF2Friends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFRequestTF2Friends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFRequestTF2Friends_descriptor_;
}

const CMsgTFRequestTF2Friends& CMsgTFRequestTF2Friends::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFRequestTF2Friends* CMsgTFRequestTF2Friends::default_instance_ = NULL;

CMsgTFRequestTF2Friends* CMsgTFRequestTF2Friends::New() const {
  return new CMsgTFRequestTF2Friends;
}

void CMsgTFRequestTF2Friends::Clear() {
  account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFRequestTF2Friends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_account_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_account_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFRequestTF2Friends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFRequestTF2Friends::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->account_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFRequestTF2Friends::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 account_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    total_size += 1 * this->account_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFRequestTF2Friends::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFRequestTF2Friends* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFRequestTF2Friends*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFRequestTF2Friends::MergeFrom(const CMsgTFRequestTF2Friends& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFRequestTF2Friends::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFRequestTF2Friends::CopyFrom(const CMsgTFRequestTF2Friends& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFRequestTF2Friends::IsInitialized() const {
  
  return true;
}

void CMsgTFRequestTF2Friends::Swap(CMsgTFRequestTF2Friends* other) {
  if (other != this) {
    account_ids_.Swap(&other->account_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFRequestTF2Friends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFRequestTF2Friends_descriptor_;
  metadata.reflection = CMsgTFRequestTF2Friends_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFRequestTF2FriendsResponse::kAccountIdsFieldNumber;
#endif  // !_MSC_VER

CMsgTFRequestTF2FriendsResponse::CMsgTFRequestTF2FriendsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFRequestTF2FriendsResponse::InitAsDefaultInstance() {
}

CMsgTFRequestTF2FriendsResponse::CMsgTFRequestTF2FriendsResponse(const CMsgTFRequestTF2FriendsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFRequestTF2FriendsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFRequestTF2FriendsResponse::~CMsgTFRequestTF2FriendsResponse() {
  SharedDtor();
}

void CMsgTFRequestTF2FriendsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFRequestTF2FriendsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFRequestTF2FriendsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFRequestTF2FriendsResponse_descriptor_;
}

const CMsgTFRequestTF2FriendsResponse& CMsgTFRequestTF2FriendsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFRequestTF2FriendsResponse* CMsgTFRequestTF2FriendsResponse::default_instance_ = NULL;

CMsgTFRequestTF2FriendsResponse* CMsgTFRequestTF2FriendsResponse::New() const {
  return new CMsgTFRequestTF2FriendsResponse;
}

void CMsgTFRequestTF2FriendsResponse::Clear() {
  account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFRequestTF2FriendsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_account_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_account_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFRequestTF2FriendsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFRequestTF2FriendsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->account_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFRequestTF2FriendsResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 account_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    total_size += 1 * this->account_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFRequestTF2FriendsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFRequestTF2FriendsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFRequestTF2FriendsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFRequestTF2FriendsResponse::MergeFrom(const CMsgTFRequestTF2FriendsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFRequestTF2FriendsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFRequestTF2FriendsResponse::CopyFrom(const CMsgTFRequestTF2FriendsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFRequestTF2FriendsResponse::IsInitialized() const {
  
  return true;
}

void CMsgTFRequestTF2FriendsResponse::Swap(CMsgTFRequestTF2FriendsResponse* other) {
  if (other != this) {
    account_ids_.Swap(&other->account_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFRequestTF2FriendsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFRequestTF2FriendsResponse_descriptor_;
  metadata.reflection = CMsgTFRequestTF2FriendsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOTFPlayerInfo::kNumNewUsersHelpedFieldNumber;
const int CSOTFPlayerInfo::kTrialAccountFieldNumber;
#endif  // !_MSC_VER

CSOTFPlayerInfo::CSOTFPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOTFPlayerInfo::InitAsDefaultInstance() {
}

CSOTFPlayerInfo::CSOTFPlayerInfo(const CSOTFPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOTFPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  num_new_users_helped_ = 0u;
  trial_account_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOTFPlayerInfo::~CSOTFPlayerInfo() {
  SharedDtor();
}

void CSOTFPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOTFPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOTFPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOTFPlayerInfo_descriptor_;
}

const CSOTFPlayerInfo& CSOTFPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CSOTFPlayerInfo* CSOTFPlayerInfo::default_instance_ = NULL;

CSOTFPlayerInfo* CSOTFPlayerInfo::New() const {
  return new CSOTFPlayerInfo;
}

void CSOTFPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_new_users_helped_ = 0u;
    trial_account_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOTFPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_new_users_helped = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_new_users_helped_)));
          set_has_num_new_users_helped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trial_account;
        break;
      }
      
      // optional bool trial_account = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trial_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trial_account_)));
          set_has_trial_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOTFPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num_new_users_helped = 1;
  if (has_num_new_users_helped()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_new_users_helped(), output);
  }
  
  // optional bool trial_account = 2 [default = false];
  if (has_trial_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trial_account(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOTFPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num_new_users_helped = 1;
  if (has_num_new_users_helped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_new_users_helped(), target);
  }
  
  // optional bool trial_account = 2 [default = false];
  if (has_trial_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trial_account(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOTFPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num_new_users_helped = 1;
    if (has_num_new_users_helped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_new_users_helped());
    }
    
    // optional bool trial_account = 2 [default = false];
    if (has_trial_account()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOTFPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOTFPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOTFPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOTFPlayerInfo::MergeFrom(const CSOTFPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_new_users_helped()) {
      set_num_new_users_helped(from.num_new_users_helped());
    }
    if (from.has_trial_account()) {
      set_trial_account(from.trial_account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOTFPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFPlayerInfo::CopyFrom(const CSOTFPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFPlayerInfo::IsInitialized() const {
  
  return true;
}

void CSOTFPlayerInfo::Swap(CSOTFPlayerInfo* other) {
  if (other != this) {
    std::swap(num_new_users_helped_, other->num_new_users_helped_);
    std::swap(trial_account_, other->trial_account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOTFPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOTFPlayerInfo_descriptor_;
  metadata.reflection = CSOTFPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFThankedBySomeone::kThankerSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgTFThankedBySomeone::CMsgTFThankedBySomeone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFThankedBySomeone::InitAsDefaultInstance() {
}

CMsgTFThankedBySomeone::CMsgTFThankedBySomeone(const CMsgTFThankedBySomeone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFThankedBySomeone::SharedCtor() {
  _cached_size_ = 0;
  thanker_steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFThankedBySomeone::~CMsgTFThankedBySomeone() {
  SharedDtor();
}

void CMsgTFThankedBySomeone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFThankedBySomeone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFThankedBySomeone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFThankedBySomeone_descriptor_;
}

const CMsgTFThankedBySomeone& CMsgTFThankedBySomeone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFThankedBySomeone* CMsgTFThankedBySomeone::default_instance_ = NULL;

CMsgTFThankedBySomeone* CMsgTFThankedBySomeone::New() const {
  return new CMsgTFThankedBySomeone;
}

void CMsgTFThankedBySomeone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    thanker_steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFThankedBySomeone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 thanker_steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thanker_steam_id_)));
          set_has_thanker_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFThankedBySomeone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 thanker_steam_id = 1;
  if (has_thanker_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->thanker_steam_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFThankedBySomeone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 thanker_steam_id = 1;
  if (has_thanker_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->thanker_steam_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFThankedBySomeone::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 thanker_steam_id = 1;
    if (has_thanker_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thanker_steam_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFThankedBySomeone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFThankedBySomeone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFThankedBySomeone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFThankedBySomeone::MergeFrom(const CMsgTFThankedBySomeone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thanker_steam_id()) {
      set_thanker_steam_id(from.thanker_steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFThankedBySomeone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFThankedBySomeone::CopyFrom(const CMsgTFThankedBySomeone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFThankedBySomeone::IsInitialized() const {
  
  return true;
}

void CMsgTFThankedBySomeone::Swap(CMsgTFThankedBySomeone* other) {
  if (other != this) {
    std::swap(thanker_steam_id_, other->thanker_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFThankedBySomeone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFThankedBySomeone_descriptor_;
  metadata.reflection = CMsgTFThankedBySomeone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgTFThankedSomeone::CMsgTFThankedSomeone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFThankedSomeone::InitAsDefaultInstance() {
}

CMsgTFThankedSomeone::CMsgTFThankedSomeone(const CMsgTFThankedSomeone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFThankedSomeone::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFThankedSomeone::~CMsgTFThankedSomeone() {
  SharedDtor();
}

void CMsgTFThankedSomeone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFThankedSomeone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFThankedSomeone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFThankedSomeone_descriptor_;
}

const CMsgTFThankedSomeone& CMsgTFThankedSomeone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFThankedSomeone* CMsgTFThankedSomeone::default_instance_ = NULL;

CMsgTFThankedSomeone* CMsgTFThankedSomeone::New() const {
  return new CMsgTFThankedSomeone;
}

void CMsgTFThankedSomeone::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFThankedSomeone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgTFThankedSomeone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFThankedSomeone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFThankedSomeone::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFThankedSomeone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFThankedSomeone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFThankedSomeone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFThankedSomeone::MergeFrom(const CMsgTFThankedSomeone& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFThankedSomeone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFThankedSomeone::CopyFrom(const CMsgTFThankedSomeone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFThankedSomeone::IsInitialized() const {
  
  return true;
}

void CMsgTFThankedSomeone::Swap(CMsgTFThankedSomeone* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFThankedSomeone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFThankedSomeone_descriptor_;
  metadata.reflection = CMsgTFThankedSomeone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgTFFreeTrialConvertedToPremium::CMsgTFFreeTrialConvertedToPremium()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFFreeTrialConvertedToPremium::InitAsDefaultInstance() {
}

CMsgTFFreeTrialConvertedToPremium::CMsgTFFreeTrialConvertedToPremium(const CMsgTFFreeTrialConvertedToPremium& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFFreeTrialConvertedToPremium::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFFreeTrialConvertedToPremium::~CMsgTFFreeTrialConvertedToPremium() {
  SharedDtor();
}

void CMsgTFFreeTrialConvertedToPremium::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFFreeTrialConvertedToPremium::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFFreeTrialConvertedToPremium::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFFreeTrialConvertedToPremium_descriptor_;
}

const CMsgTFFreeTrialConvertedToPremium& CMsgTFFreeTrialConvertedToPremium::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFFreeTrialConvertedToPremium* CMsgTFFreeTrialConvertedToPremium::default_instance_ = NULL;

CMsgTFFreeTrialConvertedToPremium* CMsgTFFreeTrialConvertedToPremium::New() const {
  return new CMsgTFFreeTrialConvertedToPremium;
}

void CMsgTFFreeTrialConvertedToPremium::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFFreeTrialConvertedToPremium::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgTFFreeTrialConvertedToPremium::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFFreeTrialConvertedToPremium::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFFreeTrialConvertedToPremium::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFFreeTrialConvertedToPremium::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFFreeTrialConvertedToPremium* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFFreeTrialConvertedToPremium*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFFreeTrialConvertedToPremium::MergeFrom(const CMsgTFFreeTrialConvertedToPremium& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFFreeTrialConvertedToPremium::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFFreeTrialConvertedToPremium::CopyFrom(const CMsgTFFreeTrialConvertedToPremium& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFFreeTrialConvertedToPremium::IsInitialized() const {
  
  return true;
}

void CMsgTFFreeTrialConvertedToPremium::Swap(CMsgTFFreeTrialConvertedToPremium* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFFreeTrialConvertedToPremium::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFFreeTrialConvertedToPremium_descriptor_;
  metadata.reflection = CMsgTFFreeTrialConvertedToPremium_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSaxxyAwarded::kCategoryFieldNumber;
const int CMsgSaxxyAwarded::kWinnerNamesFieldNumber;
#endif  // !_MSC_VER

CMsgSaxxyAwarded::CMsgSaxxyAwarded()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSaxxyAwarded::InitAsDefaultInstance() {
}

CMsgSaxxyAwarded::CMsgSaxxyAwarded(const CMsgSaxxyAwarded& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSaxxyAwarded::SharedCtor() {
  _cached_size_ = 0;
  category_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSaxxyAwarded::~CMsgSaxxyAwarded() {
  SharedDtor();
}

void CMsgSaxxyAwarded::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSaxxyAwarded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSaxxyAwarded::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSaxxyAwarded_descriptor_;
}

const CMsgSaxxyAwarded& CMsgSaxxyAwarded::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSaxxyAwarded* CMsgSaxxyAwarded::default_instance_ = NULL;

CMsgSaxxyAwarded* CMsgSaxxyAwarded::New() const {
  return new CMsgSaxxyAwarded;
}

void CMsgSaxxyAwarded::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    category_ = 0u;
  }
  winner_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSaxxyAwarded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 category = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_winner_names;
        break;
      }
      
      // repeated std::string winner_names = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winner_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_winner_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winner_names(0).data(), this->winner_names(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_winner_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSaxxyAwarded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 category = 1;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->category(), output);
  }
  
  // repeated std::string winner_names = 2;
  for (int i = 0; i < this->winner_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->winner_names(i).data(), this->winner_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->winner_names(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSaxxyAwarded::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 category = 1;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->category(), target);
  }
  
  // repeated std::string winner_names = 2;
  for (int i = 0; i < this->winner_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winner_names(i).data(), this->winner_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->winner_names(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSaxxyAwarded::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 category = 1;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->category());
    }
    
  }
  // repeated std::string winner_names = 2;
  total_size += 1 * this->winner_names_size();
  for (int i = 0; i < this->winner_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->winner_names(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSaxxyAwarded::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSaxxyAwarded* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSaxxyAwarded*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSaxxyAwarded::MergeFrom(const CMsgSaxxyAwarded& from) {
  GOOGLE_CHECK_NE(&from, this);
  winner_names_.MergeFrom(from.winner_names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_category()) {
      set_category(from.category());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSaxxyAwarded::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSaxxyAwarded::CopyFrom(const CMsgSaxxyAwarded& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSaxxyAwarded::IsInitialized() const {
  
  return true;
}

void CMsgSaxxyAwarded::Swap(CMsgSaxxyAwarded* other) {
  if (other != this) {
    std::swap(category_, other->category_);
    winner_names_.Swap(&other->winner_names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSaxxyAwarded::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSaxxyAwarded_descriptor_;
  metadata.reflection = CMsgSaxxyAwarded_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgReplayUploadedToYouTube::kYoutubeUrlFieldNumber;
const int CMsgReplayUploadedToYouTube::kYoutubeAccountNameFieldNumber;
const int CMsgReplayUploadedToYouTube::kSessionIdFieldNumber;
#endif  // !_MSC_VER

CMsgReplayUploadedToYouTube::CMsgReplayUploadedToYouTube()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgReplayUploadedToYouTube::InitAsDefaultInstance() {
}

CMsgReplayUploadedToYouTube::CMsgReplayUploadedToYouTube(const CMsgReplayUploadedToYouTube& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgReplayUploadedToYouTube::SharedCtor() {
  _cached_size_ = 0;
  youtube_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  youtube_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgReplayUploadedToYouTube::~CMsgReplayUploadedToYouTube() {
  SharedDtor();
}

void CMsgReplayUploadedToYouTube::SharedDtor() {
  if (youtube_url_ != &::google::protobuf::internal::kEmptyString) {
    delete youtube_url_;
  }
  if (youtube_account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete youtube_account_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgReplayUploadedToYouTube::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReplayUploadedToYouTube::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgReplayUploadedToYouTube_descriptor_;
}

const CMsgReplayUploadedToYouTube& CMsgReplayUploadedToYouTube::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgReplayUploadedToYouTube* CMsgReplayUploadedToYouTube::default_instance_ = NULL;

CMsgReplayUploadedToYouTube* CMsgReplayUploadedToYouTube::New() const {
  return new CMsgReplayUploadedToYouTube;
}

void CMsgReplayUploadedToYouTube::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_youtube_url()) {
      if (youtube_url_ != &::google::protobuf::internal::kEmptyString) {
        youtube_url_->clear();
      }
    }
    if (has_youtube_account_name()) {
      if (youtube_account_name_ != &::google::protobuf::internal::kEmptyString) {
        youtube_account_name_->clear();
      }
    }
    session_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgReplayUploadedToYouTube::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional std::string youtube_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtube_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->youtube_url().data(), this->youtube_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_youtube_account_name;
        break;
      }
      
      // optional std::string youtube_account_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_youtube_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtube_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->youtube_account_name().data(), this->youtube_account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }
      
      // optional uint64 session_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgReplayUploadedToYouTube::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional std::string youtube_url = 1;
  if (has_youtube_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->youtube_url().data(), this->youtube_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->youtube_url(), output);
  }
  
  // optional std::string youtube_account_name = 2;
  if (has_youtube_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->youtube_account_name().data(), this->youtube_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->youtube_account_name(), output);
  }
  
  // optional uint64 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->session_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgReplayUploadedToYouTube::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional std::string youtube_url = 1;
  if (has_youtube_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->youtube_url().data(), this->youtube_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->youtube_url(), target);
  }
  
  // optional std::string youtube_account_name = 2;
  if (has_youtube_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->youtube_account_name().data(), this->youtube_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->youtube_account_name(), target);
  }
  
  // optional uint64 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->session_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgReplayUploadedToYouTube::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional std::string youtube_url = 1;
    if (has_youtube_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtube_url());
    }
    
    // optional std::string youtube_account_name = 2;
    if (has_youtube_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtube_account_name());
    }
    
    // optional uint64 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReplayUploadedToYouTube::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgReplayUploadedToYouTube* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgReplayUploadedToYouTube*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgReplayUploadedToYouTube::MergeFrom(const CMsgReplayUploadedToYouTube& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_youtube_url()) {
      set_youtube_url(from.youtube_url());
    }
    if (from.has_youtube_account_name()) {
      set_youtube_account_name(from.youtube_account_name());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgReplayUploadedToYouTube::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReplayUploadedToYouTube::CopyFrom(const CMsgReplayUploadedToYouTube& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplayUploadedToYouTube::IsInitialized() const {
  
  return true;
}

void CMsgReplayUploadedToYouTube::Swap(CMsgReplayUploadedToYouTube* other) {
  if (other != this) {
    std::swap(youtube_url_, other->youtube_url_);
    std::swap(youtube_account_name_, other->youtube_account_name_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgReplayUploadedToYouTube::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgReplayUploadedToYouTube_descriptor_;
  metadata.reflection = CMsgReplayUploadedToYouTube_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgReplaySubmitContestEntry::kYoutubeUrlFieldNumber;
const int CMsgReplaySubmitContestEntry::kCategoryFieldNumber;
#endif  // !_MSC_VER

CMsgReplaySubmitContestEntry::CMsgReplaySubmitContestEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgReplaySubmitContestEntry::InitAsDefaultInstance() {
}

CMsgReplaySubmitContestEntry::CMsgReplaySubmitContestEntry(const CMsgReplaySubmitContestEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgReplaySubmitContestEntry::SharedCtor() {
  _cached_size_ = 0;
  youtube_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  category_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgReplaySubmitContestEntry::~CMsgReplaySubmitContestEntry() {
  SharedDtor();
}

void CMsgReplaySubmitContestEntry::SharedDtor() {
  if (youtube_url_ != &::google::protobuf::internal::kEmptyString) {
    delete youtube_url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgReplaySubmitContestEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReplaySubmitContestEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgReplaySubmitContestEntry_descriptor_;
}

const CMsgReplaySubmitContestEntry& CMsgReplaySubmitContestEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgReplaySubmitContestEntry* CMsgReplaySubmitContestEntry::default_instance_ = NULL;

CMsgReplaySubmitContestEntry* CMsgReplaySubmitContestEntry::New() const {
  return new CMsgReplaySubmitContestEntry;
}

void CMsgReplaySubmitContestEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_youtube_url()) {
      if (youtube_url_ != &::google::protobuf::internal::kEmptyString) {
        youtube_url_->clear();
      }
    }
    category_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgReplaySubmitContestEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional std::string youtube_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtube_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->youtube_url().data(), this->youtube_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_category;
        break;
      }
      
      // optional uint32 category = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgReplaySubmitContestEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional std::string youtube_url = 1;
  if (has_youtube_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->youtube_url().data(), this->youtube_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->youtube_url(), output);
  }
  
  // optional uint32 category = 2;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->category(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgReplaySubmitContestEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional std::string youtube_url = 1;
  if (has_youtube_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->youtube_url().data(), this->youtube_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->youtube_url(), target);
  }
  
  // optional uint32 category = 2;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->category(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgReplaySubmitContestEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional std::string youtube_url = 1;
    if (has_youtube_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtube_url());
    }
    
    // optional uint32 category = 2;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->category());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReplaySubmitContestEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgReplaySubmitContestEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgReplaySubmitContestEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgReplaySubmitContestEntry::MergeFrom(const CMsgReplaySubmitContestEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_youtube_url()) {
      set_youtube_url(from.youtube_url());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgReplaySubmitContestEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReplaySubmitContestEntry::CopyFrom(const CMsgReplaySubmitContestEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplaySubmitContestEntry::IsInitialized() const {
  
  return true;
}

void CMsgReplaySubmitContestEntry::Swap(CMsgReplaySubmitContestEntry* other) {
  if (other != this) {
    std::swap(youtube_url_, other->youtube_url_);
    std::swap(category_, other->category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgReplaySubmitContestEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgReplaySubmitContestEntry_descriptor_;
  metadata.reflection = CMsgReplaySubmitContestEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgReplaySubmitContestEntryResponse::kSuccessFieldNumber;
#endif  // !_MSC_VER

CMsgReplaySubmitContestEntryResponse::CMsgReplaySubmitContestEntryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgReplaySubmitContestEntryResponse::InitAsDefaultInstance() {
}

CMsgReplaySubmitContestEntryResponse::CMsgReplaySubmitContestEntryResponse(const CMsgReplaySubmitContestEntryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgReplaySubmitContestEntryResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgReplaySubmitContestEntryResponse::~CMsgReplaySubmitContestEntryResponse() {
  SharedDtor();
}

void CMsgReplaySubmitContestEntryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgReplaySubmitContestEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReplaySubmitContestEntryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgReplaySubmitContestEntryResponse_descriptor_;
}

const CMsgReplaySubmitContestEntryResponse& CMsgReplaySubmitContestEntryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgReplaySubmitContestEntryResponse* CMsgReplaySubmitContestEntryResponse::default_instance_ = NULL;

CMsgReplaySubmitContestEntryResponse* CMsgReplaySubmitContestEntryResponse::New() const {
  return new CMsgReplaySubmitContestEntryResponse;
}

void CMsgReplaySubmitContestEntryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgReplaySubmitContestEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgReplaySubmitContestEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgReplaySubmitContestEntryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgReplaySubmitContestEntryResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReplaySubmitContestEntryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgReplaySubmitContestEntryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgReplaySubmitContestEntryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgReplaySubmitContestEntryResponse::MergeFrom(const CMsgReplaySubmitContestEntryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgReplaySubmitContestEntryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReplaySubmitContestEntryResponse::CopyFrom(const CMsgReplaySubmitContestEntryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplaySubmitContestEntryResponse::IsInitialized() const {
  
  return true;
}

void CMsgReplaySubmitContestEntryResponse::Swap(CMsgReplaySubmitContestEntryResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgReplaySubmitContestEntryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgReplaySubmitContestEntryResponse_descriptor_;
  metadata.reflection = CMsgReplaySubmitContestEntryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CReplayCachedContestData::kTimestampFieldNumber;
const int CReplayCachedContestData::kNumVotesLastDayFieldNumber;
const int CReplayCachedContestData::kVideoEntryIdsFieldNumber;
const int CReplayCachedContestData::kNumFlagsLastDayFieldNumber;
#endif  // !_MSC_VER

CReplayCachedContestData::CReplayCachedContestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CReplayCachedContestData::InitAsDefaultInstance() {
}

CReplayCachedContestData::CReplayCachedContestData(const CReplayCachedContestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CReplayCachedContestData::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  num_votes_last_day_ = 0u;
  num_flags_last_day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CReplayCachedContestData::~CReplayCachedContestData() {
  SharedDtor();
}

void CReplayCachedContestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CReplayCachedContestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CReplayCachedContestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CReplayCachedContestData_descriptor_;
}

const CReplayCachedContestData& CReplayCachedContestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CReplayCachedContestData* CReplayCachedContestData::default_instance_ = NULL;

CReplayCachedContestData* CReplayCachedContestData::New() const {
  return new CReplayCachedContestData;
}

void CReplayCachedContestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
    num_votes_last_day_ = 0u;
    num_flags_last_day_ = 0u;
  }
  video_entry_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CReplayCachedContestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_votes_last_day;
        break;
      }
      
      // optional uint32 num_votes_last_day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_votes_last_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_votes_last_day_)));
          set_has_num_votes_last_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_video_entry_ids;
        break;
      }
      
      // repeated uint32 video_entry_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_video_entry_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_video_entry_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_video_entry_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_video_entry_ids;
        if (input->ExpectTag(32)) goto parse_num_flags_last_day;
        break;
      }
      
      // optional uint32 num_flags_last_day = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_flags_last_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_flags_last_day_)));
          set_has_num_flags_last_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CReplayCachedContestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->timestamp(), output);
  }
  
  // optional uint32 num_votes_last_day = 2;
  if (has_num_votes_last_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_votes_last_day(), output);
  }
  
  // repeated uint32 video_entry_ids = 3;
  for (int i = 0; i < this->video_entry_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->video_entry_ids(i), output);
  }
  
  // optional uint32 num_flags_last_day = 4;
  if (has_num_flags_last_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_flags_last_day(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CReplayCachedContestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->timestamp(), target);
  }
  
  // optional uint32 num_votes_last_day = 2;
  if (has_num_votes_last_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_votes_last_day(), target);
  }
  
  // repeated uint32 video_entry_ids = 3;
  for (int i = 0; i < this->video_entry_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->video_entry_ids(i), target);
  }
  
  // optional uint32 num_flags_last_day = 4;
  if (has_num_flags_last_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_flags_last_day(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CReplayCachedContestData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 num_votes_last_day = 2;
    if (has_num_votes_last_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_votes_last_day());
    }
    
    // optional uint32 num_flags_last_day = 4;
    if (has_num_flags_last_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_flags_last_day());
    }
    
  }
  // repeated uint32 video_entry_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->video_entry_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->video_entry_ids(i));
    }
    total_size += 1 * this->video_entry_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CReplayCachedContestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CReplayCachedContestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CReplayCachedContestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CReplayCachedContestData::MergeFrom(const CReplayCachedContestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  video_entry_ids_.MergeFrom(from.video_entry_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_num_votes_last_day()) {
      set_num_votes_last_day(from.num_votes_last_day());
    }
    if (from.has_num_flags_last_day()) {
      set_num_flags_last_day(from.num_flags_last_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CReplayCachedContestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CReplayCachedContestData::CopyFrom(const CReplayCachedContestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CReplayCachedContestData::IsInitialized() const {
  
  return true;
}

void CReplayCachedContestData::Swap(CReplayCachedContestData* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(num_votes_last_day_, other->num_votes_last_day_);
    video_entry_ids_.Swap(&other->video_entry_ids_);
    std::swap(num_flags_last_day_, other->num_flags_last_day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CReplayCachedContestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CReplayCachedContestData_descriptor_;
  metadata.reflection = CReplayCachedContestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgTFCoaching_AddToCoaches::CMsgTFCoaching_AddToCoaches()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_AddToCoaches::InitAsDefaultInstance() {
}

CMsgTFCoaching_AddToCoaches::CMsgTFCoaching_AddToCoaches(const CMsgTFCoaching_AddToCoaches& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_AddToCoaches::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_AddToCoaches::~CMsgTFCoaching_AddToCoaches() {
  SharedDtor();
}

void CMsgTFCoaching_AddToCoaches::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_AddToCoaches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_AddToCoaches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_AddToCoaches_descriptor_;
}

const CMsgTFCoaching_AddToCoaches& CMsgTFCoaching_AddToCoaches::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_AddToCoaches* CMsgTFCoaching_AddToCoaches::default_instance_ = NULL;

CMsgTFCoaching_AddToCoaches* CMsgTFCoaching_AddToCoaches::New() const {
  return new CMsgTFCoaching_AddToCoaches;
}

void CMsgTFCoaching_AddToCoaches::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_AddToCoaches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_AddToCoaches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_AddToCoaches::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_AddToCoaches::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_AddToCoaches::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_AddToCoaches* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_AddToCoaches*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_AddToCoaches::MergeFrom(const CMsgTFCoaching_AddToCoaches& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_AddToCoaches::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_AddToCoaches::CopyFrom(const CMsgTFCoaching_AddToCoaches& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_AddToCoaches::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_AddToCoaches::Swap(CMsgTFCoaching_AddToCoaches* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_AddToCoaches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_AddToCoaches_descriptor_;
  metadata.reflection = CMsgTFCoaching_AddToCoaches_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgTFCoaching_RemoveFromCoaches::CMsgTFCoaching_RemoveFromCoaches()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_RemoveFromCoaches::InitAsDefaultInstance() {
}

CMsgTFCoaching_RemoveFromCoaches::CMsgTFCoaching_RemoveFromCoaches(const CMsgTFCoaching_RemoveFromCoaches& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_RemoveFromCoaches::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_RemoveFromCoaches::~CMsgTFCoaching_RemoveFromCoaches() {
  SharedDtor();
}

void CMsgTFCoaching_RemoveFromCoaches::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_RemoveFromCoaches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_RemoveFromCoaches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_RemoveFromCoaches_descriptor_;
}

const CMsgTFCoaching_RemoveFromCoaches& CMsgTFCoaching_RemoveFromCoaches::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_RemoveFromCoaches* CMsgTFCoaching_RemoveFromCoaches::default_instance_ = NULL;

CMsgTFCoaching_RemoveFromCoaches* CMsgTFCoaching_RemoveFromCoaches::New() const {
  return new CMsgTFCoaching_RemoveFromCoaches;
}

void CMsgTFCoaching_RemoveFromCoaches::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_RemoveFromCoaches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_RemoveFromCoaches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_RemoveFromCoaches::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_RemoveFromCoaches::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_RemoveFromCoaches::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_RemoveFromCoaches* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_RemoveFromCoaches*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_RemoveFromCoaches::MergeFrom(const CMsgTFCoaching_RemoveFromCoaches& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_RemoveFromCoaches::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_RemoveFromCoaches::CopyFrom(const CMsgTFCoaching_RemoveFromCoaches& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_RemoveFromCoaches::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_RemoveFromCoaches::Swap(CMsgTFCoaching_RemoveFromCoaches* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_RemoveFromCoaches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_RemoveFromCoaches_descriptor_;
  metadata.reflection = CMsgTFCoaching_RemoveFromCoaches_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_FindCoach::kAccountIdFriendAsCoachFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_FindCoach::CMsgTFCoaching_FindCoach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_FindCoach::InitAsDefaultInstance() {
}

CMsgTFCoaching_FindCoach::CMsgTFCoaching_FindCoach(const CMsgTFCoaching_FindCoach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_FindCoach::SharedCtor() {
  _cached_size_ = 0;
  account_id_friend_as_coach_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_FindCoach::~CMsgTFCoaching_FindCoach() {
  SharedDtor();
}

void CMsgTFCoaching_FindCoach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_FindCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_FindCoach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_FindCoach_descriptor_;
}

const CMsgTFCoaching_FindCoach& CMsgTFCoaching_FindCoach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_FindCoach* CMsgTFCoaching_FindCoach::default_instance_ = NULL;

CMsgTFCoaching_FindCoach* CMsgTFCoaching_FindCoach::New() const {
  return new CMsgTFCoaching_FindCoach;
}

void CMsgTFCoaching_FindCoach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_friend_as_coach_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_FindCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_friend_as_coach = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_friend_as_coach_)));
          set_has_account_id_friend_as_coach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_FindCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_friend_as_coach = 1;
  if (has_account_id_friend_as_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_friend_as_coach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_FindCoach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_friend_as_coach = 1;
  if (has_account_id_friend_as_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_friend_as_coach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_FindCoach::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_friend_as_coach = 1;
    if (has_account_id_friend_as_coach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_friend_as_coach());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_FindCoach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_FindCoach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_FindCoach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_FindCoach::MergeFrom(const CMsgTFCoaching_FindCoach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id_friend_as_coach()) {
      set_account_id_friend_as_coach(from.account_id_friend_as_coach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_FindCoach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_FindCoach::CopyFrom(const CMsgTFCoaching_FindCoach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_FindCoach::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_FindCoach::Swap(CMsgTFCoaching_FindCoach* other) {
  if (other != this) {
    std::swap(account_id_friend_as_coach_, other->account_id_friend_as_coach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_FindCoach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_FindCoach_descriptor_;
  metadata.reflection = CMsgTFCoaching_FindCoach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_FindCoachResponse::kFoundCoachFieldNumber;
const int CMsgTFCoaching_FindCoachResponse::kNumLikesFieldNumber;
const int CMsgTFCoaching_FindCoachResponse::kCoachNameFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_FindCoachResponse::CMsgTFCoaching_FindCoachResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_FindCoachResponse::InitAsDefaultInstance() {
}

CMsgTFCoaching_FindCoachResponse::CMsgTFCoaching_FindCoachResponse(const CMsgTFCoaching_FindCoachResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_FindCoachResponse::SharedCtor() {
  _cached_size_ = 0;
  found_coach_ = false;
  num_likes_ = 0u;
  coach_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_FindCoachResponse::~CMsgTFCoaching_FindCoachResponse() {
  SharedDtor();
}

void CMsgTFCoaching_FindCoachResponse::SharedDtor() {
  if (coach_name_ != &::google::protobuf::internal::kEmptyString) {
    delete coach_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_FindCoachResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_FindCoachResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_FindCoachResponse_descriptor_;
}

const CMsgTFCoaching_FindCoachResponse& CMsgTFCoaching_FindCoachResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_FindCoachResponse* CMsgTFCoaching_FindCoachResponse::default_instance_ = NULL;

CMsgTFCoaching_FindCoachResponse* CMsgTFCoaching_FindCoachResponse::New() const {
  return new CMsgTFCoaching_FindCoachResponse;
}

void CMsgTFCoaching_FindCoachResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    found_coach_ = false;
    num_likes_ = 0u;
    if (has_coach_name()) {
      if (coach_name_ != &::google::protobuf::internal::kEmptyString) {
        coach_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_FindCoachResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool found_coach = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &found_coach_)));
          set_has_found_coach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_likes;
        break;
      }
      
      // optional uint32 num_likes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_likes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_likes_)));
          set_has_num_likes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_coach_name;
        break;
      }
      
      // optional std::string coach_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coach_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coach_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->coach_name().data(), this->coach_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_FindCoachResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool found_coach = 1;
  if (has_found_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->found_coach(), output);
  }
  
  // optional uint32 num_likes = 2;
  if (has_num_likes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_likes(), output);
  }
  
  // optional std::string coach_name = 3;
  if (has_coach_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coach_name().data(), this->coach_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->coach_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_FindCoachResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool found_coach = 1;
  if (has_found_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->found_coach(), target);
  }
  
  // optional uint32 num_likes = 2;
  if (has_num_likes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_likes(), target);
  }
  
  // optional std::string coach_name = 3;
  if (has_coach_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coach_name().data(), this->coach_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->coach_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_FindCoachResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool found_coach = 1;
    if (has_found_coach()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 num_likes = 2;
    if (has_num_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_likes());
    }
    
    // optional std::string coach_name = 3;
    if (has_coach_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coach_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_FindCoachResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_FindCoachResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_FindCoachResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_FindCoachResponse::MergeFrom(const CMsgTFCoaching_FindCoachResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_found_coach()) {
      set_found_coach(from.found_coach());
    }
    if (from.has_num_likes()) {
      set_num_likes(from.num_likes());
    }
    if (from.has_coach_name()) {
      set_coach_name(from.coach_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_FindCoachResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_FindCoachResponse::CopyFrom(const CMsgTFCoaching_FindCoachResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_FindCoachResponse::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_FindCoachResponse::Swap(CMsgTFCoaching_FindCoachResponse* other) {
  if (other != this) {
    std::swap(found_coach_, other->found_coach_);
    std::swap(num_likes_, other->num_likes_);
    std::swap(coach_name_, other->coach_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_FindCoachResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_FindCoachResponse_descriptor_;
  metadata.reflection = CMsgTFCoaching_FindCoachResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_AskCoach::kAccountIdStudentFieldNumber;
const int CMsgTFCoaching_AskCoach::kStudentIsFriendFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_AskCoach::CMsgTFCoaching_AskCoach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_AskCoach::InitAsDefaultInstance() {
}

CMsgTFCoaching_AskCoach::CMsgTFCoaching_AskCoach(const CMsgTFCoaching_AskCoach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_AskCoach::SharedCtor() {
  _cached_size_ = 0;
  account_id_student_ = 0u;
  student_is_friend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_AskCoach::~CMsgTFCoaching_AskCoach() {
  SharedDtor();
}

void CMsgTFCoaching_AskCoach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_AskCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_AskCoach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_AskCoach_descriptor_;
}

const CMsgTFCoaching_AskCoach& CMsgTFCoaching_AskCoach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_AskCoach* CMsgTFCoaching_AskCoach::default_instance_ = NULL;

CMsgTFCoaching_AskCoach* CMsgTFCoaching_AskCoach::New() const {
  return new CMsgTFCoaching_AskCoach;
}

void CMsgTFCoaching_AskCoach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_student_ = 0u;
    student_is_friend_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_AskCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_student = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_student_)));
          set_has_account_id_student();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_student_is_friend;
        break;
      }
      
      // optional bool student_is_friend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_student_is_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &student_is_friend_)));
          set_has_student_is_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_AskCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_student = 1;
  if (has_account_id_student()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_student(), output);
  }
  
  // optional bool student_is_friend = 2;
  if (has_student_is_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->student_is_friend(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_AskCoach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_student = 1;
  if (has_account_id_student()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_student(), target);
  }
  
  // optional bool student_is_friend = 2;
  if (has_student_is_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->student_is_friend(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_AskCoach::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_student = 1;
    if (has_account_id_student()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_student());
    }
    
    // optional bool student_is_friend = 2;
    if (has_student_is_friend()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_AskCoach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_AskCoach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_AskCoach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_AskCoach::MergeFrom(const CMsgTFCoaching_AskCoach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id_student()) {
      set_account_id_student(from.account_id_student());
    }
    if (from.has_student_is_friend()) {
      set_student_is_friend(from.student_is_friend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_AskCoach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_AskCoach::CopyFrom(const CMsgTFCoaching_AskCoach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_AskCoach::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_AskCoach::Swap(CMsgTFCoaching_AskCoach* other) {
  if (other != this) {
    std::swap(account_id_student_, other->account_id_student_);
    std::swap(student_is_friend_, other->student_is_friend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_AskCoach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_AskCoach_descriptor_;
  metadata.reflection = CMsgTFCoaching_AskCoach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_AskCoachResponse::kAcceptCoachingAssignmentFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_AskCoachResponse::CMsgTFCoaching_AskCoachResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_AskCoachResponse::InitAsDefaultInstance() {
}

CMsgTFCoaching_AskCoachResponse::CMsgTFCoaching_AskCoachResponse(const CMsgTFCoaching_AskCoachResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_AskCoachResponse::SharedCtor() {
  _cached_size_ = 0;
  accept_coaching_assignment_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_AskCoachResponse::~CMsgTFCoaching_AskCoachResponse() {
  SharedDtor();
}

void CMsgTFCoaching_AskCoachResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_AskCoachResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_AskCoachResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_AskCoachResponse_descriptor_;
}

const CMsgTFCoaching_AskCoachResponse& CMsgTFCoaching_AskCoachResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_AskCoachResponse* CMsgTFCoaching_AskCoachResponse::default_instance_ = NULL;

CMsgTFCoaching_AskCoachResponse* CMsgTFCoaching_AskCoachResponse::New() const {
  return new CMsgTFCoaching_AskCoachResponse;
}

void CMsgTFCoaching_AskCoachResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accept_coaching_assignment_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_AskCoachResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool accept_coaching_assignment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_coaching_assignment_)));
          set_has_accept_coaching_assignment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_AskCoachResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool accept_coaching_assignment = 1;
  if (has_accept_coaching_assignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->accept_coaching_assignment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_AskCoachResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool accept_coaching_assignment = 1;
  if (has_accept_coaching_assignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->accept_coaching_assignment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_AskCoachResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool accept_coaching_assignment = 1;
    if (has_accept_coaching_assignment()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_AskCoachResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_AskCoachResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_AskCoachResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_AskCoachResponse::MergeFrom(const CMsgTFCoaching_AskCoachResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accept_coaching_assignment()) {
      set_accept_coaching_assignment(from.accept_coaching_assignment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_AskCoachResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_AskCoachResponse::CopyFrom(const CMsgTFCoaching_AskCoachResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_AskCoachResponse::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_AskCoachResponse::Swap(CMsgTFCoaching_AskCoachResponse* other) {
  if (other != this) {
    std::swap(accept_coaching_assignment_, other->accept_coaching_assignment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_AskCoachResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_AskCoachResponse_descriptor_;
  metadata.reflection = CMsgTFCoaching_AskCoachResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_CoachJoinGame::kJoinGameFieldNumber;
const int CMsgTFCoaching_CoachJoinGame::kServerAddressFieldNumber;
const int CMsgTFCoaching_CoachJoinGame::kServerPortFieldNumber;
const int CMsgTFCoaching_CoachJoinGame::kAccountIdStudentFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_CoachJoinGame::CMsgTFCoaching_CoachJoinGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_CoachJoinGame::InitAsDefaultInstance() {
}

CMsgTFCoaching_CoachJoinGame::CMsgTFCoaching_CoachJoinGame(const CMsgTFCoaching_CoachJoinGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoinGame::SharedCtor() {
  _cached_size_ = 0;
  join_game_ = false;
  server_address_ = 0u;
  server_port_ = 0u;
  account_id_student_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_CoachJoinGame::~CMsgTFCoaching_CoachJoinGame() {
  SharedDtor();
}

void CMsgTFCoaching_CoachJoinGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_CoachJoinGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_CoachJoinGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_CoachJoinGame_descriptor_;
}

const CMsgTFCoaching_CoachJoinGame& CMsgTFCoaching_CoachJoinGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_CoachJoinGame* CMsgTFCoaching_CoachJoinGame::default_instance_ = NULL;

CMsgTFCoaching_CoachJoinGame* CMsgTFCoaching_CoachJoinGame::New() const {
  return new CMsgTFCoaching_CoachJoinGame;
}

void CMsgTFCoaching_CoachJoinGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    join_game_ = false;
    server_address_ = 0u;
    server_port_ = 0u;
    account_id_student_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_CoachJoinGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool join_game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &join_game_)));
          set_has_join_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_address;
        break;
      }
      
      // optional uint32 server_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_address_)));
          set_has_server_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_port;
        break;
      }
      
      // optional uint32 server_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_account_id_student;
        break;
      }
      
      // optional uint32 account_id_student = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id_student:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_student_)));
          set_has_account_id_student();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_CoachJoinGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool join_game = 1;
  if (has_join_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->join_game(), output);
  }
  
  // optional uint32 server_address = 2;
  if (has_server_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_address(), output);
  }
  
  // optional uint32 server_port = 3;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_port(), output);
  }
  
  // optional uint32 account_id_student = 4;
  if (has_account_id_student()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account_id_student(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_CoachJoinGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool join_game = 1;
  if (has_join_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->join_game(), target);
  }
  
  // optional uint32 server_address = 2;
  if (has_server_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_address(), target);
  }
  
  // optional uint32 server_port = 3;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_port(), target);
  }
  
  // optional uint32 account_id_student = 4;
  if (has_account_id_student()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account_id_student(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_CoachJoinGame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool join_game = 1;
    if (has_join_game()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 server_address = 2;
    if (has_server_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_address());
    }
    
    // optional uint32 server_port = 3;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }
    
    // optional uint32 account_id_student = 4;
    if (has_account_id_student()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_student());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_CoachJoinGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_CoachJoinGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_CoachJoinGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_CoachJoinGame::MergeFrom(const CMsgTFCoaching_CoachJoinGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_join_game()) {
      set_join_game(from.join_game());
    }
    if (from.has_server_address()) {
      set_server_address(from.server_address());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_account_id_student()) {
      set_account_id_student(from.account_id_student());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_CoachJoinGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoinGame::CopyFrom(const CMsgTFCoaching_CoachJoinGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_CoachJoinGame::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_CoachJoinGame::Swap(CMsgTFCoaching_CoachJoinGame* other) {
  if (other != this) {
    std::swap(join_game_, other->join_game_);
    std::swap(server_address_, other->server_address_);
    std::swap(server_port_, other->server_port_);
    std::swap(account_id_student_, other->account_id_student_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_CoachJoinGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_CoachJoinGame_descriptor_;
  metadata.reflection = CMsgTFCoaching_CoachJoinGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_CoachJoining::kAccountIdCoachFieldNumber;
const int CMsgTFCoaching_CoachJoining::kAccountIdStudentFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_CoachJoining::CMsgTFCoaching_CoachJoining()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_CoachJoining::InitAsDefaultInstance() {
}

CMsgTFCoaching_CoachJoining::CMsgTFCoaching_CoachJoining(const CMsgTFCoaching_CoachJoining& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoining::SharedCtor() {
  _cached_size_ = 0;
  account_id_coach_ = 0u;
  account_id_student_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_CoachJoining::~CMsgTFCoaching_CoachJoining() {
  SharedDtor();
}

void CMsgTFCoaching_CoachJoining::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_CoachJoining::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_CoachJoining::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_CoachJoining_descriptor_;
}

const CMsgTFCoaching_CoachJoining& CMsgTFCoaching_CoachJoining::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_CoachJoining* CMsgTFCoaching_CoachJoining::default_instance_ = NULL;

CMsgTFCoaching_CoachJoining* CMsgTFCoaching_CoachJoining::New() const {
  return new CMsgTFCoaching_CoachJoining;
}

void CMsgTFCoaching_CoachJoining::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_coach_ = 0u;
    account_id_student_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_CoachJoining::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_coach = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_coach_)));
          set_has_account_id_coach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id_student;
        break;
      }
      
      // optional uint32 account_id_student = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id_student:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_student_)));
          set_has_account_id_student();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_CoachJoining::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_coach = 1;
  if (has_account_id_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_coach(), output);
  }
  
  // optional uint32 account_id_student = 2;
  if (has_account_id_student()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id_student(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_CoachJoining::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_coach = 1;
  if (has_account_id_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_coach(), target);
  }
  
  // optional uint32 account_id_student = 2;
  if (has_account_id_student()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id_student(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_CoachJoining::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_coach = 1;
    if (has_account_id_coach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_coach());
    }
    
    // optional uint32 account_id_student = 2;
    if (has_account_id_student()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_student());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_CoachJoining::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_CoachJoining* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_CoachJoining*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_CoachJoining::MergeFrom(const CMsgTFCoaching_CoachJoining& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id_coach()) {
      set_account_id_coach(from.account_id_coach());
    }
    if (from.has_account_id_student()) {
      set_account_id_student(from.account_id_student());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_CoachJoining::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoining::CopyFrom(const CMsgTFCoaching_CoachJoining& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_CoachJoining::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_CoachJoining::Swap(CMsgTFCoaching_CoachJoining* other) {
  if (other != this) {
    std::swap(account_id_coach_, other->account_id_coach_);
    std::swap(account_id_student_, other->account_id_student_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_CoachJoining::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_CoachJoining_descriptor_;
  metadata.reflection = CMsgTFCoaching_CoachJoining_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_CoachJoined::kAccountIdCoachFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_CoachJoined::CMsgTFCoaching_CoachJoined()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_CoachJoined::InitAsDefaultInstance() {
}

CMsgTFCoaching_CoachJoined::CMsgTFCoaching_CoachJoined(const CMsgTFCoaching_CoachJoined& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoined::SharedCtor() {
  _cached_size_ = 0;
  account_id_coach_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_CoachJoined::~CMsgTFCoaching_CoachJoined() {
  SharedDtor();
}

void CMsgTFCoaching_CoachJoined::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_CoachJoined::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_CoachJoined::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_CoachJoined_descriptor_;
}

const CMsgTFCoaching_CoachJoined& CMsgTFCoaching_CoachJoined::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_CoachJoined* CMsgTFCoaching_CoachJoined::default_instance_ = NULL;

CMsgTFCoaching_CoachJoined* CMsgTFCoaching_CoachJoined::New() const {
  return new CMsgTFCoaching_CoachJoined;
}

void CMsgTFCoaching_CoachJoined::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_coach_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_CoachJoined::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_coach = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_coach_)));
          set_has_account_id_coach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_CoachJoined::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_coach = 1;
  if (has_account_id_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_coach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_CoachJoined::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_coach = 1;
  if (has_account_id_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_coach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_CoachJoined::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_coach = 1;
    if (has_account_id_coach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_coach());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_CoachJoined::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_CoachJoined* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_CoachJoined*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_CoachJoined::MergeFrom(const CMsgTFCoaching_CoachJoined& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id_coach()) {
      set_account_id_coach(from.account_id_coach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_CoachJoined::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoined::CopyFrom(const CMsgTFCoaching_CoachJoined& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_CoachJoined::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_CoachJoined::Swap(CMsgTFCoaching_CoachJoined* other) {
  if (other != this) {
    std::swap(account_id_coach_, other->account_id_coach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_CoachJoined::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_CoachJoined_descriptor_;
  metadata.reflection = CMsgTFCoaching_CoachJoined_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_LikeCurrentCoach::kLikeCoachFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_LikeCurrentCoach::CMsgTFCoaching_LikeCurrentCoach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_LikeCurrentCoach::InitAsDefaultInstance() {
}

CMsgTFCoaching_LikeCurrentCoach::CMsgTFCoaching_LikeCurrentCoach(const CMsgTFCoaching_LikeCurrentCoach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_LikeCurrentCoach::SharedCtor() {
  _cached_size_ = 0;
  like_coach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_LikeCurrentCoach::~CMsgTFCoaching_LikeCurrentCoach() {
  SharedDtor();
}

void CMsgTFCoaching_LikeCurrentCoach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_LikeCurrentCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_LikeCurrentCoach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_LikeCurrentCoach_descriptor_;
}

const CMsgTFCoaching_LikeCurrentCoach& CMsgTFCoaching_LikeCurrentCoach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_LikeCurrentCoach* CMsgTFCoaching_LikeCurrentCoach::default_instance_ = NULL;

CMsgTFCoaching_LikeCurrentCoach* CMsgTFCoaching_LikeCurrentCoach::New() const {
  return new CMsgTFCoaching_LikeCurrentCoach;
}

void CMsgTFCoaching_LikeCurrentCoach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    like_coach_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_LikeCurrentCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool like_coach = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &like_coach_)));
          set_has_like_coach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_LikeCurrentCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool like_coach = 1;
  if (has_like_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->like_coach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_LikeCurrentCoach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool like_coach = 1;
  if (has_like_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->like_coach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_LikeCurrentCoach::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool like_coach = 1;
    if (has_like_coach()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_LikeCurrentCoach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_LikeCurrentCoach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_LikeCurrentCoach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_LikeCurrentCoach::MergeFrom(const CMsgTFCoaching_LikeCurrentCoach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_like_coach()) {
      set_like_coach(from.like_coach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_LikeCurrentCoach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_LikeCurrentCoach::CopyFrom(const CMsgTFCoaching_LikeCurrentCoach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_LikeCurrentCoach::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_LikeCurrentCoach::Swap(CMsgTFCoaching_LikeCurrentCoach* other) {
  if (other != this) {
    std::swap(like_coach_, other->like_coach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_LikeCurrentCoach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_LikeCurrentCoach_descriptor_;
  metadata.reflection = CMsgTFCoaching_LikeCurrentCoach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFCoaching_RemoveCurrentCoach::kAccountIdCoachFieldNumber;
#endif  // !_MSC_VER

CMsgTFCoaching_RemoveCurrentCoach::CMsgTFCoaching_RemoveCurrentCoach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFCoaching_RemoveCurrentCoach::InitAsDefaultInstance() {
}

CMsgTFCoaching_RemoveCurrentCoach::CMsgTFCoaching_RemoveCurrentCoach(const CMsgTFCoaching_RemoveCurrentCoach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFCoaching_RemoveCurrentCoach::SharedCtor() {
  _cached_size_ = 0;
  account_id_coach_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFCoaching_RemoveCurrentCoach::~CMsgTFCoaching_RemoveCurrentCoach() {
  SharedDtor();
}

void CMsgTFCoaching_RemoveCurrentCoach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFCoaching_RemoveCurrentCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFCoaching_RemoveCurrentCoach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFCoaching_RemoveCurrentCoach_descriptor_;
}

const CMsgTFCoaching_RemoveCurrentCoach& CMsgTFCoaching_RemoveCurrentCoach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFCoaching_RemoveCurrentCoach* CMsgTFCoaching_RemoveCurrentCoach::default_instance_ = NULL;

CMsgTFCoaching_RemoveCurrentCoach* CMsgTFCoaching_RemoveCurrentCoach::New() const {
  return new CMsgTFCoaching_RemoveCurrentCoach;
}

void CMsgTFCoaching_RemoveCurrentCoach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_coach_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFCoaching_RemoveCurrentCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id_coach = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_coach_)));
          set_has_account_id_coach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFCoaching_RemoveCurrentCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id_coach = 1;
  if (has_account_id_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id_coach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFCoaching_RemoveCurrentCoach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id_coach = 1;
  if (has_account_id_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id_coach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFCoaching_RemoveCurrentCoach::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id_coach = 1;
    if (has_account_id_coach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_coach());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFCoaching_RemoveCurrentCoach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFCoaching_RemoveCurrentCoach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFCoaching_RemoveCurrentCoach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_RemoveCurrentCoach::MergeFrom(const CMsgTFCoaching_RemoveCurrentCoach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id_coach()) {
      set_account_id_coach(from.account_id_coach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFCoaching_RemoveCurrentCoach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_RemoveCurrentCoach::CopyFrom(const CMsgTFCoaching_RemoveCurrentCoach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_RemoveCurrentCoach::IsInitialized() const {
  
  return true;
}

void CMsgTFCoaching_RemoveCurrentCoach::Swap(CMsgTFCoaching_RemoveCurrentCoach* other) {
  if (other != this) {
    std::swap(account_id_coach_, other->account_id_coach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFCoaching_RemoveCurrentCoach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFCoaching_RemoveCurrentCoach_descriptor_;
  metadata.reflection = CMsgTFCoaching_RemoveCurrentCoach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kServerAddressFieldNumber;
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kServerPortFieldNumber;
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kNumUsersFieldNumber;
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kSteamIdFieldNumber;
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kMaxUsersFieldNumber;
const int CMsgTFQuickplay_ScoreServers_ServerInfo::kUserScoreFieldNumber;
#endif  // !_MSC_VER

CMsgTFQuickplay_ScoreServers_ServerInfo::CMsgTFQuickplay_ScoreServers_ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::InitAsDefaultInstance() {
}

CMsgTFQuickplay_ScoreServers_ServerInfo::CMsgTFQuickplay_ScoreServers_ServerInfo(const CMsgTFQuickplay_ScoreServers_ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  server_address_ = 0u;
  server_port_ = 0u;
  num_users_ = 0u;
  steam_id_ = GOOGLE_ULONGLONG(0);
  max_users_ = 0u;
  user_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFQuickplay_ScoreServers_ServerInfo::~CMsgTFQuickplay_ScoreServers_ServerInfo() {
  SharedDtor();
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServers_ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFQuickplay_ScoreServers_ServerInfo_descriptor_;
}

const CMsgTFQuickplay_ScoreServers_ServerInfo& CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFQuickplay_ScoreServers_ServerInfo* CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance_ = NULL;

CMsgTFQuickplay_ScoreServers_ServerInfo* CMsgTFQuickplay_ScoreServers_ServerInfo::New() const {
  return new CMsgTFQuickplay_ScoreServers_ServerInfo;
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_address_ = 0u;
    server_port_ = 0u;
    num_users_ = 0u;
    steam_id_ = GOOGLE_ULONGLONG(0);
    max_users_ = 0u;
    user_score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFQuickplay_ScoreServers_ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_address_)));
          set_has_server_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_port;
        break;
      }
      
      // optional uint32 server_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_users;
        break;
      }
      
      // optional uint32 num_users = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_users_)));
          set_has_num_users();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_steam_id;
        break;
      }
      
      // optional uint64 steam_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_users;
        break;
      }
      
      // optional uint32 max_users = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_users_)));
          set_has_max_users();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_user_score;
        break;
      }
      
      // optional float user_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_user_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &user_score_)));
          set_has_user_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_address = 1;
  if (has_server_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_address(), output);
  }
  
  // optional uint32 server_port = 2;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_port(), output);
  }
  
  // optional uint32 num_users = 3;
  if (has_num_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_users(), output);
  }
  
  // optional uint64 steam_id = 4;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->steam_id(), output);
  }
  
  // optional uint32 max_users = 5;
  if (has_max_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_users(), output);
  }
  
  // optional float user_score = 6;
  if (has_user_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->user_score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFQuickplay_ScoreServers_ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_address = 1;
  if (has_server_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_address(), target);
  }
  
  // optional uint32 server_port = 2;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_port(), target);
  }
  
  // optional uint32 num_users = 3;
  if (has_num_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_users(), target);
  }
  
  // optional uint64 steam_id = 4;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->steam_id(), target);
  }
  
  // optional uint32 max_users = 5;
  if (has_max_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_users(), target);
  }
  
  // optional float user_score = 6;
  if (has_user_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->user_score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFQuickplay_ScoreServers_ServerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_address = 1;
    if (has_server_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_address());
    }
    
    // optional uint32 server_port = 2;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }
    
    // optional uint32 num_users = 3;
    if (has_num_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_users());
    }
    
    // optional uint64 steam_id = 4;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id());
    }
    
    // optional uint32 max_users = 5;
    if (has_max_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_users());
    }
    
    // optional float user_score = 6;
    if (has_user_score()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServers_ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFQuickplay_ScoreServers_ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::MergeFrom(const CMsgTFQuickplay_ScoreServers_ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_address()) {
      set_server_address(from.server_address());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_num_users()) {
      set_num_users(from.num_users());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_max_users()) {
      set_max_users(from.max_users());
    }
    if (from.has_user_score()) {
      set_user_score(from.user_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::CopyFrom(const CMsgTFQuickplay_ScoreServers_ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServers_ServerInfo::IsInitialized() const {
  
  return true;
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::Swap(CMsgTFQuickplay_ScoreServers_ServerInfo* other) {
  if (other != this) {
    std::swap(server_address_, other->server_address_);
    std::swap(server_port_, other->server_port_);
    std::swap(num_users_, other->num_users_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(max_users_, other->max_users_);
    std::swap(user_score_, other->user_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFQuickplay_ScoreServers_ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFQuickplay_ScoreServers_ServerInfo_descriptor_;
  metadata.reflection = CMsgTFQuickplay_ScoreServers_ServerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgTFQuickplay_ScoreServers::kServersFieldNumber;
#endif  // !_MSC_VER

CMsgTFQuickplay_ScoreServers::CMsgTFQuickplay_ScoreServers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFQuickplay_ScoreServers::InitAsDefaultInstance() {
}

CMsgTFQuickplay_ScoreServers::CMsgTFQuickplay_ScoreServers(const CMsgTFQuickplay_ScoreServers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFQuickplay_ScoreServers::~CMsgTFQuickplay_ScoreServers() {
  SharedDtor();
}

void CMsgTFQuickplay_ScoreServers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFQuickplay_ScoreServers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFQuickplay_ScoreServers_descriptor_;
}

const CMsgTFQuickplay_ScoreServers& CMsgTFQuickplay_ScoreServers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFQuickplay_ScoreServers* CMsgTFQuickplay_ScoreServers::default_instance_ = NULL;

CMsgTFQuickplay_ScoreServers* CMsgTFQuickplay_ScoreServers::New() const {
  return new CMsgTFQuickplay_ScoreServers;
}

void CMsgTFQuickplay_ScoreServers::Clear() {
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFQuickplay_ScoreServers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFQuickplay_ScoreServers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFQuickplay_ScoreServers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->servers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFQuickplay_ScoreServers::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFQuickplay_ScoreServers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFQuickplay_ScoreServers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServers::MergeFrom(const CMsgTFQuickplay_ScoreServers& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFQuickplay_ScoreServers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServers::CopyFrom(const CMsgTFQuickplay_ScoreServers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServers::IsInitialized() const {
  
  return true;
}

void CMsgTFQuickplay_ScoreServers::Swap(CMsgTFQuickplay_ScoreServers* other) {
  if (other != this) {
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFQuickplay_ScoreServers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFQuickplay_ScoreServers_descriptor_;
  metadata.reflection = CMsgTFQuickplay_ScoreServers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::kServerAddressFieldNumber;
const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::kServerPortFieldNumber;
const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::kTotalScoreFieldNumber;
const int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CMsgTFQuickplay_ScoreServersResponse_ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::InitAsDefaultInstance() {
}

CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CMsgTFQuickplay_ScoreServersResponse_ServerInfo(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  server_address_ = 0u;
  server_port_ = 0u;
  total_score_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFQuickplay_ScoreServersResponse_ServerInfo::~CMsgTFQuickplay_ScoreServersResponse_ServerInfo() {
  SharedDtor();
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServersResponse_ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFQuickplay_ScoreServersResponse_ServerInfo_descriptor_;
}

const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFQuickplay_ScoreServersResponse_ServerInfo* CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance_ = NULL;

CMsgTFQuickplay_ScoreServersResponse_ServerInfo* CMsgTFQuickplay_ScoreServersResponse_ServerInfo::New() const {
  return new CMsgTFQuickplay_ScoreServersResponse_ServerInfo;
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_address_ = 0u;
    server_port_ = 0u;
    total_score_ = 0;
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_address_)));
          set_has_server_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_port;
        break;
      }
      
      // optional uint32 server_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_total_score;
        break;
      }
      
      // optional float total_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_score_)));
          set_has_total_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_steam_id;
        break;
      }
      
      // optional uint64 steam_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_address = 1;
  if (has_server_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_address(), output);
  }
  
  // optional uint32 server_port = 2;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_port(), output);
  }
  
  // optional float total_score = 3;
  if (has_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->total_score(), output);
  }
  
  // optional uint64 steam_id = 4;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->steam_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_address = 1;
  if (has_server_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_address(), target);
  }
  
  // optional uint32 server_port = 2;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_port(), target);
  }
  
  // optional float total_score = 3;
  if (has_total_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->total_score(), target);
  }
  
  // optional uint64 steam_id = 4;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->steam_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFQuickplay_ScoreServersResponse_ServerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_address = 1;
    if (has_server_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_address());
    }
    
    // optional uint32 server_port = 2;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }
    
    // optional float total_score = 3;
    if (has_total_score()) {
      total_size += 1 + 4;
    }
    
    // optional uint64 steam_id = 4;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServersResponse_ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFQuickplay_ScoreServersResponse_ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::MergeFrom(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_address()) {
      set_server_address(from.server_address());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_total_score()) {
      set_total_score(from.total_score());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CopyFrom(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::IsInitialized() const {
  
  return true;
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::Swap(CMsgTFQuickplay_ScoreServersResponse_ServerInfo* other) {
  if (other != this) {
    std::swap(server_address_, other->server_address_);
    std::swap(server_port_, other->server_port_);
    std::swap(total_score_, other->total_score_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFQuickplay_ScoreServersResponse_ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFQuickplay_ScoreServersResponse_ServerInfo_descriptor_;
  metadata.reflection = CMsgTFQuickplay_ScoreServersResponse_ServerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgTFQuickplay_ScoreServersResponse::kServersFieldNumber;
#endif  // !_MSC_VER

CMsgTFQuickplay_ScoreServersResponse::CMsgTFQuickplay_ScoreServersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFQuickplay_ScoreServersResponse::InitAsDefaultInstance() {
}

CMsgTFQuickplay_ScoreServersResponse::CMsgTFQuickplay_ScoreServersResponse(const CMsgTFQuickplay_ScoreServersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFQuickplay_ScoreServersResponse::~CMsgTFQuickplay_ScoreServersResponse() {
  SharedDtor();
}

void CMsgTFQuickplay_ScoreServersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFQuickplay_ScoreServersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFQuickplay_ScoreServersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFQuickplay_ScoreServersResponse_descriptor_;
}

const CMsgTFQuickplay_ScoreServersResponse& CMsgTFQuickplay_ScoreServersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFQuickplay_ScoreServersResponse* CMsgTFQuickplay_ScoreServersResponse::default_instance_ = NULL;

CMsgTFQuickplay_ScoreServersResponse* CMsgTFQuickplay_ScoreServersResponse::New() const {
  return new CMsgTFQuickplay_ScoreServersResponse;
}

void CMsgTFQuickplay_ScoreServersResponse::Clear() {
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFQuickplay_ScoreServersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFQuickplay_ScoreServersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFQuickplay_ScoreServersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->servers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFQuickplay_ScoreServersResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFQuickplay_ScoreServersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFQuickplay_ScoreServersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServersResponse::MergeFrom(const CMsgTFQuickplay_ScoreServersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFQuickplay_ScoreServersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServersResponse::CopyFrom(const CMsgTFQuickplay_ScoreServersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServersResponse::IsInitialized() const {
  
  return true;
}

void CMsgTFQuickplay_ScoreServersResponse::Swap(CMsgTFQuickplay_ScoreServersResponse* other) {
  if (other != this) {
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFQuickplay_ScoreServersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFQuickplay_ScoreServersResponse_descriptor_;
  metadata.reflection = CMsgTFQuickplay_ScoreServersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTFQuickplay_PlayerJoining::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgTFQuickplay_PlayerJoining::CMsgTFQuickplay_PlayerJoining()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTFQuickplay_PlayerJoining::InitAsDefaultInstance() {
}

CMsgTFQuickplay_PlayerJoining::CMsgTFQuickplay_PlayerJoining(const CMsgTFQuickplay_PlayerJoining& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTFQuickplay_PlayerJoining::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTFQuickplay_PlayerJoining::~CMsgTFQuickplay_PlayerJoining() {
  SharedDtor();
}

void CMsgTFQuickplay_PlayerJoining::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTFQuickplay_PlayerJoining::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTFQuickplay_PlayerJoining::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTFQuickplay_PlayerJoining_descriptor_;
}

const CMsgTFQuickplay_PlayerJoining& CMsgTFQuickplay_PlayerJoining::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTFQuickplay_PlayerJoining* CMsgTFQuickplay_PlayerJoining::default_instance_ = NULL;

CMsgTFQuickplay_PlayerJoining* CMsgTFQuickplay_PlayerJoining::New() const {
  return new CMsgTFQuickplay_PlayerJoining;
}

void CMsgTFQuickplay_PlayerJoining::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTFQuickplay_PlayerJoining::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTFQuickplay_PlayerJoining::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTFQuickplay_PlayerJoining::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTFQuickplay_PlayerJoining::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTFQuickplay_PlayerJoining::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTFQuickplay_PlayerJoining* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTFQuickplay_PlayerJoining*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_PlayerJoining::MergeFrom(const CMsgTFQuickplay_PlayerJoining& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTFQuickplay_PlayerJoining::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_PlayerJoining::CopyFrom(const CMsgTFQuickplay_PlayerJoining& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_PlayerJoining::IsInitialized() const {
  
  return true;
}

void CMsgTFQuickplay_PlayerJoining::Swap(CMsgTFQuickplay_PlayerJoining* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTFQuickplay_PlayerJoining::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTFQuickplay_PlayerJoining_descriptor_;
  metadata.reflection = CMsgTFQuickplay_PlayerJoining_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GameServer_LevelInfo::kLevelLoadedFieldNumber;
const int CMsgGC_GameServer_LevelInfo::kLevelNameFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_LevelInfo::CMsgGC_GameServer_LevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_LevelInfo::InitAsDefaultInstance() {
}

CMsgGC_GameServer_LevelInfo::CMsgGC_GameServer_LevelInfo(const CMsgGC_GameServer_LevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_LevelInfo::SharedCtor() {
  _cached_size_ = 0;
  level_loaded_ = false;
  level_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_LevelInfo::~CMsgGC_GameServer_LevelInfo() {
  SharedDtor();
}

void CMsgGC_GameServer_LevelInfo::SharedDtor() {
  if (level_name_ != &::google::protobuf::internal::kEmptyString) {
    delete level_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_LevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_LevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_LevelInfo_descriptor_;
}

const CMsgGC_GameServer_LevelInfo& CMsgGC_GameServer_LevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_LevelInfo* CMsgGC_GameServer_LevelInfo::default_instance_ = NULL;

CMsgGC_GameServer_LevelInfo* CMsgGC_GameServer_LevelInfo::New() const {
  return new CMsgGC_GameServer_LevelInfo;
}

void CMsgGC_GameServer_LevelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_loaded_ = false;
    if (has_level_name()) {
      if (level_name_ != &::google::protobuf::internal::kEmptyString) {
        level_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_LevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool level_loaded = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &level_loaded_)));
          set_has_level_loaded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_level_name;
        break;
      }
      
      // optional std::string level_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->level_name().data(), this->level_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_LevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool level_loaded = 1;
  if (has_level_loaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->level_loaded(), output);
  }
  
  // optional std::string level_name = 2;
  if (has_level_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->level_name().data(), this->level_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->level_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_LevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool level_loaded = 1;
  if (has_level_loaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->level_loaded(), target);
  }
  
  // optional std::string level_name = 2;
  if (has_level_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->level_name().data(), this->level_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->level_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_LevelInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool level_loaded = 1;
    if (has_level_loaded()) {
      total_size += 1 + 1;
    }
    
    // optional std::string level_name = 2;
    if (has_level_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->level_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_LevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_LevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_LevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_LevelInfo::MergeFrom(const CMsgGC_GameServer_LevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level_loaded()) {
      set_level_loaded(from.level_loaded());
    }
    if (from.has_level_name()) {
      set_level_name(from.level_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_LevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_LevelInfo::CopyFrom(const CMsgGC_GameServer_LevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_LevelInfo::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_LevelInfo::Swap(CMsgGC_GameServer_LevelInfo* other) {
  if (other != this) {
    std::swap(level_loaded_, other->level_loaded_);
    std::swap(level_name_, other->level_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_LevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_LevelInfo_descriptor_;
  metadata.reflection = CMsgGC_GameServer_LevelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GameServer_AuthChallenge::kChallengeStringFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_AuthChallenge::CMsgGC_GameServer_AuthChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_AuthChallenge::InitAsDefaultInstance() {
}

CMsgGC_GameServer_AuthChallenge::CMsgGC_GameServer_AuthChallenge(const CMsgGC_GameServer_AuthChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthChallenge::SharedCtor() {
  _cached_size_ = 0;
  challenge_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_AuthChallenge::~CMsgGC_GameServer_AuthChallenge() {
  SharedDtor();
}

void CMsgGC_GameServer_AuthChallenge::SharedDtor() {
  if (challenge_string_ != &::google::protobuf::internal::kEmptyString) {
    delete challenge_string_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_AuthChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AuthChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_AuthChallenge_descriptor_;
}

const CMsgGC_GameServer_AuthChallenge& CMsgGC_GameServer_AuthChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_AuthChallenge* CMsgGC_GameServer_AuthChallenge::default_instance_ = NULL;

CMsgGC_GameServer_AuthChallenge* CMsgGC_GameServer_AuthChallenge::New() const {
  return new CMsgGC_GameServer_AuthChallenge;
}

void CMsgGC_GameServer_AuthChallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_challenge_string()) {
      if (challenge_string_ != &::google::protobuf::internal::kEmptyString) {
        challenge_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_AuthChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional std::string challenge_string = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_challenge_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->challenge_string().data(), this->challenge_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_AuthChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional std::string challenge_string = 1;
  if (has_challenge_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->challenge_string().data(), this->challenge_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->challenge_string(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_AuthChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional std::string challenge_string = 1;
  if (has_challenge_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->challenge_string().data(), this->challenge_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->challenge_string(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_AuthChallenge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional std::string challenge_string = 1;
    if (has_challenge_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->challenge_string());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_AuthChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_AuthChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_AuthChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AuthChallenge::MergeFrom(const CMsgGC_GameServer_AuthChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challenge_string()) {
      set_challenge_string(from.challenge_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_AuthChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthChallenge::CopyFrom(const CMsgGC_GameServer_AuthChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AuthChallenge::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_AuthChallenge::Swap(CMsgGC_GameServer_AuthChallenge* other) {
  if (other != this) {
    std::swap(challenge_string_, other->challenge_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_AuthChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_AuthChallenge_descriptor_;
  metadata.reflection = CMsgGC_GameServer_AuthChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GameServer_AuthResult::kAuthenticatedFieldNumber;
const int CMsgGC_GameServer_AuthResult::kGameServerStandingFieldNumber;
const int CMsgGC_GameServer_AuthResult::kGameServerStandingTrendFieldNumber;
const int CMsgGC_GameServer_AuthResult::kIsValveServerFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_AuthResult::CMsgGC_GameServer_AuthResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_AuthResult::InitAsDefaultInstance() {
}

CMsgGC_GameServer_AuthResult::CMsgGC_GameServer_AuthResult(const CMsgGC_GameServer_AuthResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthResult::SharedCtor() {
  _cached_size_ = 0;
  authenticated_ = false;
  game_server_standing_ = 0;
  game_server_standing_trend_ = 0;
  is_valve_server_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_AuthResult::~CMsgGC_GameServer_AuthResult() {
  SharedDtor();
}

void CMsgGC_GameServer_AuthResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_AuthResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AuthResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_AuthResult_descriptor_;
}

const CMsgGC_GameServer_AuthResult& CMsgGC_GameServer_AuthResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_AuthResult* CMsgGC_GameServer_AuthResult::default_instance_ = NULL;

CMsgGC_GameServer_AuthResult* CMsgGC_GameServer_AuthResult::New() const {
  return new CMsgGC_GameServer_AuthResult;
}

void CMsgGC_GameServer_AuthResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    authenticated_ = false;
    game_server_standing_ = 0;
    game_server_standing_trend_ = 0;
    is_valve_server_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_AuthResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool authenticated = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authenticated_)));
          set_has_authenticated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_server_standing;
        break;
      }
      
      // optional int32 game_server_standing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_standing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_standing_)));
          set_has_game_server_standing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_server_standing_trend;
        break;
      }
      
      // optional int32 game_server_standing_trend = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_standing_trend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_standing_trend_)));
          set_has_game_server_standing_trend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_valve_server;
        break;
      }
      
      // optional bool is_valve_server = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_valve_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valve_server_)));
          set_has_is_valve_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_AuthResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool authenticated = 1;
  if (has_authenticated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->authenticated(), output);
  }
  
  // optional int32 game_server_standing = 2;
  if (has_game_server_standing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_server_standing(), output);
  }
  
  // optional int32 game_server_standing_trend = 3;
  if (has_game_server_standing_trend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_server_standing_trend(), output);
  }
  
  // optional bool is_valve_server = 4;
  if (has_is_valve_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_valve_server(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_AuthResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool authenticated = 1;
  if (has_authenticated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->authenticated(), target);
  }
  
  // optional int32 game_server_standing = 2;
  if (has_game_server_standing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_server_standing(), target);
  }
  
  // optional int32 game_server_standing_trend = 3;
  if (has_game_server_standing_trend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_server_standing_trend(), target);
  }
  
  // optional bool is_valve_server = 4;
  if (has_is_valve_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_valve_server(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_AuthResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool authenticated = 1;
    if (has_authenticated()) {
      total_size += 1 + 1;
    }
    
    // optional int32 game_server_standing = 2;
    if (has_game_server_standing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_standing());
    }
    
    // optional int32 game_server_standing_trend = 3;
    if (has_game_server_standing_trend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_standing_trend());
    }
    
    // optional bool is_valve_server = 4;
    if (has_is_valve_server()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_AuthResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_AuthResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_AuthResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AuthResult::MergeFrom(const CMsgGC_GameServer_AuthResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_authenticated()) {
      set_authenticated(from.authenticated());
    }
    if (from.has_game_server_standing()) {
      set_game_server_standing(from.game_server_standing());
    }
    if (from.has_game_server_standing_trend()) {
      set_game_server_standing_trend(from.game_server_standing_trend());
    }
    if (from.has_is_valve_server()) {
      set_is_valve_server(from.is_valve_server());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_AuthResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthResult::CopyFrom(const CMsgGC_GameServer_AuthResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AuthResult::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_AuthResult::Swap(CMsgGC_GameServer_AuthResult* other) {
  if (other != this) {
    std::swap(authenticated_, other->authenticated_);
    std::swap(game_server_standing_, other->game_server_standing_);
    std::swap(game_server_standing_trend_, other->game_server_standing_trend_);
    std::swap(is_valve_server_, other->is_valve_server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_AuthResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_AuthResult_descriptor_;
  metadata.reflection = CMsgGC_GameServer_AuthResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GameServer_AuthChallengeResponse::kGameServerAccountIdFieldNumber;
const int CMsgGC_GameServer_AuthChallengeResponse::kHashedChallengeStringFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_AuthChallengeResponse::CMsgGC_GameServer_AuthChallengeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_AuthChallengeResponse::InitAsDefaultInstance() {
}

CMsgGC_GameServer_AuthChallengeResponse::CMsgGC_GameServer_AuthChallengeResponse(const CMsgGC_GameServer_AuthChallengeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthChallengeResponse::SharedCtor() {
  _cached_size_ = 0;
  game_server_account_id_ = 0u;
  hashed_challenge_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_AuthChallengeResponse::~CMsgGC_GameServer_AuthChallengeResponse() {
  SharedDtor();
}

void CMsgGC_GameServer_AuthChallengeResponse::SharedDtor() {
  if (hashed_challenge_string_ != &::google::protobuf::internal::kEmptyString) {
    delete hashed_challenge_string_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_AuthChallengeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_AuthChallengeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_AuthChallengeResponse_descriptor_;
}

const CMsgGC_GameServer_AuthChallengeResponse& CMsgGC_GameServer_AuthChallengeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_AuthChallengeResponse* CMsgGC_GameServer_AuthChallengeResponse::default_instance_ = NULL;

CMsgGC_GameServer_AuthChallengeResponse* CMsgGC_GameServer_AuthChallengeResponse::New() const {
  return new CMsgGC_GameServer_AuthChallengeResponse;
}

void CMsgGC_GameServer_AuthChallengeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_server_account_id_ = 0u;
    if (has_hashed_challenge_string()) {
      if (hashed_challenge_string_ != &::google::protobuf::internal::kEmptyString) {
        hashed_challenge_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_AuthChallengeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_server_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_account_id_)));
          set_has_game_server_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hashed_challenge_string;
        break;
      }
      
      // optional bytes hashed_challenge_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hashed_challenge_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_challenge_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_AuthChallengeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_server_account_id = 1;
  if (has_game_server_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_server_account_id(), output);
  }
  
  // optional bytes hashed_challenge_string = 2;
  if (has_hashed_challenge_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->hashed_challenge_string(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_AuthChallengeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_server_account_id = 1;
  if (has_game_server_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_server_account_id(), target);
  }
  
  // optional bytes hashed_challenge_string = 2;
  if (has_hashed_challenge_string()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hashed_challenge_string(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_AuthChallengeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_server_account_id = 1;
    if (has_game_server_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_account_id());
    }
    
    // optional bytes hashed_challenge_string = 2;
    if (has_hashed_challenge_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_challenge_string());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_AuthChallengeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_AuthChallengeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_AuthChallengeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AuthChallengeResponse::MergeFrom(const CMsgGC_GameServer_AuthChallengeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_server_account_id()) {
      set_game_server_account_id(from.game_server_account_id());
    }
    if (from.has_hashed_challenge_string()) {
      set_hashed_challenge_string(from.hashed_challenge_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_AuthChallengeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthChallengeResponse::CopyFrom(const CMsgGC_GameServer_AuthChallengeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AuthChallengeResponse::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_AuthChallengeResponse::Swap(CMsgGC_GameServer_AuthChallengeResponse* other) {
  if (other != this) {
    std::swap(game_server_account_id_, other->game_server_account_id_);
    std::swap(hashed_challenge_string_, other->hashed_challenge_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_AuthChallengeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_AuthChallengeResponse_descriptor_;
  metadata.reflection = CMsgGC_GameServer_AuthChallengeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GameServer_CreateIdentity::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_CreateIdentity::CMsgGC_GameServer_CreateIdentity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_CreateIdentity::InitAsDefaultInstance() {
}

CMsgGC_GameServer_CreateIdentity::CMsgGC_GameServer_CreateIdentity(const CMsgGC_GameServer_CreateIdentity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_CreateIdentity::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_CreateIdentity::~CMsgGC_GameServer_CreateIdentity() {
  SharedDtor();
}

void CMsgGC_GameServer_CreateIdentity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_CreateIdentity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_CreateIdentity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_CreateIdentity_descriptor_;
}

const CMsgGC_GameServer_CreateIdentity& CMsgGC_GameServer_CreateIdentity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_CreateIdentity* CMsgGC_GameServer_CreateIdentity::default_instance_ = NULL;

CMsgGC_GameServer_CreateIdentity* CMsgGC_GameServer_CreateIdentity::New() const {
  return new CMsgGC_GameServer_CreateIdentity;
}

void CMsgGC_GameServer_CreateIdentity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_CreateIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_CreateIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_CreateIdentity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_CreateIdentity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_CreateIdentity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_CreateIdentity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_CreateIdentity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_CreateIdentity::MergeFrom(const CMsgGC_GameServer_CreateIdentity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_CreateIdentity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_CreateIdentity::CopyFrom(const CMsgGC_GameServer_CreateIdentity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_CreateIdentity::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_CreateIdentity::Swap(CMsgGC_GameServer_CreateIdentity* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_CreateIdentity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_CreateIdentity_descriptor_;
  metadata.reflection = CMsgGC_GameServer_CreateIdentity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor_;
}
bool CMsgGC_GameServer_CreateIdentityResponse_EStatus_IsValid(int value) {
  switch(value) {
    case -2:
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_GenericFailure;
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_TooMany;
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_NoPrivs;
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_Created;
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::EStatus_MIN;
const CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::EStatus_MAX;
const int CMsgGC_GameServer_CreateIdentityResponse::EStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGC_GameServer_CreateIdentityResponse::kAccountCreatedFieldNumber;
const int CMsgGC_GameServer_CreateIdentityResponse::kGameServerAccountIdFieldNumber;
const int CMsgGC_GameServer_CreateIdentityResponse::kGameServerIdentityTokenFieldNumber;
const int CMsgGC_GameServer_CreateIdentityResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_CreateIdentityResponse::CMsgGC_GameServer_CreateIdentityResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_CreateIdentityResponse::InitAsDefaultInstance() {
}

CMsgGC_GameServer_CreateIdentityResponse::CMsgGC_GameServer_CreateIdentityResponse(const CMsgGC_GameServer_CreateIdentityResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_CreateIdentityResponse::SharedCtor() {
  _cached_size_ = 0;
  account_created_ = false;
  game_server_account_id_ = 0u;
  game_server_identity_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_CreateIdentityResponse::~CMsgGC_GameServer_CreateIdentityResponse() {
  SharedDtor();
}

void CMsgGC_GameServer_CreateIdentityResponse::SharedDtor() {
  if (game_server_identity_token_ != &::google::protobuf::internal::kEmptyString) {
    delete game_server_identity_token_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_CreateIdentityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_CreateIdentityResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_CreateIdentityResponse_descriptor_;
}

const CMsgGC_GameServer_CreateIdentityResponse& CMsgGC_GameServer_CreateIdentityResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_CreateIdentityResponse* CMsgGC_GameServer_CreateIdentityResponse::default_instance_ = NULL;

CMsgGC_GameServer_CreateIdentityResponse* CMsgGC_GameServer_CreateIdentityResponse::New() const {
  return new CMsgGC_GameServer_CreateIdentityResponse;
}

void CMsgGC_GameServer_CreateIdentityResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_created_ = false;
    game_server_account_id_ = 0u;
    if (has_game_server_identity_token()) {
      if (game_server_identity_token_ != &::google::protobuf::internal::kEmptyString) {
        game_server_identity_token_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_CreateIdentityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool account_created = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &account_created_)));
          set_has_account_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_server_account_id;
        break;
      }
      
      // optional uint32 game_server_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_account_id_)));
          set_has_game_server_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_game_server_identity_token;
        break;
      }
      
      // optional std::string game_server_identity_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_server_identity_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_server_identity_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_server_identity_token().data(), this->game_server_identity_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }
      
      // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGC_GameServer_CreateIdentityResponse_EStatus_IsValid(value)) {
            set_status(static_cast< ::CMsgGC_GameServer_CreateIdentityResponse_EStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_CreateIdentityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool account_created = 1;
  if (has_account_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->account_created(), output);
  }
  
  // optional uint32 game_server_account_id = 2;
  if (has_game_server_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_server_account_id(), output);
  }
  
  // optional std::string game_server_identity_token = 3;
  if (has_game_server_identity_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_server_identity_token().data(), this->game_server_identity_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->game_server_identity_token(), output);
  }
  
  // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_CreateIdentityResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool account_created = 1;
  if (has_account_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->account_created(), target);
  }
  
  // optional uint32 game_server_account_id = 2;
  if (has_game_server_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_server_account_id(), target);
  }
  
  // optional std::string game_server_identity_token = 3;
  if (has_game_server_identity_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_server_identity_token().data(), this->game_server_identity_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->game_server_identity_token(), target);
  }
  
  // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_CreateIdentityResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool account_created = 1;
    if (has_account_created()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 game_server_account_id = 2;
    if (has_game_server_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_account_id());
    }
    
    // optional std::string game_server_identity_token = 3;
    if (has_game_server_identity_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_server_identity_token());
    }
    
    // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_CreateIdentityResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_CreateIdentityResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_CreateIdentityResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_CreateIdentityResponse::MergeFrom(const CMsgGC_GameServer_CreateIdentityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_created()) {
      set_account_created(from.account_created());
    }
    if (from.has_game_server_account_id()) {
      set_game_server_account_id(from.game_server_account_id());
    }
    if (from.has_game_server_identity_token()) {
      set_game_server_identity_token(from.game_server_identity_token());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_CreateIdentityResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_CreateIdentityResponse::CopyFrom(const CMsgGC_GameServer_CreateIdentityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_CreateIdentityResponse::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_CreateIdentityResponse::Swap(CMsgGC_GameServer_CreateIdentityResponse* other) {
  if (other != this) {
    std::swap(account_created_, other->account_created_);
    std::swap(game_server_account_id_, other->game_server_account_id_);
    std::swap(game_server_identity_token_, other->game_server_identity_token_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_CreateIdentityResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_CreateIdentityResponse_descriptor_;
  metadata.reflection = CMsgGC_GameServer_CreateIdentityResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GameServer_List::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_List::CMsgGC_GameServer_List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_List::InitAsDefaultInstance() {
}

CMsgGC_GameServer_List::CMsgGC_GameServer_List(const CMsgGC_GameServer_List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_List::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_List::~CMsgGC_GameServer_List() {
  SharedDtor();
}

void CMsgGC_GameServer_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_List_descriptor_;
}

const CMsgGC_GameServer_List& CMsgGC_GameServer_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_List* CMsgGC_GameServer_List::default_instance_ = NULL;

CMsgGC_GameServer_List* CMsgGC_GameServer_List::New() const {
  return new CMsgGC_GameServer_List;
}

void CMsgGC_GameServer_List::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_List::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_List::MergeFrom(const CMsgGC_GameServer_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_List::CopyFrom(const CMsgGC_GameServer_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_List::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_List::Swap(CMsgGC_GameServer_List* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_List_descriptor_;
  metadata.reflection = CMsgGC_GameServer_List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GameServer_ListResponse_GameServerIdentity::kGameServerAccountIdFieldNumber;
const int CMsgGC_GameServer_ListResponse_GameServerIdentity::kGameServerIdentityTokenFieldNumber;
const int CMsgGC_GameServer_ListResponse_GameServerIdentity::kGameServerStandingFieldNumber;
const int CMsgGC_GameServer_ListResponse_GameServerIdentity::kGameServerStandingTrendFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_ListResponse_GameServerIdentity::CMsgGC_GameServer_ListResponse_GameServerIdentity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::InitAsDefaultInstance() {
}

CMsgGC_GameServer_ListResponse_GameServerIdentity::CMsgGC_GameServer_ListResponse_GameServerIdentity(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::SharedCtor() {
  _cached_size_ = 0;
  game_server_account_id_ = 0u;
  game_server_identity_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_server_standing_ = 0;
  game_server_standing_trend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_ListResponse_GameServerIdentity::~CMsgGC_GameServer_ListResponse_GameServerIdentity() {
  SharedDtor();
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::SharedDtor() {
  if (game_server_identity_token_ != &::google::protobuf::internal::kEmptyString) {
    delete game_server_identity_token_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ListResponse_GameServerIdentity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_ListResponse_GameServerIdentity_descriptor_;
}

const CMsgGC_GameServer_ListResponse_GameServerIdentity& CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_ListResponse_GameServerIdentity* CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance_ = NULL;

CMsgGC_GameServer_ListResponse_GameServerIdentity* CMsgGC_GameServer_ListResponse_GameServerIdentity::New() const {
  return new CMsgGC_GameServer_ListResponse_GameServerIdentity;
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_server_account_id_ = 0u;
    if (has_game_server_identity_token()) {
      if (game_server_identity_token_ != &::google::protobuf::internal::kEmptyString) {
        game_server_identity_token_->clear();
      }
    }
    game_server_standing_ = 0;
    game_server_standing_trend_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_ListResponse_GameServerIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_server_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_account_id_)));
          set_has_game_server_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_server_identity_token;
        break;
      }
      
      // optional std::string game_server_identity_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_server_identity_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_server_identity_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_server_identity_token().data(), this->game_server_identity_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_server_standing;
        break;
      }
      
      // optional int32 game_server_standing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_standing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_standing_)));
          set_has_game_server_standing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_server_standing_trend;
        break;
      }
      
      // optional int32 game_server_standing_trend = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_standing_trend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_standing_trend_)));
          set_has_game_server_standing_trend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_server_account_id = 1;
  if (has_game_server_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_server_account_id(), output);
  }
  
  // optional std::string game_server_identity_token = 2;
  if (has_game_server_identity_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_server_identity_token().data(), this->game_server_identity_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->game_server_identity_token(), output);
  }
  
  // optional int32 game_server_standing = 3;
  if (has_game_server_standing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_server_standing(), output);
  }
  
  // optional int32 game_server_standing_trend = 4;
  if (has_game_server_standing_trend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game_server_standing_trend(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_ListResponse_GameServerIdentity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_server_account_id = 1;
  if (has_game_server_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_server_account_id(), target);
  }
  
  // optional std::string game_server_identity_token = 2;
  if (has_game_server_identity_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_server_identity_token().data(), this->game_server_identity_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_server_identity_token(), target);
  }
  
  // optional int32 game_server_standing = 3;
  if (has_game_server_standing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_server_standing(), target);
  }
  
  // optional int32 game_server_standing_trend = 4;
  if (has_game_server_standing_trend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game_server_standing_trend(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_ListResponse_GameServerIdentity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_server_account_id = 1;
    if (has_game_server_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_account_id());
    }
    
    // optional std::string game_server_identity_token = 2;
    if (has_game_server_identity_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_server_identity_token());
    }
    
    // optional int32 game_server_standing = 3;
    if (has_game_server_standing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_standing());
    }
    
    // optional int32 game_server_standing_trend = 4;
    if (has_game_server_standing_trend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_standing_trend());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_ListResponse_GameServerIdentity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_ListResponse_GameServerIdentity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::MergeFrom(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_server_account_id()) {
      set_game_server_account_id(from.game_server_account_id());
    }
    if (from.has_game_server_identity_token()) {
      set_game_server_identity_token(from.game_server_identity_token());
    }
    if (from.has_game_server_standing()) {
      set_game_server_standing(from.game_server_standing());
    }
    if (from.has_game_server_standing_trend()) {
      set_game_server_standing_trend(from.game_server_standing_trend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::CopyFrom(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ListResponse_GameServerIdentity::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::Swap(CMsgGC_GameServer_ListResponse_GameServerIdentity* other) {
  if (other != this) {
    std::swap(game_server_account_id_, other->game_server_account_id_);
    std::swap(game_server_identity_token_, other->game_server_identity_token_);
    std::swap(game_server_standing_, other->game_server_standing_);
    std::swap(game_server_standing_trend_, other->game_server_standing_trend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_ListResponse_GameServerIdentity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_ListResponse_GameServerIdentity_descriptor_;
  metadata.reflection = CMsgGC_GameServer_ListResponse_GameServerIdentity_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGC_GameServer_ListResponse::kOwnedGameServersFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_ListResponse::CMsgGC_GameServer_ListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_ListResponse::InitAsDefaultInstance() {
}

CMsgGC_GameServer_ListResponse::CMsgGC_GameServer_ListResponse(const CMsgGC_GameServer_ListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_ListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_ListResponse::~CMsgGC_GameServer_ListResponse() {
  SharedDtor();
}

void CMsgGC_GameServer_ListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_ListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_ListResponse_descriptor_;
}

const CMsgGC_GameServer_ListResponse& CMsgGC_GameServer_ListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_ListResponse* CMsgGC_GameServer_ListResponse::default_instance_ = NULL;

CMsgGC_GameServer_ListResponse* CMsgGC_GameServer_ListResponse::New() const {
  return new CMsgGC_GameServer_ListResponse;
}

void CMsgGC_GameServer_ListResponse::Clear() {
  owned_game_servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_ListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owned_game_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_owned_game_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_owned_game_servers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_ListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
  for (int i = 0; i < this->owned_game_servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->owned_game_servers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_ListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
  for (int i = 0; i < this->owned_game_servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->owned_game_servers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_ListResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
  total_size += 1 * this->owned_game_servers_size();
  for (int i = 0; i < this->owned_game_servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->owned_game_servers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_ListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_ListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ListResponse::MergeFrom(const CMsgGC_GameServer_ListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  owned_game_servers_.MergeFrom(from.owned_game_servers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_ListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ListResponse::CopyFrom(const CMsgGC_GameServer_ListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ListResponse::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_ListResponse::Swap(CMsgGC_GameServer_ListResponse* other) {
  if (other != this) {
    owned_game_servers_.Swap(&other->owned_game_servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_ListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_ListResponse_descriptor_;
  metadata.reflection = CMsgGC_GameServer_ListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GameServer_ResetIdentity::kGameServerAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_ResetIdentity::CMsgGC_GameServer_ResetIdentity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_ResetIdentity::InitAsDefaultInstance() {
}

CMsgGC_GameServer_ResetIdentity::CMsgGC_GameServer_ResetIdentity(const CMsgGC_GameServer_ResetIdentity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_ResetIdentity::SharedCtor() {
  _cached_size_ = 0;
  game_server_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_ResetIdentity::~CMsgGC_GameServer_ResetIdentity() {
  SharedDtor();
}

void CMsgGC_GameServer_ResetIdentity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_ResetIdentity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ResetIdentity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_ResetIdentity_descriptor_;
}

const CMsgGC_GameServer_ResetIdentity& CMsgGC_GameServer_ResetIdentity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_ResetIdentity* CMsgGC_GameServer_ResetIdentity::default_instance_ = NULL;

CMsgGC_GameServer_ResetIdentity* CMsgGC_GameServer_ResetIdentity::New() const {
  return new CMsgGC_GameServer_ResetIdentity;
}

void CMsgGC_GameServer_ResetIdentity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_server_account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_ResetIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_server_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_account_id_)));
          set_has_game_server_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_ResetIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_server_account_id = 1;
  if (has_game_server_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_server_account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_ResetIdentity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_server_account_id = 1;
  if (has_game_server_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_server_account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_ResetIdentity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_server_account_id = 1;
    if (has_game_server_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ResetIdentity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_ResetIdentity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_ResetIdentity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ResetIdentity::MergeFrom(const CMsgGC_GameServer_ResetIdentity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_server_account_id()) {
      set_game_server_account_id(from.game_server_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_ResetIdentity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ResetIdentity::CopyFrom(const CMsgGC_GameServer_ResetIdentity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ResetIdentity::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_ResetIdentity::Swap(CMsgGC_GameServer_ResetIdentity* other) {
  if (other != this) {
    std::swap(game_server_account_id_, other->game_server_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_ResetIdentity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_ResetIdentity_descriptor_;
  metadata.reflection = CMsgGC_GameServer_ResetIdentity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GameServer_ResetIdentityResponse::kGameServerIdentityTokenResetFieldNumber;
const int CMsgGC_GameServer_ResetIdentityResponse::kGameServerAccountIdFieldNumber;
const int CMsgGC_GameServer_ResetIdentityResponse::kGameServerIdentityTokenFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GameServer_ResetIdentityResponse::CMsgGC_GameServer_ResetIdentityResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GameServer_ResetIdentityResponse::InitAsDefaultInstance() {
}

CMsgGC_GameServer_ResetIdentityResponse::CMsgGC_GameServer_ResetIdentityResponse(const CMsgGC_GameServer_ResetIdentityResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GameServer_ResetIdentityResponse::SharedCtor() {
  _cached_size_ = 0;
  game_server_identity_token_reset_ = false;
  game_server_account_id_ = 0u;
  game_server_identity_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GameServer_ResetIdentityResponse::~CMsgGC_GameServer_ResetIdentityResponse() {
  SharedDtor();
}

void CMsgGC_GameServer_ResetIdentityResponse::SharedDtor() {
  if (game_server_identity_token_ != &::google::protobuf::internal::kEmptyString) {
    delete game_server_identity_token_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGC_GameServer_ResetIdentityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GameServer_ResetIdentityResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GameServer_ResetIdentityResponse_descriptor_;
}

const CMsgGC_GameServer_ResetIdentityResponse& CMsgGC_GameServer_ResetIdentityResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGC_GameServer_ResetIdentityResponse* CMsgGC_GameServer_ResetIdentityResponse::default_instance_ = NULL;

CMsgGC_GameServer_ResetIdentityResponse* CMsgGC_GameServer_ResetIdentityResponse::New() const {
  return new CMsgGC_GameServer_ResetIdentityResponse;
}

void CMsgGC_GameServer_ResetIdentityResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_server_identity_token_reset_ = false;
    game_server_account_id_ = 0u;
    if (has_game_server_identity_token()) {
      if (game_server_identity_token_ != &::google::protobuf::internal::kEmptyString) {
        game_server_identity_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GameServer_ResetIdentityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool game_server_identity_token_reset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &game_server_identity_token_reset_)));
          set_has_game_server_identity_token_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_server_account_id;
        break;
      }
      
      // optional uint32 game_server_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_account_id_)));
          set_has_game_server_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_game_server_identity_token;
        break;
      }
      
      // optional std::string game_server_identity_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_server_identity_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_server_identity_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_server_identity_token().data(), this->game_server_identity_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GameServer_ResetIdentityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool game_server_identity_token_reset = 1;
  if (has_game_server_identity_token_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->game_server_identity_token_reset(), output);
  }
  
  // optional uint32 game_server_account_id = 2;
  if (has_game_server_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_server_account_id(), output);
  }
  
  // optional std::string game_server_identity_token = 3;
  if (has_game_server_identity_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_server_identity_token().data(), this->game_server_identity_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->game_server_identity_token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GameServer_ResetIdentityResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool game_server_identity_token_reset = 1;
  if (has_game_server_identity_token_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->game_server_identity_token_reset(), target);
  }
  
  // optional uint32 game_server_account_id = 2;
  if (has_game_server_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_server_account_id(), target);
  }
  
  // optional std::string game_server_identity_token = 3;
  if (has_game_server_identity_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_server_identity_token().data(), this->game_server_identity_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->game_server_identity_token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GameServer_ResetIdentityResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool game_server_identity_token_reset = 1;
    if (has_game_server_identity_token_reset()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 game_server_account_id = 2;
    if (has_game_server_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_account_id());
    }
    
    // optional std::string game_server_identity_token = 3;
    if (has_game_server_identity_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_server_identity_token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GameServer_ResetIdentityResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GameServer_ResetIdentityResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GameServer_ResetIdentityResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ResetIdentityResponse::MergeFrom(const CMsgGC_GameServer_ResetIdentityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_server_identity_token_reset()) {
      set_game_server_identity_token_reset(from.game_server_identity_token_reset());
    }
    if (from.has_game_server_account_id()) {
      set_game_server_account_id(from.game_server_account_id());
    }
    if (from.has_game_server_identity_token()) {
      set_game_server_identity_token(from.game_server_identity_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GameServer_ResetIdentityResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ResetIdentityResponse::CopyFrom(const CMsgGC_GameServer_ResetIdentityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ResetIdentityResponse::IsInitialized() const {
  
  return true;
}

void CMsgGC_GameServer_ResetIdentityResponse::Swap(CMsgGC_GameServer_ResetIdentityResponse* other) {
  if (other != this) {
    std::swap(game_server_identity_token_reset_, other->game_server_identity_token_reset_);
    std::swap(game_server_account_id_, other->game_server_account_id_);
    std::swap(game_server_identity_token_, other->game_server_identity_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GameServer_ResetIdentityResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GameServer_ResetIdentityResponse_descriptor_;
  metadata.reflection = CMsgGC_GameServer_ResetIdentityResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
