// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsdk_gcmessages.proto

#include "gcsdk_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class CMsgSOIDOwnerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOIDOwner>
      _instance;
} _CMsgSOIDOwner_default_instance_;
class CMsgSOSingleObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOSingleObject>
      _instance;
} _CMsgSOSingleObject_default_instance_;
class CMsgSOMultipleObjects_SingleObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOMultipleObjects_SingleObject>
      _instance;
} _CMsgSOMultipleObjects_SingleObject_default_instance_;
class CMsgSOMultipleObjectsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOMultipleObjects>
      _instance;
} _CMsgSOMultipleObjects_default_instance_;
class CMsgSOCacheSubscribed_SubscribedTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheSubscribed_SubscribedType>
      _instance;
} _CMsgSOCacheSubscribed_SubscribedType_default_instance_;
class CMsgSOCacheSubscribedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheSubscribed>
      _instance;
} _CMsgSOCacheSubscribed_default_instance_;
class CMsgSOCacheSubscribedUpToDateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheSubscribedUpToDate>
      _instance;
} _CMsgSOCacheSubscribedUpToDate_default_instance_;
class CMsgSOCacheUnsubscribedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheUnsubscribed>
      _instance;
} _CMsgSOCacheUnsubscribed_default_instance_;
class CMsgSOCacheSubscriptionCheckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheSubscriptionCheck>
      _instance;
} _CMsgSOCacheSubscriptionCheck_default_instance_;
class CMsgSOCacheSubscriptionRefreshDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheSubscriptionRefresh>
      _instance;
} _CMsgSOCacheSubscriptionRefresh_default_instance_;
class CMsgSOCacheVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheVersion>
      _instance;
} _CMsgSOCacheVersion_default_instance_;
class CMsgGCMultiplexMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMultiplexMessage>
      _instance;
} _CMsgGCMultiplexMessage_default_instance_;
class CGCToGCMsgMasterAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgMasterAck>
      _instance;
} _CGCToGCMsgMasterAck_default_instance_;
class CGCToGCMsgMasterAck_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgMasterAck_Response>
      _instance;
} _CGCToGCMsgMasterAck_Response_default_instance_;
class CGCToGCMsgMasterStartupComplete_GCInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgMasterStartupComplete_GCInfo>
      _instance;
} _CGCToGCMsgMasterStartupComplete_GCInfo_default_instance_;
class CGCToGCMsgMasterStartupCompleteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgMasterStartupComplete>
      _instance;
} _CGCToGCMsgMasterStartupComplete_default_instance_;
class CGCToGCMsgRoutedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgRouted>
      _instance;
} _CGCToGCMsgRouted_default_instance_;
class CGCToGCMsgRoutedReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgRoutedReply>
      _instance;
} _CGCToGCMsgRoutedReply_default_instance_;
class CMsgGCUpdateSubGCSessionInfo_CMsgUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCUpdateSubGCSessionInfo_CMsgUpdate>
      _instance;
} _CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_default_instance_;
class CMsgGCUpdateSubGCSessionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCUpdateSubGCSessionInfo>
      _instance;
} _CMsgGCUpdateSubGCSessionInfo_default_instance_;
class CMsgGCRequestSubGCSessionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCRequestSubGCSessionInfo>
      _instance;
} _CMsgGCRequestSubGCSessionInfo_default_instance_;
class CMsgGCRequestSubGCSessionInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCRequestSubGCSessionInfoResponse>
      _instance;
} _CMsgGCRequestSubGCSessionInfoResponse_default_instance_;
class CMsgGCToGCIncrementRecruitmentLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCIncrementRecruitmentLevel>
      _instance;
} _CMsgGCToGCIncrementRecruitmentLevel_default_instance_;
class CMsgSOCacheHaveVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheHaveVersion>
      _instance;
} _CMsgSOCacheHaveVersion_default_instance_;
class CMsgConnectionStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgConnectionStatus>
      _instance;
} _CMsgConnectionStatus_default_instance_;
class CMsgGCToGCSOCacheSubscribe_CMsgHaveVersionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions>
      _instance;
} _CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_default_instance_;
class CMsgGCToGCSOCacheSubscribeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCSOCacheSubscribe>
      _instance;
} _CMsgGCToGCSOCacheSubscribe_default_instance_;
class CMsgGCToGCSOCacheUnsubscribeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCSOCacheUnsubscribe>
      _instance;
} _CMsgGCToGCSOCacheUnsubscribe_default_instance_;
class CMsgGCClientPingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCClientPing>
      _instance;
} _CMsgGCClientPing_default_instance_;
namespace protobuf_gcsdk_5fgcmessages_2eproto {
void InitDefaultsCMsgSOIDOwnerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSOIDOwner_default_instance_;
    new (ptr) ::CMsgSOIDOwner();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSOIDOwner::InitAsDefaultInstance();
}

void InitDefaultsCMsgSOIDOwner() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSOIDOwnerImpl);
}

void InitDefaultsCMsgSOSingleObjectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOIDOwner();
  {
    void* ptr = &::_CMsgSOSingleObject_default_instance_;
    new (ptr) ::CMsgSOSingleObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSOSingleObject::InitAsDefaultInstance();
}

void InitDefaultsCMsgSOSingleObject() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSOSingleObjectImpl);
}

void InitDefaultsCMsgSOMultipleObjects_SingleObjectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSOMultipleObjects_SingleObject_default_instance_;
    new (ptr) ::CMsgSOMultipleObjects_SingleObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSOMultipleObjects_SingleObject::InitAsDefaultInstance();
}

void InitDefaultsCMsgSOMultipleObjects_SingleObject() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSOMultipleObjects_SingleObjectImpl);
}

void InitDefaultsCMsgSOMultipleObjectsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOMultipleObjects_SingleObject();
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOIDOwner();
  {
    void* ptr = &::_CMsgSOMultipleObjects_default_instance_;
    new (ptr) ::CMsgSOMultipleObjects();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSOMultipleObjects::InitAsDefaultInstance();
}

void InitDefaultsCMsgSOMultipleObjects() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSOMultipleObjectsImpl);
}

void InitDefaultsCMsgSOCacheSubscribed_SubscribedTypeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSOCacheSubscribed_SubscribedType_default_instance_;
    new (ptr) ::CMsgSOCacheSubscribed_SubscribedType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSOCacheSubscribed_SubscribedType::InitAsDefaultInstance();
}

void InitDefaultsCMsgSOCacheSubscribed_SubscribedType() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSOCacheSubscribed_SubscribedTypeImpl);
}

void InitDefaultsCMsgSOCacheSubscribedImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheSubscribed_SubscribedType();
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOIDOwner();
  {
    void* ptr = &::_CMsgSOCacheSubscribed_default_instance_;
    new (ptr) ::CMsgSOCacheSubscribed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSOCacheSubscribed::InitAsDefaultInstance();
}

void InitDefaultsCMsgSOCacheSubscribed() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSOCacheSubscribedImpl);
}

void InitDefaultsCMsgSOCacheSubscribedUpToDateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOIDOwner();
  {
    void* ptr = &::_CMsgSOCacheSubscribedUpToDate_default_instance_;
    new (ptr) ::CMsgSOCacheSubscribedUpToDate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSOCacheSubscribedUpToDate::InitAsDefaultInstance();
}

void InitDefaultsCMsgSOCacheSubscribedUpToDate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSOCacheSubscribedUpToDateImpl);
}

void InitDefaultsCMsgSOCacheUnsubscribedImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSOCacheUnsubscribed_default_instance_;
    new (ptr) ::CMsgSOCacheUnsubscribed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSOCacheUnsubscribed::InitAsDefaultInstance();
}

void InitDefaultsCMsgSOCacheUnsubscribed() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSOCacheUnsubscribedImpl);
}

void InitDefaultsCMsgSOCacheSubscriptionCheckImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOIDOwner();
  {
    void* ptr = &::_CMsgSOCacheSubscriptionCheck_default_instance_;
    new (ptr) ::CMsgSOCacheSubscriptionCheck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSOCacheSubscriptionCheck::InitAsDefaultInstance();
}

void InitDefaultsCMsgSOCacheSubscriptionCheck() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSOCacheSubscriptionCheckImpl);
}

void InitDefaultsCMsgSOCacheSubscriptionRefreshImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOIDOwner();
  {
    void* ptr = &::_CMsgSOCacheSubscriptionRefresh_default_instance_;
    new (ptr) ::CMsgSOCacheSubscriptionRefresh();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSOCacheSubscriptionRefresh::InitAsDefaultInstance();
}

void InitDefaultsCMsgSOCacheSubscriptionRefresh() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSOCacheSubscriptionRefreshImpl);
}

void InitDefaultsCMsgSOCacheVersionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSOCacheVersion_default_instance_;
    new (ptr) ::CMsgSOCacheVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSOCacheVersion::InitAsDefaultInstance();
}

void InitDefaultsCMsgSOCacheVersion() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSOCacheVersionImpl);
}

void InitDefaultsCMsgGCMultiplexMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCMultiplexMessage_default_instance_;
    new (ptr) ::CMsgGCMultiplexMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCMultiplexMessage::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCMultiplexMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCMultiplexMessageImpl);
}

void InitDefaultsCGCToGCMsgMasterAckImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CGCToGCMsgMasterAck_default_instance_;
    new (ptr) ::CGCToGCMsgMasterAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCToGCMsgMasterAck::InitAsDefaultInstance();
}

void InitDefaultsCGCToGCMsgMasterAck() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCToGCMsgMasterAckImpl);
}

void InitDefaultsCGCToGCMsgMasterAck_ResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CGCToGCMsgMasterAck_Response_default_instance_;
    new (ptr) ::CGCToGCMsgMasterAck_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCToGCMsgMasterAck_Response::InitAsDefaultInstance();
}

void InitDefaultsCGCToGCMsgMasterAck_Response() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCToGCMsgMasterAck_ResponseImpl);
}

void InitDefaultsCGCToGCMsgMasterStartupComplete_GCInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CGCToGCMsgMasterStartupComplete_GCInfo_default_instance_;
    new (ptr) ::CGCToGCMsgMasterStartupComplete_GCInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCToGCMsgMasterStartupComplete_GCInfo::InitAsDefaultInstance();
}

void InitDefaultsCGCToGCMsgMasterStartupComplete_GCInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCToGCMsgMasterStartupComplete_GCInfoImpl);
}

void InitDefaultsCGCToGCMsgMasterStartupCompleteImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCGCToGCMsgMasterStartupComplete_GCInfo();
  {
    void* ptr = &::_CGCToGCMsgMasterStartupComplete_default_instance_;
    new (ptr) ::CGCToGCMsgMasterStartupComplete();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCToGCMsgMasterStartupComplete::InitAsDefaultInstance();
}

void InitDefaultsCGCToGCMsgMasterStartupComplete() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCToGCMsgMasterStartupCompleteImpl);
}

void InitDefaultsCGCToGCMsgRoutedImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CGCToGCMsgRouted_default_instance_;
    new (ptr) ::CGCToGCMsgRouted();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCToGCMsgRouted::InitAsDefaultInstance();
}

void InitDefaultsCGCToGCMsgRouted() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCToGCMsgRoutedImpl);
}

void InitDefaultsCGCToGCMsgRoutedReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CGCToGCMsgRoutedReply_default_instance_;
    new (ptr) ::CGCToGCMsgRoutedReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CGCToGCMsgRoutedReply::InitAsDefaultInstance();
}

void InitDefaultsCGCToGCMsgRoutedReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCGCToGCMsgRoutedReplyImpl);
}

void InitDefaultsCMsgGCUpdateSubGCSessionInfo_CMsgUpdateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_default_instance_;
    new (ptr) ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCUpdateSubGCSessionInfo_CMsgUpdate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCUpdateSubGCSessionInfo_CMsgUpdateImpl);
}

void InitDefaultsCMsgGCUpdateSubGCSessionInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCUpdateSubGCSessionInfo_CMsgUpdate();
  {
    void* ptr = &::_CMsgGCUpdateSubGCSessionInfo_default_instance_;
    new (ptr) ::CMsgGCUpdateSubGCSessionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCUpdateSubGCSessionInfo::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCUpdateSubGCSessionInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCUpdateSubGCSessionInfoImpl);
}

void InitDefaultsCMsgGCRequestSubGCSessionInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCRequestSubGCSessionInfo_default_instance_;
    new (ptr) ::CMsgGCRequestSubGCSessionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCRequestSubGCSessionInfo::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCRequestSubGCSessionInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCRequestSubGCSessionInfoImpl);
}

void InitDefaultsCMsgGCRequestSubGCSessionInfoResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCRequestSubGCSessionInfoResponse_default_instance_;
    new (ptr) ::CMsgGCRequestSubGCSessionInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCRequestSubGCSessionInfoResponse::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCRequestSubGCSessionInfoResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCRequestSubGCSessionInfoResponseImpl);
}

void InitDefaultsCMsgGCToGCIncrementRecruitmentLevelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCToGCIncrementRecruitmentLevel_default_instance_;
    new (ptr) ::CMsgGCToGCIncrementRecruitmentLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCToGCIncrementRecruitmentLevel::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCToGCIncrementRecruitmentLevel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCToGCIncrementRecruitmentLevelImpl);
}

void InitDefaultsCMsgSOCacheHaveVersionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOIDOwner();
  {
    void* ptr = &::_CMsgSOCacheHaveVersion_default_instance_;
    new (ptr) ::CMsgSOCacheHaveVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSOCacheHaveVersion::InitAsDefaultInstance();
}

void InitDefaultsCMsgSOCacheHaveVersion() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSOCacheHaveVersionImpl);
}

void InitDefaultsCMsgConnectionStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgConnectionStatus_default_instance_;
    new (ptr) ::CMsgConnectionStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgConnectionStatus::InitAsDefaultInstance();
}

void InitDefaultsCMsgConnectionStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgConnectionStatusImpl);
}

void InitDefaultsCMsgGCToGCSOCacheSubscribe_CMsgHaveVersionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_default_instance_;
    new (ptr) ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCToGCSOCacheSubscribe_CMsgHaveVersions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCToGCSOCacheSubscribe_CMsgHaveVersionsImpl);
}

void InitDefaultsCMsgGCToGCSOCacheSubscribeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCSOCacheSubscribe_CMsgHaveVersions();
  {
    void* ptr = &::_CMsgGCToGCSOCacheSubscribe_default_instance_;
    new (ptr) ::CMsgGCToGCSOCacheSubscribe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCToGCSOCacheSubscribe::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCToGCSOCacheSubscribe() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCToGCSOCacheSubscribeImpl);
}

void InitDefaultsCMsgGCToGCSOCacheUnsubscribeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCToGCSOCacheUnsubscribe_default_instance_;
    new (ptr) ::CMsgGCToGCSOCacheUnsubscribe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCToGCSOCacheUnsubscribe::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCToGCSOCacheUnsubscribe() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCToGCSOCacheUnsubscribeImpl);
}

void InitDefaultsCMsgGCClientPingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgGCClientPing_default_instance_;
    new (ptr) ::CMsgGCClientPing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCClientPing::InitAsDefaultInstance();
}

void InitDefaultsCMsgGCClientPing() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgGCClientPingImpl);
}

::google::protobuf::Metadata file_level_metadata[29];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOIDOwner, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOIDOwner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOIDOwner, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOIDOwner, id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOSingleObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOSingleObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOSingleObject, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOSingleObject, type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOSingleObject, object_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOSingleObject, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOSingleObject, owner_soid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOSingleObject, service_id_),
  2,
  4,
  0,
  3,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOMultipleObjects_SingleObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOMultipleObjects_SingleObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOMultipleObjects_SingleObject, type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOMultipleObjects_SingleObject, object_data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOMultipleObjects, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOMultipleObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOMultipleObjects, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOMultipleObjects, objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOMultipleObjects, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOMultipleObjects, owner_soid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOMultipleObjects, service_id_),
  1,
  ~0u,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribed_SubscribedType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribed_SubscribedType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribed_SubscribedType, type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribed_SubscribedType, object_data_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribed, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribed, objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribed, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribed, owner_soid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribed, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribed, service_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribed, sync_version_),
  1,
  ~0u,
  2,
  0,
  4,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribedUpToDate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribedUpToDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribedUpToDate, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribedUpToDate, owner_soid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribedUpToDate, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribedUpToDate, service_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscribedUpToDate, sync_version_),
  1,
  0,
  3,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheUnsubscribed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheUnsubscribed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheUnsubscribed, owner_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscriptionCheck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscriptionCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscriptionCheck, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscriptionCheck, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscriptionCheck, owner_soid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscriptionCheck, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscriptionCheck, service_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscriptionCheck, sync_version_),
  1,
  2,
  0,
  4,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscriptionRefresh, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscriptionRefresh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscriptionRefresh, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheSubscriptionRefresh, owner_soid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheVersion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheVersion, version_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCMultiplexMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCMultiplexMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCMultiplexMessage, msgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCMultiplexMessage, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCMultiplexMessage, steamids_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterAck, dir_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterAck, machine_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterAck, process_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterAck, type_instances_),
  2,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterAck_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterAck_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterAck_Response, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterStartupComplete_GCInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterStartupComplete_GCInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterStartupComplete_GCInfo, dir_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterStartupComplete_GCInfo, machine_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterStartupComplete, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterStartupComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgMasterStartupComplete, gc_info_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgRouted, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgRouted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgRouted, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgRouted, sender_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgRouted, net_message_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgRoutedReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgRoutedReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgRoutedReply, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CGCToGCMsgRoutedReply, net_message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, trusted_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCUpdateSubGCSessionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCUpdateSubGCSessionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCUpdateSubGCSessionInfo, updates_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfo, steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfoResponse, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfoResponse, trusted_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCIncrementRecruitmentLevel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCIncrementRecruitmentLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCIncrementRecruitmentLevel, steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheHaveVersion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheHaveVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheHaveVersion, soid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheHaveVersion, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSOCacheHaveVersion, service_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgConnectionStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgConnectionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgConnectionStatus, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgConnectionStatus, client_session_need_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgConnectionStatus, queue_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgConnectionStatus, queue_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgConnectionStatus, wait_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgConnectionStatus, estimated_wait_seconds_remaining_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, version_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe, subscriber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe, subscribe_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe, sync_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe, have_versions_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCSOCacheUnsubscribe, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCSOCacheUnsubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCSOCacheUnsubscribe, subscriber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCToGCSOCacheUnsubscribe, unsubscribe_from_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCClientPing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgGCClientPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CMsgSOIDOwner)},
  { 9, 20, sizeof(::CMsgSOSingleObject)},
  { 26, 33, sizeof(::CMsgSOMultipleObjects_SingleObject)},
  { 35, 45, sizeof(::CMsgSOMultipleObjects)},
  { 50, 57, sizeof(::CMsgSOCacheSubscribed_SubscribedType)},
  { 59, 71, sizeof(::CMsgSOCacheSubscribed)},
  { 78, 88, sizeof(::CMsgSOCacheSubscribedUpToDate)},
  { 93, 99, sizeof(::CMsgSOCacheUnsubscribed)},
  { 100, 111, sizeof(::CMsgSOCacheSubscriptionCheck)},
  { 117, 124, sizeof(::CMsgSOCacheSubscriptionRefresh)},
  { 126, 132, sizeof(::CMsgSOCacheVersion)},
  { 133, 141, sizeof(::CMsgGCMultiplexMessage)},
  { 144, 153, sizeof(::CGCToGCMsgMasterAck)},
  { 157, 163, sizeof(::CGCToGCMsgMasterAck_Response)},
  { 164, 171, sizeof(::CGCToGCMsgMasterStartupComplete_GCInfo)},
  { 173, 179, sizeof(::CGCToGCMsgMasterStartupComplete)},
  { 180, 188, sizeof(::CGCToGCMsgRouted)},
  { 191, 198, sizeof(::CGCToGCMsgRoutedReply)},
  { 200, 208, sizeof(::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate)},
  { 211, 217, sizeof(::CMsgGCUpdateSubGCSessionInfo)},
  { 218, 224, sizeof(::CMsgGCRequestSubGCSessionInfo)},
  { 225, 232, sizeof(::CMsgGCRequestSubGCSessionInfoResponse)},
  { 234, 240, sizeof(::CMsgGCToGCIncrementRecruitmentLevel)},
  { 241, 249, sizeof(::CMsgSOCacheHaveVersion)},
  { 252, 263, sizeof(::CMsgConnectionStatus)},
  { 269, 276, sizeof(::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions)},
  { 278, 287, sizeof(::CMsgGCToGCSOCacheSubscribe)},
  { 291, 298, sizeof(::CMsgGCToGCSOCacheUnsubscribe)},
  { 300, 305, sizeof(::CMsgGCClientPing)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSOIDOwner_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSOSingleObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSOMultipleObjects_SingleObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSOMultipleObjects_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSOCacheSubscribed_SubscribedType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSOCacheSubscribed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSOCacheSubscribedUpToDate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSOCacheUnsubscribed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSOCacheSubscriptionCheck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSOCacheSubscriptionRefresh_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSOCacheVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCMultiplexMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCToGCMsgMasterAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCToGCMsgMasterAck_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCToGCMsgMasterStartupComplete_GCInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCToGCMsgMasterStartupComplete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCToGCMsgRouted_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CGCToGCMsgRoutedReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCUpdateSubGCSessionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCRequestSubGCSessionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCRequestSubGCSessionInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCToGCIncrementRecruitmentLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSOCacheHaveVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgConnectionStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCToGCSOCacheSubscribe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCToGCSOCacheUnsubscribe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgGCClientPing_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gcsdk_gcmessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 29);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026gcsdk_gcmessages.proto\032\023steammessages."
      "proto\")\n\rCMsgSOIDOwner\022\014\n\004type\030\001 \001(\r\022\n\n\002"
      "id\030\002 \001(\004\"\222\001\n\022CMsgSOSingleObject\022\r\n\005owner"
      "\030\001 \001(\006\022\017\n\007type_id\030\002 \001(\005\022\023\n\013object_data\030\003"
      " \001(\014\022\017\n\007version\030\004 \001(\006\022\"\n\nowner_soid\030\005 \001("
      "\0132\016.CMsgSOIDOwner\022\022\n\nservice_id\030\006 \001(\r\"\333\001"
      "\n\025CMsgSOMultipleObjects\022\r\n\005owner\030\001 \001(\006\0224"
      "\n\007objects\030\002 \003(\0132#.CMsgSOMultipleObjects."
      "SingleObject\022\017\n\007version\030\003 \001(\006\022\"\n\nowner_s"
      "oid\030\006 \001(\0132\016.CMsgSOIDOwner\022\022\n\nservice_id\030"
      "\007 \001(\r\0324\n\014SingleObject\022\017\n\007type_id\030\001 \001(\005\022\023"
      "\n\013object_data\030\002 \001(\014\"\213\002\n\025CMsgSOCacheSubsc"
      "ribed\022\r\n\005owner\030\001 \001(\006\0226\n\007objects\030\002 \003(\0132%."
      "CMsgSOCacheSubscribed.SubscribedType\022\017\n\007"
      "version\030\003 \001(\006\022\"\n\nowner_soid\030\004 \001(\0132\016.CMsg"
      "SOIDOwner\022\022\n\nservice_id\030\005 \001(\r\022\024\n\014service"
      "_list\030\006 \003(\r\022\024\n\014sync_version\030\007 \001(\006\0326\n\016Sub"
      "scribedType\022\017\n\007type_id\030\001 \001(\005\022\023\n\013object_d"
      "ata\030\002 \003(\014\"\224\001\n\035CMsgSOCacheSubscribedUpToD"
      "ate\022\017\n\007version\030\001 \001(\006\022\"\n\nowner_soid\030\002 \001(\013"
      "2\016.CMsgSOIDOwner\022\022\n\nservice_id\030\003 \001(\r\022\024\n\014"
      "service_list\030\004 \003(\r\022\024\n\014sync_version\030\005 \001(\006"
      "\"(\n\027CMsgSOCacheUnsubscribed\022\r\n\005owner\030\001 \001"
      "(\006\"\242\001\n\034CMsgSOCacheSubscriptionCheck\022\r\n\005o"
      "wner\030\001 \001(\006\022\017\n\007version\030\002 \001(\006\022\"\n\nowner_soi"
      "d\030\003 \001(\0132\016.CMsgSOIDOwner\022\022\n\nservice_id\030\004 "
      "\001(\r\022\024\n\014service_list\030\005 \003(\r\022\024\n\014sync_versio"
      "n\030\006 \001(\006\"S\n\036CMsgSOCacheSubscriptionRefres"
      "h\022\r\n\005owner\030\001 \001(\006\022\"\n\nowner_soid\030\002 \001(\0132\016.C"
      "MsgSOIDOwner\"%\n\022CMsgSOCacheVersion\022\017\n\007ve"
      "rsion\030\001 \001(\006\"L\n\026CMsgGCMultiplexMessage\022\017\n"
      "\007msgtype\030\001 \001(\r\022\017\n\007payload\030\002 \001(\014\022\020\n\010steam"
      "ids\030\003 \003(\006\"l\n\023CGCToGCMsgMasterAck\022\021\n\tdir_"
      "index\030\001 \001(\r\022\024\n\014machine_name\030\003 \001(\t\022\024\n\014pro"
      "cess_name\030\004 \001(\t\022\026\n\016type_instances\030\005 \003(\r\""
      "2\n\034CGCToGCMsgMasterAck_Response\022\022\n\007eresu"
      "lt\030\001 \001(\005:\0012\"\216\001\n\037CGCToGCMsgMasterStartupC"
      "omplete\0228\n\007gc_info\030\001 \003(\0132\'.CGCToGCMsgMas"
      "terStartupComplete.GCInfo\0321\n\006GCInfo\022\021\n\td"
      "ir_index\030\001 \001(\r\022\024\n\014machine_name\030\002 \001(\t\"L\n\020"
      "CGCToGCMsgRouted\022\020\n\010msg_type\030\001 \001(\r\022\021\n\tse"
      "nder_id\030\002 \001(\006\022\023\n\013net_message\030\003 \001(\014\">\n\025CG"
      "CToGCMsgRoutedReply\022\020\n\010msg_type\030\001 \001(\r\022\023\n"
      "\013net_message\030\002 \001(\014\"\225\001\n\034CMsgGCUpdateSubGC"
      "SessionInfo\0229\n\007updates\030\001 \003(\0132(.CMsgGCUpd"
      "ateSubGCSessionInfo.CMsgUpdate\032:\n\nCMsgUp"
      "date\022\017\n\007steamid\030\001 \001(\006\022\n\n\002ip\030\002 \001(\007\022\017\n\007tru"
      "sted\030\003 \001(\010\"0\n\035CMsgGCRequestSubGCSessionI"
      "nfo\022\017\n\007steamid\030\001 \001(\006\"D\n%CMsgGCRequestSub"
      "GCSessionInfoResponse\022\n\n\002ip\030\001 \001(\007\022\017\n\007tru"
      "sted\030\002 \001(\010\"6\n#CMsgGCToGCIncrementRecruit"
      "mentLevel\022\017\n\007steamid\030\001 \001(\006\"[\n\026CMsgSOCach"
      "eHaveVersion\022\034\n\004soid\030\001 \001(\0132\016.CMsgSOIDOwn"
      "er\022\017\n\007version\030\002 \001(\006\022\022\n\nservice_id\030\003 \001(\r\""
      "\345\001\n\024CMsgConnectionStatus\022D\n\006status\030\001 \001(\016"
      "2\023.GCConnectionStatus:\037GCConnectionStatu"
      "s_HAVE_SESSION\022\033\n\023client_session_need\030\002 "
      "\001(\r\022\026\n\016queue_position\030\003 \001(\005\022\022\n\nqueue_siz"
      "e\030\004 \001(\005\022\024\n\014wait_seconds\030\005 \001(\005\022(\n estimat"
      "ed_wait_seconds_remaining\030\006 \001(\005\"\332\001\n\032CMsg"
      "GCToGCSOCacheSubscribe\022\022\n\nsubscriber\030\001 \001"
      "(\006\022\024\n\014subscribe_to\030\002 \001(\006\022\024\n\014sync_version"
      "\030\003 \001(\006\022C\n\rhave_versions\030\004 \003(\0132,.CMsgGCTo"
      "GCSOCacheSubscribe.CMsgHaveVersions\0327\n\020C"
      "MsgHaveVersions\022\022\n\nservice_id\030\001 \001(\r\022\017\n\007v"
      "ersion\030\002 \001(\004\"L\n\034CMsgGCToGCSOCacheUnsubsc"
      "ribe\022\022\n\nsubscriber\030\001 \001(\006\022\030\n\020unsubscribe_"
      "from\030\002 \001(\006\"\022\n\020CMsgGCClientPing*T\n\022Partne"
      "rAccountType\022\020\n\014PARTNER_NONE\020\000\022\031\n\025PARTNE"
      "R_PERFECT_WORLD\020\001\022\021\n\rPARTNER_NEXON\020\002*\367\001\n"
      "\022GCConnectionStatus\022#\n\037GCConnectionStatu"
      "s_HAVE_SESSION\020\000\022$\n GCConnectionStatus_G"
      "C_GOING_DOWN\020\001\022!\n\035GCConnectionStatus_NO_"
      "SESSION\020\002\0220\n,GCConnectionStatus_NO_SESSI"
      "ON_IN_LOGON_QUEUE\020\003\022\037\n\033GCConnectionStatu"
      "s_NO_STEAM\020\004\022 \n\034GCConnectionStatus_SUSPE"
      "NDED\020\005B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3053);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gcsdk_gcmessages.proto", &protobuf_RegisterTypes);
  ::protobuf_steammessages_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gcsdk_5fgcmessages_2eproto
const ::google::protobuf::EnumDescriptor* PartnerAccountType_descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_enum_descriptors[0];
}
bool PartnerAccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GCConnectionStatus_descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_enum_descriptors[1];
}
bool GCConnectionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgSOIDOwner::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOIDOwner::kTypeFieldNumber;
const int CMsgSOIDOwner::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOIDOwner::CMsgSOIDOwner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOIDOwner();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOIDOwner)
}
CMsgSOIDOwner::CMsgSOIDOwner(const CMsgSOIDOwner& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOIDOwner)
}

void CMsgSOIDOwner::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

CMsgSOIDOwner::~CMsgSOIDOwner() {
  // @@protoc_insertion_point(destructor:CMsgSOIDOwner)
  SharedDtor();
}

void CMsgSOIDOwner::SharedDtor() {
}

void CMsgSOIDOwner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOIDOwner::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOIDOwner& CMsgSOIDOwner::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOIDOwner();
  return *internal_default_instance();
}

CMsgSOIDOwner* CMsgSOIDOwner::New(::google::protobuf::Arena* arena) const {
  CMsgSOIDOwner* n = new CMsgSOIDOwner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOIDOwner::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOIDOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOIDOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOIDOwner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOIDOwner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOIDOwner)
  return false;
#undef DO_
}

void CMsgSOIDOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOIDOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOIDOwner)
}

::google::protobuf::uint8* CMsgSOIDOwner::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOIDOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOIDOwner)
  return target;
}

size_t CMsgSOIDOwner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOIDOwner)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOIDOwner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOIDOwner)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOIDOwner* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOIDOwner>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOIDOwner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOIDOwner)
    MergeFrom(*source);
  }
}

void CMsgSOIDOwner::MergeFrom(const CMsgSOIDOwner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOIDOwner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOIDOwner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOIDOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOIDOwner::CopyFrom(const CMsgSOIDOwner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOIDOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOIDOwner::IsInitialized() const {
  return true;
}

void CMsgSOIDOwner::Swap(CMsgSOIDOwner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOIDOwner::InternalSwap(CMsgSOIDOwner* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOIDOwner::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOSingleObject::InitAsDefaultInstance() {
  ::_CMsgSOSingleObject_default_instance_._instance.get_mutable()->owner_soid_ = const_cast< ::CMsgSOIDOwner*>(
      ::CMsgSOIDOwner::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOSingleObject::kOwnerFieldNumber;
const int CMsgSOSingleObject::kTypeIdFieldNumber;
const int CMsgSOSingleObject::kObjectDataFieldNumber;
const int CMsgSOSingleObject::kVersionFieldNumber;
const int CMsgSOSingleObject::kOwnerSoidFieldNumber;
const int CMsgSOSingleObject::kServiceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOSingleObject::CMsgSOSingleObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOSingleObject();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOSingleObject)
}
CMsgSOSingleObject::CMsgSOSingleObject(const CMsgSOSingleObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_object_data()) {
    object_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_data_);
  }
  if (from.has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = NULL;
  }
  ::memcpy(&owner_, &from.owner_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOSingleObject)
}

void CMsgSOSingleObject::SharedCtor() {
  _cached_size_ = 0;
  object_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&owner_soid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOSingleObject::~CMsgSOSingleObject() {
  // @@protoc_insertion_point(destructor:CMsgSOSingleObject)
  SharedDtor();
}

void CMsgSOSingleObject::SharedDtor() {
  object_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOSingleObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOSingleObject::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOSingleObject& CMsgSOSingleObject::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOSingleObject();
  return *internal_default_instance();
}

CMsgSOSingleObject* CMsgSOSingleObject::New(::google::protobuf::Arena* arena) const {
  CMsgSOSingleObject* n = new CMsgSOSingleObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOSingleObject::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOSingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!object_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*object_data_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(owner_soid_ != NULL);
      owner_soid_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&owner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&owner_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOSingleObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOSingleObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 owner = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes object_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSOIDOwner owner_soid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOSingleObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOSingleObject)
  return false;
#undef DO_
}

void CMsgSOSingleObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOSingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 owner = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->owner(), output);
  }

  // optional int32 type_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  // optional bytes object_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->object_data(), output);
  }

  // optional fixed64 version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->version(), output);
  }

  // optional .CMsgSOIDOwner owner_soid = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->owner_soid_, output);
  }

  // optional uint32 service_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->service_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOSingleObject)
}

::google::protobuf::uint8* CMsgSOSingleObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOSingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 owner = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->owner(), target);
  }

  // optional int32 type_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  // optional bytes object_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->object_data(), target);
  }

  // optional fixed64 version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->owner_soid_, deterministic, target);
  }

  // optional uint32 service_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->service_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOSingleObject)
  return target;
}

size_t CMsgSOSingleObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOSingleObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes object_data = 3;
    if (has_object_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->object_data());
    }

    // optional .CMsgSOIDOwner owner_soid = 5;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->owner_soid_);
    }

    // optional fixed64 owner = 1;
    if (has_owner()) {
      total_size += 1 + 8;
    }

    // optional fixed64 version = 4;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional uint32 service_id = 6;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOSingleObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOSingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOSingleObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOSingleObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOSingleObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOSingleObject)
    MergeFrom(*source);
  }
}

void CMsgSOSingleObject::MergeFrom(const CMsgSOSingleObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOSingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_object_data();
      object_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000004u) {
      owner_ = from.owner_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_id_ = from.type_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOSingleObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOSingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOSingleObject::CopyFrom(const CMsgSOSingleObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOSingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOSingleObject::IsInitialized() const {
  return true;
}

void CMsgSOSingleObject::Swap(CMsgSOSingleObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOSingleObject::InternalSwap(CMsgSOSingleObject* other) {
  using std::swap;
  object_data_.Swap(&other->object_data_);
  swap(owner_soid_, other->owner_soid_);
  swap(owner_, other->owner_);
  swap(version_, other->version_);
  swap(type_id_, other->type_id_);
  swap(service_id_, other->service_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOSingleObject::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOMultipleObjects_SingleObject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOMultipleObjects_SingleObject::kTypeIdFieldNumber;
const int CMsgSOMultipleObjects_SingleObject::kObjectDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOMultipleObjects_SingleObject();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOMultipleObjects.SingleObject)
}
CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject(const CMsgSOMultipleObjects_SingleObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_object_data()) {
    object_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_data_);
  }
  type_id_ = from.type_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSOMultipleObjects.SingleObject)
}

void CMsgSOMultipleObjects_SingleObject::SharedCtor() {
  _cached_size_ = 0;
  object_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_id_ = 0;
}

CMsgSOMultipleObjects_SingleObject::~CMsgSOMultipleObjects_SingleObject() {
  // @@protoc_insertion_point(destructor:CMsgSOMultipleObjects.SingleObject)
  SharedDtor();
}

void CMsgSOMultipleObjects_SingleObject::SharedDtor() {
  object_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSOMultipleObjects_SingleObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects_SingleObject::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects_SingleObject::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOMultipleObjects_SingleObject();
  return *internal_default_instance();
}

CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects_SingleObject::New(::google::protobuf::Arena* arena) const {
  CMsgSOMultipleObjects_SingleObject* n = new CMsgSOMultipleObjects_SingleObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOMultipleObjects_SingleObject::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOMultipleObjects.SingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!object_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*object_data_.UnsafeRawStringPointer())->clear();
  }
  type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOMultipleObjects_SingleObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOMultipleObjects.SingleObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes object_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOMultipleObjects.SingleObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOMultipleObjects.SingleObject)
  return false;
#undef DO_
}

void CMsgSOMultipleObjects_SingleObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOMultipleObjects.SingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional bytes object_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->object_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOMultipleObjects.SingleObject)
}

::google::protobuf::uint8* CMsgSOMultipleObjects_SingleObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOMultipleObjects.SingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional bytes object_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->object_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOMultipleObjects.SingleObject)
  return target;
}

size_t CMsgSOMultipleObjects_SingleObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOMultipleObjects.SingleObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes object_data = 2;
    if (has_object_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->object_data());
    }

    // optional int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOMultipleObjects_SingleObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOMultipleObjects.SingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOMultipleObjects_SingleObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOMultipleObjects_SingleObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOMultipleObjects.SingleObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOMultipleObjects.SingleObject)
    MergeFrom(*source);
  }
}

void CMsgSOMultipleObjects_SingleObject::MergeFrom(const CMsgSOMultipleObjects_SingleObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOMultipleObjects.SingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_object_data();
      object_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_id_ = from.type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOMultipleObjects_SingleObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOMultipleObjects.SingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOMultipleObjects_SingleObject::CopyFrom(const CMsgSOMultipleObjects_SingleObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOMultipleObjects.SingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects_SingleObject::IsInitialized() const {
  return true;
}

void CMsgSOMultipleObjects_SingleObject::Swap(CMsgSOMultipleObjects_SingleObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOMultipleObjects_SingleObject::InternalSwap(CMsgSOMultipleObjects_SingleObject* other) {
  using std::swap;
  object_data_.Swap(&other->object_data_);
  swap(type_id_, other->type_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOMultipleObjects_SingleObject::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOMultipleObjects::InitAsDefaultInstance() {
  ::_CMsgSOMultipleObjects_default_instance_._instance.get_mutable()->owner_soid_ = const_cast< ::CMsgSOIDOwner*>(
      ::CMsgSOIDOwner::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOMultipleObjects::kOwnerFieldNumber;
const int CMsgSOMultipleObjects::kObjectsFieldNumber;
const int CMsgSOMultipleObjects::kVersionFieldNumber;
const int CMsgSOMultipleObjects::kOwnerSoidFieldNumber;
const int CMsgSOMultipleObjects::kServiceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOMultipleObjects::CMsgSOMultipleObjects()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOMultipleObjects();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOMultipleObjects)
}
CMsgSOMultipleObjects::CMsgSOMultipleObjects(const CMsgSOMultipleObjects& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = NULL;
  }
  ::memcpy(&owner_, &from.owner_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOMultipleObjects)
}

void CMsgSOMultipleObjects::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&owner_soid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOMultipleObjects::~CMsgSOMultipleObjects() {
  // @@protoc_insertion_point(destructor:CMsgSOMultipleObjects)
  SharedDtor();
}

void CMsgSOMultipleObjects::SharedDtor() {
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOMultipleObjects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOMultipleObjects& CMsgSOMultipleObjects::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOMultipleObjects();
  return *internal_default_instance();
}

CMsgSOMultipleObjects* CMsgSOMultipleObjects::New(::google::protobuf::Arena* arena) const {
  CMsgSOMultipleObjects* n = new CMsgSOMultipleObjects;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOMultipleObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOMultipleObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != NULL);
    owner_soid_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&owner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&owner_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOMultipleObjects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOMultipleObjects)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 owner = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgSOMultipleObjects.SingleObject objects = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSOIDOwner owner_soid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOMultipleObjects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOMultipleObjects)
  return false;
#undef DO_
}

void CMsgSOMultipleObjects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOMultipleObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 owner = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->owner(), output);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects(static_cast<int>(i)), output);
  }

  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->version(), output);
  }

  // optional .CMsgSOIDOwner owner_soid = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->owner_soid_, output);
  }

  // optional uint32 service_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->service_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOMultipleObjects)
}

::google::protobuf::uint8* CMsgSOMultipleObjects::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOMultipleObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 owner = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->owner(), target);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->objects(static_cast<int>(i)), deterministic, target);
  }

  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->owner_soid_, deterministic, target);
  }

  // optional uint32 service_id = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->service_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOMultipleObjects)
  return target;
}

size_t CMsgSOMultipleObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOMultipleObjects)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgSOMultipleObjects.SingleObject objects = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .CMsgSOIDOwner owner_soid = 6;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->owner_soid_);
    }

    // optional fixed64 owner = 1;
    if (has_owner()) {
      total_size += 1 + 8;
    }

    // optional fixed64 version = 3;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 7;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOMultipleObjects::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOMultipleObjects)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOMultipleObjects* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOMultipleObjects>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOMultipleObjects)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOMultipleObjects)
    MergeFrom(*source);
  }
}

void CMsgSOMultipleObjects::MergeFrom(const CMsgSOMultipleObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOMultipleObjects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      owner_ = from.owner_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOMultipleObjects::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOMultipleObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOMultipleObjects::CopyFrom(const CMsgSOMultipleObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOMultipleObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects::IsInitialized() const {
  return true;
}

void CMsgSOMultipleObjects::Swap(CMsgSOMultipleObjects* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOMultipleObjects::InternalSwap(CMsgSOMultipleObjects* other) {
  using std::swap;
  objects_.InternalSwap(&other->objects_);
  swap(owner_soid_, other->owner_soid_);
  swap(owner_, other->owner_);
  swap(version_, other->version_);
  swap(service_id_, other->service_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOMultipleObjects::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheSubscribed_SubscribedType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheSubscribed_SubscribedType::kTypeIdFieldNumber;
const int CMsgSOCacheSubscribed_SubscribedType::kObjectDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheSubscribed_SubscribedType();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheSubscribed.SubscribedType)
}
CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType(const CMsgSOCacheSubscribed_SubscribedType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      object_data_(from.object_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_id_ = from.type_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscribed.SubscribedType)
}

void CMsgSOCacheSubscribed_SubscribedType::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
}

CMsgSOCacheSubscribed_SubscribedType::~CMsgSOCacheSubscribed_SubscribedType() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscribed.SubscribedType)
  SharedDtor();
}

void CMsgSOCacheSubscribed_SubscribedType::SharedDtor() {
}

void CMsgSOCacheSubscribed_SubscribedType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed_SubscribedType::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheSubscribed_SubscribedType& CMsgSOCacheSubscribed_SubscribedType::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheSubscribed_SubscribedType();
  return *internal_default_instance();
}

CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed_SubscribedType::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheSubscribed_SubscribedType* n = new CMsgSOCacheSubscribed_SubscribedType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheSubscribed_SubscribedType::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheSubscribed.SubscribedType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_data_.Clear();
  type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheSubscribed_SubscribedType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheSubscribed.SubscribedType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes object_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_object_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheSubscribed.SubscribedType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheSubscribed.SubscribedType)
  return false;
#undef DO_
}

void CMsgSOCacheSubscribed_SubscribedType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheSubscribed.SubscribedType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // repeated bytes object_data = 2;
  for (int i = 0, n = this->object_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->object_data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheSubscribed.SubscribedType)
}

::google::protobuf::uint8* CMsgSOCacheSubscribed_SubscribedType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscribed.SubscribedType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // repeated bytes object_data = 2;
  for (int i = 0, n = this->object_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->object_data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscribed.SubscribedType)
  return target;
}

size_t CMsgSOCacheSubscribed_SubscribedType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheSubscribed.SubscribedType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes object_data = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->object_data_size());
  for (int i = 0, n = this->object_data_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->object_data(i));
  }

  // optional int32 type_id = 1;
  if (has_type_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscribed_SubscribedType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheSubscribed.SubscribedType)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscribed_SubscribedType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheSubscribed_SubscribedType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheSubscribed.SubscribedType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheSubscribed.SubscribedType)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribed_SubscribedType::MergeFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheSubscribed.SubscribedType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_data_.MergeFrom(from.object_data_);
  if (from.has_type_id()) {
    set_type_id(from.type_id());
  }
}

void CMsgSOCacheSubscribed_SubscribedType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheSubscribed.SubscribedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed_SubscribedType::CopyFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheSubscribed.SubscribedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed_SubscribedType::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscribed_SubscribedType::Swap(CMsgSOCacheSubscribed_SubscribedType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscribed_SubscribedType::InternalSwap(CMsgSOCacheSubscribed_SubscribedType* other) {
  using std::swap;
  object_data_.InternalSwap(&other->object_data_);
  swap(type_id_, other->type_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheSubscribed_SubscribedType::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheSubscribed::InitAsDefaultInstance() {
  ::_CMsgSOCacheSubscribed_default_instance_._instance.get_mutable()->owner_soid_ = const_cast< ::CMsgSOIDOwner*>(
      ::CMsgSOIDOwner::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheSubscribed::kOwnerFieldNumber;
const int CMsgSOCacheSubscribed::kObjectsFieldNumber;
const int CMsgSOCacheSubscribed::kVersionFieldNumber;
const int CMsgSOCacheSubscribed::kOwnerSoidFieldNumber;
const int CMsgSOCacheSubscribed::kServiceIdFieldNumber;
const int CMsgSOCacheSubscribed::kServiceListFieldNumber;
const int CMsgSOCacheSubscribed::kSyncVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheSubscribed::CMsgSOCacheSubscribed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheSubscribed();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheSubscribed)
}
CMsgSOCacheSubscribed::CMsgSOCacheSubscribed(const CMsgSOCacheSubscribed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      objects_(from.objects_),
      service_list_(from.service_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = NULL;
  }
  ::memcpy(&owner_, &from.owner_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscribed)
}

void CMsgSOCacheSubscribed::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&owner_soid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOCacheSubscribed::~CMsgSOCacheSubscribed() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscribed)
  SharedDtor();
}

void CMsgSOCacheSubscribed::SharedDtor() {
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOCacheSubscribed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheSubscribed& CMsgSOCacheSubscribed::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheSubscribed();
  return *internal_default_instance();
}

CMsgSOCacheSubscribed* CMsgSOCacheSubscribed::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheSubscribed* n = new CMsgSOCacheSubscribed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheSubscribed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheSubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  service_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != NULL);
    owner_soid_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&owner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&owner_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheSubscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheSubscribed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 owner = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSOIDOwner owner_soid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 service_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_service_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sync_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_sync_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheSubscribed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheSubscribed)
  return false;
#undef DO_
}

void CMsgSOCacheSubscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheSubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 owner = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->owner(), output);
  }

  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects(static_cast<int>(i)), output);
  }

  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->version(), output);
  }

  // optional .CMsgSOIDOwner owner_soid = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->owner_soid_, output);
  }

  // optional uint32 service_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->service_id(), output);
  }

  // repeated uint32 service_list = 6;
  for (int i = 0, n = this->service_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->service_list(i), output);
  }

  // optional fixed64 sync_version = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->sync_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheSubscribed)
}

::google::protobuf::uint8* CMsgSOCacheSubscribed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 owner = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->owner(), target);
  }

  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->objects(static_cast<int>(i)), deterministic, target);
  }

  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->owner_soid_, deterministic, target);
  }

  // optional uint32 service_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->service_id(), target);
  }

  // repeated uint32 service_list = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->service_list_, target);

  // optional fixed64 sync_version = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->sync_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscribed)
  return target;
}

size_t CMsgSOCacheSubscribed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheSubscribed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects(static_cast<int>(i)));
    }
  }

  // repeated uint32 service_list = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->service_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->service_list_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .CMsgSOIDOwner owner_soid = 4;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->owner_soid_);
    }

    // optional fixed64 owner = 1;
    if (has_owner()) {
      total_size += 1 + 8;
    }

    // optional fixed64 version = 3;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 7;
    if (has_sync_version()) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 5;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscribed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheSubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscribed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheSubscribed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheSubscribed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheSubscribed)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribed::MergeFrom(const CMsgSOCacheSubscribed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheSubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  service_list_.MergeFrom(from.service_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      owner_ = from.owner_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheSubscribed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheSubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed::CopyFrom(const CMsgSOCacheSubscribed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheSubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscribed::Swap(CMsgSOCacheSubscribed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscribed::InternalSwap(CMsgSOCacheSubscribed* other) {
  using std::swap;
  objects_.InternalSwap(&other->objects_);
  service_list_.InternalSwap(&other->service_list_);
  swap(owner_soid_, other->owner_soid_);
  swap(owner_, other->owner_);
  swap(version_, other->version_);
  swap(sync_version_, other->sync_version_);
  swap(service_id_, other->service_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheSubscribed::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheSubscribedUpToDate::InitAsDefaultInstance() {
  ::_CMsgSOCacheSubscribedUpToDate_default_instance_._instance.get_mutable()->owner_soid_ = const_cast< ::CMsgSOIDOwner*>(
      ::CMsgSOIDOwner::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheSubscribedUpToDate::kVersionFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kOwnerSoidFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kServiceIdFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kServiceListFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kSyncVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheSubscribedUpToDate::CMsgSOCacheSubscribedUpToDate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheSubscribedUpToDate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheSubscribedUpToDate)
}
CMsgSOCacheSubscribedUpToDate::CMsgSOCacheSubscribedUpToDate(const CMsgSOCacheSubscribedUpToDate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      service_list_(from.service_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscribedUpToDate)
}

void CMsgSOCacheSubscribedUpToDate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&owner_soid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOCacheSubscribedUpToDate::~CMsgSOCacheSubscribedUpToDate() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscribedUpToDate)
  SharedDtor();
}

void CMsgSOCacheSubscribedUpToDate::SharedDtor() {
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOCacheSubscribedUpToDate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribedUpToDate::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheSubscribedUpToDate& CMsgSOCacheSubscribedUpToDate::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheSubscribedUpToDate();
  return *internal_default_instance();
}

CMsgSOCacheSubscribedUpToDate* CMsgSOCacheSubscribedUpToDate::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheSubscribedUpToDate* n = new CMsgSOCacheSubscribedUpToDate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheSubscribedUpToDate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheSubscribedUpToDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != NULL);
    owner_soid_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheSubscribedUpToDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheSubscribedUpToDate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 service_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_service_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sync_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_sync_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheSubscribedUpToDate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheSubscribedUpToDate)
  return false;
#undef DO_
}

void CMsgSOCacheSubscribedUpToDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheSubscribedUpToDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->version(), output);
  }

  // optional .CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->owner_soid_, output);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->service_id(), output);
  }

  // repeated uint32 service_list = 4;
  for (int i = 0, n = this->service_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->service_list(i), output);
  }

  // optional fixed64 sync_version = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->sync_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheSubscribedUpToDate)
}

::google::protobuf::uint8* CMsgSOCacheSubscribedUpToDate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscribedUpToDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->owner_soid_, deterministic, target);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->service_id(), target);
  }

  // repeated uint32 service_list = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->service_list_, target);

  // optional fixed64 sync_version = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->sync_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscribedUpToDate)
  return target;
}

size_t CMsgSOCacheSubscribedUpToDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheSubscribedUpToDate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 service_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->service_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->service_list_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .CMsgSOIDOwner owner_soid = 2;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->owner_soid_);
    }

    // optional fixed64 version = 1;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 5;
    if (has_sync_version()) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 3;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscribedUpToDate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheSubscribedUpToDate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscribedUpToDate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheSubscribedUpToDate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheSubscribedUpToDate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheSubscribedUpToDate)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribedUpToDate::MergeFrom(const CMsgSOCacheSubscribedUpToDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheSubscribedUpToDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_list_.MergeFrom(from.service_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheSubscribedUpToDate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheSubscribedUpToDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribedUpToDate::CopyFrom(const CMsgSOCacheSubscribedUpToDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheSubscribedUpToDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribedUpToDate::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscribedUpToDate::Swap(CMsgSOCacheSubscribedUpToDate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscribedUpToDate::InternalSwap(CMsgSOCacheSubscribedUpToDate* other) {
  using std::swap;
  service_list_.InternalSwap(&other->service_list_);
  swap(owner_soid_, other->owner_soid_);
  swap(version_, other->version_);
  swap(sync_version_, other->sync_version_);
  swap(service_id_, other->service_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheSubscribedUpToDate::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheUnsubscribed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheUnsubscribed::kOwnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheUnsubscribed();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheUnsubscribed)
}
CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed(const CMsgSOCacheUnsubscribed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_ = from.owner_;
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheUnsubscribed)
}

void CMsgSOCacheUnsubscribed::SharedCtor() {
  _cached_size_ = 0;
  owner_ = GOOGLE_ULONGLONG(0);
}

CMsgSOCacheUnsubscribed::~CMsgSOCacheUnsubscribed() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheUnsubscribed)
  SharedDtor();
}

void CMsgSOCacheUnsubscribed::SharedDtor() {
}

void CMsgSOCacheUnsubscribed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheUnsubscribed::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheUnsubscribed& CMsgSOCacheUnsubscribed::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheUnsubscribed();
  return *internal_default_instance();
}

CMsgSOCacheUnsubscribed* CMsgSOCacheUnsubscribed::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheUnsubscribed* n = new CMsgSOCacheUnsubscribed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheUnsubscribed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheUnsubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheUnsubscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheUnsubscribed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 owner = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheUnsubscribed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheUnsubscribed)
  return false;
#undef DO_
}

void CMsgSOCacheUnsubscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheUnsubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 owner = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->owner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheUnsubscribed)
}

::google::protobuf::uint8* CMsgSOCacheUnsubscribed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheUnsubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 owner = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->owner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheUnsubscribed)
  return target;
}

size_t CMsgSOCacheUnsubscribed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheUnsubscribed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional fixed64 owner = 1;
  if (has_owner()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheUnsubscribed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheUnsubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheUnsubscribed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheUnsubscribed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheUnsubscribed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheUnsubscribed)
    MergeFrom(*source);
  }
}

void CMsgSOCacheUnsubscribed::MergeFrom(const CMsgSOCacheUnsubscribed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheUnsubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_owner()) {
    set_owner(from.owner());
  }
}

void CMsgSOCacheUnsubscribed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheUnsubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheUnsubscribed::CopyFrom(const CMsgSOCacheUnsubscribed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheUnsubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheUnsubscribed::IsInitialized() const {
  return true;
}

void CMsgSOCacheUnsubscribed::Swap(CMsgSOCacheUnsubscribed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheUnsubscribed::InternalSwap(CMsgSOCacheUnsubscribed* other) {
  using std::swap;
  swap(owner_, other->owner_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheUnsubscribed::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheSubscriptionCheck::InitAsDefaultInstance() {
  ::_CMsgSOCacheSubscriptionCheck_default_instance_._instance.get_mutable()->owner_soid_ = const_cast< ::CMsgSOIDOwner*>(
      ::CMsgSOIDOwner::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheSubscriptionCheck::kOwnerFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kVersionFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kOwnerSoidFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kServiceIdFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kServiceListFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kSyncVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheSubscriptionCheck();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheSubscriptionCheck)
}
CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck(const CMsgSOCacheSubscriptionCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      service_list_(from.service_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = NULL;
  }
  ::memcpy(&owner_, &from.owner_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscriptionCheck)
}

void CMsgSOCacheSubscriptionCheck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&owner_soid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOCacheSubscriptionCheck::~CMsgSOCacheSubscriptionCheck() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscriptionCheck)
  SharedDtor();
}

void CMsgSOCacheSubscriptionCheck::SharedDtor() {
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOCacheSubscriptionCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionCheck::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheSubscriptionCheck& CMsgSOCacheSubscriptionCheck::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheSubscriptionCheck();
  return *internal_default_instance();
}

CMsgSOCacheSubscriptionCheck* CMsgSOCacheSubscriptionCheck::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheSubscriptionCheck* n = new CMsgSOCacheSubscriptionCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheSubscriptionCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheSubscriptionCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != NULL);
    owner_soid_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&owner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&owner_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheSubscriptionCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheSubscriptionCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 owner = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSOIDOwner owner_soid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 service_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_service_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sync_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_sync_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheSubscriptionCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheSubscriptionCheck)
  return false;
#undef DO_
}

void CMsgSOCacheSubscriptionCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheSubscriptionCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 owner = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->owner(), output);
  }

  // optional fixed64 version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->version(), output);
  }

  // optional .CMsgSOIDOwner owner_soid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->owner_soid_, output);
  }

  // optional uint32 service_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->service_id(), output);
  }

  // repeated uint32 service_list = 5;
  for (int i = 0, n = this->service_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->service_list(i), output);
  }

  // optional fixed64 sync_version = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->sync_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheSubscriptionCheck)
}

::google::protobuf::uint8* CMsgSOCacheSubscriptionCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscriptionCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 owner = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->owner(), target);
  }

  // optional fixed64 version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->owner_soid_, deterministic, target);
  }

  // optional uint32 service_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->service_id(), target);
  }

  // repeated uint32 service_list = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->service_list_, target);

  // optional fixed64 sync_version = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->sync_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscriptionCheck)
  return target;
}

size_t CMsgSOCacheSubscriptionCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheSubscriptionCheck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 service_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->service_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->service_list_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .CMsgSOIDOwner owner_soid = 3;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->owner_soid_);
    }

    // optional fixed64 owner = 1;
    if (has_owner()) {
      total_size += 1 + 8;
    }

    // optional fixed64 version = 2;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 6;
    if (has_sync_version()) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 4;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscriptionCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheSubscriptionCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscriptionCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheSubscriptionCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheSubscriptionCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheSubscriptionCheck)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscriptionCheck::MergeFrom(const CMsgSOCacheSubscriptionCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheSubscriptionCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_list_.MergeFrom(from.service_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      owner_ = from.owner_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheSubscriptionCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheSubscriptionCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionCheck::CopyFrom(const CMsgSOCacheSubscriptionCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheSubscriptionCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscriptionCheck::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscriptionCheck::Swap(CMsgSOCacheSubscriptionCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscriptionCheck::InternalSwap(CMsgSOCacheSubscriptionCheck* other) {
  using std::swap;
  service_list_.InternalSwap(&other->service_list_);
  swap(owner_soid_, other->owner_soid_);
  swap(owner_, other->owner_);
  swap(version_, other->version_);
  swap(sync_version_, other->sync_version_);
  swap(service_id_, other->service_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheSubscriptionCheck::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheSubscriptionRefresh::InitAsDefaultInstance() {
  ::_CMsgSOCacheSubscriptionRefresh_default_instance_._instance.get_mutable()->owner_soid_ = const_cast< ::CMsgSOIDOwner*>(
      ::CMsgSOIDOwner::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheSubscriptionRefresh::kOwnerFieldNumber;
const int CMsgSOCacheSubscriptionRefresh::kOwnerSoidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheSubscriptionRefresh();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheSubscriptionRefresh)
}
CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh(const CMsgSOCacheSubscriptionRefresh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = NULL;
  }
  owner_ = from.owner_;
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscriptionRefresh)
}

void CMsgSOCacheSubscriptionRefresh::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&owner_soid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_) -
      reinterpret_cast<char*>(&owner_soid_)) + sizeof(owner_));
}

CMsgSOCacheSubscriptionRefresh::~CMsgSOCacheSubscriptionRefresh() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscriptionRefresh)
  SharedDtor();
}

void CMsgSOCacheSubscriptionRefresh::SharedDtor() {
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOCacheSubscriptionRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionRefresh::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheSubscriptionRefresh& CMsgSOCacheSubscriptionRefresh::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheSubscriptionRefresh();
  return *internal_default_instance();
}

CMsgSOCacheSubscriptionRefresh* CMsgSOCacheSubscriptionRefresh::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheSubscriptionRefresh* n = new CMsgSOCacheSubscriptionRefresh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheSubscriptionRefresh::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheSubscriptionRefresh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != NULL);
    owner_soid_->Clear();
  }
  owner_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheSubscriptionRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheSubscriptionRefresh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 owner = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheSubscriptionRefresh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheSubscriptionRefresh)
  return false;
#undef DO_
}

void CMsgSOCacheSubscriptionRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheSubscriptionRefresh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 owner = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->owner(), output);
  }

  // optional .CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->owner_soid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheSubscriptionRefresh)
}

::google::protobuf::uint8* CMsgSOCacheSubscriptionRefresh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscriptionRefresh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 owner = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->owner(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->owner_soid_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscriptionRefresh)
  return target;
}

size_t CMsgSOCacheSubscriptionRefresh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheSubscriptionRefresh)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMsgSOIDOwner owner_soid = 2;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->owner_soid_);
    }

    // optional fixed64 owner = 1;
    if (has_owner()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscriptionRefresh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheSubscriptionRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscriptionRefresh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheSubscriptionRefresh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheSubscriptionRefresh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheSubscriptionRefresh)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscriptionRefresh::MergeFrom(const CMsgSOCacheSubscriptionRefresh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheSubscriptionRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      owner_ = from.owner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheSubscriptionRefresh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheSubscriptionRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionRefresh::CopyFrom(const CMsgSOCacheSubscriptionRefresh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheSubscriptionRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscriptionRefresh::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscriptionRefresh::Swap(CMsgSOCacheSubscriptionRefresh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscriptionRefresh::InternalSwap(CMsgSOCacheSubscriptionRefresh* other) {
  using std::swap;
  swap(owner_soid_, other->owner_soid_);
  swap(owner_, other->owner_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheSubscriptionRefresh::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheVersion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheVersion::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheVersion::CMsgSOCacheVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheVersion();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheVersion)
}
CMsgSOCacheVersion::CMsgSOCacheVersion(const CMsgSOCacheVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheVersion)
}

void CMsgSOCacheVersion::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
}

CMsgSOCacheVersion::~CMsgSOCacheVersion() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheVersion)
  SharedDtor();
}

void CMsgSOCacheVersion::SharedDtor() {
}

void CMsgSOCacheVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheVersion::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheVersion& CMsgSOCacheVersion::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheVersion();
  return *internal_default_instance();
}

CMsgSOCacheVersion* CMsgSOCacheVersion::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheVersion* n = new CMsgSOCacheVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheVersion)
  return false;
#undef DO_
}

void CMsgSOCacheVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheVersion)
}

::google::protobuf::uint8* CMsgSOCacheVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheVersion)
  return target;
}

size_t CMsgSOCacheVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional fixed64 version = 1;
  if (has_version()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheVersion)
    MergeFrom(*source);
  }
}

void CMsgSOCacheVersion::MergeFrom(const CMsgSOCacheVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_version()) {
    set_version(from.version());
  }
}

void CMsgSOCacheVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheVersion::CopyFrom(const CMsgSOCacheVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheVersion::IsInitialized() const {
  return true;
}

void CMsgSOCacheVersion::Swap(CMsgSOCacheVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheVersion::InternalSwap(CMsgSOCacheVersion* other) {
  using std::swap;
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheVersion::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCMultiplexMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMultiplexMessage::kMsgtypeFieldNumber;
const int CMsgGCMultiplexMessage::kPayloadFieldNumber;
const int CMsgGCMultiplexMessage::kSteamidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMultiplexMessage::CMsgGCMultiplexMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCMultiplexMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCMultiplexMessage)
}
CMsgGCMultiplexMessage::CMsgGCMultiplexMessage(const CMsgGCMultiplexMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      steamids_(from.steamids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  msgtype_ = from.msgtype_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMultiplexMessage)
}

void CMsgGCMultiplexMessage::SharedCtor() {
  _cached_size_ = 0;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0u;
}

CMsgGCMultiplexMessage::~CMsgGCMultiplexMessage() {
  // @@protoc_insertion_point(destructor:CMsgGCMultiplexMessage)
  SharedDtor();
}

void CMsgGCMultiplexMessage::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCMultiplexMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMultiplexMessage::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMultiplexMessage& CMsgGCMultiplexMessage::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCMultiplexMessage();
  return *internal_default_instance();
}

CMsgGCMultiplexMessage* CMsgGCMultiplexMessage::New(::google::protobuf::Arena* arena) const {
  CMsgGCMultiplexMessage* n = new CMsgGCMultiplexMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMultiplexMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMultiplexMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!payload_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*payload_.UnsafeRawStringPointer())->clear();
  }
  msgtype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMultiplexMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCMultiplexMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_msgtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steamids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25u, input, this->mutable_steamids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCMultiplexMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCMultiplexMessage)
  return false;
#undef DO_
}

void CMsgGCMultiplexMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCMultiplexMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msgtype = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgtype(), output);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  // repeated fixed64 steamids = 3;
  for (int i = 0, n = this->steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->steamids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCMultiplexMessage)
}

::google::protobuf::uint8* CMsgGCMultiplexMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMultiplexMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msgtype = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgtype(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  // repeated fixed64 steamids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(3, this->steamids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMultiplexMessage)
  return target;
}

size_t CMsgGCMultiplexMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMultiplexMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated fixed64 steamids = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional uint32 msgtype = 1;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMultiplexMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCMultiplexMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMultiplexMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMultiplexMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCMultiplexMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCMultiplexMessage)
    MergeFrom(*source);
  }
}

void CMsgGCMultiplexMessage::MergeFrom(const CMsgGCMultiplexMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMultiplexMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamids_.MergeFrom(from.steamids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      msgtype_ = from.msgtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCMultiplexMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCMultiplexMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMultiplexMessage::CopyFrom(const CMsgGCMultiplexMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMultiplexMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMultiplexMessage::IsInitialized() const {
  return true;
}

void CMsgGCMultiplexMessage::Swap(CMsgGCMultiplexMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMultiplexMessage::InternalSwap(CMsgGCMultiplexMessage* other) {
  using std::swap;
  steamids_.InternalSwap(&other->steamids_);
  payload_.Swap(&other->payload_);
  swap(msgtype_, other->msgtype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMultiplexMessage::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCToGCMsgMasterAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgMasterAck::kDirIndexFieldNumber;
const int CGCToGCMsgMasterAck::kMachineNameFieldNumber;
const int CGCToGCMsgMasterAck::kProcessNameFieldNumber;
const int CGCToGCMsgMasterAck::kTypeInstancesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgMasterAck::CGCToGCMsgMasterAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCGCToGCMsgMasterAck();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCToGCMsgMasterAck)
}
CGCToGCMsgMasterAck::CGCToGCMsgMasterAck(const CGCToGCMsgMasterAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      type_instances_(from.type_instances_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_process_name()) {
    process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgMasterAck)
}

void CGCToGCMsgMasterAck::SharedCtor() {
  _cached_size_ = 0;
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_index_ = 0u;
}

CGCToGCMsgMasterAck::~CGCToGCMsgMasterAck() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgMasterAck)
  SharedDtor();
}

void CGCToGCMsgMasterAck::SharedDtor() {
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgMasterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterAck::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCToGCMsgMasterAck& CGCToGCMsgMasterAck::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCGCToGCMsgMasterAck();
  return *internal_default_instance();
}

CGCToGCMsgMasterAck* CGCToGCMsgMasterAck::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgMasterAck* n = new CGCToGCMsgMasterAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgMasterAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCToGCMsgMasterAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_instances_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!machine_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*machine_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!process_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*process_name_.UnsafeRawStringPointer())->clear();
    }
  }
  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCToGCMsgMasterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCToGCMsgMasterAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_dir_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name().data(), static_cast<int>(this->machine_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGCToGCMsgMasterAck.machine_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string process_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_name().data(), static_cast<int>(this->process_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGCToGCMsgMasterAck.process_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 type_instances = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_type_instances())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_type_instances())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCToGCMsgMasterAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCToGCMsgMasterAck)
  return false;
#undef DO_
}

void CGCToGCMsgMasterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCToGCMsgMasterAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  // optional string machine_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), static_cast<int>(this->machine_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCToGCMsgMasterAck.machine_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->machine_name(), output);
  }

  // optional string process_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCToGCMsgMasterAck.process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->process_name(), output);
  }

  // repeated uint32 type_instances = 5;
  for (int i = 0, n = this->type_instances_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->type_instances(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCToGCMsgMasterAck)
}

::google::protobuf::uint8* CGCToGCMsgMasterAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgMasterAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  // optional string machine_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), static_cast<int>(this->machine_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCToGCMsgMasterAck.machine_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine_name(), target);
  }

  // optional string process_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCToGCMsgMasterAck.process_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->process_name(), target);
  }

  // repeated uint32 type_instances = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->type_instances_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgMasterAck)
  return target;
}

size_t CGCToGCMsgMasterAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCToGCMsgMasterAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 type_instances = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->type_instances_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->type_instances_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string machine_name = 3;
    if (has_machine_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string process_name = 4;
    if (has_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_name());
    }

    // optional uint32 dir_index = 1;
    if (has_dir_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCToGCMsgMasterAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgMasterAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCToGCMsgMasterAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCToGCMsgMasterAck)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck::MergeFrom(const CGCToGCMsgMasterAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCToGCMsgMasterAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_instances_.MergeFrom(from.type_instances_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_machine_name();
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_process_name();
      process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      dir_index_ = from.dir_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgMasterAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCToGCMsgMasterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck::CopyFrom(const CGCToGCMsgMasterAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCToGCMsgMasterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterAck::Swap(CGCToGCMsgMasterAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterAck::InternalSwap(CGCToGCMsgMasterAck* other) {
  using std::swap;
  type_instances_.InternalSwap(&other->type_instances_);
  machine_name_.Swap(&other->machine_name_);
  process_name_.Swap(&other->process_name_);
  swap(dir_index_, other->dir_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgMasterAck::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCToGCMsgMasterAck_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgMasterAck_Response::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgMasterAck_Response::CGCToGCMsgMasterAck_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCGCToGCMsgMasterAck_Response();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCToGCMsgMasterAck_Response)
}
CGCToGCMsgMasterAck_Response::CGCToGCMsgMasterAck_Response(const CGCToGCMsgMasterAck_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgMasterAck_Response)
}

void CGCToGCMsgMasterAck_Response::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
}

CGCToGCMsgMasterAck_Response::~CGCToGCMsgMasterAck_Response() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgMasterAck_Response)
  SharedDtor();
}

void CGCToGCMsgMasterAck_Response::SharedDtor() {
}

void CGCToGCMsgMasterAck_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterAck_Response::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCToGCMsgMasterAck_Response& CGCToGCMsgMasterAck_Response::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCGCToGCMsgMasterAck_Response();
  return *internal_default_instance();
}

CGCToGCMsgMasterAck_Response* CGCToGCMsgMasterAck_Response::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgMasterAck_Response* n = new CGCToGCMsgMasterAck_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgMasterAck_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCToGCMsgMasterAck_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCToGCMsgMasterAck_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCToGCMsgMasterAck_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCToGCMsgMasterAck_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCToGCMsgMasterAck_Response)
  return false;
#undef DO_
}

void CGCToGCMsgMasterAck_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCToGCMsgMasterAck_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCToGCMsgMasterAck_Response)
}

::google::protobuf::uint8* CGCToGCMsgMasterAck_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgMasterAck_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgMasterAck_Response)
  return target;
}

size_t CGCToGCMsgMasterAck_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCToGCMsgMasterAck_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterAck_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCToGCMsgMasterAck_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterAck_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgMasterAck_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCToGCMsgMasterAck_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCToGCMsgMasterAck_Response)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck_Response::MergeFrom(const CGCToGCMsgMasterAck_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCToGCMsgMasterAck_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CGCToGCMsgMasterAck_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCToGCMsgMasterAck_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck_Response::CopyFrom(const CGCToGCMsgMasterAck_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCToGCMsgMasterAck_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck_Response::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterAck_Response::Swap(CGCToGCMsgMasterAck_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterAck_Response::InternalSwap(CGCToGCMsgMasterAck_Response* other) {
  using std::swap;
  swap(eresult_, other->eresult_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgMasterAck_Response::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCToGCMsgMasterStartupComplete_GCInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgMasterStartupComplete_GCInfo::kDirIndexFieldNumber;
const int CGCToGCMsgMasterStartupComplete_GCInfo::kMachineNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgMasterStartupComplete_GCInfo::CGCToGCMsgMasterStartupComplete_GCInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCGCToGCMsgMasterStartupComplete_GCInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCToGCMsgMasterStartupComplete.GCInfo)
}
CGCToGCMsgMasterStartupComplete_GCInfo::CGCToGCMsgMasterStartupComplete_GCInfo(const CGCToGCMsgMasterStartupComplete_GCInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgMasterStartupComplete.GCInfo)
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SharedCtor() {
  _cached_size_ = 0;
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_index_ = 0u;
}

CGCToGCMsgMasterStartupComplete_GCInfo::~CGCToGCMsgMasterStartupComplete_GCInfo() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgMasterStartupComplete.GCInfo)
  SharedDtor();
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SharedDtor() {
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterStartupComplete_GCInfo::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCToGCMsgMasterStartupComplete_GCInfo& CGCToGCMsgMasterStartupComplete_GCInfo::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCGCToGCMsgMasterStartupComplete_GCInfo();
  return *internal_default_instance();
}

CGCToGCMsgMasterStartupComplete_GCInfo* CGCToGCMsgMasterStartupComplete_GCInfo::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgMasterStartupComplete_GCInfo* n = new CGCToGCMsgMasterStartupComplete_GCInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgMasterStartupComplete_GCInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!machine_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*machine_name_.UnsafeRawStringPointer())->clear();
  }
  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCToGCMsgMasterStartupComplete_GCInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_dir_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name().data(), static_cast<int>(this->machine_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGCToGCMsgMasterStartupComplete.GCInfo.machine_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCToGCMsgMasterStartupComplete.GCInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCToGCMsgMasterStartupComplete.GCInfo)
  return false;
#undef DO_
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  // optional string machine_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), static_cast<int>(this->machine_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCToGCMsgMasterStartupComplete.GCInfo.machine_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCToGCMsgMasterStartupComplete.GCInfo)
}

::google::protobuf::uint8* CGCToGCMsgMasterStartupComplete_GCInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  // optional string machine_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), static_cast<int>(this->machine_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCToGCMsgMasterStartupComplete.GCInfo.machine_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgMasterStartupComplete.GCInfo)
  return target;
}

size_t CGCToGCMsgMasterStartupComplete_GCInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string machine_name = 2;
    if (has_machine_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional uint32 dir_index = 1;
    if (has_dir_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterStartupComplete_GCInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterStartupComplete_GCInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgMasterStartupComplete_GCInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCToGCMsgMasterStartupComplete.GCInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCToGCMsgMasterStartupComplete.GCInfo)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterStartupComplete_GCInfo::MergeFrom(const CGCToGCMsgMasterStartupComplete_GCInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_machine_name();
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      dir_index_ = from.dir_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgMasterStartupComplete_GCInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterStartupComplete_GCInfo::CopyFrom(const CGCToGCMsgMasterStartupComplete_GCInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterStartupComplete_GCInfo::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterStartupComplete_GCInfo::Swap(CGCToGCMsgMasterStartupComplete_GCInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterStartupComplete_GCInfo::InternalSwap(CGCToGCMsgMasterStartupComplete_GCInfo* other) {
  using std::swap;
  machine_name_.Swap(&other->machine_name_);
  swap(dir_index_, other->dir_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgMasterStartupComplete_GCInfo::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCToGCMsgMasterStartupComplete::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgMasterStartupComplete::kGcInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgMasterStartupComplete::CGCToGCMsgMasterStartupComplete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCGCToGCMsgMasterStartupComplete();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCToGCMsgMasterStartupComplete)
}
CGCToGCMsgMasterStartupComplete::CGCToGCMsgMasterStartupComplete(const CGCToGCMsgMasterStartupComplete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      gc_info_(from.gc_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgMasterStartupComplete)
}

void CGCToGCMsgMasterStartupComplete::SharedCtor() {
  _cached_size_ = 0;
}

CGCToGCMsgMasterStartupComplete::~CGCToGCMsgMasterStartupComplete() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgMasterStartupComplete)
  SharedDtor();
}

void CGCToGCMsgMasterStartupComplete::SharedDtor() {
}

void CGCToGCMsgMasterStartupComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterStartupComplete::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCToGCMsgMasterStartupComplete& CGCToGCMsgMasterStartupComplete::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCGCToGCMsgMasterStartupComplete();
  return *internal_default_instance();
}

CGCToGCMsgMasterStartupComplete* CGCToGCMsgMasterStartupComplete::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgMasterStartupComplete* n = new CGCToGCMsgMasterStartupComplete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgMasterStartupComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCToGCMsgMasterStartupComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gc_info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCToGCMsgMasterStartupComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCToGCMsgMasterStartupComplete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_gc_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCToGCMsgMasterStartupComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCToGCMsgMasterStartupComplete)
  return false;
#undef DO_
}

void CGCToGCMsgMasterStartupComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCToGCMsgMasterStartupComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gc_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gc_info(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCToGCMsgMasterStartupComplete)
}

::google::protobuf::uint8* CGCToGCMsgMasterStartupComplete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgMasterStartupComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gc_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->gc_info(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgMasterStartupComplete)
  return target;
}

size_t CGCToGCMsgMasterStartupComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCToGCMsgMasterStartupComplete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->gc_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gc_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterStartupComplete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCToGCMsgMasterStartupComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterStartupComplete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgMasterStartupComplete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCToGCMsgMasterStartupComplete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCToGCMsgMasterStartupComplete)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterStartupComplete::MergeFrom(const CGCToGCMsgMasterStartupComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCToGCMsgMasterStartupComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gc_info_.MergeFrom(from.gc_info_);
}

void CGCToGCMsgMasterStartupComplete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCToGCMsgMasterStartupComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterStartupComplete::CopyFrom(const CGCToGCMsgMasterStartupComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCToGCMsgMasterStartupComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterStartupComplete::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterStartupComplete::Swap(CGCToGCMsgMasterStartupComplete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterStartupComplete::InternalSwap(CGCToGCMsgMasterStartupComplete* other) {
  using std::swap;
  gc_info_.InternalSwap(&other->gc_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgMasterStartupComplete::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCToGCMsgRouted::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgRouted::kMsgTypeFieldNumber;
const int CGCToGCMsgRouted::kSenderIdFieldNumber;
const int CGCToGCMsgRouted::kNetMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgRouted::CGCToGCMsgRouted()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCGCToGCMsgRouted();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCToGCMsgRouted)
}
CGCToGCMsgRouted::CGCToGCMsgRouted(const CGCToGCMsgRouted& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_net_message()) {
    net_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_message_);
  }
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgRouted)
}

void CGCToGCMsgRouted::SharedCtor() {
  _cached_size_ = 0;
  net_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(msg_type_));
}

CGCToGCMsgRouted::~CGCToGCMsgRouted() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgRouted)
  SharedDtor();
}

void CGCToGCMsgRouted::SharedDtor() {
  net_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgRouted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgRouted::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCToGCMsgRouted& CGCToGCMsgRouted::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCGCToGCMsgRouted();
  return *internal_default_instance();
}

CGCToGCMsgRouted* CGCToGCMsgRouted::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgRouted* n = new CGCToGCMsgRouted;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgRouted::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCToGCMsgRouted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!net_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*net_message_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&sender_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msg_type_) -
        reinterpret_cast<char*>(&sender_id_)) + sizeof(msg_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCToGCMsgRouted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCToGCMsgRouted)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_msg_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sender_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_sender_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes net_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_net_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCToGCMsgRouted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCToGCMsgRouted)
  return false;
#undef DO_
}

void CGCToGCMsgRouted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCToGCMsgRouted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_type(), output);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }

  // optional bytes net_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->net_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCToGCMsgRouted)
}

::google::protobuf::uint8* CGCToGCMsgRouted::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgRouted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_type(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }

  // optional bytes net_message = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->net_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgRouted)
  return target;
}

size_t CGCToGCMsgRouted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCToGCMsgRouted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes net_message = 3;
    if (has_net_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->net_message());
    }

    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgRouted::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCToGCMsgRouted)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgRouted* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgRouted>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCToGCMsgRouted)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCToGCMsgRouted)
    MergeFrom(*source);
  }
}

void CGCToGCMsgRouted::MergeFrom(const CGCToGCMsgRouted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCToGCMsgRouted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_net_message();
      net_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      sender_id_ = from.sender_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgRouted::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCToGCMsgRouted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgRouted::CopyFrom(const CGCToGCMsgRouted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCToGCMsgRouted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgRouted::IsInitialized() const {
  return true;
}

void CGCToGCMsgRouted::Swap(CGCToGCMsgRouted* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgRouted::InternalSwap(CGCToGCMsgRouted* other) {
  using std::swap;
  net_message_.Swap(&other->net_message_);
  swap(sender_id_, other->sender_id_);
  swap(msg_type_, other->msg_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgRouted::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CGCToGCMsgRoutedReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgRoutedReply::kMsgTypeFieldNumber;
const int CGCToGCMsgRoutedReply::kNetMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgRoutedReply::CGCToGCMsgRoutedReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCGCToGCMsgRoutedReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCToGCMsgRoutedReply)
}
CGCToGCMsgRoutedReply::CGCToGCMsgRoutedReply(const CGCToGCMsgRoutedReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_net_message()) {
    net_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_message_);
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgRoutedReply)
}

void CGCToGCMsgRoutedReply::SharedCtor() {
  _cached_size_ = 0;
  net_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_type_ = 0u;
}

CGCToGCMsgRoutedReply::~CGCToGCMsgRoutedReply() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgRoutedReply)
  SharedDtor();
}

void CGCToGCMsgRoutedReply::SharedDtor() {
  net_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgRoutedReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgRoutedReply::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCToGCMsgRoutedReply& CGCToGCMsgRoutedReply::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCGCToGCMsgRoutedReply();
  return *internal_default_instance();
}

CGCToGCMsgRoutedReply* CGCToGCMsgRoutedReply::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgRoutedReply* n = new CGCToGCMsgRoutedReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgRoutedReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCToGCMsgRoutedReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!net_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*net_message_.UnsafeRawStringPointer())->clear();
  }
  msg_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCToGCMsgRoutedReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCToGCMsgRoutedReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_msg_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes net_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_net_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCToGCMsgRoutedReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCToGCMsgRoutedReply)
  return false;
#undef DO_
}

void CGCToGCMsgRoutedReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCToGCMsgRoutedReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_type(), output);
  }

  // optional bytes net_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->net_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCToGCMsgRoutedReply)
}

::google::protobuf::uint8* CGCToGCMsgRoutedReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgRoutedReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_type(), target);
  }

  // optional bytes net_message = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->net_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgRoutedReply)
  return target;
}

size_t CGCToGCMsgRoutedReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCToGCMsgRoutedReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes net_message = 2;
    if (has_net_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->net_message());
    }

    // optional uint32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgRoutedReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCToGCMsgRoutedReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgRoutedReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgRoutedReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCToGCMsgRoutedReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCToGCMsgRoutedReply)
    MergeFrom(*source);
  }
}

void CGCToGCMsgRoutedReply::MergeFrom(const CGCToGCMsgRoutedReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCToGCMsgRoutedReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_net_message();
      net_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgRoutedReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCToGCMsgRoutedReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgRoutedReply::CopyFrom(const CGCToGCMsgRoutedReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCToGCMsgRoutedReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgRoutedReply::IsInitialized() const {
  return true;
}

void CGCToGCMsgRoutedReply::Swap(CGCToGCMsgRoutedReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgRoutedReply::InternalSwap(CGCToGCMsgRoutedReply* other) {
  using std::swap;
  net_message_.Swap(&other->net_message_);
  swap(msg_type_, other->msg_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgRoutedReply::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::kSteamidFieldNumber;
const int CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::kIpFieldNumber;
const int CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::kTrustedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCUpdateSubGCSessionInfo_CMsgUpdate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
}
CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&trusted_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(trusted_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trusted_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(trusted_));
}

CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::~CMsgGCUpdateSubGCSessionInfo_CMsgUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  SharedDtor();
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SharedDtor() {
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCUpdateSubGCSessionInfo_CMsgUpdate();
  return *internal_default_instance();
}

CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::New(::google::protobuf::Arena* arena) const {
  CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* n = new CMsgGCUpdateSubGCSessionInfo_CMsgUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trusted_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(trusted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool trusted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_trusted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trusted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  return false;
#undef DO_
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed32 ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ip(), output);
  }

  // optional bool trusted = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->trusted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
}

::google::protobuf::uint8* CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed32 ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ip(), target);
  }

  // optional bool trusted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->trusted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  return target;
}

size_t CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed32 ip = 2;
    if (has_ip()) {
      total_size += 1 + 4;
    }

    // optional bool trusted = 3;
    if (has_trusted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
    MergeFrom(*source);
  }
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::MergeFrom(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      trusted_ = from.trusted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CopyFrom(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::IsInitialized() const {
  return true;
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::Swap(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::InternalSwap(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(ip_, other->ip_);
  swap(trusted_, other->trusted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCUpdateSubGCSessionInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCUpdateSubGCSessionInfo::kUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCUpdateSubGCSessionInfo::CMsgGCUpdateSubGCSessionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCUpdateSubGCSessionInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCUpdateSubGCSessionInfo)
}
CMsgGCUpdateSubGCSessionInfo::CMsgGCUpdateSubGCSessionInfo(const CMsgGCUpdateSubGCSessionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCUpdateSubGCSessionInfo)
}

void CMsgGCUpdateSubGCSessionInfo::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCUpdateSubGCSessionInfo::~CMsgGCUpdateSubGCSessionInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCUpdateSubGCSessionInfo)
  SharedDtor();
}

void CMsgGCUpdateSubGCSessionInfo::SharedDtor() {
}

void CMsgGCUpdateSubGCSessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCUpdateSubGCSessionInfo::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCUpdateSubGCSessionInfo& CMsgGCUpdateSubGCSessionInfo::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCUpdateSubGCSessionInfo();
  return *internal_default_instance();
}

CMsgGCUpdateSubGCSessionInfo* CMsgGCUpdateSubGCSessionInfo::New(::google::protobuf::Arena* arena) const {
  CMsgGCUpdateSubGCSessionInfo* n = new CMsgGCUpdateSubGCSessionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCUpdateSubGCSessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCUpdateSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCUpdateSubGCSessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCUpdateSubGCSessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCUpdateSubGCSessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCUpdateSubGCSessionInfo)
  return false;
#undef DO_
}

void CMsgGCUpdateSubGCSessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCUpdateSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->updates(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCUpdateSubGCSessionInfo)
}

::google::protobuf::uint8* CMsgGCUpdateSubGCSessionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCUpdateSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->updates(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCUpdateSubGCSessionInfo)
  return target;
}

size_t CMsgGCUpdateSubGCSessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCUpdateSubGCSessionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->updates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->updates(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCUpdateSubGCSessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCUpdateSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCUpdateSubGCSessionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCUpdateSubGCSessionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCUpdateSubGCSessionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCUpdateSubGCSessionInfo)
    MergeFrom(*source);
  }
}

void CMsgGCUpdateSubGCSessionInfo::MergeFrom(const CMsgGCUpdateSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCUpdateSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
}

void CMsgGCUpdateSubGCSessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCUpdateSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCUpdateSubGCSessionInfo::CopyFrom(const CMsgGCUpdateSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCUpdateSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCUpdateSubGCSessionInfo::IsInitialized() const {
  return true;
}

void CMsgGCUpdateSubGCSessionInfo::Swap(CMsgGCUpdateSubGCSessionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCUpdateSubGCSessionInfo::InternalSwap(CMsgGCUpdateSubGCSessionInfo* other) {
  using std::swap;
  updates_.InternalSwap(&other->updates_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCUpdateSubGCSessionInfo::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCRequestSubGCSessionInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCRequestSubGCSessionInfo::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCRequestSubGCSessionInfo::CMsgGCRequestSubGCSessionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCRequestSubGCSessionInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCRequestSubGCSessionInfo)
}
CMsgGCRequestSubGCSessionInfo::CMsgGCRequestSubGCSessionInfo(const CMsgGCRequestSubGCSessionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestSubGCSessionInfo)
}

void CMsgGCRequestSubGCSessionInfo::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgGCRequestSubGCSessionInfo::~CMsgGCRequestSubGCSessionInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestSubGCSessionInfo)
  SharedDtor();
}

void CMsgGCRequestSubGCSessionInfo::SharedDtor() {
}

void CMsgGCRequestSubGCSessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestSubGCSessionInfo::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCRequestSubGCSessionInfo& CMsgGCRequestSubGCSessionInfo::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCRequestSubGCSessionInfo();
  return *internal_default_instance();
}

CMsgGCRequestSubGCSessionInfo* CMsgGCRequestSubGCSessionInfo::New(::google::protobuf::Arena* arena) const {
  CMsgGCRequestSubGCSessionInfo* n = new CMsgGCRequestSubGCSessionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCRequestSubGCSessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRequestSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCRequestSubGCSessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCRequestSubGCSessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCRequestSubGCSessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCRequestSubGCSessionInfo)
  return false;
#undef DO_
}

void CMsgGCRequestSubGCSessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCRequestSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCRequestSubGCSessionInfo)
}

::google::protobuf::uint8* CMsgGCRequestSubGCSessionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestSubGCSessionInfo)
  return target;
}

size_t CMsgGCRequestSubGCSessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRequestSubGCSessionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestSubGCSessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCRequestSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRequestSubGCSessionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCRequestSubGCSessionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCRequestSubGCSessionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCRequestSubGCSessionInfo)
    MergeFrom(*source);
  }
}

void CMsgGCRequestSubGCSessionInfo::MergeFrom(const CMsgGCRequestSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRequestSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CMsgGCRequestSubGCSessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCRequestSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestSubGCSessionInfo::CopyFrom(const CMsgGCRequestSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRequestSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestSubGCSessionInfo::IsInitialized() const {
  return true;
}

void CMsgGCRequestSubGCSessionInfo::Swap(CMsgGCRequestSubGCSessionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCRequestSubGCSessionInfo::InternalSwap(CMsgGCRequestSubGCSessionInfo* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCRequestSubGCSessionInfo::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCRequestSubGCSessionInfoResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCRequestSubGCSessionInfoResponse::kIpFieldNumber;
const int CMsgGCRequestSubGCSessionInfoResponse::kTrustedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCRequestSubGCSessionInfoResponse::CMsgGCRequestSubGCSessionInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCRequestSubGCSessionInfoResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCRequestSubGCSessionInfoResponse)
}
CMsgGCRequestSubGCSessionInfoResponse::CMsgGCRequestSubGCSessionInfoResponse(const CMsgGCRequestSubGCSessionInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&trusted_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(trusted_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestSubGCSessionInfoResponse)
}

void CMsgGCRequestSubGCSessionInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trusted_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(trusted_));
}

CMsgGCRequestSubGCSessionInfoResponse::~CMsgGCRequestSubGCSessionInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestSubGCSessionInfoResponse)
  SharedDtor();
}

void CMsgGCRequestSubGCSessionInfoResponse::SharedDtor() {
}

void CMsgGCRequestSubGCSessionInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestSubGCSessionInfoResponse::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCRequestSubGCSessionInfoResponse& CMsgGCRequestSubGCSessionInfoResponse::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCRequestSubGCSessionInfoResponse();
  return *internal_default_instance();
}

CMsgGCRequestSubGCSessionInfoResponse* CMsgGCRequestSubGCSessionInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCRequestSubGCSessionInfoResponse* n = new CMsgGCRequestSubGCSessionInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCRequestSubGCSessionInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRequestSubGCSessionInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trusted_) -
        reinterpret_cast<char*>(&ip_)) + sizeof(trusted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCRequestSubGCSessionInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCRequestSubGCSessionInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool trusted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trusted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trusted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCRequestSubGCSessionInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCRequestSubGCSessionInfoResponse)
  return false;
#undef DO_
}

void CMsgGCRequestSubGCSessionInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCRequestSubGCSessionInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ip(), output);
  }

  // optional bool trusted = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trusted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCRequestSubGCSessionInfoResponse)
}

::google::protobuf::uint8* CMsgGCRequestSubGCSessionInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestSubGCSessionInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->ip(), target);
  }

  // optional bool trusted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trusted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestSubGCSessionInfoResponse)
  return target;
}

size_t CMsgGCRequestSubGCSessionInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRequestSubGCSessionInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed32 ip = 1;
    if (has_ip()) {
      total_size += 1 + 4;
    }

    // optional bool trusted = 2;
    if (has_trusted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestSubGCSessionInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCRequestSubGCSessionInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRequestSubGCSessionInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCRequestSubGCSessionInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCRequestSubGCSessionInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCRequestSubGCSessionInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgGCRequestSubGCSessionInfoResponse::MergeFrom(const CMsgGCRequestSubGCSessionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRequestSubGCSessionInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      trusted_ = from.trusted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCRequestSubGCSessionInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCRequestSubGCSessionInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestSubGCSessionInfoResponse::CopyFrom(const CMsgGCRequestSubGCSessionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRequestSubGCSessionInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestSubGCSessionInfoResponse::IsInitialized() const {
  return true;
}

void CMsgGCRequestSubGCSessionInfoResponse::Swap(CMsgGCRequestSubGCSessionInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCRequestSubGCSessionInfoResponse::InternalSwap(CMsgGCRequestSubGCSessionInfoResponse* other) {
  using std::swap;
  swap(ip_, other->ip_);
  swap(trusted_, other->trusted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCRequestSubGCSessionInfoResponse::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCIncrementRecruitmentLevel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCIncrementRecruitmentLevel::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCIncrementRecruitmentLevel::CMsgGCToGCIncrementRecruitmentLevel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCIncrementRecruitmentLevel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToGCIncrementRecruitmentLevel)
}
CMsgGCToGCIncrementRecruitmentLevel::CMsgGCToGCIncrementRecruitmentLevel(const CMsgGCToGCIncrementRecruitmentLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCIncrementRecruitmentLevel)
}

void CMsgGCToGCIncrementRecruitmentLevel::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgGCToGCIncrementRecruitmentLevel::~CMsgGCToGCIncrementRecruitmentLevel() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCIncrementRecruitmentLevel)
  SharedDtor();
}

void CMsgGCToGCIncrementRecruitmentLevel::SharedDtor() {
}

void CMsgGCToGCIncrementRecruitmentLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCIncrementRecruitmentLevel::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCIncrementRecruitmentLevel& CMsgGCToGCIncrementRecruitmentLevel::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCIncrementRecruitmentLevel();
  return *internal_default_instance();
}

CMsgGCToGCIncrementRecruitmentLevel* CMsgGCToGCIncrementRecruitmentLevel::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCIncrementRecruitmentLevel* n = new CMsgGCToGCIncrementRecruitmentLevel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCIncrementRecruitmentLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCIncrementRecruitmentLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCIncrementRecruitmentLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToGCIncrementRecruitmentLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToGCIncrementRecruitmentLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToGCIncrementRecruitmentLevel)
  return false;
#undef DO_
}

void CMsgGCToGCIncrementRecruitmentLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToGCIncrementRecruitmentLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToGCIncrementRecruitmentLevel)
}

::google::protobuf::uint8* CMsgGCToGCIncrementRecruitmentLevel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCIncrementRecruitmentLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCIncrementRecruitmentLevel)
  return target;
}

size_t CMsgGCToGCIncrementRecruitmentLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCIncrementRecruitmentLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCIncrementRecruitmentLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCIncrementRecruitmentLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCIncrementRecruitmentLevel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCIncrementRecruitmentLevel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCIncrementRecruitmentLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCIncrementRecruitmentLevel)
    MergeFrom(*source);
  }
}

void CMsgGCToGCIncrementRecruitmentLevel::MergeFrom(const CMsgGCToGCIncrementRecruitmentLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCIncrementRecruitmentLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CMsgGCToGCIncrementRecruitmentLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCIncrementRecruitmentLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCIncrementRecruitmentLevel::CopyFrom(const CMsgGCToGCIncrementRecruitmentLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCIncrementRecruitmentLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCIncrementRecruitmentLevel::IsInitialized() const {
  return true;
}

void CMsgGCToGCIncrementRecruitmentLevel::Swap(CMsgGCToGCIncrementRecruitmentLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCIncrementRecruitmentLevel::InternalSwap(CMsgGCToGCIncrementRecruitmentLevel* other) {
  using std::swap;
  swap(steamid_, other->steamid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCIncrementRecruitmentLevel::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSOCacheHaveVersion::InitAsDefaultInstance() {
  ::_CMsgSOCacheHaveVersion_default_instance_._instance.get_mutable()->soid_ = const_cast< ::CMsgSOIDOwner*>(
      ::CMsgSOIDOwner::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheHaveVersion::kSoidFieldNumber;
const int CMsgSOCacheHaveVersion::kVersionFieldNumber;
const int CMsgSOCacheHaveVersion::kServiceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheHaveVersion();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheHaveVersion)
}
CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion(const CMsgSOCacheHaveVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_soid()) {
    soid_ = new ::CMsgSOIDOwner(*from.soid_);
  } else {
    soid_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheHaveVersion)
}

void CMsgSOCacheHaveVersion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&soid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&soid_)) + sizeof(service_id_));
}

CMsgSOCacheHaveVersion::~CMsgSOCacheHaveVersion() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheHaveVersion)
  SharedDtor();
}

void CMsgSOCacheHaveVersion::SharedDtor() {
  if (this != internal_default_instance()) delete soid_;
}

void CMsgSOCacheHaveVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheHaveVersion::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheHaveVersion& CMsgSOCacheHaveVersion::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgSOCacheHaveVersion();
  return *internal_default_instance();
}

CMsgSOCacheHaveVersion* CMsgSOCacheHaveVersion::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheHaveVersion* n = new CMsgSOCacheHaveVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheHaveVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheHaveVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(soid_ != NULL);
    soid_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheHaveVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheHaveVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSOIDOwner soid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheHaveVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheHaveVersion)
  return false;
#undef DO_
}

void CMsgSOCacheHaveVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheHaveVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSOIDOwner soid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->soid_, output);
  }

  // optional fixed64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->version(), output);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->service_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheHaveVersion)
}

::google::protobuf::uint8* CMsgSOCacheHaveVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheHaveVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSOIDOwner soid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->soid_, deterministic, target);
  }

  // optional fixed64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->version(), target);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->service_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheHaveVersion)
  return target;
}

size_t CMsgSOCacheHaveVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheHaveVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .CMsgSOIDOwner soid = 1;
    if (has_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->soid_);
    }

    // optional fixed64 version = 2;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 3;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheHaveVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheHaveVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheHaveVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheHaveVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheHaveVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheHaveVersion)
    MergeFrom(*source);
  }
}

void CMsgSOCacheHaveVersion::MergeFrom(const CMsgSOCacheHaveVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheHaveVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_soid()->::CMsgSOIDOwner::MergeFrom(from.soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheHaveVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheHaveVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheHaveVersion::CopyFrom(const CMsgSOCacheHaveVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheHaveVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheHaveVersion::IsInitialized() const {
  return true;
}

void CMsgSOCacheHaveVersion::Swap(CMsgSOCacheHaveVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheHaveVersion::InternalSwap(CMsgSOCacheHaveVersion* other) {
  using std::swap;
  swap(soid_, other->soid_);
  swap(version_, other->version_);
  swap(service_id_, other->service_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheHaveVersion::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgConnectionStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgConnectionStatus::kStatusFieldNumber;
const int CMsgConnectionStatus::kClientSessionNeedFieldNumber;
const int CMsgConnectionStatus::kQueuePositionFieldNumber;
const int CMsgConnectionStatus::kQueueSizeFieldNumber;
const int CMsgConnectionStatus::kWaitSecondsFieldNumber;
const int CMsgConnectionStatus::kEstimatedWaitSecondsRemainingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgConnectionStatus::CMsgConnectionStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgConnectionStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgConnectionStatus)
}
CMsgConnectionStatus::CMsgConnectionStatus(const CMsgConnectionStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&estimated_wait_seconds_remaining_) -
    reinterpret_cast<char*>(&status_)) + sizeof(estimated_wait_seconds_remaining_));
  // @@protoc_insertion_point(copy_constructor:CMsgConnectionStatus)
}

void CMsgConnectionStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&estimated_wait_seconds_remaining_) -
      reinterpret_cast<char*>(&status_)) + sizeof(estimated_wait_seconds_remaining_));
}

CMsgConnectionStatus::~CMsgConnectionStatus() {
  // @@protoc_insertion_point(destructor:CMsgConnectionStatus)
  SharedDtor();
}

void CMsgConnectionStatus::SharedDtor() {
}

void CMsgConnectionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConnectionStatus::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgConnectionStatus& CMsgConnectionStatus::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgConnectionStatus();
  return *internal_default_instance();
}

CMsgConnectionStatus* CMsgConnectionStatus::New(::google::protobuf::Arena* arena) const {
  CMsgConnectionStatus* n = new CMsgConnectionStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgConnectionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgConnectionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&estimated_wait_seconds_remaining_) -
        reinterpret_cast<char*>(&status_)) + sizeof(estimated_wait_seconds_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgConnectionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgConnectionStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCConnectionStatus_IsValid(value)) {
            set_status(static_cast< ::GCConnectionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_session_need = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_client_session_need();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_need_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 queue_position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_queue_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 queue_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_queue_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wait_seconds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_wait_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 estimated_wait_seconds_remaining = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_estimated_wait_seconds_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &estimated_wait_seconds_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgConnectionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgConnectionStatus)
  return false;
#undef DO_
}

void CMsgConnectionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgConnectionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional uint32 client_session_need = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_session_need(), output);
  }

  // optional int32 queue_position = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->queue_position(), output);
  }

  // optional int32 queue_size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->queue_size(), output);
  }

  // optional int32 wait_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wait_seconds(), output);
  }

  // optional int32 estimated_wait_seconds_remaining = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->estimated_wait_seconds_remaining(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgConnectionStatus)
}

::google::protobuf::uint8* CMsgConnectionStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgConnectionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional uint32 client_session_need = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_session_need(), target);
  }

  // optional int32 queue_position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->queue_position(), target);
  }

  // optional int32 queue_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->queue_size(), target);
  }

  // optional int32 wait_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wait_seconds(), target);
  }

  // optional int32 estimated_wait_seconds_remaining = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->estimated_wait_seconds_remaining(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgConnectionStatus)
  return target;
}

size_t CMsgConnectionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgConnectionStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 client_session_need = 2;
    if (has_client_session_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_need());
    }

    // optional int32 queue_position = 3;
    if (has_queue_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queue_position());
    }

    // optional int32 queue_size = 4;
    if (has_queue_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queue_size());
    }

    // optional int32 wait_seconds = 5;
    if (has_wait_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_seconds());
    }

    // optional int32 estimated_wait_seconds_remaining = 6;
    if (has_estimated_wait_seconds_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->estimated_wait_seconds_remaining());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConnectionStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgConnectionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConnectionStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgConnectionStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgConnectionStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgConnectionStatus)
    MergeFrom(*source);
  }
}

void CMsgConnectionStatus::MergeFrom(const CMsgConnectionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgConnectionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_session_need_ = from.client_session_need_;
    }
    if (cached_has_bits & 0x00000004u) {
      queue_position_ = from.queue_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      queue_size_ = from.queue_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      wait_seconds_ = from.wait_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      estimated_wait_seconds_remaining_ = from.estimated_wait_seconds_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgConnectionStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgConnectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectionStatus::CopyFrom(const CMsgConnectionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgConnectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectionStatus::IsInitialized() const {
  return true;
}

void CMsgConnectionStatus::Swap(CMsgConnectionStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgConnectionStatus::InternalSwap(CMsgConnectionStatus* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(client_session_need_, other->client_session_need_);
  swap(queue_position_, other->queue_position_);
  swap(queue_size_, other->queue_size_);
  swap(wait_seconds_, other->wait_seconds_);
  swap(estimated_wait_seconds_remaining_, other->estimated_wait_seconds_remaining_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgConnectionStatus::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::kServiceIdFieldNumber;
const int CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCSOCacheSubscribe_CMsgHaveVersions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
}
CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
}

CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::~CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  SharedDtor();
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SharedDtor() {
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCSOCacheSubscribe_CMsgHaveVersions();
  return *internal_default_instance();
}

CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* n = new CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 service_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  return false;
#undef DO_
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 service_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->service_id(), output);
  }

  // optional uint64 version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
}

::google::protobuf::uint8* CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 service_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->service_id(), target);
  }

  // optional uint64 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  return target;
}

size_t CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // optional uint32 service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
    MergeFrom(*source);
  }
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::MergeFrom(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CopyFrom(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::IsInitialized() const {
  return true;
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::Swap(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::InternalSwap(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* other) {
  using std::swap;
  swap(version_, other->version_);
  swap(service_id_, other->service_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCSOCacheSubscribe::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCSOCacheSubscribe::kSubscriberFieldNumber;
const int CMsgGCToGCSOCacheSubscribe::kSubscribeToFieldNumber;
const int CMsgGCToGCSOCacheSubscribe::kSyncVersionFieldNumber;
const int CMsgGCToGCSOCacheSubscribe::kHaveVersionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCSOCacheSubscribe::CMsgGCToGCSOCacheSubscribe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCSOCacheSubscribe();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToGCSOCacheSubscribe)
}
CMsgGCToGCSOCacheSubscribe::CMsgGCToGCSOCacheSubscribe(const CMsgGCToGCSOCacheSubscribe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      have_versions_(from.have_versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&subscriber_, &from.subscriber_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_version_) -
    reinterpret_cast<char*>(&subscriber_)) + sizeof(sync_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCSOCacheSubscribe)
}

void CMsgGCToGCSOCacheSubscribe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&subscriber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_version_) -
      reinterpret_cast<char*>(&subscriber_)) + sizeof(sync_version_));
}

CMsgGCToGCSOCacheSubscribe::~CMsgGCToGCSOCacheSubscribe() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCSOCacheSubscribe)
  SharedDtor();
}

void CMsgGCToGCSOCacheSubscribe::SharedDtor() {
}

void CMsgGCToGCSOCacheSubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCSOCacheSubscribe::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCSOCacheSubscribe& CMsgGCToGCSOCacheSubscribe::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCSOCacheSubscribe();
  return *internal_default_instance();
}

CMsgGCToGCSOCacheSubscribe* CMsgGCToGCSOCacheSubscribe::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCSOCacheSubscribe* n = new CMsgGCToGCSOCacheSubscribe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCSOCacheSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCSOCacheSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  have_versions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&subscriber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sync_version_) -
        reinterpret_cast<char*>(&subscriber_)) + sizeof(sync_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCSOCacheSubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToGCSOCacheSubscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 subscriber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_subscriber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &subscriber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 subscribe_to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_subscribe_to();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &subscribe_to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sync_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_sync_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_have_versions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToGCSOCacheSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToGCSOCacheSubscribe)
  return false;
#undef DO_
}

void CMsgGCToGCSOCacheSubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToGCSOCacheSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subscriber = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->subscriber(), output);
  }

  // optional fixed64 subscribe_to = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->subscribe_to(), output);
  }

  // optional fixed64 sync_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->sync_version(), output);
  }

  // repeated .CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->have_versions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->have_versions(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToGCSOCacheSubscribe)
}

::google::protobuf::uint8* CMsgGCToGCSOCacheSubscribe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCSOCacheSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subscriber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->subscriber(), target);
  }

  // optional fixed64 subscribe_to = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->subscribe_to(), target);
  }

  // optional fixed64 sync_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->sync_version(), target);
  }

  // repeated .CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->have_versions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->have_versions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCSOCacheSubscribe)
  return target;
}

size_t CMsgGCToGCSOCacheSubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCSOCacheSubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->have_versions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->have_versions(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 subscriber = 1;
    if (has_subscriber()) {
      total_size += 1 + 8;
    }

    // optional fixed64 subscribe_to = 2;
    if (has_subscribe_to()) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 3;
    if (has_sync_version()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCSOCacheSubscribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCSOCacheSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCSOCacheSubscribe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCSOCacheSubscribe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCSOCacheSubscribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCSOCacheSubscribe)
    MergeFrom(*source);
  }
}

void CMsgGCToGCSOCacheSubscribe::MergeFrom(const CMsgGCToGCSOCacheSubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCSOCacheSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  have_versions_.MergeFrom(from.have_versions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      subscriber_ = from.subscriber_;
    }
    if (cached_has_bits & 0x00000002u) {
      subscribe_to_ = from.subscribe_to_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_version_ = from.sync_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCSOCacheSubscribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCSOCacheSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSOCacheSubscribe::CopyFrom(const CMsgGCToGCSOCacheSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCSOCacheSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSOCacheSubscribe::IsInitialized() const {
  return true;
}

void CMsgGCToGCSOCacheSubscribe::Swap(CMsgGCToGCSOCacheSubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCSOCacheSubscribe::InternalSwap(CMsgGCToGCSOCacheSubscribe* other) {
  using std::swap;
  have_versions_.InternalSwap(&other->have_versions_);
  swap(subscriber_, other->subscriber_);
  swap(subscribe_to_, other->subscribe_to_);
  swap(sync_version_, other->sync_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCSOCacheSubscribe::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCSOCacheUnsubscribe::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCSOCacheUnsubscribe::kSubscriberFieldNumber;
const int CMsgGCToGCSOCacheUnsubscribe::kUnsubscribeFromFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCSOCacheUnsubscribe::CMsgGCToGCSOCacheUnsubscribe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCSOCacheUnsubscribe();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToGCSOCacheUnsubscribe)
}
CMsgGCToGCSOCacheUnsubscribe::CMsgGCToGCSOCacheUnsubscribe(const CMsgGCToGCSOCacheUnsubscribe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&subscriber_, &from.subscriber_,
    static_cast<size_t>(reinterpret_cast<char*>(&unsubscribe_from_) -
    reinterpret_cast<char*>(&subscriber_)) + sizeof(unsubscribe_from_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCSOCacheUnsubscribe)
}

void CMsgGCToGCSOCacheUnsubscribe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&subscriber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unsubscribe_from_) -
      reinterpret_cast<char*>(&subscriber_)) + sizeof(unsubscribe_from_));
}

CMsgGCToGCSOCacheUnsubscribe::~CMsgGCToGCSOCacheUnsubscribe() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCSOCacheUnsubscribe)
  SharedDtor();
}

void CMsgGCToGCSOCacheUnsubscribe::SharedDtor() {
}

void CMsgGCToGCSOCacheUnsubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCSOCacheUnsubscribe::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCSOCacheUnsubscribe& CMsgGCToGCSOCacheUnsubscribe::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCSOCacheUnsubscribe();
  return *internal_default_instance();
}

CMsgGCToGCSOCacheUnsubscribe* CMsgGCToGCSOCacheUnsubscribe::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCSOCacheUnsubscribe* n = new CMsgGCToGCSOCacheUnsubscribe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCSOCacheUnsubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCSOCacheUnsubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&subscriber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unsubscribe_from_) -
        reinterpret_cast<char*>(&subscriber_)) + sizeof(unsubscribe_from_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCSOCacheUnsubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToGCSOCacheUnsubscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 subscriber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_subscriber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &subscriber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 unsubscribe_from = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_unsubscribe_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &unsubscribe_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToGCSOCacheUnsubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToGCSOCacheUnsubscribe)
  return false;
#undef DO_
}

void CMsgGCToGCSOCacheUnsubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToGCSOCacheUnsubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subscriber = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->subscriber(), output);
  }

  // optional fixed64 unsubscribe_from = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->unsubscribe_from(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToGCSOCacheUnsubscribe)
}

::google::protobuf::uint8* CMsgGCToGCSOCacheUnsubscribe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCSOCacheUnsubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subscriber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->subscriber(), target);
  }

  // optional fixed64 unsubscribe_from = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->unsubscribe_from(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCSOCacheUnsubscribe)
  return target;
}

size_t CMsgGCToGCSOCacheUnsubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCSOCacheUnsubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 subscriber = 1;
    if (has_subscriber()) {
      total_size += 1 + 8;
    }

    // optional fixed64 unsubscribe_from = 2;
    if (has_unsubscribe_from()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCSOCacheUnsubscribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCSOCacheUnsubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCSOCacheUnsubscribe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCSOCacheUnsubscribe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCSOCacheUnsubscribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCSOCacheUnsubscribe)
    MergeFrom(*source);
  }
}

void CMsgGCToGCSOCacheUnsubscribe::MergeFrom(const CMsgGCToGCSOCacheUnsubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCSOCacheUnsubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      subscriber_ = from.subscriber_;
    }
    if (cached_has_bits & 0x00000002u) {
      unsubscribe_from_ = from.unsubscribe_from_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCSOCacheUnsubscribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCSOCacheUnsubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSOCacheUnsubscribe::CopyFrom(const CMsgGCToGCSOCacheUnsubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCSOCacheUnsubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSOCacheUnsubscribe::IsInitialized() const {
  return true;
}

void CMsgGCToGCSOCacheUnsubscribe::Swap(CMsgGCToGCSOCacheUnsubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCSOCacheUnsubscribe::InternalSwap(CMsgGCToGCSOCacheUnsubscribe* other) {
  using std::swap;
  swap(subscriber_, other->subscriber_);
  swap(unsubscribe_from_, other->unsubscribe_from_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCSOCacheUnsubscribe::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCClientPing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCClientPing::CMsgGCClientPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCClientPing();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCClientPing)
}
CMsgGCClientPing::CMsgGCClientPing(const CMsgGCClientPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCClientPing)
}

void CMsgGCClientPing::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCClientPing::~CMsgGCClientPing() {
  // @@protoc_insertion_point(destructor:CMsgGCClientPing)
  SharedDtor();
}

void CMsgGCClientPing::SharedDtor() {
}

void CMsgGCClientPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCClientPing::descriptor() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCClientPing& CMsgGCClientPing::default_instance() {
  ::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaultsCMsgGCClientPing();
  return *internal_default_instance();
}

CMsgGCClientPing* CMsgGCClientPing::New(::google::protobuf::Arena* arena) const {
  CMsgGCClientPing* n = new CMsgGCClientPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCClientPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCClientPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCClientPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCClientPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCClientPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCClientPing)
  return false;
#undef DO_
}

void CMsgGCClientPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCClientPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCClientPing)
}

::google::protobuf::uint8* CMsgGCClientPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCClientPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCClientPing)
  return target;
}

size_t CMsgGCClientPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCClientPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCClientPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCClientPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCClientPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCClientPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCClientPing)
    MergeFrom(*source);
  }
}

void CMsgGCClientPing::MergeFrom(const CMsgGCClientPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCClientPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCClientPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCClientPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientPing::CopyFrom(const CMsgGCClientPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCClientPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientPing::IsInitialized() const {
  return true;
}

void CMsgGCClientPing::Swap(CMsgGCClientPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCClientPing::InternalSwap(CMsgGCClientPing* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCClientPing::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
