// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gcsdk_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgSOSingleObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOSingleObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOMultipleObjects_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects_SingleObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOMultipleObjects_SingleObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheSubscribed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed_SubscribedType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheSubscribed_SubscribedType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheUnsubscribed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheUnsubscribed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheSubscriptionCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheSubscriptionRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheVersion_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto() {
  protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gcsdk_gcmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgSOSingleObject_descriptor_ = file->message_type(0);
  static const int CMsgSOSingleObject_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, object_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, version_),
  };
  CMsgSOSingleObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOSingleObject_descriptor_,
      CMsgSOSingleObject::default_instance_,
      CMsgSOSingleObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOSingleObject));
  CMsgSOMultipleObjects_descriptor_ = file->message_type(1);
  static const int CMsgSOMultipleObjects_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, version_),
  };
  CMsgSOMultipleObjects_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOMultipleObjects_descriptor_,
      CMsgSOMultipleObjects::default_instance_,
      CMsgSOMultipleObjects_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOMultipleObjects));
  CMsgSOMultipleObjects_SingleObject_descriptor_ = CMsgSOMultipleObjects_descriptor_->nested_type(0);
  static const int CMsgSOMultipleObjects_SingleObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, object_data_),
  };
  CMsgSOMultipleObjects_SingleObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOMultipleObjects_SingleObject_descriptor_,
      CMsgSOMultipleObjects_SingleObject::default_instance_,
      CMsgSOMultipleObjects_SingleObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOMultipleObjects_SingleObject));
  CMsgSOCacheSubscribed_descriptor_ = file->message_type(2);
  static const int CMsgSOCacheSubscribed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, version_),
  };
  CMsgSOCacheSubscribed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOCacheSubscribed_descriptor_,
      CMsgSOCacheSubscribed::default_instance_,
      CMsgSOCacheSubscribed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOCacheSubscribed));
  CMsgSOCacheSubscribed_SubscribedType_descriptor_ = CMsgSOCacheSubscribed_descriptor_->nested_type(0);
  static const int CMsgSOCacheSubscribed_SubscribedType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, object_data_),
  };
  CMsgSOCacheSubscribed_SubscribedType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOCacheSubscribed_SubscribedType_descriptor_,
      CMsgSOCacheSubscribed_SubscribedType::default_instance_,
      CMsgSOCacheSubscribed_SubscribedType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOCacheSubscribed_SubscribedType));
  CMsgSOCacheUnsubscribed_descriptor_ = file->message_type(3);
  static const int CMsgSOCacheUnsubscribed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheUnsubscribed, owner_),
  };
  CMsgSOCacheUnsubscribed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOCacheUnsubscribed_descriptor_,
      CMsgSOCacheUnsubscribed::default_instance_,
      CMsgSOCacheUnsubscribed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheUnsubscribed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheUnsubscribed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOCacheUnsubscribed));
  CMsgSOCacheSubscriptionCheck_descriptor_ = file->message_type(4);
  static const int CMsgSOCacheSubscriptionCheck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, version_),
  };
  CMsgSOCacheSubscriptionCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOCacheSubscriptionCheck_descriptor_,
      CMsgSOCacheSubscriptionCheck::default_instance_,
      CMsgSOCacheSubscriptionCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOCacheSubscriptionCheck));
  CMsgSOCacheSubscriptionRefresh_descriptor_ = file->message_type(5);
  static const int CMsgSOCacheSubscriptionRefresh_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionRefresh, owner_),
  };
  CMsgSOCacheSubscriptionRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOCacheSubscriptionRefresh_descriptor_,
      CMsgSOCacheSubscriptionRefresh::default_instance_,
      CMsgSOCacheSubscriptionRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOCacheSubscriptionRefresh));
  CMsgSOCacheVersion_descriptor_ = file->message_type(6);
  static const int CMsgSOCacheVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheVersion, version_),
  };
  CMsgSOCacheVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOCacheVersion_descriptor_,
      CMsgSOCacheVersion::default_instance_,
      CMsgSOCacheVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOCacheVersion));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOSingleObject_descriptor_, &CMsgSOSingleObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOMultipleObjects_descriptor_, &CMsgSOMultipleObjects::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOMultipleObjects_SingleObject_descriptor_, &CMsgSOMultipleObjects_SingleObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOCacheSubscribed_descriptor_, &CMsgSOCacheSubscribed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOCacheSubscribed_SubscribedType_descriptor_, &CMsgSOCacheSubscribed_SubscribedType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOCacheUnsubscribed_descriptor_, &CMsgSOCacheUnsubscribed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOCacheSubscriptionCheck_descriptor_, &CMsgSOCacheSubscriptionCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOCacheSubscriptionRefresh_descriptor_, &CMsgSOCacheSubscriptionRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOCacheVersion_descriptor_, &CMsgSOCacheVersion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gcsdk_5fgcmessages_2eproto() {
  delete CMsgSOSingleObject::default_instance_;
  delete CMsgSOSingleObject_reflection_;
  delete CMsgSOMultipleObjects::default_instance_;
  delete CMsgSOMultipleObjects_reflection_;
  delete CMsgSOMultipleObjects_SingleObject::default_instance_;
  delete CMsgSOMultipleObjects_SingleObject_reflection_;
  delete CMsgSOCacheSubscribed::default_instance_;
  delete CMsgSOCacheSubscribed_reflection_;
  delete CMsgSOCacheSubscribed_SubscribedType::default_instance_;
  delete CMsgSOCacheSubscribed_SubscribedType_reflection_;
  delete CMsgSOCacheUnsubscribed::default_instance_;
  delete CMsgSOCacheUnsubscribed_reflection_;
  delete CMsgSOCacheSubscriptionCheck::default_instance_;
  delete CMsgSOCacheSubscriptionCheck_reflection_;
  delete CMsgSOCacheSubscriptionRefresh::default_instance_;
  delete CMsgSOCacheSubscriptionRefresh_reflection_;
  delete CMsgSOCacheVersion::default_instance_;
  delete CMsgSOCacheVersion_reflection_;
}

void protobuf_AddDesc_gcsdk_5fgcmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026gcsdk_gcmessages.proto\"Z\n\022CMsgSOSingle"
    "Object\022\r\n\005owner\030\001 \001(\006\022\017\n\007type_id\030\002 \001(\005\022\023"
    "\n\013object_data\030\003 \001(\014\022\017\n\007version\030\004 \001(\006\"\243\001\n"
    "\025CMsgSOMultipleObjects\022\r\n\005owner\030\001 \001(\006\0224\n"
    "\007objects\030\002 \003(\0132#.CMsgSOMultipleObjects.S"
    "ingleObject\022\017\n\007version\030\003 \001(\006\0324\n\014SingleOb"
    "ject\022\017\n\007type_id\030\001 \001(\005\022\023\n\013object_data\030\002 \001"
    "(\014\"\247\001\n\025CMsgSOCacheSubscribed\022\r\n\005owner\030\001 "
    "\001(\006\0226\n\007objects\030\002 \003(\0132%.CMsgSOCacheSubscr"
    "ibed.SubscribedType\022\017\n\007version\030\003 \001(\006\0326\n\016"
    "SubscribedType\022\017\n\007type_id\030\001 \001(\005\022\023\n\013objec"
    "t_data\030\002 \003(\014\"(\n\027CMsgSOCacheUnsubscribed\022"
    "\r\n\005owner\030\001 \001(\006\">\n\034CMsgSOCacheSubscriptio"
    "nCheck\022\r\n\005owner\030\001 \001(\006\022\017\n\007version\030\002 \001(\006\"/"
    "\n\036CMsgSOCacheSubscriptionRefresh\022\r\n\005owne"
    "r\030\001 \001(\006\"%\n\022CMsgSOCacheVersion\022\017\n\007version"
    "\030\001 \001(\006", 646);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gcsdk_gcmessages.proto", &protobuf_RegisterTypes);
  CMsgSOSingleObject::default_instance_ = new CMsgSOSingleObject();
  CMsgSOMultipleObjects::default_instance_ = new CMsgSOMultipleObjects();
  CMsgSOMultipleObjects_SingleObject::default_instance_ = new CMsgSOMultipleObjects_SingleObject();
  CMsgSOCacheSubscribed::default_instance_ = new CMsgSOCacheSubscribed();
  CMsgSOCacheSubscribed_SubscribedType::default_instance_ = new CMsgSOCacheSubscribed_SubscribedType();
  CMsgSOCacheUnsubscribed::default_instance_ = new CMsgSOCacheUnsubscribed();
  CMsgSOCacheSubscriptionCheck::default_instance_ = new CMsgSOCacheSubscriptionCheck();
  CMsgSOCacheSubscriptionRefresh::default_instance_ = new CMsgSOCacheSubscriptionRefresh();
  CMsgSOCacheVersion::default_instance_ = new CMsgSOCacheVersion();
  CMsgSOSingleObject::default_instance_->InitAsDefaultInstance();
  CMsgSOMultipleObjects::default_instance_->InitAsDefaultInstance();
  CMsgSOMultipleObjects_SingleObject::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheSubscribed::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheSubscribed_SubscribedType::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheUnsubscribed::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheSubscriptionCheck::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheSubscriptionRefresh::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheVersion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gcsdk_5fgcmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gcsdk_5fgcmessages_2eproto {
  StaticDescriptorInitializer_gcsdk_5fgcmessages_2eproto() {
    protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  }
} static_descriptor_initializer_gcsdk_5fgcmessages_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOSingleObject::kOwnerFieldNumber;
const int CMsgSOSingleObject::kTypeIdFieldNumber;
const int CMsgSOSingleObject::kObjectDataFieldNumber;
const int CMsgSOSingleObject::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSOSingleObject::CMsgSOSingleObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOSingleObject::InitAsDefaultInstance() {
}

CMsgSOSingleObject::CMsgSOSingleObject(const CMsgSOSingleObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOSingleObject::SharedCtor() {
  _cached_size_ = 0;
  owner_ = GOOGLE_ULONGLONG(0);
  type_id_ = 0;
  object_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOSingleObject::~CMsgSOSingleObject() {
  SharedDtor();
}

void CMsgSOSingleObject::SharedDtor() {
  if (object_data_ != &::google::protobuf::internal::kEmptyString) {
    delete object_data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSOSingleObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOSingleObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOSingleObject_descriptor_;
}

const CMsgSOSingleObject& CMsgSOSingleObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSOSingleObject* CMsgSOSingleObject::default_instance_ = NULL;

CMsgSOSingleObject* CMsgSOSingleObject::New() const {
  return new CMsgSOSingleObject;
}

void CMsgSOSingleObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owner_ = GOOGLE_ULONGLONG(0);
    type_id_ = 0;
    if (has_object_data()) {
      if (object_data_ != &::google::protobuf::internal::kEmptyString) {
        object_data_->clear();
      }
    }
    version_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOSingleObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 owner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }
      
      // optional int32 type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_object_data;
        break;
      }
      
      // optional bytes object_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_version;
        break;
      }
      
      // optional fixed64 version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOSingleObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 owner = 1;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->owner(), output);
  }
  
  // optional int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }
  
  // optional bytes object_data = 3;
  if (has_object_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->object_data(), output);
  }
  
  // optional fixed64 version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOSingleObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 owner = 1;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->owner(), target);
  }
  
  // optional int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }
  
  // optional bytes object_data = 3;
  if (has_object_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->object_data(), target);
  }
  
  // optional fixed64 version = 4;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOSingleObject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 owner = 1;
    if (has_owner()) {
      total_size += 1 + 8;
    }
    
    // optional int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }
    
    // optional bytes object_data = 3;
    if (has_object_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->object_data());
    }
    
    // optional fixed64 version = 4;
    if (has_version()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOSingleObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOSingleObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOSingleObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOSingleObject::MergeFrom(const CMsgSOSingleObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_object_data()) {
      set_object_data(from.object_data());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOSingleObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOSingleObject::CopyFrom(const CMsgSOSingleObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOSingleObject::IsInitialized() const {
  
  return true;
}

void CMsgSOSingleObject::Swap(CMsgSOSingleObject* other) {
  if (other != this) {
    std::swap(owner_, other->owner_);
    std::swap(type_id_, other->type_id_);
    std::swap(object_data_, other->object_data_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOSingleObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOSingleObject_descriptor_;
  metadata.reflection = CMsgSOSingleObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOMultipleObjects_SingleObject::kTypeIdFieldNumber;
const int CMsgSOMultipleObjects_SingleObject::kObjectDataFieldNumber;
#endif  // !_MSC_VER

CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOMultipleObjects_SingleObject::InitAsDefaultInstance() {
}

CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject(const CMsgSOMultipleObjects_SingleObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOMultipleObjects_SingleObject::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  object_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOMultipleObjects_SingleObject::~CMsgSOMultipleObjects_SingleObject() {
  SharedDtor();
}

void CMsgSOMultipleObjects_SingleObject::SharedDtor() {
  if (object_data_ != &::google::protobuf::internal::kEmptyString) {
    delete object_data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSOMultipleObjects_SingleObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects_SingleObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOMultipleObjects_SingleObject_descriptor_;
}

const CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects_SingleObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects_SingleObject::default_instance_ = NULL;

CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects_SingleObject::New() const {
  return new CMsgSOMultipleObjects_SingleObject;
}

void CMsgSOMultipleObjects_SingleObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 0;
    if (has_object_data()) {
      if (object_data_ != &::google::protobuf::internal::kEmptyString) {
        object_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOMultipleObjects_SingleObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object_data;
        break;
      }
      
      // optional bytes object_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOMultipleObjects_SingleObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }
  
  // optional bytes object_data = 2;
  if (has_object_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->object_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOMultipleObjects_SingleObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }
  
  // optional bytes object_data = 2;
  if (has_object_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->object_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOMultipleObjects_SingleObject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }
    
    // optional bytes object_data = 2;
    if (has_object_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->object_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOMultipleObjects_SingleObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOMultipleObjects_SingleObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOMultipleObjects_SingleObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOMultipleObjects_SingleObject::MergeFrom(const CMsgSOMultipleObjects_SingleObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_object_data()) {
      set_object_data(from.object_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOMultipleObjects_SingleObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOMultipleObjects_SingleObject::CopyFrom(const CMsgSOMultipleObjects_SingleObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects_SingleObject::IsInitialized() const {
  
  return true;
}

void CMsgSOMultipleObjects_SingleObject::Swap(CMsgSOMultipleObjects_SingleObject* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(object_data_, other->object_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOMultipleObjects_SingleObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOMultipleObjects_SingleObject_descriptor_;
  metadata.reflection = CMsgSOMultipleObjects_SingleObject_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSOMultipleObjects::kOwnerFieldNumber;
const int CMsgSOMultipleObjects::kObjectsFieldNumber;
const int CMsgSOMultipleObjects::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSOMultipleObjects::CMsgSOMultipleObjects()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOMultipleObjects::InitAsDefaultInstance() {
}

CMsgSOMultipleObjects::CMsgSOMultipleObjects(const CMsgSOMultipleObjects& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOMultipleObjects::SharedCtor() {
  _cached_size_ = 0;
  owner_ = GOOGLE_ULONGLONG(0);
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOMultipleObjects::~CMsgSOMultipleObjects() {
  SharedDtor();
}

void CMsgSOMultipleObjects::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSOMultipleObjects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOMultipleObjects_descriptor_;
}

const CMsgSOMultipleObjects& CMsgSOMultipleObjects::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSOMultipleObjects* CMsgSOMultipleObjects::default_instance_ = NULL;

CMsgSOMultipleObjects* CMsgSOMultipleObjects::New() const {
  return new CMsgSOMultipleObjects;
}

void CMsgSOMultipleObjects::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owner_ = GOOGLE_ULONGLONG(0);
    version_ = GOOGLE_ULONGLONG(0);
  }
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOMultipleObjects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 owner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objects;
        break;
      }
      
      // repeated .CMsgSOMultipleObjects.SingleObject objects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objects;
        if (input->ExpectTag(25)) goto parse_version;
        break;
      }
      
      // optional fixed64 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOMultipleObjects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 owner = 1;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->owner(), output);
  }
  
  // repeated .CMsgSOMultipleObjects.SingleObject objects = 2;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects(i), output);
  }
  
  // optional fixed64 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOMultipleObjects::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 owner = 1;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->owner(), target);
  }
  
  // repeated .CMsgSOMultipleObjects.SingleObject objects = 2;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objects(i), target);
  }
  
  // optional fixed64 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOMultipleObjects::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 owner = 1;
    if (has_owner()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 version = 3;
    if (has_version()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .CMsgSOMultipleObjects.SingleObject objects = 2;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOMultipleObjects::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOMultipleObjects* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOMultipleObjects*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOMultipleObjects::MergeFrom(const CMsgSOMultipleObjects& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOMultipleObjects::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOMultipleObjects::CopyFrom(const CMsgSOMultipleObjects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects::IsInitialized() const {
  
  return true;
}

void CMsgSOMultipleObjects::Swap(CMsgSOMultipleObjects* other) {
  if (other != this) {
    std::swap(owner_, other->owner_);
    objects_.Swap(&other->objects_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOMultipleObjects::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOMultipleObjects_descriptor_;
  metadata.reflection = CMsgSOMultipleObjects_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheSubscribed_SubscribedType::kTypeIdFieldNumber;
const int CMsgSOCacheSubscribed_SubscribedType::kObjectDataFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOCacheSubscribed_SubscribedType::InitAsDefaultInstance() {
}

CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType(const CMsgSOCacheSubscribed_SubscribedType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed_SubscribedType::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheSubscribed_SubscribedType::~CMsgSOCacheSubscribed_SubscribedType() {
  SharedDtor();
}

void CMsgSOCacheSubscribed_SubscribedType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSOCacheSubscribed_SubscribedType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed_SubscribedType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheSubscribed_SubscribedType_descriptor_;
}

const CMsgSOCacheSubscribed_SubscribedType& CMsgSOCacheSubscribed_SubscribedType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed_SubscribedType::default_instance_ = NULL;

CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed_SubscribedType::New() const {
  return new CMsgSOCacheSubscribed_SubscribedType;
}

void CMsgSOCacheSubscribed_SubscribedType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 0;
  }
  object_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOCacheSubscribed_SubscribedType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object_data;
        break;
      }
      
      // repeated bytes object_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_object_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOCacheSubscribed_SubscribedType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }
  
  // repeated bytes object_data = 2;
  for (int i = 0; i < this->object_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->object_data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOCacheSubscribed_SubscribedType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }
  
  // repeated bytes object_data = 2;
  for (int i = 0; i < this->object_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->object_data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOCacheSubscribed_SubscribedType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }
    
  }
  // repeated bytes object_data = 2;
  total_size += 1 * this->object_data_size();
  for (int i = 0; i < this->object_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->object_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscribed_SubscribedType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOCacheSubscribed_SubscribedType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOCacheSubscribed_SubscribedType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribed_SubscribedType::MergeFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_data_.MergeFrom(from.object_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOCacheSubscribed_SubscribedType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed_SubscribedType::CopyFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed_SubscribedType::IsInitialized() const {
  
  return true;
}

void CMsgSOCacheSubscribed_SubscribedType::Swap(CMsgSOCacheSubscribed_SubscribedType* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    object_data_.Swap(&other->object_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOCacheSubscribed_SubscribedType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheSubscribed_SubscribedType_descriptor_;
  metadata.reflection = CMsgSOCacheSubscribed_SubscribedType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSOCacheSubscribed::kOwnerFieldNumber;
const int CMsgSOCacheSubscribed::kObjectsFieldNumber;
const int CMsgSOCacheSubscribed::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheSubscribed::CMsgSOCacheSubscribed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOCacheSubscribed::InitAsDefaultInstance() {
}

CMsgSOCacheSubscribed::CMsgSOCacheSubscribed(const CMsgSOCacheSubscribed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed::SharedCtor() {
  _cached_size_ = 0;
  owner_ = GOOGLE_ULONGLONG(0);
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheSubscribed::~CMsgSOCacheSubscribed() {
  SharedDtor();
}

void CMsgSOCacheSubscribed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSOCacheSubscribed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheSubscribed_descriptor_;
}

const CMsgSOCacheSubscribed& CMsgSOCacheSubscribed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSOCacheSubscribed* CMsgSOCacheSubscribed::default_instance_ = NULL;

CMsgSOCacheSubscribed* CMsgSOCacheSubscribed::New() const {
  return new CMsgSOCacheSubscribed;
}

void CMsgSOCacheSubscribed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owner_ = GOOGLE_ULONGLONG(0);
    version_ = GOOGLE_ULONGLONG(0);
  }
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOCacheSubscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 owner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objects;
        break;
      }
      
      // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objects;
        if (input->ExpectTag(25)) goto parse_version;
        break;
      }
      
      // optional fixed64 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOCacheSubscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 owner = 1;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->owner(), output);
  }
  
  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects(i), output);
  }
  
  // optional fixed64 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOCacheSubscribed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 owner = 1;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->owner(), target);
  }
  
  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objects(i), target);
  }
  
  // optional fixed64 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOCacheSubscribed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 owner = 1;
    if (has_owner()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 version = 3;
    if (has_version()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscribed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOCacheSubscribed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOCacheSubscribed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribed::MergeFrom(const CMsgSOCacheSubscribed& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOCacheSubscribed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed::CopyFrom(const CMsgSOCacheSubscribed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed::IsInitialized() const {
  
  return true;
}

void CMsgSOCacheSubscribed::Swap(CMsgSOCacheSubscribed* other) {
  if (other != this) {
    std::swap(owner_, other->owner_);
    objects_.Swap(&other->objects_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOCacheSubscribed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheSubscribed_descriptor_;
  metadata.reflection = CMsgSOCacheSubscribed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheUnsubscribed::kOwnerFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOCacheUnsubscribed::InitAsDefaultInstance() {
}

CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed(const CMsgSOCacheUnsubscribed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOCacheUnsubscribed::SharedCtor() {
  _cached_size_ = 0;
  owner_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheUnsubscribed::~CMsgSOCacheUnsubscribed() {
  SharedDtor();
}

void CMsgSOCacheUnsubscribed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSOCacheUnsubscribed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheUnsubscribed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheUnsubscribed_descriptor_;
}

const CMsgSOCacheUnsubscribed& CMsgSOCacheUnsubscribed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSOCacheUnsubscribed* CMsgSOCacheUnsubscribed::default_instance_ = NULL;

CMsgSOCacheUnsubscribed* CMsgSOCacheUnsubscribed::New() const {
  return new CMsgSOCacheUnsubscribed;
}

void CMsgSOCacheUnsubscribed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owner_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOCacheUnsubscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 owner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOCacheUnsubscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 owner = 1;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->owner(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOCacheUnsubscribed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 owner = 1;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->owner(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOCacheUnsubscribed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 owner = 1;
    if (has_owner()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheUnsubscribed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOCacheUnsubscribed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOCacheUnsubscribed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheUnsubscribed::MergeFrom(const CMsgSOCacheUnsubscribed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner()) {
      set_owner(from.owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOCacheUnsubscribed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheUnsubscribed::CopyFrom(const CMsgSOCacheUnsubscribed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheUnsubscribed::IsInitialized() const {
  
  return true;
}

void CMsgSOCacheUnsubscribed::Swap(CMsgSOCacheUnsubscribed* other) {
  if (other != this) {
    std::swap(owner_, other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOCacheUnsubscribed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheUnsubscribed_descriptor_;
  metadata.reflection = CMsgSOCacheUnsubscribed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheSubscriptionCheck::kOwnerFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOCacheSubscriptionCheck::InitAsDefaultInstance() {
}

CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck(const CMsgSOCacheSubscriptionCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionCheck::SharedCtor() {
  _cached_size_ = 0;
  owner_ = GOOGLE_ULONGLONG(0);
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheSubscriptionCheck::~CMsgSOCacheSubscriptionCheck() {
  SharedDtor();
}

void CMsgSOCacheSubscriptionCheck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSOCacheSubscriptionCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheSubscriptionCheck_descriptor_;
}

const CMsgSOCacheSubscriptionCheck& CMsgSOCacheSubscriptionCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSOCacheSubscriptionCheck* CMsgSOCacheSubscriptionCheck::default_instance_ = NULL;

CMsgSOCacheSubscriptionCheck* CMsgSOCacheSubscriptionCheck::New() const {
  return new CMsgSOCacheSubscriptionCheck;
}

void CMsgSOCacheSubscriptionCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owner_ = GOOGLE_ULONGLONG(0);
    version_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOCacheSubscriptionCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 owner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_version;
        break;
      }
      
      // optional fixed64 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOCacheSubscriptionCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 owner = 1;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->owner(), output);
  }
  
  // optional fixed64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOCacheSubscriptionCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 owner = 1;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->owner(), target);
  }
  
  // optional fixed64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOCacheSubscriptionCheck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 owner = 1;
    if (has_owner()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 version = 2;
    if (has_version()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscriptionCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOCacheSubscriptionCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOCacheSubscriptionCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscriptionCheck::MergeFrom(const CMsgSOCacheSubscriptionCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOCacheSubscriptionCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionCheck::CopyFrom(const CMsgSOCacheSubscriptionCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscriptionCheck::IsInitialized() const {
  
  return true;
}

void CMsgSOCacheSubscriptionCheck::Swap(CMsgSOCacheSubscriptionCheck* other) {
  if (other != this) {
    std::swap(owner_, other->owner_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOCacheSubscriptionCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheSubscriptionCheck_descriptor_;
  metadata.reflection = CMsgSOCacheSubscriptionCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheSubscriptionRefresh::kOwnerFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOCacheSubscriptionRefresh::InitAsDefaultInstance() {
}

CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh(const CMsgSOCacheSubscriptionRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionRefresh::SharedCtor() {
  _cached_size_ = 0;
  owner_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheSubscriptionRefresh::~CMsgSOCacheSubscriptionRefresh() {
  SharedDtor();
}

void CMsgSOCacheSubscriptionRefresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSOCacheSubscriptionRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheSubscriptionRefresh_descriptor_;
}

const CMsgSOCacheSubscriptionRefresh& CMsgSOCacheSubscriptionRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSOCacheSubscriptionRefresh* CMsgSOCacheSubscriptionRefresh::default_instance_ = NULL;

CMsgSOCacheSubscriptionRefresh* CMsgSOCacheSubscriptionRefresh::New() const {
  return new CMsgSOCacheSubscriptionRefresh;
}

void CMsgSOCacheSubscriptionRefresh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owner_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOCacheSubscriptionRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 owner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOCacheSubscriptionRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 owner = 1;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->owner(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOCacheSubscriptionRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 owner = 1;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->owner(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOCacheSubscriptionRefresh::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 owner = 1;
    if (has_owner()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscriptionRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOCacheSubscriptionRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOCacheSubscriptionRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscriptionRefresh::MergeFrom(const CMsgSOCacheSubscriptionRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner()) {
      set_owner(from.owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOCacheSubscriptionRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionRefresh::CopyFrom(const CMsgSOCacheSubscriptionRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscriptionRefresh::IsInitialized() const {
  
  return true;
}

void CMsgSOCacheSubscriptionRefresh::Swap(CMsgSOCacheSubscriptionRefresh* other) {
  if (other != this) {
    std::swap(owner_, other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOCacheSubscriptionRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheSubscriptionRefresh_descriptor_;
  metadata.reflection = CMsgSOCacheSubscriptionRefresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheVersion::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheVersion::CMsgSOCacheVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOCacheVersion::InitAsDefaultInstance() {
}

CMsgSOCacheVersion::CMsgSOCacheVersion(const CMsgSOCacheVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOCacheVersion::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheVersion::~CMsgSOCacheVersion() {
  SharedDtor();
}

void CMsgSOCacheVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSOCacheVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheVersion_descriptor_;
}

const CMsgSOCacheVersion& CMsgSOCacheVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSOCacheVersion* CMsgSOCacheVersion::default_instance_ = NULL;

CMsgSOCacheVersion* CMsgSOCacheVersion::New() const {
  return new CMsgSOCacheVersion;
}

void CMsgSOCacheVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOCacheVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOCacheVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOCacheVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOCacheVersion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 version = 1;
    if (has_version()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOCacheVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOCacheVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheVersion::MergeFrom(const CMsgSOCacheVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOCacheVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheVersion::CopyFrom(const CMsgSOCacheVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheVersion::IsInitialized() const {
  
  return true;
}

void CMsgSOCacheVersion::Swap(CMsgSOCacheVersion* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOCacheVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheVersion_descriptor_;
  metadata.reflection = CMsgSOCacheVersion_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
