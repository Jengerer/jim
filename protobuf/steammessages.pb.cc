// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgProtoBufHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgProtoBufHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgWebAPIKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgWebAPIKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgHttpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHttpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgHttpRequest_RequestHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHttpRequest_RequestHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgHttpRequest_QueryParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHttpRequest_QueryParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgWebAPIRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgWebAPIRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgHttpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHttpResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgHttpResponse_ResponseHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHttpResponse_ResponseHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMFindAccounts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMFindAccounts_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMFindAccountsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMFindAccountsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgNotifyWatchdog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgNotifyWatchdog_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMGetLicenses_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMGetLicenses_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPackageLicense_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPackageLicense_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMGetLicensesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMGetLicensesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMGetUserGameStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMGetUserGameStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMGetUserGameStatsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMGetUserGameStatsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMGetUserGameStatsResponse_Stats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMGetUserGameStatsResponse_Stats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMGetUserGameStatsResponse_Achievement_Blocks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMGetUserGameStatsResponse_Achievement_Blocks_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCGetCommandList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCGetCommandList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCGetCommandListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCGetCommandListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgMemCachedGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgMemCachedGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgMemCachedGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgMemCachedGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgMemCachedGetResponse_ValueTag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgMemCachedGetResponse_ValueTag_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgMemCachedSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgMemCachedSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgMemCachedSet_KeyPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgMemCachedSet_KeyPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgMemCachedDelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgMemCachedDelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMAddFreeLicense_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMAddFreeLicense_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMAddFreeLicenseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMAddFreeLicenseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgGetIPLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgGetIPLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CIPLocationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CIPLocationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgGetIPLocationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgGetIPLocationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgSystemStatsSchema_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgSystemStatsSchema_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgGetSystemStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgGetSystemStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCMsgGetSystemStatsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCMsgGetSystemStatsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMSendEmail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMSendEmail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMSendEmail_ReplacementToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMSendEmail_ReplacementToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMSendEmail_PersonaNameReplacementToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMSendEmail_PersonaNameReplacementToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMSendEmailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMSendEmailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCGetEmailTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCGetEmailTemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCGetEmailTemplateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCGetEmailTemplateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMGrantGuestPasses2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMGrantGuestPasses2_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMGrantGuestPasses2Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMGrantGuestPasses2Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCSystemMsg_GetAccountDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCSystemMsg_GetAccountDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCSystemMsg_GetAccountDetails_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCSystemMsg_GetAccountDetails_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCGetPersonaNames_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCGetPersonaNames_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCGetPersonaNames_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCGetPersonaNames_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCGetPersonaNames_Response_PersonaName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCGetPersonaNames_Response_PersonaName_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCSystemMsg_GetPurchaseTrust_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCSystemMsg_GetPurchaseTrust_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCSystemMsg_GetPurchaseTrust_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCSystemMsg_GetPurchaseTrust_Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_steammessages_2eproto() {
  protobuf_AddDesc_steammessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steammessages.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgProtoBufHeader_descriptor_ = file->message_type(0);
  static const int CMsgProtoBufHeader_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, client_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, client_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, source_app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, job_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, job_id_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, target_job_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, error_message_),
  };
  CMsgProtoBufHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgProtoBufHeader_descriptor_,
      CMsgProtoBufHeader::default_instance_,
      CMsgProtoBufHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgProtoBufHeader));
  CMsgWebAPIKey_descriptor_ = file->message_type(1);
  static const int CMsgWebAPIKey_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIKey, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIKey, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIKey, publisher_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIKey, key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIKey, domain_),
  };
  CMsgWebAPIKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgWebAPIKey_descriptor_,
      CMsgWebAPIKey::default_instance_,
      CMsgWebAPIKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgWebAPIKey));
  CMsgHttpRequest_descriptor_ = file->message_type(2);
  static const int CMsgHttpRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, request_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, get_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, post_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, body_),
  };
  CMsgHttpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHttpRequest_descriptor_,
      CMsgHttpRequest::default_instance_,
      CMsgHttpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHttpRequest));
  CMsgHttpRequest_RequestHeader_descriptor_ = CMsgHttpRequest_descriptor_->nested_type(0);
  static const int CMsgHttpRequest_RequestHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_RequestHeader, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_RequestHeader, value_),
  };
  CMsgHttpRequest_RequestHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHttpRequest_RequestHeader_descriptor_,
      CMsgHttpRequest_RequestHeader::default_instance_,
      CMsgHttpRequest_RequestHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_RequestHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_RequestHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHttpRequest_RequestHeader));
  CMsgHttpRequest_QueryParam_descriptor_ = CMsgHttpRequest_descriptor_->nested_type(1);
  static const int CMsgHttpRequest_QueryParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_QueryParam, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_QueryParam, value_),
  };
  CMsgHttpRequest_QueryParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHttpRequest_QueryParam_descriptor_,
      CMsgHttpRequest_QueryParam::default_instance_,
      CMsgHttpRequest_QueryParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_QueryParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_QueryParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHttpRequest_QueryParam));
  CMsgWebAPIRequest_descriptor_ = file->message_type(3);
  static const int CMsgWebAPIRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, unused_job_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, interface_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, api_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, routing_app_id_),
  };
  CMsgWebAPIRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgWebAPIRequest_descriptor_,
      CMsgWebAPIRequest::default_instance_,
      CMsgWebAPIRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgWebAPIRequest));
  CMsgHttpResponse_descriptor_ = file->message_type(4);
  static const int CMsgHttpResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse, headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse, body_),
  };
  CMsgHttpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHttpResponse_descriptor_,
      CMsgHttpResponse::default_instance_,
      CMsgHttpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHttpResponse));
  CMsgHttpResponse_ResponseHeader_descriptor_ = CMsgHttpResponse_descriptor_->nested_type(0);
  static const int CMsgHttpResponse_ResponseHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse_ResponseHeader, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse_ResponseHeader, value_),
  };
  CMsgHttpResponse_ResponseHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHttpResponse_ResponseHeader_descriptor_,
      CMsgHttpResponse_ResponseHeader::default_instance_,
      CMsgHttpResponse_ResponseHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse_ResponseHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse_ResponseHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHttpResponse_ResponseHeader));
  CMsgAMFindAccounts_descriptor_ = file->message_type(5);
  static const int CMsgAMFindAccounts_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMFindAccounts, search_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMFindAccounts, search_string_),
  };
  CMsgAMFindAccounts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMFindAccounts_descriptor_,
      CMsgAMFindAccounts::default_instance_,
      CMsgAMFindAccounts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMFindAccounts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMFindAccounts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMFindAccounts));
  CMsgAMFindAccountsResponse_descriptor_ = file->message_type(6);
  static const int CMsgAMFindAccountsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMFindAccountsResponse, steam_id_),
  };
  CMsgAMFindAccountsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMFindAccountsResponse_descriptor_,
      CMsgAMFindAccountsResponse::default_instance_,
      CMsgAMFindAccountsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMFindAccountsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMFindAccountsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMFindAccountsResponse));
  CMsgNotifyWatchdog_descriptor_ = file->message_type(7);
  static const int CMsgNotifyWatchdog_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, alert_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, alert_destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, critical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, text_),
  };
  CMsgNotifyWatchdog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgNotifyWatchdog_descriptor_,
      CMsgNotifyWatchdog::default_instance_,
      CMsgNotifyWatchdog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgNotifyWatchdog));
  CMsgAMGetLicenses_descriptor_ = file->message_type(8);
  static const int CMsgAMGetLicenses_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetLicenses, steamid_),
  };
  CMsgAMGetLicenses_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMGetLicenses_descriptor_,
      CMsgAMGetLicenses::default_instance_,
      CMsgAMGetLicenses_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetLicenses, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetLicenses, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMGetLicenses));
  CMsgPackageLicense_descriptor_ = file->message_type(9);
  static const int CMsgPackageLicense_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPackageLicense, package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPackageLicense, time_created_),
  };
  CMsgPackageLicense_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPackageLicense_descriptor_,
      CMsgPackageLicense::default_instance_,
      CMsgPackageLicense_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPackageLicense, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPackageLicense, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPackageLicense));
  CMsgAMGetLicensesResponse_descriptor_ = file->message_type(10);
  static const int CMsgAMGetLicensesResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetLicensesResponse, license_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetLicensesResponse, result_),
  };
  CMsgAMGetLicensesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMGetLicensesResponse_descriptor_,
      CMsgAMGetLicensesResponse::default_instance_,
      CMsgAMGetLicensesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetLicensesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetLicensesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMGetLicensesResponse));
  CMsgAMGetUserGameStats_descriptor_ = file->message_type(11);
  static const int CMsgAMGetUserGameStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStats, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStats, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStats, stats_),
  };
  CMsgAMGetUserGameStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMGetUserGameStats_descriptor_,
      CMsgAMGetUserGameStats::default_instance_,
      CMsgAMGetUserGameStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMGetUserGameStats));
  CMsgAMGetUserGameStatsResponse_descriptor_ = file->message_type(12);
  static const int CMsgAMGetUserGameStatsResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, achievement_blocks_),
  };
  CMsgAMGetUserGameStatsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMGetUserGameStatsResponse_descriptor_,
      CMsgAMGetUserGameStatsResponse::default_instance_,
      CMsgAMGetUserGameStatsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMGetUserGameStatsResponse));
  CMsgAMGetUserGameStatsResponse_Stats_descriptor_ = CMsgAMGetUserGameStatsResponse_descriptor_->nested_type(0);
  static const int CMsgAMGetUserGameStatsResponse_Stats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Stats, stat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Stats, stat_value_),
  };
  CMsgAMGetUserGameStatsResponse_Stats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMGetUserGameStatsResponse_Stats_descriptor_,
      CMsgAMGetUserGameStatsResponse_Stats::default_instance_,
      CMsgAMGetUserGameStatsResponse_Stats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Stats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Stats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMGetUserGameStatsResponse_Stats));
  CMsgAMGetUserGameStatsResponse_Achievement_Blocks_descriptor_ = CMsgAMGetUserGameStatsResponse_descriptor_->nested_type(1);
  static const int CMsgAMGetUserGameStatsResponse_Achievement_Blocks_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Achievement_Blocks, achievement_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Achievement_Blocks, achievement_bit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Achievement_Blocks, unlock_time_),
  };
  CMsgAMGetUserGameStatsResponse_Achievement_Blocks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMGetUserGameStatsResponse_Achievement_Blocks_descriptor_,
      CMsgAMGetUserGameStatsResponse_Achievement_Blocks::default_instance_,
      CMsgAMGetUserGameStatsResponse_Achievement_Blocks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Achievement_Blocks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Achievement_Blocks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMGetUserGameStatsResponse_Achievement_Blocks));
  CMsgGCGetCommandList_descriptor_ = file->message_type(13);
  static const int CMsgGCGetCommandList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetCommandList, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetCommandList, command_prefix_),
  };
  CMsgGCGetCommandList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCGetCommandList_descriptor_,
      CMsgGCGetCommandList::default_instance_,
      CMsgGCGetCommandList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetCommandList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetCommandList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCGetCommandList));
  CMsgGCGetCommandListResponse_descriptor_ = file->message_type(14);
  static const int CMsgGCGetCommandListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetCommandListResponse, command_name_),
  };
  CMsgGCGetCommandListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCGetCommandListResponse_descriptor_,
      CMsgGCGetCommandListResponse::default_instance_,
      CMsgGCGetCommandListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetCommandListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetCommandListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCGetCommandListResponse));
  CGCMsgMemCachedGet_descriptor_ = file->message_type(15);
  static const int CGCMsgMemCachedGet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGet, keys_),
  };
  CGCMsgMemCachedGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgMemCachedGet_descriptor_,
      CGCMsgMemCachedGet::default_instance_,
      CGCMsgMemCachedGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgMemCachedGet));
  CGCMsgMemCachedGetResponse_descriptor_ = file->message_type(16);
  static const int CGCMsgMemCachedGetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGetResponse, values_),
  };
  CGCMsgMemCachedGetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgMemCachedGetResponse_descriptor_,
      CGCMsgMemCachedGetResponse::default_instance_,
      CGCMsgMemCachedGetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgMemCachedGetResponse));
  CGCMsgMemCachedGetResponse_ValueTag_descriptor_ = CGCMsgMemCachedGetResponse_descriptor_->nested_type(0);
  static const int CGCMsgMemCachedGetResponse_ValueTag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGetResponse_ValueTag, found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGetResponse_ValueTag, value_),
  };
  CGCMsgMemCachedGetResponse_ValueTag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgMemCachedGetResponse_ValueTag_descriptor_,
      CGCMsgMemCachedGetResponse_ValueTag::default_instance_,
      CGCMsgMemCachedGetResponse_ValueTag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGetResponse_ValueTag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGetResponse_ValueTag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgMemCachedGetResponse_ValueTag));
  CGCMsgMemCachedSet_descriptor_ = file->message_type(17);
  static const int CGCMsgMemCachedSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedSet, keys_),
  };
  CGCMsgMemCachedSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgMemCachedSet_descriptor_,
      CGCMsgMemCachedSet::default_instance_,
      CGCMsgMemCachedSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgMemCachedSet));
  CGCMsgMemCachedSet_KeyPair_descriptor_ = CGCMsgMemCachedSet_descriptor_->nested_type(0);
  static const int CGCMsgMemCachedSet_KeyPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedSet_KeyPair, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedSet_KeyPair, value_),
  };
  CGCMsgMemCachedSet_KeyPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgMemCachedSet_KeyPair_descriptor_,
      CGCMsgMemCachedSet_KeyPair::default_instance_,
      CGCMsgMemCachedSet_KeyPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedSet_KeyPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedSet_KeyPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgMemCachedSet_KeyPair));
  CGCMsgMemCachedDelete_descriptor_ = file->message_type(18);
  static const int CGCMsgMemCachedDelete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedDelete, keys_),
  };
  CGCMsgMemCachedDelete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgMemCachedDelete_descriptor_,
      CGCMsgMemCachedDelete::default_instance_,
      CGCMsgMemCachedDelete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedDelete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedDelete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgMemCachedDelete));
  CMsgAMAddFreeLicense_descriptor_ = file->message_type(19);
  static const int CMsgAMAddFreeLicense_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicense, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicense, ip_public_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicense, packageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicense, store_country_code_),
  };
  CMsgAMAddFreeLicense_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMAddFreeLicense_descriptor_,
      CMsgAMAddFreeLicense::default_instance_,
      CMsgAMAddFreeLicense_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicense, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicense, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMAddFreeLicense));
  CMsgAMAddFreeLicenseResponse_descriptor_ = file->message_type(20);
  static const int CMsgAMAddFreeLicenseResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicenseResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicenseResponse, purchase_result_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicenseResponse, transid_),
  };
  CMsgAMAddFreeLicenseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMAddFreeLicenseResponse_descriptor_,
      CMsgAMAddFreeLicenseResponse::default_instance_,
      CMsgAMAddFreeLicenseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicenseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicenseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMAddFreeLicenseResponse));
  CGCMsgGetIPLocation_descriptor_ = file->message_type(21);
  static const int CGCMsgGetIPLocation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPLocation, ips_),
  };
  CGCMsgGetIPLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgGetIPLocation_descriptor_,
      CGCMsgGetIPLocation::default_instance_,
      CGCMsgGetIPLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgGetIPLocation));
  CIPLocationInfo_descriptor_ = file->message_type(22);
  static const int CIPLocationInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, city_),
  };
  CIPLocationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CIPLocationInfo_descriptor_,
      CIPLocationInfo::default_instance_,
      CIPLocationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CIPLocationInfo));
  CGCMsgGetIPLocationResponse_descriptor_ = file->message_type(23);
  static const int CGCMsgGetIPLocationResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPLocationResponse, infos_),
  };
  CGCMsgGetIPLocationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgGetIPLocationResponse_descriptor_,
      CGCMsgGetIPLocationResponse::default_instance_,
      CGCMsgGetIPLocationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPLocationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPLocationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgGetIPLocationResponse));
  CGCMsgSystemStatsSchema_descriptor_ = file->message_type(24);
  static const int CGCMsgSystemStatsSchema_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSystemStatsSchema, gc_app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSystemStatsSchema, schema_kv_),
  };
  CGCMsgSystemStatsSchema_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgSystemStatsSchema_descriptor_,
      CGCMsgSystemStatsSchema::default_instance_,
      CGCMsgSystemStatsSchema_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSystemStatsSchema, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSystemStatsSchema, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgSystemStatsSchema));
  CGCMsgGetSystemStats_descriptor_ = file->message_type(25);
  static const int CGCMsgGetSystemStats_offsets_[1] = {
  };
  CGCMsgGetSystemStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgGetSystemStats_descriptor_,
      CGCMsgGetSystemStats::default_instance_,
      CGCMsgGetSystemStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgGetSystemStats));
  CGCMsgGetSystemStatsResponse_descriptor_ = file->message_type(26);
  static const int CGCMsgGetSystemStatsResponse_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, gc_app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, stats_kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, active_jobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, yielding_jobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, user_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, game_server_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, socaches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, socaches_to_unload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, socaches_loading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, writeback_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, steamid_locks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, logon_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, logon_jobs_),
  };
  CGCMsgGetSystemStatsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCMsgGetSystemStatsResponse_descriptor_,
      CGCMsgGetSystemStatsResponse::default_instance_,
      CGCMsgGetSystemStatsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCMsgGetSystemStatsResponse));
  CMsgAMSendEmail_descriptor_ = file->message_type(27);
  static const int CMsgAMSendEmail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, email_msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, email_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, persona_name_tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, source_gc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, tokens_),
  };
  CMsgAMSendEmail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMSendEmail_descriptor_,
      CMsgAMSendEmail::default_instance_,
      CMsgAMSendEmail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMSendEmail));
  CMsgAMSendEmail_ReplacementToken_descriptor_ = CMsgAMSendEmail_descriptor_->nested_type(0);
  static const int CMsgAMSendEmail_ReplacementToken_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_ReplacementToken, token_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_ReplacementToken, token_value_),
  };
  CMsgAMSendEmail_ReplacementToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMSendEmail_ReplacementToken_descriptor_,
      CMsgAMSendEmail_ReplacementToken::default_instance_,
      CMsgAMSendEmail_ReplacementToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_ReplacementToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_ReplacementToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMSendEmail_ReplacementToken));
  CMsgAMSendEmail_PersonaNameReplacementToken_descriptor_ = CMsgAMSendEmail_descriptor_->nested_type(1);
  static const int CMsgAMSendEmail_PersonaNameReplacementToken_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_PersonaNameReplacementToken, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_PersonaNameReplacementToken, token_name_),
  };
  CMsgAMSendEmail_PersonaNameReplacementToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMSendEmail_PersonaNameReplacementToken_descriptor_,
      CMsgAMSendEmail_PersonaNameReplacementToken::default_instance_,
      CMsgAMSendEmail_PersonaNameReplacementToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_PersonaNameReplacementToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_PersonaNameReplacementToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMSendEmail_PersonaNameReplacementToken));
  CMsgAMSendEmailResponse_descriptor_ = file->message_type(28);
  static const int CMsgAMSendEmailResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmailResponse, eresult_),
  };
  CMsgAMSendEmailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMSendEmailResponse_descriptor_,
      CMsgAMSendEmailResponse::default_instance_,
      CMsgAMSendEmailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMSendEmailResponse));
  CMsgGCGetEmailTemplate_descriptor_ = file->message_type(29);
  static const int CMsgGCGetEmailTemplate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplate, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplate, email_msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplate, email_lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplate, email_format_),
  };
  CMsgGCGetEmailTemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCGetEmailTemplate_descriptor_,
      CMsgGCGetEmailTemplate::default_instance_,
      CMsgGCGetEmailTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCGetEmailTemplate));
  CMsgGCGetEmailTemplateResponse_descriptor_ = file->message_type(30);
  static const int CMsgGCGetEmailTemplateResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplateResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplateResponse, template_exists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplateResponse, template__),
  };
  CMsgGCGetEmailTemplateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCGetEmailTemplateResponse_descriptor_,
      CMsgGCGetEmailTemplateResponse::default_instance_,
      CMsgGCGetEmailTemplateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCGetEmailTemplateResponse));
  CMsgAMGrantGuestPasses2_descriptor_ = file->message_type(31);
  static const int CMsgAMGrantGuestPasses2_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2, package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2, passes_to_grant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2, days_to_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2, action_),
  };
  CMsgAMGrantGuestPasses2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMGrantGuestPasses2_descriptor_,
      CMsgAMGrantGuestPasses2::default_instance_,
      CMsgAMGrantGuestPasses2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMGrantGuestPasses2));
  CMsgAMGrantGuestPasses2Response_descriptor_ = file->message_type(32);
  static const int CMsgAMGrantGuestPasses2Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2Response, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2Response, passes_granted_),
  };
  CMsgAMGrantGuestPasses2Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMGrantGuestPasses2Response_descriptor_,
      CMsgAMGrantGuestPasses2Response::default_instance_,
      CMsgAMGrantGuestPasses2Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMGrantGuestPasses2Response));
  CGCSystemMsg_GetAccountDetails_descriptor_ = file->message_type(33);
  static const int CGCSystemMsg_GetAccountDetails_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, appid_),
  };
  CGCSystemMsg_GetAccountDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCSystemMsg_GetAccountDetails_descriptor_,
      CGCSystemMsg_GetAccountDetails::default_instance_,
      CGCSystemMsg_GetAccountDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCSystemMsg_GetAccountDetails));
  CGCSystemMsg_GetAccountDetails_Response_descriptor_ = file->message_type(34);
  static const int CGCSystemMsg_GetAccountDetails_Response_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, eresult_deprecated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, persona_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_profile_public_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_inventory_public_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_trusted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_vac_banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_cyber_cafe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_school_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_limited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_subscribed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, package_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_free_trial_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, free_trial_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_low_violence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_account_locked_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_community_banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_trade_banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, trade_ban_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, eligible_for_community_market_),
  };
  CGCSystemMsg_GetAccountDetails_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCSystemMsg_GetAccountDetails_Response_descriptor_,
      CGCSystemMsg_GetAccountDetails_Response::default_instance_,
      CGCSystemMsg_GetAccountDetails_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCSystemMsg_GetAccountDetails_Response));
  CMsgGCGetPersonaNames_descriptor_ = file->message_type(35);
  static const int CMsgGCGetPersonaNames_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames, steamids_),
  };
  CMsgGCGetPersonaNames_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCGetPersonaNames_descriptor_,
      CMsgGCGetPersonaNames::default_instance_,
      CMsgGCGetPersonaNames_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCGetPersonaNames));
  CMsgGCGetPersonaNames_Response_descriptor_ = file->message_type(36);
  static const int CMsgGCGetPersonaNames_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response, succeeded_lookups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response, failed_lookup_steamids_),
  };
  CMsgGCGetPersonaNames_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCGetPersonaNames_Response_descriptor_,
      CMsgGCGetPersonaNames_Response::default_instance_,
      CMsgGCGetPersonaNames_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCGetPersonaNames_Response));
  CMsgGCGetPersonaNames_Response_PersonaName_descriptor_ = CMsgGCGetPersonaNames_Response_descriptor_->nested_type(0);
  static const int CMsgGCGetPersonaNames_Response_PersonaName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response_PersonaName, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response_PersonaName, persona_name_),
  };
  CMsgGCGetPersonaNames_Response_PersonaName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCGetPersonaNames_Response_PersonaName_descriptor_,
      CMsgGCGetPersonaNames_Response_PersonaName::default_instance_,
      CMsgGCGetPersonaNames_Response_PersonaName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response_PersonaName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response_PersonaName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCGetPersonaNames_Response_PersonaName));
  CGCSystemMsg_GetPurchaseTrust_Request_descriptor_ = file->message_type(37);
  static const int CGCSystemMsg_GetPurchaseTrust_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Request, steamid_),
  };
  CGCSystemMsg_GetPurchaseTrust_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCSystemMsg_GetPurchaseTrust_Request_descriptor_,
      CGCSystemMsg_GetPurchaseTrust_Request::default_instance_,
      CGCSystemMsg_GetPurchaseTrust_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCSystemMsg_GetPurchaseTrust_Request));
  CGCSystemMsg_GetPurchaseTrust_Response_descriptor_ = file->message_type(38);
  static const int CGCSystemMsg_GetPurchaseTrust_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, has_prior_purchase_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, has_no_recent_password_resets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, is_wallet_cash_trusted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, time_all_trusted_),
  };
  CGCSystemMsg_GetPurchaseTrust_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCSystemMsg_GetPurchaseTrust_Response_descriptor_,
      CGCSystemMsg_GetPurchaseTrust_Response::default_instance_,
      CGCSystemMsg_GetPurchaseTrust_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCSystemMsg_GetPurchaseTrust_Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steammessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgProtoBufHeader_descriptor_, &CMsgProtoBufHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgWebAPIKey_descriptor_, &CMsgWebAPIKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHttpRequest_descriptor_, &CMsgHttpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHttpRequest_RequestHeader_descriptor_, &CMsgHttpRequest_RequestHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHttpRequest_QueryParam_descriptor_, &CMsgHttpRequest_QueryParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgWebAPIRequest_descriptor_, &CMsgWebAPIRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHttpResponse_descriptor_, &CMsgHttpResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHttpResponse_ResponseHeader_descriptor_, &CMsgHttpResponse_ResponseHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMFindAccounts_descriptor_, &CMsgAMFindAccounts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMFindAccountsResponse_descriptor_, &CMsgAMFindAccountsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgNotifyWatchdog_descriptor_, &CMsgNotifyWatchdog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMGetLicenses_descriptor_, &CMsgAMGetLicenses::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPackageLicense_descriptor_, &CMsgPackageLicense::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMGetLicensesResponse_descriptor_, &CMsgAMGetLicensesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMGetUserGameStats_descriptor_, &CMsgAMGetUserGameStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMGetUserGameStatsResponse_descriptor_, &CMsgAMGetUserGameStatsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMGetUserGameStatsResponse_Stats_descriptor_, &CMsgAMGetUserGameStatsResponse_Stats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMGetUserGameStatsResponse_Achievement_Blocks_descriptor_, &CMsgAMGetUserGameStatsResponse_Achievement_Blocks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCGetCommandList_descriptor_, &CMsgGCGetCommandList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCGetCommandListResponse_descriptor_, &CMsgGCGetCommandListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgMemCachedGet_descriptor_, &CGCMsgMemCachedGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgMemCachedGetResponse_descriptor_, &CGCMsgMemCachedGetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgMemCachedGetResponse_ValueTag_descriptor_, &CGCMsgMemCachedGetResponse_ValueTag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgMemCachedSet_descriptor_, &CGCMsgMemCachedSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgMemCachedSet_KeyPair_descriptor_, &CGCMsgMemCachedSet_KeyPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgMemCachedDelete_descriptor_, &CGCMsgMemCachedDelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMAddFreeLicense_descriptor_, &CMsgAMAddFreeLicense::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMAddFreeLicenseResponse_descriptor_, &CMsgAMAddFreeLicenseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgGetIPLocation_descriptor_, &CGCMsgGetIPLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CIPLocationInfo_descriptor_, &CIPLocationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgGetIPLocationResponse_descriptor_, &CGCMsgGetIPLocationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgSystemStatsSchema_descriptor_, &CGCMsgSystemStatsSchema::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgGetSystemStats_descriptor_, &CGCMsgGetSystemStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCMsgGetSystemStatsResponse_descriptor_, &CGCMsgGetSystemStatsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMSendEmail_descriptor_, &CMsgAMSendEmail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMSendEmail_ReplacementToken_descriptor_, &CMsgAMSendEmail_ReplacementToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMSendEmail_PersonaNameReplacementToken_descriptor_, &CMsgAMSendEmail_PersonaNameReplacementToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMSendEmailResponse_descriptor_, &CMsgAMSendEmailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCGetEmailTemplate_descriptor_, &CMsgGCGetEmailTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCGetEmailTemplateResponse_descriptor_, &CMsgGCGetEmailTemplateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMGrantGuestPasses2_descriptor_, &CMsgAMGrantGuestPasses2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMGrantGuestPasses2Response_descriptor_, &CMsgAMGrantGuestPasses2Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCSystemMsg_GetAccountDetails_descriptor_, &CGCSystemMsg_GetAccountDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCSystemMsg_GetAccountDetails_Response_descriptor_, &CGCSystemMsg_GetAccountDetails_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCGetPersonaNames_descriptor_, &CMsgGCGetPersonaNames::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCGetPersonaNames_Response_descriptor_, &CMsgGCGetPersonaNames_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCGetPersonaNames_Response_PersonaName_descriptor_, &CMsgGCGetPersonaNames_Response_PersonaName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCSystemMsg_GetPurchaseTrust_Request_descriptor_, &CGCSystemMsg_GetPurchaseTrust_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCSystemMsg_GetPurchaseTrust_Response_descriptor_, &CGCSystemMsg_GetPurchaseTrust_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steammessages_2eproto() {
  delete CMsgProtoBufHeader::default_instance_;
  delete CMsgProtoBufHeader_reflection_;
  delete CMsgWebAPIKey::default_instance_;
  delete CMsgWebAPIKey_reflection_;
  delete CMsgHttpRequest::default_instance_;
  delete CMsgHttpRequest_reflection_;
  delete CMsgHttpRequest_RequestHeader::default_instance_;
  delete CMsgHttpRequest_RequestHeader_reflection_;
  delete CMsgHttpRequest_QueryParam::default_instance_;
  delete CMsgHttpRequest_QueryParam_reflection_;
  delete CMsgWebAPIRequest::default_instance_;
  delete CMsgWebAPIRequest_reflection_;
  delete CMsgHttpResponse::default_instance_;
  delete CMsgHttpResponse_reflection_;
  delete CMsgHttpResponse_ResponseHeader::default_instance_;
  delete CMsgHttpResponse_ResponseHeader_reflection_;
  delete CMsgAMFindAccounts::default_instance_;
  delete CMsgAMFindAccounts_reflection_;
  delete CMsgAMFindAccountsResponse::default_instance_;
  delete CMsgAMFindAccountsResponse_reflection_;
  delete CMsgNotifyWatchdog::default_instance_;
  delete CMsgNotifyWatchdog_reflection_;
  delete CMsgAMGetLicenses::default_instance_;
  delete CMsgAMGetLicenses_reflection_;
  delete CMsgPackageLicense::default_instance_;
  delete CMsgPackageLicense_reflection_;
  delete CMsgAMGetLicensesResponse::default_instance_;
  delete CMsgAMGetLicensesResponse_reflection_;
  delete CMsgAMGetUserGameStats::default_instance_;
  delete CMsgAMGetUserGameStats_reflection_;
  delete CMsgAMGetUserGameStatsResponse::default_instance_;
  delete CMsgAMGetUserGameStatsResponse_reflection_;
  delete CMsgAMGetUserGameStatsResponse_Stats::default_instance_;
  delete CMsgAMGetUserGameStatsResponse_Stats_reflection_;
  delete CMsgAMGetUserGameStatsResponse_Achievement_Blocks::default_instance_;
  delete CMsgAMGetUserGameStatsResponse_Achievement_Blocks_reflection_;
  delete CMsgGCGetCommandList::default_instance_;
  delete CMsgGCGetCommandList_reflection_;
  delete CMsgGCGetCommandListResponse::default_instance_;
  delete CMsgGCGetCommandListResponse_reflection_;
  delete CGCMsgMemCachedGet::default_instance_;
  delete CGCMsgMemCachedGet_reflection_;
  delete CGCMsgMemCachedGetResponse::default_instance_;
  delete CGCMsgMemCachedGetResponse_reflection_;
  delete CGCMsgMemCachedGetResponse_ValueTag::default_instance_;
  delete CGCMsgMemCachedGetResponse_ValueTag_reflection_;
  delete CGCMsgMemCachedSet::default_instance_;
  delete CGCMsgMemCachedSet_reflection_;
  delete CGCMsgMemCachedSet_KeyPair::default_instance_;
  delete CGCMsgMemCachedSet_KeyPair_reflection_;
  delete CGCMsgMemCachedDelete::default_instance_;
  delete CGCMsgMemCachedDelete_reflection_;
  delete CMsgAMAddFreeLicense::default_instance_;
  delete CMsgAMAddFreeLicense_reflection_;
  delete CMsgAMAddFreeLicenseResponse::default_instance_;
  delete CMsgAMAddFreeLicenseResponse_reflection_;
  delete CGCMsgGetIPLocation::default_instance_;
  delete CGCMsgGetIPLocation_reflection_;
  delete CIPLocationInfo::default_instance_;
  delete CIPLocationInfo_reflection_;
  delete CGCMsgGetIPLocationResponse::default_instance_;
  delete CGCMsgGetIPLocationResponse_reflection_;
  delete CGCMsgSystemStatsSchema::default_instance_;
  delete CGCMsgSystemStatsSchema_reflection_;
  delete CGCMsgGetSystemStats::default_instance_;
  delete CGCMsgGetSystemStats_reflection_;
  delete CGCMsgGetSystemStatsResponse::default_instance_;
  delete CGCMsgGetSystemStatsResponse_reflection_;
  delete CMsgAMSendEmail::default_instance_;
  delete CMsgAMSendEmail_reflection_;
  delete CMsgAMSendEmail_ReplacementToken::default_instance_;
  delete CMsgAMSendEmail_ReplacementToken_reflection_;
  delete CMsgAMSendEmail_PersonaNameReplacementToken::default_instance_;
  delete CMsgAMSendEmail_PersonaNameReplacementToken_reflection_;
  delete CMsgAMSendEmailResponse::default_instance_;
  delete CMsgAMSendEmailResponse_reflection_;
  delete CMsgGCGetEmailTemplate::default_instance_;
  delete CMsgGCGetEmailTemplate_reflection_;
  delete CMsgGCGetEmailTemplateResponse::default_instance_;
  delete CMsgGCGetEmailTemplateResponse_reflection_;
  delete CMsgAMGrantGuestPasses2::default_instance_;
  delete CMsgAMGrantGuestPasses2_reflection_;
  delete CMsgAMGrantGuestPasses2Response::default_instance_;
  delete CMsgAMGrantGuestPasses2Response_reflection_;
  delete CGCSystemMsg_GetAccountDetails::default_instance_;
  delete CGCSystemMsg_GetAccountDetails_reflection_;
  delete CGCSystemMsg_GetAccountDetails_Response::default_instance_;
  delete CGCSystemMsg_GetAccountDetails_Response_reflection_;
  delete CMsgGCGetPersonaNames::default_instance_;
  delete CMsgGCGetPersonaNames_reflection_;
  delete CMsgGCGetPersonaNames_Response::default_instance_;
  delete CMsgGCGetPersonaNames_Response_reflection_;
  delete CMsgGCGetPersonaNames_Response_PersonaName::default_instance_;
  delete CMsgGCGetPersonaNames_Response_PersonaName_reflection_;
  delete CGCSystemMsg_GetPurchaseTrust_Request::default_instance_;
  delete CGCSystemMsg_GetPurchaseTrust_Request_reflection_;
  delete CGCSystemMsg_GetPurchaseTrust_Response::default_instance_;
  delete CGCSystemMsg_GetPurchaseTrust_Response_reflection_;
}

void protobuf_AddDesc_steammessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023steammessages.proto\032 google/protobuf/d"
    "escriptor.proto\"\375\001\n\022CMsgProtoBufHeader\022\027"
    "\n\017client_steam_id\030\001 \001(\006\022\031\n\021client_sessio"
    "n_id\030\002 \001(\005\022\025\n\rsource_app_id\030\003 \001(\r\022+\n\rjob"
    "_id_source\030\n \001(\006:\02418446744073709551615\022+"
    "\n\rjob_id_target\030\013 \001(\006:\02418446744073709551"
    "615\022\027\n\017target_job_name\030\014 \001(\t\022\022\n\007eresult\030"
    "\r \001(\005:\0012\022\025\n\rerror_message\030\016 \001(\t\"z\n\rCMsgW"
    "ebAPIKey\022\023\n\006status\030\001 \001(\r:\003255\022\025\n\naccount"
    "_id\030\002 \001(\r:\0010\022\035\n\022publisher_group_id\030\003 \001(\r"
    ":\0010\022\016\n\006key_id\030\004 \001(\r\022\016\n\006domain\030\005 \001(\t\"\303\002\n\017"
    "CMsgHttpRequest\022\026\n\016request_method\030\001 \001(\r\022"
    "\020\n\010hostname\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022/\n\007header"
    "s\030\004 \003(\0132\036.CMsgHttpRequest.RequestHeader\022"
    "/\n\nget_params\030\005 \003(\0132\033.CMsgHttpRequest.Qu"
    "eryParam\0220\n\013post_params\030\006 \003(\0132\033.CMsgHttp"
    "Request.QueryParam\022\014\n\004body\030\007 \001(\014\032,\n\rRequ"
    "estHeader\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\032)"
    "\n\nQueryParam\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001("
    "\014\"\306\001\n\021CMsgWebAPIRequest\022\027\n\017UNUSED_job_na"
    "me\030\001 \001(\t\022\026\n\016interface_name\030\002 \001(\t\022\023\n\013meth"
    "od_name\030\003 \001(\t\022\017\n\007version\030\004 \001(\r\022\037\n\007api_ke"
    "y\030\005 \001(\0132\016.CMsgWebAPIKey\022!\n\007request\030\006 \001(\013"
    "2\020.CMsgHttpRequest\022\026\n\016routing_app_id\030\007 \001"
    "(\r\"\227\001\n\020CMsgHttpResponse\022\023\n\013status_code\030\001"
    " \001(\r\0221\n\007headers\030\002 \003(\0132 .CMsgHttpResponse"
    ".ResponseHeader\022\014\n\004body\030\003 \001(\014\032-\n\016Respons"
    "eHeader\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"@\n\022"
    "CMsgAMFindAccounts\022\023\n\013search_type\030\001 \001(\r\022"
    "\025\n\rsearch_string\030\002 \001(\t\".\n\032CMsgAMFindAcco"
    "untsResponse\022\020\n\010steam_id\030\001 \003(\006\"\220\001\n\022CMsgN"
    "otifyWatchdog\022\016\n\006source\030\001 \001(\r\022\022\n\nalert_t"
    "ype\030\002 \001(\r\022\031\n\021alert_destination\030\003 \001(\r\022\020\n\010"
    "critical\030\004 \001(\010\022\014\n\004time\030\005 \001(\r\022\r\n\005appid\030\006 "
    "\001(\r\022\014\n\004text\030\007 \001(\t\"$\n\021CMsgAMGetLicenses\022\017"
    "\n\007steamid\030\001 \001(\006\">\n\022CMsgPackageLicense\022\022\n"
    "\npackage_id\030\001 \001(\r\022\024\n\014time_created\030\002 \001(\r\""
    "Q\n\031CMsgAMGetLicensesResponse\022$\n\007license\030"
    "\001 \003(\0132\023.CMsgPackageLicense\022\016\n\006result\030\002 \001"
    "(\r\"J\n\026CMsgAMGetUserGameStats\022\020\n\010steam_id"
    "\030\001 \001(\006\022\017\n\007game_id\030\002 \001(\006\022\r\n\005stats\030\003 \003(\r\"\352"
    "\002\n\036CMsgAMGetUserGameStatsResponse\022\020\n\010ste"
    "am_id\030\001 \001(\006\022\017\n\007game_id\030\002 \001(\006\022\022\n\007eresult\030"
    "\003 \001(\005:\0012\0224\n\005stats\030\004 \003(\0132%.CMsgAMGetUserG"
    "ameStatsResponse.Stats\022N\n\022achievement_bl"
    "ocks\030\005 \003(\01322.CMsgAMGetUserGameStatsRespo"
    "nse.Achievement_Blocks\032,\n\005Stats\022\017\n\007stat_"
    "id\030\001 \001(\r\022\022\n\nstat_value\030\002 \001(\r\032]\n\022Achievem"
    "ent_Blocks\022\026\n\016achievement_id\030\001 \001(\r\022\032\n\022ac"
    "hievement_bit_id\030\002 \001(\r\022\023\n\013unlock_time\030\003 "
    "\001(\007\">\n\024CMsgGCGetCommandList\022\016\n\006app_id\030\001 "
    "\001(\r\022\026\n\016command_prefix\030\002 \001(\t\"4\n\034CMsgGCGet"
    "CommandListResponse\022\024\n\014command_name\030\001 \003("
    "\t\"\"\n\022CGCMsgMemCachedGet\022\014\n\004keys\030\001 \003(\t\"|\n"
    "\032CGCMsgMemCachedGetResponse\0224\n\006values\030\001 "
    "\003(\0132$.CGCMsgMemCachedGetResponse.ValueTa"
    "g\032(\n\010ValueTag\022\r\n\005found\030\001 \001(\010\022\r\n\005value\030\002 "
    "\001(\014\"g\n\022CGCMsgMemCachedSet\022)\n\004keys\030\001 \003(\0132"
    "\033.CGCMsgMemCachedSet.KeyPair\032&\n\007KeyPair\022"
    "\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\"%\n\025CGCMsgMe"
    "mCachedDelete\022\014\n\004keys\030\001 \003(\t\"i\n\024CMsgAMAdd"
    "FreeLicense\022\017\n\007steamid\030\001 \001(\006\022\021\n\tip_publi"
    "c\030\002 \001(\r\022\021\n\tpackageid\030\003 \001(\r\022\032\n\022store_coun"
    "try_code\030\004 \001(\t\"c\n\034CMsgAMAddFreeLicenseRe"
    "sponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\036\n\026purchase_r"
    "esult_detail\030\002 \001(\005\022\017\n\007transid\030\003 \001(\006\"\"\n\023C"
    "GCMsgGetIPLocation\022\013\n\003ips\030\001 \003(\007\"p\n\017CIPLo"
    "cationInfo\022\n\n\002ip\030\001 \001(\r\022\020\n\010latitude\030\002 \001(\002"
    "\022\021\n\tlongitude\030\003 \001(\002\022\017\n\007country\030\004 \001(\t\022\r\n\005"
    "state\030\005 \001(\t\022\014\n\004city\030\006 \001(\t\">\n\033CGCMsgGetIP"
    "LocationResponse\022\037\n\005infos\030\001 \003(\0132\020.CIPLoc"
    "ationInfo\"\?\n\027CGCMsgSystemStatsSchema\022\021\n\t"
    "gc_app_id\030\001 \001(\r\022\021\n\tschema_kv\030\002 \001(\014\"\026\n\024CG"
    "CMsgGetSystemStats\"\305\002\n\034CGCMsgGetSystemSt"
    "atsResponse\022\021\n\tgc_app_id\030\001 \001(\r\022\020\n\010stats_"
    "kv\030\002 \001(\014\022\023\n\013active_jobs\030\003 \001(\r\022\025\n\ryieldin"
    "g_jobs\030\004 \001(\r\022\025\n\ruser_sessions\030\005 \001(\r\022\034\n\024g"
    "ame_server_sessions\030\006 \001(\r\022\020\n\010socaches\030\007 "
    "\001(\r\022\032\n\022socaches_to_unload\030\010 \001(\r\022\030\n\020socac"
    "hes_loading\030\t \001(\r\022\027\n\017writeback_queue\030\n \001"
    "(\r\022\025\n\rsteamid_locks\030\013 \001(\r\022\023\n\013logon_queue"
    "\030\014 \001(\r\022\022\n\nlogon_jobs\030\r \001(\r\"\342\002\n\017CMsgAMSen"
    "dEmail\022\017\n\007steamid\030\001 \001(\006\022\026\n\016email_msg_typ"
    "e\030\002 \001(\r\022\024\n\014email_format\030\003 \001(\r\022I\n\023persona"
    "_name_tokens\030\005 \003(\0132,.CMsgAMSendEmail.Per"
    "sonaNameReplacementToken\022\021\n\tsource_gc\030\006 "
    "\001(\r\0221\n\006tokens\030\007 \003(\0132!.CMsgAMSendEmail.Re"
    "placementToken\032;\n\020ReplacementToken\022\022\n\nto"
    "ken_name\030\001 \001(\t\022\023\n\013token_value\030\002 \001(\t\032B\n\033P"
    "ersonaNameReplacementToken\022\017\n\007steamid\030\001 "
    "\001(\006\022\022\n\ntoken_name\030\002 \001(\t\"-\n\027CMsgAMSendEma"
    "ilResponse\022\022\n\007eresult\030\001 \001(\r:\0012\"j\n\026CMsgGC"
    "GetEmailTemplate\022\016\n\006app_id\030\001 \001(\r\022\026\n\016emai"
    "l_msg_type\030\002 \001(\r\022\022\n\nemail_lang\030\003 \001(\005\022\024\n\014"
    "email_format\030\004 \001(\005\"_\n\036CMsgGCGetEmailTemp"
    "lateResponse\022\022\n\007eresult\030\001 \001(\r:\0012\022\027\n\017temp"
    "late_exists\030\002 \001(\010\022\020\n\010template\030\003 \001(\t\"\204\001\n\027"
    "CMsgAMGrantGuestPasses2\022\020\n\010steam_id\030\001 \001("
    "\006\022\022\n\npackage_id\030\002 \001(\r\022\027\n\017passes_to_grant"
    "\030\003 \001(\005\022\032\n\022days_to_expiration\030\004 \001(\005\022\016\n\006ac"
    "tion\030\005 \001(\005\"P\n\037CMsgAMGrantGuestPasses2Res"
    "ponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\031\n\016passes_gran"
    "ted\030\002 \001(\005:\0010\"@\n\036CGCSystemMsg_GetAccountD"
    "etails\022\017\n\007steamid\030\001 \001(\006\022\r\n\005appid\030\002 \001(\r\"\312"
    "\004\n\'CGCSystemMsg_GetAccountDetails_Respon"
    "se\022\035\n\022eresult_deprecated\030\001 \001(\r:\0012\022\024\n\014acc"
    "ount_name\030\002 \001(\t\022\024\n\014persona_name\030\003 \001(\t\022\031\n"
    "\021is_profile_public\030\004 \001(\010\022\033\n\023is_inventory"
    "_public\030\005 \001(\010\022\022\n\nis_trusted\030\006 \001(\010\022\025\n\ris_"
    "vac_banned\030\007 \001(\010\022\025\n\ris_cyber_cafe\030\010 \001(\010\022"
    "\031\n\021is_school_account\030\t \001(\010\022\022\n\nis_limited"
    "\030\n \001(\010\022\025\n\ris_subscribed\030\013 \001(\010\022\017\n\007package"
    "\030\014 \001(\r\022\035\n\025is_free_trial_account\030\r \001(\010\022\035\n"
    "\025free_trial_expiration\030\016 \001(\r\022\027\n\017is_low_v"
    "iolence\030\017 \001(\010\022\036\n\026is_account_locked_down\030"
    "\020 \001(\010\022\033\n\023is_community_banned\030\021 \001(\010\022\027\n\017is"
    "_trade_banned\030\022 \001(\010\022\034\n\024trade_ban_expirat"
    "ion\030\023 \001(\r\022\021\n\taccountid\030\024 \001(\r\022%\n\035eligible"
    "_for_community_market\030\025 \001(\010\")\n\025CMsgGCGet"
    "PersonaNames\022\020\n\010steamids\030\001 \003(\006\"\276\001\n\036CMsgG"
    "CGetPersonaNames_Response\022F\n\021succeeded_l"
    "ookups\030\001 \003(\0132+.CMsgGCGetPersonaNames_Res"
    "ponse.PersonaName\022\036\n\026failed_lookup_steam"
    "ids\030\002 \003(\006\0324\n\013PersonaName\022\017\n\007steamid\030\001 \001("
    "\006\022\024\n\014persona_name\030\002 \001(\t\"8\n%CGCSystemMsg_"
    "GetPurchaseTrust_Request\022\017\n\007steamid\030\001 \001("
    "\006\"\255\001\n&CGCSystemMsg_GetPurchaseTrust_Resp"
    "onse\022\"\n\032has_prior_purchase_history\030\001 \001(\010"
    "\022%\n\035has_no_recent_password_resets\030\002 \001(\010\022"
    "\036\n\026is_wallet_cash_trusted\030\003 \001(\010\022\030\n\020time_"
    "all_trusted\030\004 \001(\r:9\n\tkey_field\022\035.google."
    "protobuf.FieldOptions\030\320\206\003 \001(\010:\005false", 5276);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages.proto", &protobuf_RegisterTypes);
  CMsgProtoBufHeader::default_instance_ = new CMsgProtoBufHeader();
  CMsgWebAPIKey::default_instance_ = new CMsgWebAPIKey();
  CMsgHttpRequest::default_instance_ = new CMsgHttpRequest();
  CMsgHttpRequest_RequestHeader::default_instance_ = new CMsgHttpRequest_RequestHeader();
  CMsgHttpRequest_QueryParam::default_instance_ = new CMsgHttpRequest_QueryParam();
  CMsgWebAPIRequest::default_instance_ = new CMsgWebAPIRequest();
  CMsgHttpResponse::default_instance_ = new CMsgHttpResponse();
  CMsgHttpResponse_ResponseHeader::default_instance_ = new CMsgHttpResponse_ResponseHeader();
  CMsgAMFindAccounts::default_instance_ = new CMsgAMFindAccounts();
  CMsgAMFindAccountsResponse::default_instance_ = new CMsgAMFindAccountsResponse();
  CMsgNotifyWatchdog::default_instance_ = new CMsgNotifyWatchdog();
  CMsgAMGetLicenses::default_instance_ = new CMsgAMGetLicenses();
  CMsgPackageLicense::default_instance_ = new CMsgPackageLicense();
  CMsgAMGetLicensesResponse::default_instance_ = new CMsgAMGetLicensesResponse();
  CMsgAMGetUserGameStats::default_instance_ = new CMsgAMGetUserGameStats();
  CMsgAMGetUserGameStatsResponse::default_instance_ = new CMsgAMGetUserGameStatsResponse();
  CMsgAMGetUserGameStatsResponse_Stats::default_instance_ = new CMsgAMGetUserGameStatsResponse_Stats();
  CMsgAMGetUserGameStatsResponse_Achievement_Blocks::default_instance_ = new CMsgAMGetUserGameStatsResponse_Achievement_Blocks();
  CMsgGCGetCommandList::default_instance_ = new CMsgGCGetCommandList();
  CMsgGCGetCommandListResponse::default_instance_ = new CMsgGCGetCommandListResponse();
  CGCMsgMemCachedGet::default_instance_ = new CGCMsgMemCachedGet();
  CGCMsgMemCachedGetResponse::default_instance_ = new CGCMsgMemCachedGetResponse();
  CGCMsgMemCachedGetResponse_ValueTag::default_instance_ = new CGCMsgMemCachedGetResponse_ValueTag();
  CGCMsgMemCachedSet::default_instance_ = new CGCMsgMemCachedSet();
  CGCMsgMemCachedSet_KeyPair::default_instance_ = new CGCMsgMemCachedSet_KeyPair();
  CGCMsgMemCachedDelete::default_instance_ = new CGCMsgMemCachedDelete();
  CMsgAMAddFreeLicense::default_instance_ = new CMsgAMAddFreeLicense();
  CMsgAMAddFreeLicenseResponse::default_instance_ = new CMsgAMAddFreeLicenseResponse();
  CGCMsgGetIPLocation::default_instance_ = new CGCMsgGetIPLocation();
  CIPLocationInfo::default_instance_ = new CIPLocationInfo();
  CGCMsgGetIPLocationResponse::default_instance_ = new CGCMsgGetIPLocationResponse();
  CGCMsgSystemStatsSchema::default_instance_ = new CGCMsgSystemStatsSchema();
  CGCMsgGetSystemStats::default_instance_ = new CGCMsgGetSystemStats();
  CGCMsgGetSystemStatsResponse::default_instance_ = new CGCMsgGetSystemStatsResponse();
  CMsgAMSendEmail::default_instance_ = new CMsgAMSendEmail();
  CMsgAMSendEmail_ReplacementToken::default_instance_ = new CMsgAMSendEmail_ReplacementToken();
  CMsgAMSendEmail_PersonaNameReplacementToken::default_instance_ = new CMsgAMSendEmail_PersonaNameReplacementToken();
  CMsgAMSendEmailResponse::default_instance_ = new CMsgAMSendEmailResponse();
  CMsgGCGetEmailTemplate::default_instance_ = new CMsgGCGetEmailTemplate();
  CMsgGCGetEmailTemplateResponse::default_instance_ = new CMsgGCGetEmailTemplateResponse();
  CMsgAMGrantGuestPasses2::default_instance_ = new CMsgAMGrantGuestPasses2();
  CMsgAMGrantGuestPasses2Response::default_instance_ = new CMsgAMGrantGuestPasses2Response();
  CGCSystemMsg_GetAccountDetails::default_instance_ = new CGCSystemMsg_GetAccountDetails();
  CGCSystemMsg_GetAccountDetails_Response::default_instance_ = new CGCSystemMsg_GetAccountDetails_Response();
  CMsgGCGetPersonaNames::default_instance_ = new CMsgGCGetPersonaNames();
  CMsgGCGetPersonaNames_Response::default_instance_ = new CMsgGCGetPersonaNames_Response();
  CMsgGCGetPersonaNames_Response_PersonaName::default_instance_ = new CMsgGCGetPersonaNames_Response_PersonaName();
  CGCSystemMsg_GetPurchaseTrust_Request::default_instance_ = new CGCSystemMsg_GetPurchaseTrust_Request();
  CGCSystemMsg_GetPurchaseTrust_Response::default_instance_ = new CGCSystemMsg_GetPurchaseTrust_Response();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    50000, 8, false, false);
  CMsgProtoBufHeader::default_instance_->InitAsDefaultInstance();
  CMsgWebAPIKey::default_instance_->InitAsDefaultInstance();
  CMsgHttpRequest::default_instance_->InitAsDefaultInstance();
  CMsgHttpRequest_RequestHeader::default_instance_->InitAsDefaultInstance();
  CMsgHttpRequest_QueryParam::default_instance_->InitAsDefaultInstance();
  CMsgWebAPIRequest::default_instance_->InitAsDefaultInstance();
  CMsgHttpResponse::default_instance_->InitAsDefaultInstance();
  CMsgHttpResponse_ResponseHeader::default_instance_->InitAsDefaultInstance();
  CMsgAMFindAccounts::default_instance_->InitAsDefaultInstance();
  CMsgAMFindAccountsResponse::default_instance_->InitAsDefaultInstance();
  CMsgNotifyWatchdog::default_instance_->InitAsDefaultInstance();
  CMsgAMGetLicenses::default_instance_->InitAsDefaultInstance();
  CMsgPackageLicense::default_instance_->InitAsDefaultInstance();
  CMsgAMGetLicensesResponse::default_instance_->InitAsDefaultInstance();
  CMsgAMGetUserGameStats::default_instance_->InitAsDefaultInstance();
  CMsgAMGetUserGameStatsResponse::default_instance_->InitAsDefaultInstance();
  CMsgAMGetUserGameStatsResponse_Stats::default_instance_->InitAsDefaultInstance();
  CMsgAMGetUserGameStatsResponse_Achievement_Blocks::default_instance_->InitAsDefaultInstance();
  CMsgGCGetCommandList::default_instance_->InitAsDefaultInstance();
  CMsgGCGetCommandListResponse::default_instance_->InitAsDefaultInstance();
  CGCMsgMemCachedGet::default_instance_->InitAsDefaultInstance();
  CGCMsgMemCachedGetResponse::default_instance_->InitAsDefaultInstance();
  CGCMsgMemCachedGetResponse_ValueTag::default_instance_->InitAsDefaultInstance();
  CGCMsgMemCachedSet::default_instance_->InitAsDefaultInstance();
  CGCMsgMemCachedSet_KeyPair::default_instance_->InitAsDefaultInstance();
  CGCMsgMemCachedDelete::default_instance_->InitAsDefaultInstance();
  CMsgAMAddFreeLicense::default_instance_->InitAsDefaultInstance();
  CMsgAMAddFreeLicenseResponse::default_instance_->InitAsDefaultInstance();
  CGCMsgGetIPLocation::default_instance_->InitAsDefaultInstance();
  CIPLocationInfo::default_instance_->InitAsDefaultInstance();
  CGCMsgGetIPLocationResponse::default_instance_->InitAsDefaultInstance();
  CGCMsgSystemStatsSchema::default_instance_->InitAsDefaultInstance();
  CGCMsgGetSystemStats::default_instance_->InitAsDefaultInstance();
  CGCMsgGetSystemStatsResponse::default_instance_->InitAsDefaultInstance();
  CMsgAMSendEmail::default_instance_->InitAsDefaultInstance();
  CMsgAMSendEmail_ReplacementToken::default_instance_->InitAsDefaultInstance();
  CMsgAMSendEmail_PersonaNameReplacementToken::default_instance_->InitAsDefaultInstance();
  CMsgAMSendEmailResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCGetEmailTemplate::default_instance_->InitAsDefaultInstance();
  CMsgGCGetEmailTemplateResponse::default_instance_->InitAsDefaultInstance();
  CMsgAMGrantGuestPasses2::default_instance_->InitAsDefaultInstance();
  CMsgAMGrantGuestPasses2Response::default_instance_->InitAsDefaultInstance();
  CGCSystemMsg_GetAccountDetails::default_instance_->InitAsDefaultInstance();
  CGCSystemMsg_GetAccountDetails_Response::default_instance_->InitAsDefaultInstance();
  CMsgGCGetPersonaNames::default_instance_->InitAsDefaultInstance();
  CMsgGCGetPersonaNames_Response::default_instance_->InitAsDefaultInstance();
  CMsgGCGetPersonaNames_Response_PersonaName::default_instance_->InitAsDefaultInstance();
  CGCSystemMsg_GetPurchaseTrust_Request::default_instance_->InitAsDefaultInstance();
  CGCSystemMsg_GetPurchaseTrust_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steammessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steammessages_2eproto {
  StaticDescriptorInitializer_steammessages_2eproto() {
    protobuf_AddDesc_steammessages_2eproto();
  }
} static_descriptor_initializer_steammessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CMsgProtoBufHeader::kClientSteamIdFieldNumber;
const int CMsgProtoBufHeader::kClientSessionIdFieldNumber;
const int CMsgProtoBufHeader::kSourceAppIdFieldNumber;
const int CMsgProtoBufHeader::kJobIdSourceFieldNumber;
const int CMsgProtoBufHeader::kJobIdTargetFieldNumber;
const int CMsgProtoBufHeader::kTargetJobNameFieldNumber;
const int CMsgProtoBufHeader::kEresultFieldNumber;
const int CMsgProtoBufHeader::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

CMsgProtoBufHeader::CMsgProtoBufHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgProtoBufHeader::InitAsDefaultInstance() {
}

CMsgProtoBufHeader::CMsgProtoBufHeader(const CMsgProtoBufHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgProtoBufHeader::SharedCtor() {
  _cached_size_ = 0;
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  client_session_id_ = 0;
  source_app_id_ = 0u;
  job_id_source_ = GOOGLE_ULONGLONG(18446744073709551615);
  job_id_target_ = GOOGLE_ULONGLONG(18446744073709551615);
  target_job_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eresult_ = 2;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgProtoBufHeader::~CMsgProtoBufHeader() {
  SharedDtor();
}

void CMsgProtoBufHeader::SharedDtor() {
  if (target_job_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_job_name_;
  }
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgProtoBufHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgProtoBufHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgProtoBufHeader_descriptor_;
}

const CMsgProtoBufHeader& CMsgProtoBufHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgProtoBufHeader* CMsgProtoBufHeader::default_instance_ = NULL;

CMsgProtoBufHeader* CMsgProtoBufHeader::New() const {
  return new CMsgProtoBufHeader;
}

void CMsgProtoBufHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_steam_id_ = GOOGLE_ULONGLONG(0);
    client_session_id_ = 0;
    source_app_id_ = 0u;
    job_id_source_ = GOOGLE_ULONGLONG(18446744073709551615);
    job_id_target_ = GOOGLE_ULONGLONG(18446744073709551615);
    if (has_target_job_name()) {
      if (target_job_name_ != &::google::protobuf::internal::kEmptyString) {
        target_job_name_->clear();
      }
    }
    eresult_ = 2;
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgProtoBufHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 client_steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
          set_has_client_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_session_id;
        break;
      }

      // optional int32 client_session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_session_id_)));
          set_has_client_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source_app_id;
        break;
      }

      // optional uint32 source_app_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_app_id_)));
          set_has_source_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_job_id_source;
        break;
      }

      // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_job_id_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &job_id_source_)));
          set_has_job_id_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_job_id_target;
        break;
      }

      // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_job_id_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &job_id_target_)));
          set_has_job_id_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_target_job_name;
        break;
      }

      // optional string target_job_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_job_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_job_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_job_name().data(), this->target_job_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 13 [default = 2];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_error_message;
        break;
      }

      // optional string error_message = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgProtoBufHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 client_steam_id = 1;
  if (has_client_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->client_steam_id(), output);
  }

  // optional int32 client_session_id = 2;
  if (has_client_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->client_session_id(), output);
  }

  // optional uint32 source_app_id = 3;
  if (has_source_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_app_id(), output);
  }

  // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
  if (has_job_id_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->job_id_source(), output);
  }

  // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
  if (has_job_id_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->job_id_target(), output);
  }

  // optional string target_job_name = 12;
  if (has_target_job_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_job_name().data(), this->target_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->target_job_name(), output);
  }

  // optional int32 eresult = 13 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->eresult(), output);
  }

  // optional string error_message = 14;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->error_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgProtoBufHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 client_steam_id = 1;
  if (has_client_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->client_steam_id(), target);
  }

  // optional int32 client_session_id = 2;
  if (has_client_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->client_session_id(), target);
  }

  // optional uint32 source_app_id = 3;
  if (has_source_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_app_id(), target);
  }

  // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
  if (has_job_id_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->job_id_source(), target);
  }

  // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
  if (has_job_id_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->job_id_target(), target);
  }

  // optional string target_job_name = 12;
  if (has_target_job_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_job_name().data(), this->target_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->target_job_name(), target);
  }

  // optional int32 eresult = 13 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->eresult(), target);
  }

  // optional string error_message = 14;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->error_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgProtoBufHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 client_steam_id = 1;
    if (has_client_steam_id()) {
      total_size += 1 + 8;
    }

    // optional int32 client_session_id = 2;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_session_id());
    }

    // optional uint32 source_app_id = 3;
    if (has_source_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_app_id());
    }

    // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
    if (has_job_id_source()) {
      total_size += 1 + 8;
    }

    // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
    if (has_job_id_target()) {
      total_size += 1 + 8;
    }

    // optional string target_job_name = 12;
    if (has_target_job_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_job_name());
    }

    // optional int32 eresult = 13 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional string error_message = 14;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgProtoBufHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgProtoBufHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgProtoBufHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgProtoBufHeader::MergeFrom(const CMsgProtoBufHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_steam_id()) {
      set_client_steam_id(from.client_steam_id());
    }
    if (from.has_client_session_id()) {
      set_client_session_id(from.client_session_id());
    }
    if (from.has_source_app_id()) {
      set_source_app_id(from.source_app_id());
    }
    if (from.has_job_id_source()) {
      set_job_id_source(from.job_id_source());
    }
    if (from.has_job_id_target()) {
      set_job_id_target(from.job_id_target());
    }
    if (from.has_target_job_name()) {
      set_target_job_name(from.target_job_name());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgProtoBufHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtoBufHeader::CopyFrom(const CMsgProtoBufHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoBufHeader::IsInitialized() const {

  return true;
}

void CMsgProtoBufHeader::Swap(CMsgProtoBufHeader* other) {
  if (other != this) {
    std::swap(client_steam_id_, other->client_steam_id_);
    std::swap(client_session_id_, other->client_session_id_);
    std::swap(source_app_id_, other->source_app_id_);
    std::swap(job_id_source_, other->job_id_source_);
    std::swap(job_id_target_, other->job_id_target_);
    std::swap(target_job_name_, other->target_job_name_);
    std::swap(eresult_, other->eresult_);
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgProtoBufHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgProtoBufHeader_descriptor_;
  metadata.reflection = CMsgProtoBufHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgWebAPIKey::kStatusFieldNumber;
const int CMsgWebAPIKey::kAccountIdFieldNumber;
const int CMsgWebAPIKey::kPublisherGroupIdFieldNumber;
const int CMsgWebAPIKey::kKeyIdFieldNumber;
const int CMsgWebAPIKey::kDomainFieldNumber;
#endif  // !_MSC_VER

CMsgWebAPIKey::CMsgWebAPIKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgWebAPIKey::InitAsDefaultInstance() {
}

CMsgWebAPIKey::CMsgWebAPIKey(const CMsgWebAPIKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgWebAPIKey::SharedCtor() {
  _cached_size_ = 0;
  status_ = 255u;
  account_id_ = 0u;
  publisher_group_id_ = 0u;
  key_id_ = 0u;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgWebAPIKey::~CMsgWebAPIKey() {
  SharedDtor();
}

void CMsgWebAPIKey::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void CMsgWebAPIKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWebAPIKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgWebAPIKey_descriptor_;
}

const CMsgWebAPIKey& CMsgWebAPIKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgWebAPIKey* CMsgWebAPIKey::default_instance_ = NULL;

CMsgWebAPIKey* CMsgWebAPIKey::New() const {
  return new CMsgWebAPIKey;
}

void CMsgWebAPIKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 255u;
    account_id_ = 0u;
    publisher_group_id_ = 0u;
    key_id_ = 0u;
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgWebAPIKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1 [default = 255];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional uint32 account_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_publisher_group_id;
        break;
      }

      // optional uint32 publisher_group_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publisher_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publisher_group_id_)));
          set_has_publisher_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_key_id;
        break;
      }

      // optional uint32 key_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_id_)));
          set_has_key_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_domain;
        break;
      }

      // optional string domain = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgWebAPIKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1 [default = 255];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // optional uint32 account_id = 2 [default = 0];
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint32 publisher_group_id = 3 [default = 0];
  if (has_publisher_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->publisher_group_id(), output);
  }

  // optional uint32 key_id = 4;
  if (has_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->key_id(), output);
  }

  // optional string domain = 5;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->domain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgWebAPIKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1 [default = 255];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // optional uint32 account_id = 2 [default = 0];
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint32 publisher_group_id = 3 [default = 0];
  if (has_publisher_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->publisher_group_id(), target);
  }

  // optional uint32 key_id = 4;
  if (has_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->key_id(), target);
  }

  // optional string domain = 5;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->domain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgWebAPIKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1 [default = 255];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 account_id = 2 [default = 0];
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 publisher_group_id = 3 [default = 0];
    if (has_publisher_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publisher_group_id());
    }

    // optional uint32 key_id = 4;
    if (has_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_id());
    }

    // optional string domain = 5;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWebAPIKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgWebAPIKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgWebAPIKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgWebAPIKey::MergeFrom(const CMsgWebAPIKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_publisher_group_id()) {
      set_publisher_group_id(from.publisher_group_id());
    }
    if (from.has_key_id()) {
      set_key_id(from.key_id());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgWebAPIKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWebAPIKey::CopyFrom(const CMsgWebAPIKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWebAPIKey::IsInitialized() const {

  return true;
}

void CMsgWebAPIKey::Swap(CMsgWebAPIKey* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(account_id_, other->account_id_);
    std::swap(publisher_group_id_, other->publisher_group_id_);
    std::swap(key_id_, other->key_id_);
    std::swap(domain_, other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgWebAPIKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgWebAPIKey_descriptor_;
  metadata.reflection = CMsgWebAPIKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgHttpRequest_RequestHeader::kNameFieldNumber;
const int CMsgHttpRequest_RequestHeader::kValueFieldNumber;
#endif  // !_MSC_VER

CMsgHttpRequest_RequestHeader::CMsgHttpRequest_RequestHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgHttpRequest_RequestHeader::InitAsDefaultInstance() {
}

CMsgHttpRequest_RequestHeader::CMsgHttpRequest_RequestHeader(const CMsgHttpRequest_RequestHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgHttpRequest_RequestHeader::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHttpRequest_RequestHeader::~CMsgHttpRequest_RequestHeader() {
  SharedDtor();
}

void CMsgHttpRequest_RequestHeader::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CMsgHttpRequest_RequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHttpRequest_RequestHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHttpRequest_RequestHeader_descriptor_;
}

const CMsgHttpRequest_RequestHeader& CMsgHttpRequest_RequestHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgHttpRequest_RequestHeader* CMsgHttpRequest_RequestHeader::default_instance_ = NULL;

CMsgHttpRequest_RequestHeader* CMsgHttpRequest_RequestHeader::New() const {
  return new CMsgHttpRequest_RequestHeader;
}

void CMsgHttpRequest_RequestHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHttpRequest_RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgHttpRequest_RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgHttpRequest_RequestHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgHttpRequest_RequestHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHttpRequest_RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHttpRequest_RequestHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHttpRequest_RequestHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHttpRequest_RequestHeader::MergeFrom(const CMsgHttpRequest_RequestHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHttpRequest_RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHttpRequest_RequestHeader::CopyFrom(const CMsgHttpRequest_RequestHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpRequest_RequestHeader::IsInitialized() const {

  return true;
}

void CMsgHttpRequest_RequestHeader::Swap(CMsgHttpRequest_RequestHeader* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHttpRequest_RequestHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHttpRequest_RequestHeader_descriptor_;
  metadata.reflection = CMsgHttpRequest_RequestHeader_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgHttpRequest_QueryParam::kNameFieldNumber;
const int CMsgHttpRequest_QueryParam::kValueFieldNumber;
#endif  // !_MSC_VER

CMsgHttpRequest_QueryParam::CMsgHttpRequest_QueryParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgHttpRequest_QueryParam::InitAsDefaultInstance() {
}

CMsgHttpRequest_QueryParam::CMsgHttpRequest_QueryParam(const CMsgHttpRequest_QueryParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgHttpRequest_QueryParam::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHttpRequest_QueryParam::~CMsgHttpRequest_QueryParam() {
  SharedDtor();
}

void CMsgHttpRequest_QueryParam::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CMsgHttpRequest_QueryParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHttpRequest_QueryParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHttpRequest_QueryParam_descriptor_;
}

const CMsgHttpRequest_QueryParam& CMsgHttpRequest_QueryParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgHttpRequest_QueryParam* CMsgHttpRequest_QueryParam::default_instance_ = NULL;

CMsgHttpRequest_QueryParam* CMsgHttpRequest_QueryParam::New() const {
  return new CMsgHttpRequest_QueryParam;
}

void CMsgHttpRequest_QueryParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHttpRequest_QueryParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgHttpRequest_QueryParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgHttpRequest_QueryParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgHttpRequest_QueryParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHttpRequest_QueryParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHttpRequest_QueryParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHttpRequest_QueryParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHttpRequest_QueryParam::MergeFrom(const CMsgHttpRequest_QueryParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHttpRequest_QueryParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHttpRequest_QueryParam::CopyFrom(const CMsgHttpRequest_QueryParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpRequest_QueryParam::IsInitialized() const {

  return true;
}

void CMsgHttpRequest_QueryParam::Swap(CMsgHttpRequest_QueryParam* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHttpRequest_QueryParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHttpRequest_QueryParam_descriptor_;
  metadata.reflection = CMsgHttpRequest_QueryParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgHttpRequest::kRequestMethodFieldNumber;
const int CMsgHttpRequest::kHostnameFieldNumber;
const int CMsgHttpRequest::kUrlFieldNumber;
const int CMsgHttpRequest::kHeadersFieldNumber;
const int CMsgHttpRequest::kGetParamsFieldNumber;
const int CMsgHttpRequest::kPostParamsFieldNumber;
const int CMsgHttpRequest::kBodyFieldNumber;
#endif  // !_MSC_VER

CMsgHttpRequest::CMsgHttpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgHttpRequest::InitAsDefaultInstance() {
}

CMsgHttpRequest::CMsgHttpRequest(const CMsgHttpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgHttpRequest::SharedCtor() {
  _cached_size_ = 0;
  request_method_ = 0u;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHttpRequest::~CMsgHttpRequest() {
  SharedDtor();
}

void CMsgHttpRequest::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void CMsgHttpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHttpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHttpRequest_descriptor_;
}

const CMsgHttpRequest& CMsgHttpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgHttpRequest* CMsgHttpRequest::default_instance_ = NULL;

CMsgHttpRequest* CMsgHttpRequest::New() const {
  return new CMsgHttpRequest;
}

void CMsgHttpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_method_ = 0u;
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
  }
  headers_.Clear();
  get_params_.Clear();
  post_params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHttpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_method = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_method_)));
          set_has_request_method();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hostname;
        break;
      }

      // optional string hostname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_headers;
        break;
      }

      // repeated .CMsgHttpRequest.RequestHeader headers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_headers;
        if (input->ExpectTag(42)) goto parse_get_params;
        break;
      }

      // repeated .CMsgHttpRequest.QueryParam get_params = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_get_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_get_params;
        if (input->ExpectTag(50)) goto parse_post_params;
        break;
      }

      // repeated .CMsgHttpRequest.QueryParam post_params = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_post_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_post_params;
        if (input->ExpectTag(58)) goto parse_body;
        break;
      }

      // optional bytes body = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgHttpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 request_method = 1;
  if (has_request_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_method(), output);
  }

  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hostname(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  // repeated .CMsgHttpRequest.RequestHeader headers = 4;
  for (int i = 0; i < this->headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->headers(i), output);
  }

  // repeated .CMsgHttpRequest.QueryParam get_params = 5;
  for (int i = 0; i < this->get_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->get_params(i), output);
  }

  // repeated .CMsgHttpRequest.QueryParam post_params = 6;
  for (int i = 0; i < this->post_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->post_params(i), output);
  }

  // optional bytes body = 7;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgHttpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 request_method = 1;
  if (has_request_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_method(), target);
  }

  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // repeated .CMsgHttpRequest.RequestHeader headers = 4;
  for (int i = 0; i < this->headers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->headers(i), target);
  }

  // repeated .CMsgHttpRequest.QueryParam get_params = 5;
  for (int i = 0; i < this->get_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->get_params(i), target);
  }

  // repeated .CMsgHttpRequest.QueryParam post_params = 6;
  for (int i = 0; i < this->post_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->post_params(i), target);
  }

  // optional bytes body = 7;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgHttpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 request_method = 1;
    if (has_request_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_method());
    }

    // optional string hostname = 2;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bytes body = 7;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

  }
  // repeated .CMsgHttpRequest.RequestHeader headers = 4;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }

  // repeated .CMsgHttpRequest.QueryParam get_params = 5;
  total_size += 1 * this->get_params_size();
  for (int i = 0; i < this->get_params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->get_params(i));
  }

  // repeated .CMsgHttpRequest.QueryParam post_params = 6;
  total_size += 1 * this->post_params_size();
  for (int i = 0; i < this->post_params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->post_params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHttpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHttpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHttpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHttpRequest::MergeFrom(const CMsgHttpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  headers_.MergeFrom(from.headers_);
  get_params_.MergeFrom(from.get_params_);
  post_params_.MergeFrom(from.post_params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_method()) {
      set_request_method(from.request_method());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHttpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHttpRequest::CopyFrom(const CMsgHttpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpRequest::IsInitialized() const {

  return true;
}

void CMsgHttpRequest::Swap(CMsgHttpRequest* other) {
  if (other != this) {
    std::swap(request_method_, other->request_method_);
    std::swap(hostname_, other->hostname_);
    std::swap(url_, other->url_);
    headers_.Swap(&other->headers_);
    get_params_.Swap(&other->get_params_);
    post_params_.Swap(&other->post_params_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHttpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHttpRequest_descriptor_;
  metadata.reflection = CMsgHttpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgWebAPIRequest::kUNUSEDJobNameFieldNumber;
const int CMsgWebAPIRequest::kInterfaceNameFieldNumber;
const int CMsgWebAPIRequest::kMethodNameFieldNumber;
const int CMsgWebAPIRequest::kVersionFieldNumber;
const int CMsgWebAPIRequest::kApiKeyFieldNumber;
const int CMsgWebAPIRequest::kRequestFieldNumber;
const int CMsgWebAPIRequest::kRoutingAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgWebAPIRequest::CMsgWebAPIRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgWebAPIRequest::InitAsDefaultInstance() {
  api_key_ = const_cast< ::CMsgWebAPIKey*>(&::CMsgWebAPIKey::default_instance());
  request_ = const_cast< ::CMsgHttpRequest*>(&::CMsgHttpRequest::default_instance());
}

CMsgWebAPIRequest::CMsgWebAPIRequest(const CMsgWebAPIRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgWebAPIRequest::SharedCtor() {
  _cached_size_ = 0;
  unused_job_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  interface_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0u;
  api_key_ = NULL;
  request_ = NULL;
  routing_app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgWebAPIRequest::~CMsgWebAPIRequest() {
  SharedDtor();
}

void CMsgWebAPIRequest::SharedDtor() {
  if (unused_job_name_ != &::google::protobuf::internal::kEmptyString) {
    delete unused_job_name_;
  }
  if (interface_name_ != &::google::protobuf::internal::kEmptyString) {
    delete interface_name_;
  }
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (this != default_instance_) {
    delete api_key_;
    delete request_;
  }
}

void CMsgWebAPIRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWebAPIRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgWebAPIRequest_descriptor_;
}

const CMsgWebAPIRequest& CMsgWebAPIRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgWebAPIRequest* CMsgWebAPIRequest::default_instance_ = NULL;

CMsgWebAPIRequest* CMsgWebAPIRequest::New() const {
  return new CMsgWebAPIRequest;
}

void CMsgWebAPIRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unused_job_name()) {
      if (unused_job_name_ != &::google::protobuf::internal::kEmptyString) {
        unused_job_name_->clear();
      }
    }
    if (has_interface_name()) {
      if (interface_name_ != &::google::protobuf::internal::kEmptyString) {
        interface_name_->clear();
      }
    }
    if (has_method_name()) {
      if (method_name_ != &::google::protobuf::internal::kEmptyString) {
        method_name_->clear();
      }
    }
    version_ = 0u;
    if (has_api_key()) {
      if (api_key_ != NULL) api_key_->::CMsgWebAPIKey::Clear();
    }
    if (has_request()) {
      if (request_ != NULL) request_->::CMsgHttpRequest::Clear();
    }
    routing_app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgWebAPIRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UNUSED_job_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unused_job_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unused_job_name().data(), this->unused_job_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_interface_name;
        break;
      }

      // optional string interface_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interface_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->interface_name().data(), this->interface_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_method_name;
        break;
      }

      // optional string method_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_version;
        break;
      }

      // optional uint32 version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_api_key;
        break;
      }

      // optional .CMsgWebAPIKey api_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_api_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_api_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_request;
        break;
      }

      // optional .CMsgHttpRequest request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_routing_app_id;
        break;
      }

      // optional uint32 routing_app_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routing_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routing_app_id_)));
          set_has_routing_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgWebAPIRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string UNUSED_job_name = 1;
  if (has_unused_job_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unused_job_name().data(), this->unused_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->unused_job_name(), output);
  }

  // optional string interface_name = 2;
  if (has_interface_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->interface_name().data(), this->interface_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->interface_name(), output);
  }

  // optional string method_name = 3;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->method_name(), output);
  }

  // optional uint32 version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->version(), output);
  }

  // optional .CMsgWebAPIKey api_key = 5;
  if (has_api_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->api_key(), output);
  }

  // optional .CMsgHttpRequest request = 6;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->request(), output);
  }

  // optional uint32 routing_app_id = 7;
  if (has_routing_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->routing_app_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgWebAPIRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string UNUSED_job_name = 1;
  if (has_unused_job_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unused_job_name().data(), this->unused_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unused_job_name(), target);
  }

  // optional string interface_name = 2;
  if (has_interface_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->interface_name().data(), this->interface_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->interface_name(), target);
  }

  // optional string method_name = 3;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method_name(), target);
  }

  // optional uint32 version = 4;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->version(), target);
  }

  // optional .CMsgWebAPIKey api_key = 5;
  if (has_api_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->api_key(), target);
  }

  // optional .CMsgHttpRequest request = 6;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->request(), target);
  }

  // optional uint32 routing_app_id = 7;
  if (has_routing_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->routing_app_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgWebAPIRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string UNUSED_job_name = 1;
    if (has_unused_job_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unused_job_name());
    }

    // optional string interface_name = 2;
    if (has_interface_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interface_name());
    }

    // optional string method_name = 3;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // optional uint32 version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .CMsgWebAPIKey api_key = 5;
    if (has_api_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->api_key());
    }

    // optional .CMsgHttpRequest request = 6;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional uint32 routing_app_id = 7;
    if (has_routing_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routing_app_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWebAPIRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgWebAPIRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgWebAPIRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgWebAPIRequest::MergeFrom(const CMsgWebAPIRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unused_job_name()) {
      set_unused_job_name(from.unused_job_name());
    }
    if (from.has_interface_name()) {
      set_interface_name(from.interface_name());
    }
    if (from.has_method_name()) {
      set_method_name(from.method_name());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_api_key()) {
      mutable_api_key()->::CMsgWebAPIKey::MergeFrom(from.api_key());
    }
    if (from.has_request()) {
      mutable_request()->::CMsgHttpRequest::MergeFrom(from.request());
    }
    if (from.has_routing_app_id()) {
      set_routing_app_id(from.routing_app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgWebAPIRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWebAPIRequest::CopyFrom(const CMsgWebAPIRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWebAPIRequest::IsInitialized() const {

  return true;
}

void CMsgWebAPIRequest::Swap(CMsgWebAPIRequest* other) {
  if (other != this) {
    std::swap(unused_job_name_, other->unused_job_name_);
    std::swap(interface_name_, other->interface_name_);
    std::swap(method_name_, other->method_name_);
    std::swap(version_, other->version_);
    std::swap(api_key_, other->api_key_);
    std::swap(request_, other->request_);
    std::swap(routing_app_id_, other->routing_app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgWebAPIRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgWebAPIRequest_descriptor_;
  metadata.reflection = CMsgWebAPIRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgHttpResponse_ResponseHeader::kNameFieldNumber;
const int CMsgHttpResponse_ResponseHeader::kValueFieldNumber;
#endif  // !_MSC_VER

CMsgHttpResponse_ResponseHeader::CMsgHttpResponse_ResponseHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgHttpResponse_ResponseHeader::InitAsDefaultInstance() {
}

CMsgHttpResponse_ResponseHeader::CMsgHttpResponse_ResponseHeader(const CMsgHttpResponse_ResponseHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgHttpResponse_ResponseHeader::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHttpResponse_ResponseHeader::~CMsgHttpResponse_ResponseHeader() {
  SharedDtor();
}

void CMsgHttpResponse_ResponseHeader::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CMsgHttpResponse_ResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHttpResponse_ResponseHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHttpResponse_ResponseHeader_descriptor_;
}

const CMsgHttpResponse_ResponseHeader& CMsgHttpResponse_ResponseHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgHttpResponse_ResponseHeader* CMsgHttpResponse_ResponseHeader::default_instance_ = NULL;

CMsgHttpResponse_ResponseHeader* CMsgHttpResponse_ResponseHeader::New() const {
  return new CMsgHttpResponse_ResponseHeader;
}

void CMsgHttpResponse_ResponseHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHttpResponse_ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgHttpResponse_ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgHttpResponse_ResponseHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgHttpResponse_ResponseHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHttpResponse_ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHttpResponse_ResponseHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHttpResponse_ResponseHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHttpResponse_ResponseHeader::MergeFrom(const CMsgHttpResponse_ResponseHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHttpResponse_ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHttpResponse_ResponseHeader::CopyFrom(const CMsgHttpResponse_ResponseHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpResponse_ResponseHeader::IsInitialized() const {

  return true;
}

void CMsgHttpResponse_ResponseHeader::Swap(CMsgHttpResponse_ResponseHeader* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHttpResponse_ResponseHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHttpResponse_ResponseHeader_descriptor_;
  metadata.reflection = CMsgHttpResponse_ResponseHeader_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgHttpResponse::kStatusCodeFieldNumber;
const int CMsgHttpResponse::kHeadersFieldNumber;
const int CMsgHttpResponse::kBodyFieldNumber;
#endif  // !_MSC_VER

CMsgHttpResponse::CMsgHttpResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgHttpResponse::InitAsDefaultInstance() {
}

CMsgHttpResponse::CMsgHttpResponse(const CMsgHttpResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgHttpResponse::SharedCtor() {
  _cached_size_ = 0;
  status_code_ = 0u;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHttpResponse::~CMsgHttpResponse() {
  SharedDtor();
}

void CMsgHttpResponse::SharedDtor() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void CMsgHttpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHttpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHttpResponse_descriptor_;
}

const CMsgHttpResponse& CMsgHttpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgHttpResponse* CMsgHttpResponse::default_instance_ = NULL;

CMsgHttpResponse* CMsgHttpResponse::New() const {
  return new CMsgHttpResponse;
}

void CMsgHttpResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_code_ = 0u;
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
  }
  headers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHttpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_code_)));
          set_has_status_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_headers;
        break;
      }

      // repeated .CMsgHttpResponse.ResponseHeader headers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_headers;
        if (input->ExpectTag(26)) goto parse_body;
        break;
      }

      // optional bytes body = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgHttpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status_code = 1;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status_code(), output);
  }

  // repeated .CMsgHttpResponse.ResponseHeader headers = 2;
  for (int i = 0; i < this->headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->headers(i), output);
  }

  // optional bytes body = 3;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgHttpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status_code = 1;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status_code(), target);
  }

  // repeated .CMsgHttpResponse.ResponseHeader headers = 2;
  for (int i = 0; i < this->headers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->headers(i), target);
  }

  // optional bytes body = 3;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgHttpResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status_code = 1;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_code());
    }

    // optional bytes body = 3;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

  }
  // repeated .CMsgHttpResponse.ResponseHeader headers = 2;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHttpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHttpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHttpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHttpResponse::MergeFrom(const CMsgHttpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  headers_.MergeFrom(from.headers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHttpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHttpResponse::CopyFrom(const CMsgHttpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpResponse::IsInitialized() const {

  return true;
}

void CMsgHttpResponse::Swap(CMsgHttpResponse* other) {
  if (other != this) {
    std::swap(status_code_, other->status_code_);
    headers_.Swap(&other->headers_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHttpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHttpResponse_descriptor_;
  metadata.reflection = CMsgHttpResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAMFindAccounts::kSearchTypeFieldNumber;
const int CMsgAMFindAccounts::kSearchStringFieldNumber;
#endif  // !_MSC_VER

CMsgAMFindAccounts::CMsgAMFindAccounts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMFindAccounts::InitAsDefaultInstance() {
}

CMsgAMFindAccounts::CMsgAMFindAccounts(const CMsgAMFindAccounts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMFindAccounts::SharedCtor() {
  _cached_size_ = 0;
  search_type_ = 0u;
  search_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMFindAccounts::~CMsgAMFindAccounts() {
  SharedDtor();
}

void CMsgAMFindAccounts::SharedDtor() {
  if (search_string_ != &::google::protobuf::internal::kEmptyString) {
    delete search_string_;
  }
  if (this != default_instance_) {
  }
}

void CMsgAMFindAccounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMFindAccounts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMFindAccounts_descriptor_;
}

const CMsgAMFindAccounts& CMsgAMFindAccounts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMFindAccounts* CMsgAMFindAccounts::default_instance_ = NULL;

CMsgAMFindAccounts* CMsgAMFindAccounts::New() const {
  return new CMsgAMFindAccounts;
}

void CMsgAMFindAccounts::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    search_type_ = 0u;
    if (has_search_string()) {
      if (search_string_ != &::google::protobuf::internal::kEmptyString) {
        search_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMFindAccounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 search_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_type_)));
          set_has_search_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_search_string;
        break;
      }

      // optional string search_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->search_string().data(), this->search_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMFindAccounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 search_type = 1;
  if (has_search_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->search_type(), output);
  }

  // optional string search_string = 2;
  if (has_search_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_string().data(), this->search_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->search_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMFindAccounts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 search_type = 1;
  if (has_search_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->search_type(), target);
  }

  // optional string search_string = 2;
  if (has_search_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_string().data(), this->search_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->search_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMFindAccounts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 search_type = 1;
    if (has_search_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_type());
    }

    // optional string search_string = 2;
    if (has_search_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMFindAccounts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMFindAccounts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMFindAccounts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMFindAccounts::MergeFrom(const CMsgAMFindAccounts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_type()) {
      set_search_type(from.search_type());
    }
    if (from.has_search_string()) {
      set_search_string(from.search_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMFindAccounts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMFindAccounts::CopyFrom(const CMsgAMFindAccounts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMFindAccounts::IsInitialized() const {

  return true;
}

void CMsgAMFindAccounts::Swap(CMsgAMFindAccounts* other) {
  if (other != this) {
    std::swap(search_type_, other->search_type_);
    std::swap(search_string_, other->search_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMFindAccounts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMFindAccounts_descriptor_;
  metadata.reflection = CMsgAMFindAccounts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAMFindAccountsResponse::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgAMFindAccountsResponse::CMsgAMFindAccountsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMFindAccountsResponse::InitAsDefaultInstance() {
}

CMsgAMFindAccountsResponse::CMsgAMFindAccountsResponse(const CMsgAMFindAccountsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMFindAccountsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMFindAccountsResponse::~CMsgAMFindAccountsResponse() {
  SharedDtor();
}

void CMsgAMFindAccountsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAMFindAccountsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMFindAccountsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMFindAccountsResponse_descriptor_;
}

const CMsgAMFindAccountsResponse& CMsgAMFindAccountsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMFindAccountsResponse* CMsgAMFindAccountsResponse::default_instance_ = NULL;

CMsgAMFindAccountsResponse* CMsgAMFindAccountsResponse::New() const {
  return new CMsgAMFindAccountsResponse;
}

void CMsgAMFindAccountsResponse::Clear() {
  steam_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMFindAccountsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_steam_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steam_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_steam_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMFindAccountsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 steam_id = 1;
  for (int i = 0; i < this->steam_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->steam_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMFindAccountsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 steam_id = 1;
  for (int i = 0; i < this->steam_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->steam_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMFindAccountsResponse::ByteSize() const {
  int total_size = 0;

  // repeated fixed64 steam_id = 1;
  {
    int data_size = 0;
    data_size = 8 * this->steam_id_size();
    total_size += 1 * this->steam_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMFindAccountsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMFindAccountsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMFindAccountsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMFindAccountsResponse::MergeFrom(const CMsgAMFindAccountsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  steam_id_.MergeFrom(from.steam_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMFindAccountsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMFindAccountsResponse::CopyFrom(const CMsgAMFindAccountsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMFindAccountsResponse::IsInitialized() const {

  return true;
}

void CMsgAMFindAccountsResponse::Swap(CMsgAMFindAccountsResponse* other) {
  if (other != this) {
    steam_id_.Swap(&other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMFindAccountsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMFindAccountsResponse_descriptor_;
  metadata.reflection = CMsgAMFindAccountsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgNotifyWatchdog::kSourceFieldNumber;
const int CMsgNotifyWatchdog::kAlertTypeFieldNumber;
const int CMsgNotifyWatchdog::kAlertDestinationFieldNumber;
const int CMsgNotifyWatchdog::kCriticalFieldNumber;
const int CMsgNotifyWatchdog::kTimeFieldNumber;
const int CMsgNotifyWatchdog::kAppidFieldNumber;
const int CMsgNotifyWatchdog::kTextFieldNumber;
#endif  // !_MSC_VER

CMsgNotifyWatchdog::CMsgNotifyWatchdog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgNotifyWatchdog::InitAsDefaultInstance() {
}

CMsgNotifyWatchdog::CMsgNotifyWatchdog(const CMsgNotifyWatchdog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgNotifyWatchdog::SharedCtor() {
  _cached_size_ = 0;
  source_ = 0u;
  alert_type_ = 0u;
  alert_destination_ = 0u;
  critical_ = false;
  time_ = 0u;
  appid_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgNotifyWatchdog::~CMsgNotifyWatchdog() {
  SharedDtor();
}

void CMsgNotifyWatchdog::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CMsgNotifyWatchdog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgNotifyWatchdog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgNotifyWatchdog_descriptor_;
}

const CMsgNotifyWatchdog& CMsgNotifyWatchdog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgNotifyWatchdog* CMsgNotifyWatchdog::default_instance_ = NULL;

CMsgNotifyWatchdog* CMsgNotifyWatchdog::New() const {
  return new CMsgNotifyWatchdog;
}

void CMsgNotifyWatchdog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_ = 0u;
    alert_type_ = 0u;
    alert_destination_ = 0u;
    critical_ = false;
    time_ = 0u;
    appid_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgNotifyWatchdog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_alert_type;
        break;
      }

      // optional uint32 alert_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alert_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alert_type_)));
          set_has_alert_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_alert_destination;
        break;
      }

      // optional uint32 alert_destination = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alert_destination:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alert_destination_)));
          set_has_alert_destination();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_critical;
        break;
      }

      // optional bool critical = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_text;
        break;
      }

      // optional string text = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgNotifyWatchdog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source(), output);
  }

  // optional uint32 alert_type = 2;
  if (has_alert_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->alert_type(), output);
  }

  // optional uint32 alert_destination = 3;
  if (has_alert_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->alert_destination(), output);
  }

  // optional bool critical = 4;
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->critical(), output);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional uint32 appid = 6;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->appid(), output);
  }

  // optional string text = 7;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgNotifyWatchdog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 source = 1;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source(), target);
  }

  // optional uint32 alert_type = 2;
  if (has_alert_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->alert_type(), target);
  }

  // optional uint32 alert_destination = 3;
  if (has_alert_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->alert_destination(), target);
  }

  // optional bool critical = 4;
  if (has_critical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->critical(), target);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional uint32 appid = 6;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->appid(), target);
  }

  // optional string text = 7;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgNotifyWatchdog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source());
    }

    // optional uint32 alert_type = 2;
    if (has_alert_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alert_type());
    }

    // optional uint32 alert_destination = 3;
    if (has_alert_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alert_destination());
    }

    // optional bool critical = 4;
    if (has_critical()) {
      total_size += 1 + 1;
    }

    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 appid = 6;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional string text = 7;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNotifyWatchdog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgNotifyWatchdog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgNotifyWatchdog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgNotifyWatchdog::MergeFrom(const CMsgNotifyWatchdog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_alert_type()) {
      set_alert_type(from.alert_type());
    }
    if (from.has_alert_destination()) {
      set_alert_destination(from.alert_destination());
    }
    if (from.has_critical()) {
      set_critical(from.critical());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgNotifyWatchdog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNotifyWatchdog::CopyFrom(const CMsgNotifyWatchdog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotifyWatchdog::IsInitialized() const {

  return true;
}

void CMsgNotifyWatchdog::Swap(CMsgNotifyWatchdog* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(alert_type_, other->alert_type_);
    std::swap(alert_destination_, other->alert_destination_);
    std::swap(critical_, other->critical_);
    std::swap(time_, other->time_);
    std::swap(appid_, other->appid_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgNotifyWatchdog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgNotifyWatchdog_descriptor_;
  metadata.reflection = CMsgNotifyWatchdog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAMGetLicenses::kSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgAMGetLicenses::CMsgAMGetLicenses()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMGetLicenses::InitAsDefaultInstance() {
}

CMsgAMGetLicenses::CMsgAMGetLicenses(const CMsgAMGetLicenses& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMGetLicenses::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMGetLicenses::~CMsgAMGetLicenses() {
  SharedDtor();
}

void CMsgAMGetLicenses::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAMGetLicenses::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGetLicenses::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMGetLicenses_descriptor_;
}

const CMsgAMGetLicenses& CMsgAMGetLicenses::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMGetLicenses* CMsgAMGetLicenses::default_instance_ = NULL;

CMsgAMGetLicenses* CMsgAMGetLicenses::New() const {
  return new CMsgAMGetLicenses;
}

void CMsgAMGetLicenses::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMGetLicenses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMGetLicenses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMGetLicenses::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMGetLicenses::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGetLicenses::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMGetLicenses* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMGetLicenses*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMGetLicenses::MergeFrom(const CMsgAMGetLicenses& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMGetLicenses::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetLicenses::CopyFrom(const CMsgAMGetLicenses& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetLicenses::IsInitialized() const {

  return true;
}

void CMsgAMGetLicenses::Swap(CMsgAMGetLicenses* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMGetLicenses::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMGetLicenses_descriptor_;
  metadata.reflection = CMsgAMGetLicenses_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPackageLicense::kPackageIdFieldNumber;
const int CMsgPackageLicense::kTimeCreatedFieldNumber;
#endif  // !_MSC_VER

CMsgPackageLicense::CMsgPackageLicense()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPackageLicense::InitAsDefaultInstance() {
}

CMsgPackageLicense::CMsgPackageLicense(const CMsgPackageLicense& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPackageLicense::SharedCtor() {
  _cached_size_ = 0;
  package_id_ = 0u;
  time_created_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPackageLicense::~CMsgPackageLicense() {
  SharedDtor();
}

void CMsgPackageLicense::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPackageLicense::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPackageLicense::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPackageLicense_descriptor_;
}

const CMsgPackageLicense& CMsgPackageLicense::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgPackageLicense* CMsgPackageLicense::default_instance_ = NULL;

CMsgPackageLicense* CMsgPackageLicense::New() const {
  return new CMsgPackageLicense;
}

void CMsgPackageLicense::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    package_id_ = 0u;
    time_created_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPackageLicense::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_created;
        break;
      }

      // optional uint32 time_created = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
          set_has_time_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPackageLicense::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 package_id = 1;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_id(), output);
  }

  // optional uint32 time_created = 2;
  if (has_time_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_created(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPackageLicense::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 package_id = 1;
  if (has_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->package_id(), target);
  }

  // optional uint32 time_created = 2;
  if (has_time_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_created(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPackageLicense::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 package_id = 1;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional uint32 time_created = 2;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPackageLicense::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPackageLicense* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPackageLicense*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPackageLicense::MergeFrom(const CMsgPackageLicense& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_time_created()) {
      set_time_created(from.time_created());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPackageLicense::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPackageLicense::CopyFrom(const CMsgPackageLicense& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPackageLicense::IsInitialized() const {

  return true;
}

void CMsgPackageLicense::Swap(CMsgPackageLicense* other) {
  if (other != this) {
    std::swap(package_id_, other->package_id_);
    std::swap(time_created_, other->time_created_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPackageLicense::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPackageLicense_descriptor_;
  metadata.reflection = CMsgPackageLicense_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAMGetLicensesResponse::kLicenseFieldNumber;
const int CMsgAMGetLicensesResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgAMGetLicensesResponse::CMsgAMGetLicensesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMGetLicensesResponse::InitAsDefaultInstance() {
}

CMsgAMGetLicensesResponse::CMsgAMGetLicensesResponse(const CMsgAMGetLicensesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMGetLicensesResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMGetLicensesResponse::~CMsgAMGetLicensesResponse() {
  SharedDtor();
}

void CMsgAMGetLicensesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAMGetLicensesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGetLicensesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMGetLicensesResponse_descriptor_;
}

const CMsgAMGetLicensesResponse& CMsgAMGetLicensesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMGetLicensesResponse* CMsgAMGetLicensesResponse::default_instance_ = NULL;

CMsgAMGetLicensesResponse* CMsgAMGetLicensesResponse::New() const {
  return new CMsgAMGetLicensesResponse;
}

void CMsgAMGetLicensesResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    result_ = 0u;
  }
  license_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMGetLicensesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgPackageLicense license = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_license:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_license()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_license;
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMGetLicensesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgPackageLicense license = 1;
  for (int i = 0; i < this->license_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->license(i), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMGetLicensesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgPackageLicense license = 1;
  for (int i = 0; i < this->license_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->license(i), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMGetLicensesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  // repeated .CMsgPackageLicense license = 1;
  total_size += 1 * this->license_size();
  for (int i = 0; i < this->license_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->license(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGetLicensesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMGetLicensesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMGetLicensesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMGetLicensesResponse::MergeFrom(const CMsgAMGetLicensesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  license_.MergeFrom(from.license_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMGetLicensesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetLicensesResponse::CopyFrom(const CMsgAMGetLicensesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetLicensesResponse::IsInitialized() const {

  return true;
}

void CMsgAMGetLicensesResponse::Swap(CMsgAMGetLicensesResponse* other) {
  if (other != this) {
    license_.Swap(&other->license_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMGetLicensesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMGetLicensesResponse_descriptor_;
  metadata.reflection = CMsgAMGetLicensesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAMGetUserGameStats::kSteamIdFieldNumber;
const int CMsgAMGetUserGameStats::kGameIdFieldNumber;
const int CMsgAMGetUserGameStats::kStatsFieldNumber;
#endif  // !_MSC_VER

CMsgAMGetUserGameStats::CMsgAMGetUserGameStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMGetUserGameStats::InitAsDefaultInstance() {
}

CMsgAMGetUserGameStats::CMsgAMGetUserGameStats(const CMsgAMGetUserGameStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMGetUserGameStats::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMGetUserGameStats::~CMsgAMGetUserGameStats() {
  SharedDtor();
}

void CMsgAMGetUserGameStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAMGetUserGameStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGetUserGameStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMGetUserGameStats_descriptor_;
}

const CMsgAMGetUserGameStats& CMsgAMGetUserGameStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMGetUserGameStats* CMsgAMGetUserGameStats::default_instance_ = NULL;

CMsgAMGetUserGameStats* CMsgAMGetUserGameStats::New() const {
  return new CMsgAMGetUserGameStats;
}

void CMsgAMGetUserGameStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = GOOGLE_ULONGLONG(0);
  }
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMGetUserGameStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_game_id;
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stats;
        break;
      }

      // repeated uint32 stats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_stats())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stats())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMGetUserGameStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // repeated uint32 stats = 3;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->stats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMGetUserGameStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->game_id(), target);
  }

  // repeated uint32 stats = 3;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->stats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMGetUserGameStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

  }
  // repeated uint32 stats = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->stats_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stats(i));
    }
    total_size += 1 * this->stats_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGetUserGameStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMGetUserGameStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMGetUserGameStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMGetUserGameStats::MergeFrom(const CMsgAMGetUserGameStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMGetUserGameStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetUserGameStats::CopyFrom(const CMsgAMGetUserGameStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStats::IsInitialized() const {

  return true;
}

void CMsgAMGetUserGameStats::Swap(CMsgAMGetUserGameStats* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(game_id_, other->game_id_);
    stats_.Swap(&other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMGetUserGameStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMGetUserGameStats_descriptor_;
  metadata.reflection = CMsgAMGetUserGameStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAMGetUserGameStatsResponse_Stats::kStatIdFieldNumber;
const int CMsgAMGetUserGameStatsResponse_Stats::kStatValueFieldNumber;
#endif  // !_MSC_VER

CMsgAMGetUserGameStatsResponse_Stats::CMsgAMGetUserGameStatsResponse_Stats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMGetUserGameStatsResponse_Stats::InitAsDefaultInstance() {
}

CMsgAMGetUserGameStatsResponse_Stats::CMsgAMGetUserGameStatsResponse_Stats(const CMsgAMGetUserGameStatsResponse_Stats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMGetUserGameStatsResponse_Stats::SharedCtor() {
  _cached_size_ = 0;
  stat_id_ = 0u;
  stat_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMGetUserGameStatsResponse_Stats::~CMsgAMGetUserGameStatsResponse_Stats() {
  SharedDtor();
}

void CMsgAMGetUserGameStatsResponse_Stats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAMGetUserGameStatsResponse_Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGetUserGameStatsResponse_Stats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMGetUserGameStatsResponse_Stats_descriptor_;
}

const CMsgAMGetUserGameStatsResponse_Stats& CMsgAMGetUserGameStatsResponse_Stats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMGetUserGameStatsResponse_Stats* CMsgAMGetUserGameStatsResponse_Stats::default_instance_ = NULL;

CMsgAMGetUserGameStatsResponse_Stats* CMsgAMGetUserGameStatsResponse_Stats::New() const {
  return new CMsgAMGetUserGameStatsResponse_Stats;
}

void CMsgAMGetUserGameStatsResponse_Stats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stat_id_ = 0u;
    stat_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMGetUserGameStatsResponse_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
          set_has_stat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stat_value;
        break;
      }

      // optional uint32 stat_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stat_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_value_)));
          set_has_stat_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMGetUserGameStatsResponse_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stat_id = 1;
  if (has_stat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 stat_value = 2;
  if (has_stat_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMGetUserGameStatsResponse_Stats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stat_id = 1;
  if (has_stat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (has_stat_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMGetUserGameStatsResponse_Stats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stat_id = 1;
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 stat_value = 2;
    if (has_stat_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGetUserGameStatsResponse_Stats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMGetUserGameStatsResponse_Stats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMGetUserGameStatsResponse_Stats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMGetUserGameStatsResponse_Stats::MergeFrom(const CMsgAMGetUserGameStatsResponse_Stats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat_id()) {
      set_stat_id(from.stat_id());
    }
    if (from.has_stat_value()) {
      set_stat_value(from.stat_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMGetUserGameStatsResponse_Stats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetUserGameStatsResponse_Stats::CopyFrom(const CMsgAMGetUserGameStatsResponse_Stats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStatsResponse_Stats::IsInitialized() const {

  return true;
}

void CMsgAMGetUserGameStatsResponse_Stats::Swap(CMsgAMGetUserGameStatsResponse_Stats* other) {
  if (other != this) {
    std::swap(stat_id_, other->stat_id_);
    std::swap(stat_value_, other->stat_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMGetUserGameStatsResponse_Stats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMGetUserGameStatsResponse_Stats_descriptor_;
  metadata.reflection = CMsgAMGetUserGameStatsResponse_Stats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgAMGetUserGameStatsResponse_Achievement_Blocks::kAchievementIdFieldNumber;
const int CMsgAMGetUserGameStatsResponse_Achievement_Blocks::kAchievementBitIdFieldNumber;
const int CMsgAMGetUserGameStatsResponse_Achievement_Blocks::kUnlockTimeFieldNumber;
#endif  // !_MSC_VER

CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CMsgAMGetUserGameStatsResponse_Achievement_Blocks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::InitAsDefaultInstance() {
}

CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CMsgAMGetUserGameStatsResponse_Achievement_Blocks(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SharedCtor() {
  _cached_size_ = 0;
  achievement_id_ = 0u;
  achievement_bit_id_ = 0u;
  unlock_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMGetUserGameStatsResponse_Achievement_Blocks::~CMsgAMGetUserGameStatsResponse_Achievement_Blocks() {
  SharedDtor();
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGetUserGameStatsResponse_Achievement_Blocks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMGetUserGameStatsResponse_Achievement_Blocks_descriptor_;
}

const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& CMsgAMGetUserGameStatsResponse_Achievement_Blocks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMGetUserGameStatsResponse_Achievement_Blocks* CMsgAMGetUserGameStatsResponse_Achievement_Blocks::default_instance_ = NULL;

CMsgAMGetUserGameStatsResponse_Achievement_Blocks* CMsgAMGetUserGameStatsResponse_Achievement_Blocks::New() const {
  return new CMsgAMGetUserGameStatsResponse_Achievement_Blocks;
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achievement_id_ = 0u;
    achievement_bit_id_ = 0u;
    unlock_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 achievement_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_id_)));
          set_has_achievement_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_achievement_bit_id;
        break;
      }

      // optional uint32 achievement_bit_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievement_bit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_bit_id_)));
          set_has_achievement_bit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_unlock_time;
        break;
      }

      // optional fixed32 unlock_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_unlock_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &unlock_time_)));
          set_has_unlock_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 achievement_id = 1;
  if (has_achievement_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievement_id(), output);
  }

  // optional uint32 achievement_bit_id = 2;
  if (has_achievement_bit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->achievement_bit_id(), output);
  }

  // optional fixed32 unlock_time = 3;
  if (has_unlock_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->unlock_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 achievement_id = 1;
  if (has_achievement_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievement_id(), target);
  }

  // optional uint32 achievement_bit_id = 2;
  if (has_achievement_bit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->achievement_bit_id(), target);
  }

  // optional fixed32 unlock_time = 3;
  if (has_unlock_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->unlock_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMGetUserGameStatsResponse_Achievement_Blocks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 achievement_id = 1;
    if (has_achievement_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_id());
    }

    // optional uint32 achievement_bit_id = 2;
    if (has_achievement_bit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_bit_id());
    }

    // optional fixed32 unlock_time = 3;
    if (has_unlock_time()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMGetUserGameStatsResponse_Achievement_Blocks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMGetUserGameStatsResponse_Achievement_Blocks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergeFrom(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievement_id()) {
      set_achievement_id(from.achievement_id());
    }
    if (from.has_achievement_bit_id()) {
      set_achievement_bit_id(from.achievement_bit_id());
    }
    if (from.has_unlock_time()) {
      set_unlock_time(from.unlock_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CopyFrom(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::IsInitialized() const {

  return true;
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::Swap(CMsgAMGetUserGameStatsResponse_Achievement_Blocks* other) {
  if (other != this) {
    std::swap(achievement_id_, other->achievement_id_);
    std::swap(achievement_bit_id_, other->achievement_bit_id_);
    std::swap(unlock_time_, other->unlock_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMGetUserGameStatsResponse_Achievement_Blocks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMGetUserGameStatsResponse_Achievement_Blocks_descriptor_;
  metadata.reflection = CMsgAMGetUserGameStatsResponse_Achievement_Blocks_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgAMGetUserGameStatsResponse::kSteamIdFieldNumber;
const int CMsgAMGetUserGameStatsResponse::kGameIdFieldNumber;
const int CMsgAMGetUserGameStatsResponse::kEresultFieldNumber;
const int CMsgAMGetUserGameStatsResponse::kStatsFieldNumber;
const int CMsgAMGetUserGameStatsResponse::kAchievementBlocksFieldNumber;
#endif  // !_MSC_VER

CMsgAMGetUserGameStatsResponse::CMsgAMGetUserGameStatsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMGetUserGameStatsResponse::InitAsDefaultInstance() {
}

CMsgAMGetUserGameStatsResponse::CMsgAMGetUserGameStatsResponse(const CMsgAMGetUserGameStatsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMGetUserGameStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = GOOGLE_ULONGLONG(0);
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMGetUserGameStatsResponse::~CMsgAMGetUserGameStatsResponse() {
  SharedDtor();
}

void CMsgAMGetUserGameStatsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAMGetUserGameStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGetUserGameStatsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMGetUserGameStatsResponse_descriptor_;
}

const CMsgAMGetUserGameStatsResponse& CMsgAMGetUserGameStatsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMGetUserGameStatsResponse* CMsgAMGetUserGameStatsResponse::default_instance_ = NULL;

CMsgAMGetUserGameStatsResponse* CMsgAMGetUserGameStatsResponse::New() const {
  return new CMsgAMGetUserGameStatsResponse;
}

void CMsgAMGetUserGameStatsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = GOOGLE_ULONGLONG(0);
    eresult_ = 2;
  }
  stats_.Clear();
  achievement_blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMGetUserGameStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_game_id;
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stats;
        break;
      }

      // repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stats;
        if (input->ExpectTag(42)) goto parse_achievement_blocks;
        break;
      }

      // repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_achievement_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMGetUserGameStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

  // repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stats(i), output);
  }

  // repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
  for (int i = 0; i < this->achievement_blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->achievement_blocks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMGetUserGameStatsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->game_id(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eresult(), target);
  }

  // repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stats(i), target);
  }

  // repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
  for (int i = 0; i < this->achievement_blocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->achievement_blocks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMGetUserGameStatsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 3 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  // repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  // repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
  total_size += 1 * this->achievement_blocks_size();
  for (int i = 0; i < this->achievement_blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievement_blocks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGetUserGameStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMGetUserGameStatsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMGetUserGameStatsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMGetUserGameStatsResponse::MergeFrom(const CMsgAMGetUserGameStatsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  achievement_blocks_.MergeFrom(from.achievement_blocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMGetUserGameStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetUserGameStatsResponse::CopyFrom(const CMsgAMGetUserGameStatsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStatsResponse::IsInitialized() const {

  return true;
}

void CMsgAMGetUserGameStatsResponse::Swap(CMsgAMGetUserGameStatsResponse* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(eresult_, other->eresult_);
    stats_.Swap(&other->stats_);
    achievement_blocks_.Swap(&other->achievement_blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMGetUserGameStatsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMGetUserGameStatsResponse_descriptor_;
  metadata.reflection = CMsgAMGetUserGameStatsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCGetCommandList::kAppIdFieldNumber;
const int CMsgGCGetCommandList::kCommandPrefixFieldNumber;
#endif  // !_MSC_VER

CMsgGCGetCommandList::CMsgGCGetCommandList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCGetCommandList::InitAsDefaultInstance() {
}

CMsgGCGetCommandList::CMsgGCGetCommandList(const CMsgGCGetCommandList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCGetCommandList::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  command_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCGetCommandList::~CMsgGCGetCommandList() {
  SharedDtor();
}

void CMsgGCGetCommandList::SharedDtor() {
  if (command_prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete command_prefix_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCGetCommandList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetCommandList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCGetCommandList_descriptor_;
}

const CMsgGCGetCommandList& CMsgGCGetCommandList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgGCGetCommandList* CMsgGCGetCommandList::default_instance_ = NULL;

CMsgGCGetCommandList* CMsgGCGetCommandList::New() const {
  return new CMsgGCGetCommandList;
}

void CMsgGCGetCommandList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    if (has_command_prefix()) {
      if (command_prefix_ != &::google::protobuf::internal::kEmptyString) {
        command_prefix_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCGetCommandList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command_prefix;
        break;
      }

      // optional string command_prefix = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command_prefix().data(), this->command_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCGetCommandList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string command_prefix = 2;
  if (has_command_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command_prefix().data(), this->command_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->command_prefix(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCGetCommandList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string command_prefix = 2;
  if (has_command_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command_prefix().data(), this->command_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->command_prefix(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCGetCommandList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional string command_prefix = 2;
    if (has_command_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command_prefix());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetCommandList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCGetCommandList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCGetCommandList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCGetCommandList::MergeFrom(const CMsgGCGetCommandList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_command_prefix()) {
      set_command_prefix(from.command_prefix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCGetCommandList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetCommandList::CopyFrom(const CMsgGCGetCommandList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetCommandList::IsInitialized() const {

  return true;
}

void CMsgGCGetCommandList::Swap(CMsgGCGetCommandList* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(command_prefix_, other->command_prefix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCGetCommandList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCGetCommandList_descriptor_;
  metadata.reflection = CMsgGCGetCommandList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCGetCommandListResponse::kCommandNameFieldNumber;
#endif  // !_MSC_VER

CMsgGCGetCommandListResponse::CMsgGCGetCommandListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCGetCommandListResponse::InitAsDefaultInstance() {
}

CMsgGCGetCommandListResponse::CMsgGCGetCommandListResponse(const CMsgGCGetCommandListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCGetCommandListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCGetCommandListResponse::~CMsgGCGetCommandListResponse() {
  SharedDtor();
}

void CMsgGCGetCommandListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCGetCommandListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetCommandListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCGetCommandListResponse_descriptor_;
}

const CMsgGCGetCommandListResponse& CMsgGCGetCommandListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgGCGetCommandListResponse* CMsgGCGetCommandListResponse::default_instance_ = NULL;

CMsgGCGetCommandListResponse* CMsgGCGetCommandListResponse::New() const {
  return new CMsgGCGetCommandListResponse;
}

void CMsgGCGetCommandListResponse::Clear() {
  command_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCGetCommandListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string command_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_command_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command_name(this->command_name_size() - 1).data(),
            this->command_name(this->command_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_command_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCGetCommandListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string command_name = 1;
  for (int i = 0; i < this->command_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->command_name(i).data(), this->command_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCGetCommandListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string command_name = 1;
  for (int i = 0; i < this->command_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command_name(i).data(), this->command_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->command_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCGetCommandListResponse::ByteSize() const {
  int total_size = 0;

  // repeated string command_name = 1;
  total_size += 1 * this->command_name_size();
  for (int i = 0; i < this->command_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->command_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetCommandListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCGetCommandListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCGetCommandListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCGetCommandListResponse::MergeFrom(const CMsgGCGetCommandListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  command_name_.MergeFrom(from.command_name_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCGetCommandListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetCommandListResponse::CopyFrom(const CMsgGCGetCommandListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetCommandListResponse::IsInitialized() const {

  return true;
}

void CMsgGCGetCommandListResponse::Swap(CMsgGCGetCommandListResponse* other) {
  if (other != this) {
    command_name_.Swap(&other->command_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCGetCommandListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCGetCommandListResponse_descriptor_;
  metadata.reflection = CMsgGCGetCommandListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCMsgMemCachedGet::kKeysFieldNumber;
#endif  // !_MSC_VER

CGCMsgMemCachedGet::CGCMsgMemCachedGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgMemCachedGet::InitAsDefaultInstance() {
}

CGCMsgMemCachedGet::CGCMsgMemCachedGet(const CGCMsgMemCachedGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgMemCachedGet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgMemCachedGet::~CGCMsgMemCachedGet() {
  SharedDtor();
}

void CGCMsgMemCachedGet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCMsgMemCachedGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgMemCachedGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgMemCachedGet_descriptor_;
}

const CGCMsgMemCachedGet& CGCMsgMemCachedGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CGCMsgMemCachedGet* CGCMsgMemCachedGet::default_instance_ = NULL;

CGCMsgMemCachedGet* CGCMsgMemCachedGet::New() const {
  return new CGCMsgMemCachedGet;
}

void CGCMsgMemCachedGet::Clear() {
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgMemCachedGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keys(this->keys_size() - 1).data(),
            this->keys(this->keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgMemCachedGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keys(i).data(), this->keys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgMemCachedGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keys(i).data(), this->keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgMemCachedGet::ByteSize() const {
  int total_size = 0;

  // repeated string keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgMemCachedGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgMemCachedGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgMemCachedGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedGet::MergeFrom(const CGCMsgMemCachedGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgMemCachedGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedGet::CopyFrom(const CGCMsgMemCachedGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedGet::IsInitialized() const {

  return true;
}

void CGCMsgMemCachedGet::Swap(CGCMsgMemCachedGet* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgMemCachedGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgMemCachedGet_descriptor_;
  metadata.reflection = CGCMsgMemCachedGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCMsgMemCachedGetResponse_ValueTag::kFoundFieldNumber;
const int CGCMsgMemCachedGetResponse_ValueTag::kValueFieldNumber;
#endif  // !_MSC_VER

CGCMsgMemCachedGetResponse_ValueTag::CGCMsgMemCachedGetResponse_ValueTag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgMemCachedGetResponse_ValueTag::InitAsDefaultInstance() {
}

CGCMsgMemCachedGetResponse_ValueTag::CGCMsgMemCachedGetResponse_ValueTag(const CGCMsgMemCachedGetResponse_ValueTag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgMemCachedGetResponse_ValueTag::SharedCtor() {
  _cached_size_ = 0;
  found_ = false;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgMemCachedGetResponse_ValueTag::~CGCMsgMemCachedGetResponse_ValueTag() {
  SharedDtor();
}

void CGCMsgMemCachedGetResponse_ValueTag::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CGCMsgMemCachedGetResponse_ValueTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgMemCachedGetResponse_ValueTag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgMemCachedGetResponse_ValueTag_descriptor_;
}

const CGCMsgMemCachedGetResponse_ValueTag& CGCMsgMemCachedGetResponse_ValueTag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CGCMsgMemCachedGetResponse_ValueTag* CGCMsgMemCachedGetResponse_ValueTag::default_instance_ = NULL;

CGCMsgMemCachedGetResponse_ValueTag* CGCMsgMemCachedGetResponse_ValueTag::New() const {
  return new CGCMsgMemCachedGetResponse_ValueTag;
}

void CGCMsgMemCachedGetResponse_ValueTag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    found_ = false;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgMemCachedGetResponse_ValueTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool found = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &found_)));
          set_has_found();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgMemCachedGetResponse_ValueTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool found = 1;
  if (has_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->found(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgMemCachedGetResponse_ValueTag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool found = 1;
  if (has_found()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->found(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgMemCachedGetResponse_ValueTag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool found = 1;
    if (has_found()) {
      total_size += 1 + 1;
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgMemCachedGetResponse_ValueTag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgMemCachedGetResponse_ValueTag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgMemCachedGetResponse_ValueTag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedGetResponse_ValueTag::MergeFrom(const CGCMsgMemCachedGetResponse_ValueTag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_found()) {
      set_found(from.found());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgMemCachedGetResponse_ValueTag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedGetResponse_ValueTag::CopyFrom(const CGCMsgMemCachedGetResponse_ValueTag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedGetResponse_ValueTag::IsInitialized() const {

  return true;
}

void CGCMsgMemCachedGetResponse_ValueTag::Swap(CGCMsgMemCachedGetResponse_ValueTag* other) {
  if (other != this) {
    std::swap(found_, other->found_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgMemCachedGetResponse_ValueTag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgMemCachedGetResponse_ValueTag_descriptor_;
  metadata.reflection = CGCMsgMemCachedGetResponse_ValueTag_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CGCMsgMemCachedGetResponse::kValuesFieldNumber;
#endif  // !_MSC_VER

CGCMsgMemCachedGetResponse::CGCMsgMemCachedGetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgMemCachedGetResponse::InitAsDefaultInstance() {
}

CGCMsgMemCachedGetResponse::CGCMsgMemCachedGetResponse(const CGCMsgMemCachedGetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgMemCachedGetResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgMemCachedGetResponse::~CGCMsgMemCachedGetResponse() {
  SharedDtor();
}

void CGCMsgMemCachedGetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCMsgMemCachedGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgMemCachedGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgMemCachedGetResponse_descriptor_;
}

const CGCMsgMemCachedGetResponse& CGCMsgMemCachedGetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CGCMsgMemCachedGetResponse* CGCMsgMemCachedGetResponse::default_instance_ = NULL;

CGCMsgMemCachedGetResponse* CGCMsgMemCachedGetResponse::New() const {
  return new CGCMsgMemCachedGetResponse;
}

void CGCMsgMemCachedGetResponse::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgMemCachedGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgMemCachedGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgMemCachedGetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgMemCachedGetResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgMemCachedGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgMemCachedGetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgMemCachedGetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedGetResponse::MergeFrom(const CGCMsgMemCachedGetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgMemCachedGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedGetResponse::CopyFrom(const CGCMsgMemCachedGetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedGetResponse::IsInitialized() const {

  return true;
}

void CGCMsgMemCachedGetResponse::Swap(CGCMsgMemCachedGetResponse* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgMemCachedGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgMemCachedGetResponse_descriptor_;
  metadata.reflection = CGCMsgMemCachedGetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCMsgMemCachedSet_KeyPair::kNameFieldNumber;
const int CGCMsgMemCachedSet_KeyPair::kValueFieldNumber;
#endif  // !_MSC_VER

CGCMsgMemCachedSet_KeyPair::CGCMsgMemCachedSet_KeyPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgMemCachedSet_KeyPair::InitAsDefaultInstance() {
}

CGCMsgMemCachedSet_KeyPair::CGCMsgMemCachedSet_KeyPair(const CGCMsgMemCachedSet_KeyPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgMemCachedSet_KeyPair::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgMemCachedSet_KeyPair::~CGCMsgMemCachedSet_KeyPair() {
  SharedDtor();
}

void CGCMsgMemCachedSet_KeyPair::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CGCMsgMemCachedSet_KeyPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgMemCachedSet_KeyPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgMemCachedSet_KeyPair_descriptor_;
}

const CGCMsgMemCachedSet_KeyPair& CGCMsgMemCachedSet_KeyPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CGCMsgMemCachedSet_KeyPair* CGCMsgMemCachedSet_KeyPair::default_instance_ = NULL;

CGCMsgMemCachedSet_KeyPair* CGCMsgMemCachedSet_KeyPair::New() const {
  return new CGCMsgMemCachedSet_KeyPair;
}

void CGCMsgMemCachedSet_KeyPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgMemCachedSet_KeyPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgMemCachedSet_KeyPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgMemCachedSet_KeyPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgMemCachedSet_KeyPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgMemCachedSet_KeyPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgMemCachedSet_KeyPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgMemCachedSet_KeyPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedSet_KeyPair::MergeFrom(const CGCMsgMemCachedSet_KeyPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgMemCachedSet_KeyPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedSet_KeyPair::CopyFrom(const CGCMsgMemCachedSet_KeyPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedSet_KeyPair::IsInitialized() const {

  return true;
}

void CGCMsgMemCachedSet_KeyPair::Swap(CGCMsgMemCachedSet_KeyPair* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgMemCachedSet_KeyPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgMemCachedSet_KeyPair_descriptor_;
  metadata.reflection = CGCMsgMemCachedSet_KeyPair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CGCMsgMemCachedSet::kKeysFieldNumber;
#endif  // !_MSC_VER

CGCMsgMemCachedSet::CGCMsgMemCachedSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgMemCachedSet::InitAsDefaultInstance() {
}

CGCMsgMemCachedSet::CGCMsgMemCachedSet(const CGCMsgMemCachedSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgMemCachedSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgMemCachedSet::~CGCMsgMemCachedSet() {
  SharedDtor();
}

void CGCMsgMemCachedSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCMsgMemCachedSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgMemCachedSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgMemCachedSet_descriptor_;
}

const CGCMsgMemCachedSet& CGCMsgMemCachedSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CGCMsgMemCachedSet* CGCMsgMemCachedSet::default_instance_ = NULL;

CGCMsgMemCachedSet* CGCMsgMemCachedSet::New() const {
  return new CGCMsgMemCachedSet;
}

void CGCMsgMemCachedSet::Clear() {
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgMemCachedSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgMemCachedSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgMemCachedSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgMemCachedSet::ByteSize() const {
  int total_size = 0;

  // repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgMemCachedSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgMemCachedSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgMemCachedSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedSet::MergeFrom(const CGCMsgMemCachedSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgMemCachedSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedSet::CopyFrom(const CGCMsgMemCachedSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedSet::IsInitialized() const {

  return true;
}

void CGCMsgMemCachedSet::Swap(CGCMsgMemCachedSet* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgMemCachedSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgMemCachedSet_descriptor_;
  metadata.reflection = CGCMsgMemCachedSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCMsgMemCachedDelete::kKeysFieldNumber;
#endif  // !_MSC_VER

CGCMsgMemCachedDelete::CGCMsgMemCachedDelete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgMemCachedDelete::InitAsDefaultInstance() {
}

CGCMsgMemCachedDelete::CGCMsgMemCachedDelete(const CGCMsgMemCachedDelete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgMemCachedDelete::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgMemCachedDelete::~CGCMsgMemCachedDelete() {
  SharedDtor();
}

void CGCMsgMemCachedDelete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCMsgMemCachedDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgMemCachedDelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgMemCachedDelete_descriptor_;
}

const CGCMsgMemCachedDelete& CGCMsgMemCachedDelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CGCMsgMemCachedDelete* CGCMsgMemCachedDelete::default_instance_ = NULL;

CGCMsgMemCachedDelete* CGCMsgMemCachedDelete::New() const {
  return new CGCMsgMemCachedDelete;
}

void CGCMsgMemCachedDelete::Clear() {
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgMemCachedDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keys(this->keys_size() - 1).data(),
            this->keys(this->keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgMemCachedDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keys(i).data(), this->keys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgMemCachedDelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keys(i).data(), this->keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgMemCachedDelete::ByteSize() const {
  int total_size = 0;

  // repeated string keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgMemCachedDelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgMemCachedDelete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgMemCachedDelete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedDelete::MergeFrom(const CGCMsgMemCachedDelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgMemCachedDelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedDelete::CopyFrom(const CGCMsgMemCachedDelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedDelete::IsInitialized() const {

  return true;
}

void CGCMsgMemCachedDelete::Swap(CGCMsgMemCachedDelete* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgMemCachedDelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgMemCachedDelete_descriptor_;
  metadata.reflection = CGCMsgMemCachedDelete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAMAddFreeLicense::kSteamidFieldNumber;
const int CMsgAMAddFreeLicense::kIpPublicFieldNumber;
const int CMsgAMAddFreeLicense::kPackageidFieldNumber;
const int CMsgAMAddFreeLicense::kStoreCountryCodeFieldNumber;
#endif  // !_MSC_VER

CMsgAMAddFreeLicense::CMsgAMAddFreeLicense()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMAddFreeLicense::InitAsDefaultInstance() {
}

CMsgAMAddFreeLicense::CMsgAMAddFreeLicense(const CMsgAMAddFreeLicense& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMAddFreeLicense::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  ip_public_ = 0u;
  packageid_ = 0u;
  store_country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMAddFreeLicense::~CMsgAMAddFreeLicense() {
  SharedDtor();
}

void CMsgAMAddFreeLicense::SharedDtor() {
  if (store_country_code_ != &::google::protobuf::internal::kEmptyString) {
    delete store_country_code_;
  }
  if (this != default_instance_) {
  }
}

void CMsgAMAddFreeLicense::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMAddFreeLicense::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMAddFreeLicense_descriptor_;
}

const CMsgAMAddFreeLicense& CMsgAMAddFreeLicense::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMAddFreeLicense* CMsgAMAddFreeLicense::default_instance_ = NULL;

CMsgAMAddFreeLicense* CMsgAMAddFreeLicense::New() const {
  return new CMsgAMAddFreeLicense;
}

void CMsgAMAddFreeLicense::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    ip_public_ = 0u;
    packageid_ = 0u;
    if (has_store_country_code()) {
      if (store_country_code_ != &::google::protobuf::internal::kEmptyString) {
        store_country_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMAddFreeLicense::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ip_public;
        break;
      }

      // optional uint32 ip_public = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip_public:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_public_)));
          set_has_ip_public();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_packageid;
        break;
      }

      // optional uint32 packageid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
          set_has_packageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_store_country_code;
        break;
      }

      // optional string store_country_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->store_country_code().data(), this->store_country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMAddFreeLicense::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 ip_public = 2;
  if (has_ip_public()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip_public(), output);
  }

  // optional uint32 packageid = 3;
  if (has_packageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->packageid(), output);
  }

  // optional string store_country_code = 4;
  if (has_store_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->store_country_code().data(), this->store_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->store_country_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMAddFreeLicense::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 ip_public = 2;
  if (has_ip_public()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ip_public(), target);
  }

  // optional uint32 packageid = 3;
  if (has_packageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->packageid(), target);
  }

  // optional string store_country_code = 4;
  if (has_store_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->store_country_code().data(), this->store_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->store_country_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMAddFreeLicense::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 ip_public = 2;
    if (has_ip_public()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip_public());
    }

    // optional uint32 packageid = 3;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // optional string store_country_code = 4;
    if (has_store_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->store_country_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMAddFreeLicense::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMAddFreeLicense* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMAddFreeLicense*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMAddFreeLicense::MergeFrom(const CMsgAMAddFreeLicense& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_ip_public()) {
      set_ip_public(from.ip_public());
    }
    if (from.has_packageid()) {
      set_packageid(from.packageid());
    }
    if (from.has_store_country_code()) {
      set_store_country_code(from.store_country_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMAddFreeLicense::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMAddFreeLicense::CopyFrom(const CMsgAMAddFreeLicense& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMAddFreeLicense::IsInitialized() const {

  return true;
}

void CMsgAMAddFreeLicense::Swap(CMsgAMAddFreeLicense* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(ip_public_, other->ip_public_);
    std::swap(packageid_, other->packageid_);
    std::swap(store_country_code_, other->store_country_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMAddFreeLicense::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMAddFreeLicense_descriptor_;
  metadata.reflection = CMsgAMAddFreeLicense_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAMAddFreeLicenseResponse::kEresultFieldNumber;
const int CMsgAMAddFreeLicenseResponse::kPurchaseResultDetailFieldNumber;
const int CMsgAMAddFreeLicenseResponse::kTransidFieldNumber;
#endif  // !_MSC_VER

CMsgAMAddFreeLicenseResponse::CMsgAMAddFreeLicenseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMAddFreeLicenseResponse::InitAsDefaultInstance() {
}

CMsgAMAddFreeLicenseResponse::CMsgAMAddFreeLicenseResponse(const CMsgAMAddFreeLicenseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMAddFreeLicenseResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  purchase_result_detail_ = 0;
  transid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMAddFreeLicenseResponse::~CMsgAMAddFreeLicenseResponse() {
  SharedDtor();
}

void CMsgAMAddFreeLicenseResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAMAddFreeLicenseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMAddFreeLicenseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMAddFreeLicenseResponse_descriptor_;
}

const CMsgAMAddFreeLicenseResponse& CMsgAMAddFreeLicenseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMAddFreeLicenseResponse* CMsgAMAddFreeLicenseResponse::default_instance_ = NULL;

CMsgAMAddFreeLicenseResponse* CMsgAMAddFreeLicenseResponse::New() const {
  return new CMsgAMAddFreeLicenseResponse;
}

void CMsgAMAddFreeLicenseResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    purchase_result_detail_ = 0;
    transid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMAddFreeLicenseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_purchase_result_detail;
        break;
      }

      // optional int32 purchase_result_detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purchase_result_detail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purchase_result_detail_)));
          set_has_purchase_result_detail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_transid;
        break;
      }

      // optional fixed64 transid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMAddFreeLicenseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 purchase_result_detail = 2;
  if (has_purchase_result_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->purchase_result_detail(), output);
  }

  // optional fixed64 transid = 3;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->transid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMAddFreeLicenseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 purchase_result_detail = 2;
  if (has_purchase_result_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->purchase_result_detail(), target);
  }

  // optional fixed64 transid = 3;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->transid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMAddFreeLicenseResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 purchase_result_detail = 2;
    if (has_purchase_result_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purchase_result_detail());
    }

    // optional fixed64 transid = 3;
    if (has_transid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMAddFreeLicenseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMAddFreeLicenseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMAddFreeLicenseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMAddFreeLicenseResponse::MergeFrom(const CMsgAMAddFreeLicenseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_purchase_result_detail()) {
      set_purchase_result_detail(from.purchase_result_detail());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMAddFreeLicenseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMAddFreeLicenseResponse::CopyFrom(const CMsgAMAddFreeLicenseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMAddFreeLicenseResponse::IsInitialized() const {

  return true;
}

void CMsgAMAddFreeLicenseResponse::Swap(CMsgAMAddFreeLicenseResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(purchase_result_detail_, other->purchase_result_detail_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMAddFreeLicenseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMAddFreeLicenseResponse_descriptor_;
  metadata.reflection = CMsgAMAddFreeLicenseResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCMsgGetIPLocation::kIpsFieldNumber;
#endif  // !_MSC_VER

CGCMsgGetIPLocation::CGCMsgGetIPLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgGetIPLocation::InitAsDefaultInstance() {
}

CGCMsgGetIPLocation::CGCMsgGetIPLocation(const CGCMsgGetIPLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgGetIPLocation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgGetIPLocation::~CGCMsgGetIPLocation() {
  SharedDtor();
}

void CGCMsgGetIPLocation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCMsgGetIPLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGetIPLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgGetIPLocation_descriptor_;
}

const CGCMsgGetIPLocation& CGCMsgGetIPLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CGCMsgGetIPLocation* CGCMsgGetIPLocation::default_instance_ = NULL;

CGCMsgGetIPLocation* CGCMsgGetIPLocation::New() const {
  return new CGCMsgGetIPLocation;
}

void CGCMsgGetIPLocation::Clear() {
  ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgGetIPLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 ips = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 13, input, this->mutable_ips())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ips())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_ips;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgGetIPLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed32 ips = 1;
  for (int i = 0; i < this->ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      1, this->ips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgGetIPLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed32 ips = 1;
  for (int i = 0; i < this->ips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(1, this->ips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgGetIPLocation::ByteSize() const {
  int total_size = 0;

  // repeated fixed32 ips = 1;
  {
    int data_size = 0;
    data_size = 4 * this->ips_size();
    total_size += 1 * this->ips_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGetIPLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgGetIPLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgGetIPLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgGetIPLocation::MergeFrom(const CGCMsgGetIPLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  ips_.MergeFrom(from.ips_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgGetIPLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetIPLocation::CopyFrom(const CGCMsgGetIPLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPLocation::IsInitialized() const {

  return true;
}

void CGCMsgGetIPLocation::Swap(CGCMsgGetIPLocation* other) {
  if (other != this) {
    ips_.Swap(&other->ips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgGetIPLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgGetIPLocation_descriptor_;
  metadata.reflection = CGCMsgGetIPLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CIPLocationInfo::kIpFieldNumber;
const int CIPLocationInfo::kLatitudeFieldNumber;
const int CIPLocationInfo::kLongitudeFieldNumber;
const int CIPLocationInfo::kCountryFieldNumber;
const int CIPLocationInfo::kStateFieldNumber;
const int CIPLocationInfo::kCityFieldNumber;
#endif  // !_MSC_VER

CIPLocationInfo::CIPLocationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CIPLocationInfo::InitAsDefaultInstance() {
}

CIPLocationInfo::CIPLocationInfo(const CIPLocationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CIPLocationInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  latitude_ = 0;
  longitude_ = 0;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CIPLocationInfo::~CIPLocationInfo() {
  SharedDtor();
}

void CIPLocationInfo::SharedDtor() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (this != default_instance_) {
  }
}

void CIPLocationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CIPLocationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CIPLocationInfo_descriptor_;
}

const CIPLocationInfo& CIPLocationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CIPLocationInfo* CIPLocationInfo::default_instance_ = NULL;

CIPLocationInfo* CIPLocationInfo::New() const {
  return new CIPLocationInfo;
}

void CIPLocationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0u;
    latitude_ = 0;
    longitude_ = 0;
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::kEmptyString) {
        state_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CIPLocationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_latitude;
        break;
      }

      // optional float latitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_longitude;
        break;
      }

      // optional float longitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_country;
        break;
      }

      // optional string country = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_state;
        break;
      }

      // optional string state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_city;
        break;
      }

      // optional string city = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CIPLocationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // optional float latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->latitude(), output);
  }

  // optional float longitude = 3;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->longitude(), output);
  }

  // optional string country = 4;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->country(), output);
  }

  // optional string state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->state(), output);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->city(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CIPLocationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // optional float latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->latitude(), target);
  }

  // optional float longitude = 3;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->longitude(), target);
  }

  // optional string country = 4;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->country(), target);
  }

  // optional string state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->state(), target);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->city(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CIPLocationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional float latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 3;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional string country = 4;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional string city = 6;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CIPLocationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CIPLocationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CIPLocationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CIPLocationInfo::MergeFrom(const CIPLocationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CIPLocationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CIPLocationInfo::CopyFrom(const CIPLocationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIPLocationInfo::IsInitialized() const {

  return true;
}

void CIPLocationInfo::Swap(CIPLocationInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(country_, other->country_);
    std::swap(state_, other->state_);
    std::swap(city_, other->city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CIPLocationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CIPLocationInfo_descriptor_;
  metadata.reflection = CIPLocationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCMsgGetIPLocationResponse::kInfosFieldNumber;
#endif  // !_MSC_VER

CGCMsgGetIPLocationResponse::CGCMsgGetIPLocationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgGetIPLocationResponse::InitAsDefaultInstance() {
}

CGCMsgGetIPLocationResponse::CGCMsgGetIPLocationResponse(const CGCMsgGetIPLocationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgGetIPLocationResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgGetIPLocationResponse::~CGCMsgGetIPLocationResponse() {
  SharedDtor();
}

void CGCMsgGetIPLocationResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCMsgGetIPLocationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGetIPLocationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgGetIPLocationResponse_descriptor_;
}

const CGCMsgGetIPLocationResponse& CGCMsgGetIPLocationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CGCMsgGetIPLocationResponse* CGCMsgGetIPLocationResponse::default_instance_ = NULL;

CGCMsgGetIPLocationResponse* CGCMsgGetIPLocationResponse::New() const {
  return new CGCMsgGetIPLocationResponse;
}

void CGCMsgGetIPLocationResponse::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgGetIPLocationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CIPLocationInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgGetIPLocationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CIPLocationInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgGetIPLocationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CIPLocationInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgGetIPLocationResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CIPLocationInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGetIPLocationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgGetIPLocationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgGetIPLocationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgGetIPLocationResponse::MergeFrom(const CGCMsgGetIPLocationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgGetIPLocationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetIPLocationResponse::CopyFrom(const CGCMsgGetIPLocationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPLocationResponse::IsInitialized() const {

  return true;
}

void CGCMsgGetIPLocationResponse::Swap(CGCMsgGetIPLocationResponse* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgGetIPLocationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgGetIPLocationResponse_descriptor_;
  metadata.reflection = CGCMsgGetIPLocationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCMsgSystemStatsSchema::kGcAppIdFieldNumber;
const int CGCMsgSystemStatsSchema::kSchemaKvFieldNumber;
#endif  // !_MSC_VER

CGCMsgSystemStatsSchema::CGCMsgSystemStatsSchema()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgSystemStatsSchema::InitAsDefaultInstance() {
}

CGCMsgSystemStatsSchema::CGCMsgSystemStatsSchema(const CGCMsgSystemStatsSchema& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgSystemStatsSchema::SharedCtor() {
  _cached_size_ = 0;
  gc_app_id_ = 0u;
  schema_kv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgSystemStatsSchema::~CGCMsgSystemStatsSchema() {
  SharedDtor();
}

void CGCMsgSystemStatsSchema::SharedDtor() {
  if (schema_kv_ != &::google::protobuf::internal::kEmptyString) {
    delete schema_kv_;
  }
  if (this != default_instance_) {
  }
}

void CGCMsgSystemStatsSchema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgSystemStatsSchema::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgSystemStatsSchema_descriptor_;
}

const CGCMsgSystemStatsSchema& CGCMsgSystemStatsSchema::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CGCMsgSystemStatsSchema* CGCMsgSystemStatsSchema::default_instance_ = NULL;

CGCMsgSystemStatsSchema* CGCMsgSystemStatsSchema::New() const {
  return new CGCMsgSystemStatsSchema;
}

void CGCMsgSystemStatsSchema::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gc_app_id_ = 0u;
    if (has_schema_kv()) {
      if (schema_kv_ != &::google::protobuf::internal::kEmptyString) {
        schema_kv_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgSystemStatsSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gc_app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gc_app_id_)));
          set_has_gc_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_schema_kv;
        break;
      }

      // optional bytes schema_kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schema_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schema_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgSystemStatsSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gc_app_id = 1;
  if (has_gc_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gc_app_id(), output);
  }

  // optional bytes schema_kv = 2;
  if (has_schema_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->schema_kv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgSystemStatsSchema::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gc_app_id = 1;
  if (has_gc_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gc_app_id(), target);
  }

  // optional bytes schema_kv = 2;
  if (has_schema_kv()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->schema_kv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgSystemStatsSchema::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gc_app_id = 1;
    if (has_gc_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gc_app_id());
    }

    // optional bytes schema_kv = 2;
    if (has_schema_kv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->schema_kv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgSystemStatsSchema::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgSystemStatsSchema* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgSystemStatsSchema*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgSystemStatsSchema::MergeFrom(const CGCMsgSystemStatsSchema& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gc_app_id()) {
      set_gc_app_id(from.gc_app_id());
    }
    if (from.has_schema_kv()) {
      set_schema_kv(from.schema_kv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgSystemStatsSchema::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgSystemStatsSchema::CopyFrom(const CGCMsgSystemStatsSchema& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgSystemStatsSchema::IsInitialized() const {

  return true;
}

void CGCMsgSystemStatsSchema::Swap(CGCMsgSystemStatsSchema* other) {
  if (other != this) {
    std::swap(gc_app_id_, other->gc_app_id_);
    std::swap(schema_kv_, other->schema_kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgSystemStatsSchema::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgSystemStatsSchema_descriptor_;
  metadata.reflection = CGCMsgSystemStatsSchema_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGCMsgGetSystemStats::CGCMsgGetSystemStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgGetSystemStats::InitAsDefaultInstance() {
}

CGCMsgGetSystemStats::CGCMsgGetSystemStats(const CGCMsgGetSystemStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgGetSystemStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgGetSystemStats::~CGCMsgGetSystemStats() {
  SharedDtor();
}

void CGCMsgGetSystemStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCMsgGetSystemStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGetSystemStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgGetSystemStats_descriptor_;
}

const CGCMsgGetSystemStats& CGCMsgGetSystemStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CGCMsgGetSystemStats* CGCMsgGetSystemStats::default_instance_ = NULL;

CGCMsgGetSystemStats* CGCMsgGetSystemStats::New() const {
  return new CGCMsgGetSystemStats;
}

void CGCMsgGetSystemStats::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgGetSystemStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CGCMsgGetSystemStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgGetSystemStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgGetSystemStats::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGetSystemStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgGetSystemStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgGetSystemStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgGetSystemStats::MergeFrom(const CGCMsgGetSystemStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgGetSystemStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetSystemStats::CopyFrom(const CGCMsgGetSystemStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetSystemStats::IsInitialized() const {

  return true;
}

void CGCMsgGetSystemStats::Swap(CGCMsgGetSystemStats* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgGetSystemStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgGetSystemStats_descriptor_;
  metadata.reflection = CGCMsgGetSystemStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCMsgGetSystemStatsResponse::kGcAppIdFieldNumber;
const int CGCMsgGetSystemStatsResponse::kStatsKvFieldNumber;
const int CGCMsgGetSystemStatsResponse::kActiveJobsFieldNumber;
const int CGCMsgGetSystemStatsResponse::kYieldingJobsFieldNumber;
const int CGCMsgGetSystemStatsResponse::kUserSessionsFieldNumber;
const int CGCMsgGetSystemStatsResponse::kGameServerSessionsFieldNumber;
const int CGCMsgGetSystemStatsResponse::kSocachesFieldNumber;
const int CGCMsgGetSystemStatsResponse::kSocachesToUnloadFieldNumber;
const int CGCMsgGetSystemStatsResponse::kSocachesLoadingFieldNumber;
const int CGCMsgGetSystemStatsResponse::kWritebackQueueFieldNumber;
const int CGCMsgGetSystemStatsResponse::kSteamidLocksFieldNumber;
const int CGCMsgGetSystemStatsResponse::kLogonQueueFieldNumber;
const int CGCMsgGetSystemStatsResponse::kLogonJobsFieldNumber;
#endif  // !_MSC_VER

CGCMsgGetSystemStatsResponse::CGCMsgGetSystemStatsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCMsgGetSystemStatsResponse::InitAsDefaultInstance() {
}

CGCMsgGetSystemStatsResponse::CGCMsgGetSystemStatsResponse(const CGCMsgGetSystemStatsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCMsgGetSystemStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  gc_app_id_ = 0u;
  stats_kv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  active_jobs_ = 0u;
  yielding_jobs_ = 0u;
  user_sessions_ = 0u;
  game_server_sessions_ = 0u;
  socaches_ = 0u;
  socaches_to_unload_ = 0u;
  socaches_loading_ = 0u;
  writeback_queue_ = 0u;
  steamid_locks_ = 0u;
  logon_queue_ = 0u;
  logon_jobs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCMsgGetSystemStatsResponse::~CGCMsgGetSystemStatsResponse() {
  SharedDtor();
}

void CGCMsgGetSystemStatsResponse::SharedDtor() {
  if (stats_kv_ != &::google::protobuf::internal::kEmptyString) {
    delete stats_kv_;
  }
  if (this != default_instance_) {
  }
}

void CGCMsgGetSystemStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGetSystemStatsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCMsgGetSystemStatsResponse_descriptor_;
}

const CGCMsgGetSystemStatsResponse& CGCMsgGetSystemStatsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CGCMsgGetSystemStatsResponse* CGCMsgGetSystemStatsResponse::default_instance_ = NULL;

CGCMsgGetSystemStatsResponse* CGCMsgGetSystemStatsResponse::New() const {
  return new CGCMsgGetSystemStatsResponse;
}

void CGCMsgGetSystemStatsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gc_app_id_ = 0u;
    if (has_stats_kv()) {
      if (stats_kv_ != &::google::protobuf::internal::kEmptyString) {
        stats_kv_->clear();
      }
    }
    active_jobs_ = 0u;
    yielding_jobs_ = 0u;
    user_sessions_ = 0u;
    game_server_sessions_ = 0u;
    socaches_ = 0u;
    socaches_to_unload_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    socaches_loading_ = 0u;
    writeback_queue_ = 0u;
    steamid_locks_ = 0u;
    logon_queue_ = 0u;
    logon_jobs_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCMsgGetSystemStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gc_app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gc_app_id_)));
          set_has_gc_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stats_kv;
        break;
      }

      // optional bytes stats_kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stats_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active_jobs;
        break;
      }

      // optional uint32 active_jobs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_jobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_jobs_)));
          set_has_active_jobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_yielding_jobs;
        break;
      }

      // optional uint32 yielding_jobs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yielding_jobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yielding_jobs_)));
          set_has_yielding_jobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_sessions;
        break;
      }

      // optional uint32 user_sessions = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_sessions_)));
          set_has_user_sessions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_game_server_sessions;
        break;
      }

      // optional uint32 game_server_sessions = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_sessions_)));
          set_has_game_server_sessions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_socaches;
        break;
      }

      // optional uint32 socaches = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_socaches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socaches_)));
          set_has_socaches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_socaches_to_unload;
        break;
      }

      // optional uint32 socaches_to_unload = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_socaches_to_unload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socaches_to_unload_)));
          set_has_socaches_to_unload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_socaches_loading;
        break;
      }

      // optional uint32 socaches_loading = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_socaches_loading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socaches_loading_)));
          set_has_socaches_loading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_writeback_queue;
        break;
      }

      // optional uint32 writeback_queue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writeback_queue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &writeback_queue_)));
          set_has_writeback_queue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_steamid_locks;
        break;
      }

      // optional uint32 steamid_locks = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamid_locks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamid_locks_)));
          set_has_steamid_locks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_logon_queue;
        break;
      }

      // optional uint32 logon_queue = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logon_queue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logon_queue_)));
          set_has_logon_queue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_logon_jobs;
        break;
      }

      // optional uint32 logon_jobs = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logon_jobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logon_jobs_)));
          set_has_logon_jobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCMsgGetSystemStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gc_app_id = 1;
  if (has_gc_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gc_app_id(), output);
  }

  // optional bytes stats_kv = 2;
  if (has_stats_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->stats_kv(), output);
  }

  // optional uint32 active_jobs = 3;
  if (has_active_jobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->active_jobs(), output);
  }

  // optional uint32 yielding_jobs = 4;
  if (has_yielding_jobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->yielding_jobs(), output);
  }

  // optional uint32 user_sessions = 5;
  if (has_user_sessions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->user_sessions(), output);
  }

  // optional uint32 game_server_sessions = 6;
  if (has_game_server_sessions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_server_sessions(), output);
  }

  // optional uint32 socaches = 7;
  if (has_socaches()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->socaches(), output);
  }

  // optional uint32 socaches_to_unload = 8;
  if (has_socaches_to_unload()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->socaches_to_unload(), output);
  }

  // optional uint32 socaches_loading = 9;
  if (has_socaches_loading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->socaches_loading(), output);
  }

  // optional uint32 writeback_queue = 10;
  if (has_writeback_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->writeback_queue(), output);
  }

  // optional uint32 steamid_locks = 11;
  if (has_steamid_locks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->steamid_locks(), output);
  }

  // optional uint32 logon_queue = 12;
  if (has_logon_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->logon_queue(), output);
  }

  // optional uint32 logon_jobs = 13;
  if (has_logon_jobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->logon_jobs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCMsgGetSystemStatsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gc_app_id = 1;
  if (has_gc_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gc_app_id(), target);
  }

  // optional bytes stats_kv = 2;
  if (has_stats_kv()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->stats_kv(), target);
  }

  // optional uint32 active_jobs = 3;
  if (has_active_jobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->active_jobs(), target);
  }

  // optional uint32 yielding_jobs = 4;
  if (has_yielding_jobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->yielding_jobs(), target);
  }

  // optional uint32 user_sessions = 5;
  if (has_user_sessions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->user_sessions(), target);
  }

  // optional uint32 game_server_sessions = 6;
  if (has_game_server_sessions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_server_sessions(), target);
  }

  // optional uint32 socaches = 7;
  if (has_socaches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->socaches(), target);
  }

  // optional uint32 socaches_to_unload = 8;
  if (has_socaches_to_unload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->socaches_to_unload(), target);
  }

  // optional uint32 socaches_loading = 9;
  if (has_socaches_loading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->socaches_loading(), target);
  }

  // optional uint32 writeback_queue = 10;
  if (has_writeback_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->writeback_queue(), target);
  }

  // optional uint32 steamid_locks = 11;
  if (has_steamid_locks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->steamid_locks(), target);
  }

  // optional uint32 logon_queue = 12;
  if (has_logon_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->logon_queue(), target);
  }

  // optional uint32 logon_jobs = 13;
  if (has_logon_jobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->logon_jobs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCMsgGetSystemStatsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gc_app_id = 1;
    if (has_gc_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gc_app_id());
    }

    // optional bytes stats_kv = 2;
    if (has_stats_kv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stats_kv());
    }

    // optional uint32 active_jobs = 3;
    if (has_active_jobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_jobs());
    }

    // optional uint32 yielding_jobs = 4;
    if (has_yielding_jobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yielding_jobs());
    }

    // optional uint32 user_sessions = 5;
    if (has_user_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_sessions());
    }

    // optional uint32 game_server_sessions = 6;
    if (has_game_server_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_sessions());
    }

    // optional uint32 socaches = 7;
    if (has_socaches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socaches());
    }

    // optional uint32 socaches_to_unload = 8;
    if (has_socaches_to_unload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socaches_to_unload());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 socaches_loading = 9;
    if (has_socaches_loading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socaches_loading());
    }

    // optional uint32 writeback_queue = 10;
    if (has_writeback_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->writeback_queue());
    }

    // optional uint32 steamid_locks = 11;
    if (has_steamid_locks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamid_locks());
    }

    // optional uint32 logon_queue = 12;
    if (has_logon_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logon_queue());
    }

    // optional uint32 logon_jobs = 13;
    if (has_logon_jobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logon_jobs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGetSystemStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCMsgGetSystemStatsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCMsgGetSystemStatsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCMsgGetSystemStatsResponse::MergeFrom(const CGCMsgGetSystemStatsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gc_app_id()) {
      set_gc_app_id(from.gc_app_id());
    }
    if (from.has_stats_kv()) {
      set_stats_kv(from.stats_kv());
    }
    if (from.has_active_jobs()) {
      set_active_jobs(from.active_jobs());
    }
    if (from.has_yielding_jobs()) {
      set_yielding_jobs(from.yielding_jobs());
    }
    if (from.has_user_sessions()) {
      set_user_sessions(from.user_sessions());
    }
    if (from.has_game_server_sessions()) {
      set_game_server_sessions(from.game_server_sessions());
    }
    if (from.has_socaches()) {
      set_socaches(from.socaches());
    }
    if (from.has_socaches_to_unload()) {
      set_socaches_to_unload(from.socaches_to_unload());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_socaches_loading()) {
      set_socaches_loading(from.socaches_loading());
    }
    if (from.has_writeback_queue()) {
      set_writeback_queue(from.writeback_queue());
    }
    if (from.has_steamid_locks()) {
      set_steamid_locks(from.steamid_locks());
    }
    if (from.has_logon_queue()) {
      set_logon_queue(from.logon_queue());
    }
    if (from.has_logon_jobs()) {
      set_logon_jobs(from.logon_jobs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCMsgGetSystemStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetSystemStatsResponse::CopyFrom(const CGCMsgGetSystemStatsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetSystemStatsResponse::IsInitialized() const {

  return true;
}

void CGCMsgGetSystemStatsResponse::Swap(CGCMsgGetSystemStatsResponse* other) {
  if (other != this) {
    std::swap(gc_app_id_, other->gc_app_id_);
    std::swap(stats_kv_, other->stats_kv_);
    std::swap(active_jobs_, other->active_jobs_);
    std::swap(yielding_jobs_, other->yielding_jobs_);
    std::swap(user_sessions_, other->user_sessions_);
    std::swap(game_server_sessions_, other->game_server_sessions_);
    std::swap(socaches_, other->socaches_);
    std::swap(socaches_to_unload_, other->socaches_to_unload_);
    std::swap(socaches_loading_, other->socaches_loading_);
    std::swap(writeback_queue_, other->writeback_queue_);
    std::swap(steamid_locks_, other->steamid_locks_);
    std::swap(logon_queue_, other->logon_queue_);
    std::swap(logon_jobs_, other->logon_jobs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCMsgGetSystemStatsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCMsgGetSystemStatsResponse_descriptor_;
  metadata.reflection = CGCMsgGetSystemStatsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAMSendEmail_ReplacementToken::kTokenNameFieldNumber;
const int CMsgAMSendEmail_ReplacementToken::kTokenValueFieldNumber;
#endif  // !_MSC_VER

CMsgAMSendEmail_ReplacementToken::CMsgAMSendEmail_ReplacementToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMSendEmail_ReplacementToken::InitAsDefaultInstance() {
}

CMsgAMSendEmail_ReplacementToken::CMsgAMSendEmail_ReplacementToken(const CMsgAMSendEmail_ReplacementToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMSendEmail_ReplacementToken::SharedCtor() {
  _cached_size_ = 0;
  token_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMSendEmail_ReplacementToken::~CMsgAMSendEmail_ReplacementToken() {
  SharedDtor();
}

void CMsgAMSendEmail_ReplacementToken::SharedDtor() {
  if (token_name_ != &::google::protobuf::internal::kEmptyString) {
    delete token_name_;
  }
  if (token_value_ != &::google::protobuf::internal::kEmptyString) {
    delete token_value_;
  }
  if (this != default_instance_) {
  }
}

void CMsgAMSendEmail_ReplacementToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMSendEmail_ReplacementToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMSendEmail_ReplacementToken_descriptor_;
}

const CMsgAMSendEmail_ReplacementToken& CMsgAMSendEmail_ReplacementToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMSendEmail_ReplacementToken* CMsgAMSendEmail_ReplacementToken::default_instance_ = NULL;

CMsgAMSendEmail_ReplacementToken* CMsgAMSendEmail_ReplacementToken::New() const {
  return new CMsgAMSendEmail_ReplacementToken;
}

void CMsgAMSendEmail_ReplacementToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token_name()) {
      if (token_name_ != &::google::protobuf::internal::kEmptyString) {
        token_name_->clear();
      }
    }
    if (has_token_value()) {
      if (token_value_ != &::google::protobuf::internal::kEmptyString) {
        token_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMSendEmail_ReplacementToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token_name().data(), this->token_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token_value;
        break;
      }

      // optional string token_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token_value().data(), this->token_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMSendEmail_ReplacementToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string token_name = 1;
  if (has_token_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token_name().data(), this->token_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token_name(), output);
  }

  // optional string token_value = 2;
  if (has_token_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token_value().data(), this->token_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMSendEmail_ReplacementToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string token_name = 1;
  if (has_token_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token_name().data(), this->token_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token_name(), target);
  }

  // optional string token_value = 2;
  if (has_token_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token_value().data(), this->token_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMSendEmail_ReplacementToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token_name = 1;
    if (has_token_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token_name());
    }

    // optional string token_value = 2;
    if (has_token_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMSendEmail_ReplacementToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMSendEmail_ReplacementToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMSendEmail_ReplacementToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMSendEmail_ReplacementToken::MergeFrom(const CMsgAMSendEmail_ReplacementToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token_name()) {
      set_token_name(from.token_name());
    }
    if (from.has_token_value()) {
      set_token_value(from.token_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMSendEmail_ReplacementToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMSendEmail_ReplacementToken::CopyFrom(const CMsgAMSendEmail_ReplacementToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmail_ReplacementToken::IsInitialized() const {

  return true;
}

void CMsgAMSendEmail_ReplacementToken::Swap(CMsgAMSendEmail_ReplacementToken* other) {
  if (other != this) {
    std::swap(token_name_, other->token_name_);
    std::swap(token_value_, other->token_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMSendEmail_ReplacementToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMSendEmail_ReplacementToken_descriptor_;
  metadata.reflection = CMsgAMSendEmail_ReplacementToken_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgAMSendEmail_PersonaNameReplacementToken::kSteamidFieldNumber;
const int CMsgAMSendEmail_PersonaNameReplacementToken::kTokenNameFieldNumber;
#endif  // !_MSC_VER

CMsgAMSendEmail_PersonaNameReplacementToken::CMsgAMSendEmail_PersonaNameReplacementToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMSendEmail_PersonaNameReplacementToken::InitAsDefaultInstance() {
}

CMsgAMSendEmail_PersonaNameReplacementToken::CMsgAMSendEmail_PersonaNameReplacementToken(const CMsgAMSendEmail_PersonaNameReplacementToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMSendEmail_PersonaNameReplacementToken::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  token_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMSendEmail_PersonaNameReplacementToken::~CMsgAMSendEmail_PersonaNameReplacementToken() {
  SharedDtor();
}

void CMsgAMSendEmail_PersonaNameReplacementToken::SharedDtor() {
  if (token_name_ != &::google::protobuf::internal::kEmptyString) {
    delete token_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgAMSendEmail_PersonaNameReplacementToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMSendEmail_PersonaNameReplacementToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMSendEmail_PersonaNameReplacementToken_descriptor_;
}

const CMsgAMSendEmail_PersonaNameReplacementToken& CMsgAMSendEmail_PersonaNameReplacementToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMSendEmail_PersonaNameReplacementToken* CMsgAMSendEmail_PersonaNameReplacementToken::default_instance_ = NULL;

CMsgAMSendEmail_PersonaNameReplacementToken* CMsgAMSendEmail_PersonaNameReplacementToken::New() const {
  return new CMsgAMSendEmail_PersonaNameReplacementToken;
}

void CMsgAMSendEmail_PersonaNameReplacementToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    if (has_token_name()) {
      if (token_name_ != &::google::protobuf::internal::kEmptyString) {
        token_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMSendEmail_PersonaNameReplacementToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token_name;
        break;
      }

      // optional string token_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token_name().data(), this->token_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMSendEmail_PersonaNameReplacementToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string token_name = 2;
  if (has_token_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token_name().data(), this->token_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMSendEmail_PersonaNameReplacementToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string token_name = 2;
  if (has_token_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token_name().data(), this->token_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMSendEmail_PersonaNameReplacementToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional string token_name = 2;
    if (has_token_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMSendEmail_PersonaNameReplacementToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMSendEmail_PersonaNameReplacementToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMSendEmail_PersonaNameReplacementToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMSendEmail_PersonaNameReplacementToken::MergeFrom(const CMsgAMSendEmail_PersonaNameReplacementToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_token_name()) {
      set_token_name(from.token_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMSendEmail_PersonaNameReplacementToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMSendEmail_PersonaNameReplacementToken::CopyFrom(const CMsgAMSendEmail_PersonaNameReplacementToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmail_PersonaNameReplacementToken::IsInitialized() const {

  return true;
}

void CMsgAMSendEmail_PersonaNameReplacementToken::Swap(CMsgAMSendEmail_PersonaNameReplacementToken* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(token_name_, other->token_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMSendEmail_PersonaNameReplacementToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMSendEmail_PersonaNameReplacementToken_descriptor_;
  metadata.reflection = CMsgAMSendEmail_PersonaNameReplacementToken_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgAMSendEmail::kSteamidFieldNumber;
const int CMsgAMSendEmail::kEmailMsgTypeFieldNumber;
const int CMsgAMSendEmail::kEmailFormatFieldNumber;
const int CMsgAMSendEmail::kPersonaNameTokensFieldNumber;
const int CMsgAMSendEmail::kSourceGcFieldNumber;
const int CMsgAMSendEmail::kTokensFieldNumber;
#endif  // !_MSC_VER

CMsgAMSendEmail::CMsgAMSendEmail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMSendEmail::InitAsDefaultInstance() {
}

CMsgAMSendEmail::CMsgAMSendEmail(const CMsgAMSendEmail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMSendEmail::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  email_msg_type_ = 0u;
  email_format_ = 0u;
  source_gc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMSendEmail::~CMsgAMSendEmail() {
  SharedDtor();
}

void CMsgAMSendEmail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAMSendEmail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMSendEmail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMSendEmail_descriptor_;
}

const CMsgAMSendEmail& CMsgAMSendEmail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMSendEmail* CMsgAMSendEmail::default_instance_ = NULL;

CMsgAMSendEmail* CMsgAMSendEmail::New() const {
  return new CMsgAMSendEmail;
}

void CMsgAMSendEmail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    email_msg_type_ = 0u;
    email_format_ = 0u;
    source_gc_ = 0u;
  }
  persona_name_tokens_.Clear();
  tokens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMSendEmail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_email_msg_type;
        break;
      }

      // optional uint32 email_msg_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_email_msg_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &email_msg_type_)));
          set_has_email_msg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_email_format;
        break;
      }

      // optional uint32 email_format = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_email_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &email_format_)));
          set_has_email_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_persona_name_tokens;
        break;
      }

      // repeated .CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persona_name_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_persona_name_tokens()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_persona_name_tokens;
        if (input->ExpectTag(48)) goto parse_source_gc;
        break;
      }

      // optional uint32 source_gc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_gc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_gc_)));
          set_has_source_gc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tokens;
        break;
      }

      // repeated .CMsgAMSendEmail.ReplacementToken tokens = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tokens()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tokens;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMSendEmail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 email_msg_type = 2;
  if (has_email_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->email_msg_type(), output);
  }

  // optional uint32 email_format = 3;
  if (has_email_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->email_format(), output);
  }

  // repeated .CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
  for (int i = 0; i < this->persona_name_tokens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->persona_name_tokens(i), output);
  }

  // optional uint32 source_gc = 6;
  if (has_source_gc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->source_gc(), output);
  }

  // repeated .CMsgAMSendEmail.ReplacementToken tokens = 7;
  for (int i = 0; i < this->tokens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tokens(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMSendEmail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 email_msg_type = 2;
  if (has_email_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->email_msg_type(), target);
  }

  // optional uint32 email_format = 3;
  if (has_email_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->email_format(), target);
  }

  // repeated .CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
  for (int i = 0; i < this->persona_name_tokens_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->persona_name_tokens(i), target);
  }

  // optional uint32 source_gc = 6;
  if (has_source_gc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->source_gc(), target);
  }

  // repeated .CMsgAMSendEmail.ReplacementToken tokens = 7;
  for (int i = 0; i < this->tokens_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tokens(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMSendEmail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 email_msg_type = 2;
    if (has_email_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->email_msg_type());
    }

    // optional uint32 email_format = 3;
    if (has_email_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->email_format());
    }

    // optional uint32 source_gc = 6;
    if (has_source_gc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_gc());
    }

  }
  // repeated .CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
  total_size += 1 * this->persona_name_tokens_size();
  for (int i = 0; i < this->persona_name_tokens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->persona_name_tokens(i));
  }

  // repeated .CMsgAMSendEmail.ReplacementToken tokens = 7;
  total_size += 1 * this->tokens_size();
  for (int i = 0; i < this->tokens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tokens(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMSendEmail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMSendEmail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMSendEmail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMSendEmail::MergeFrom(const CMsgAMSendEmail& from) {
  GOOGLE_CHECK_NE(&from, this);
  persona_name_tokens_.MergeFrom(from.persona_name_tokens_);
  tokens_.MergeFrom(from.tokens_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_email_msg_type()) {
      set_email_msg_type(from.email_msg_type());
    }
    if (from.has_email_format()) {
      set_email_format(from.email_format());
    }
    if (from.has_source_gc()) {
      set_source_gc(from.source_gc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMSendEmail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMSendEmail::CopyFrom(const CMsgAMSendEmail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmail::IsInitialized() const {

  return true;
}

void CMsgAMSendEmail::Swap(CMsgAMSendEmail* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(email_msg_type_, other->email_msg_type_);
    std::swap(email_format_, other->email_format_);
    persona_name_tokens_.Swap(&other->persona_name_tokens_);
    std::swap(source_gc_, other->source_gc_);
    tokens_.Swap(&other->tokens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMSendEmail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMSendEmail_descriptor_;
  metadata.reflection = CMsgAMSendEmail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAMSendEmailResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgAMSendEmailResponse::CMsgAMSendEmailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMSendEmailResponse::InitAsDefaultInstance() {
}

CMsgAMSendEmailResponse::CMsgAMSendEmailResponse(const CMsgAMSendEmailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMSendEmailResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMSendEmailResponse::~CMsgAMSendEmailResponse() {
  SharedDtor();
}

void CMsgAMSendEmailResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAMSendEmailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMSendEmailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMSendEmailResponse_descriptor_;
}

const CMsgAMSendEmailResponse& CMsgAMSendEmailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMSendEmailResponse* CMsgAMSendEmailResponse::default_instance_ = NULL;

CMsgAMSendEmailResponse* CMsgAMSendEmailResponse::New() const {
  return new CMsgAMSendEmailResponse;
}

void CMsgAMSendEmailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMSendEmailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMSendEmailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMSendEmailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMSendEmailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMSendEmailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMSendEmailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMSendEmailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMSendEmailResponse::MergeFrom(const CMsgAMSendEmailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMSendEmailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMSendEmailResponse::CopyFrom(const CMsgAMSendEmailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmailResponse::IsInitialized() const {

  return true;
}

void CMsgAMSendEmailResponse::Swap(CMsgAMSendEmailResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMSendEmailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMSendEmailResponse_descriptor_;
  metadata.reflection = CMsgAMSendEmailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCGetEmailTemplate::kAppIdFieldNumber;
const int CMsgGCGetEmailTemplate::kEmailMsgTypeFieldNumber;
const int CMsgGCGetEmailTemplate::kEmailLangFieldNumber;
const int CMsgGCGetEmailTemplate::kEmailFormatFieldNumber;
#endif  // !_MSC_VER

CMsgGCGetEmailTemplate::CMsgGCGetEmailTemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCGetEmailTemplate::InitAsDefaultInstance() {
}

CMsgGCGetEmailTemplate::CMsgGCGetEmailTemplate(const CMsgGCGetEmailTemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCGetEmailTemplate::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  email_msg_type_ = 0u;
  email_lang_ = 0;
  email_format_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCGetEmailTemplate::~CMsgGCGetEmailTemplate() {
  SharedDtor();
}

void CMsgGCGetEmailTemplate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCGetEmailTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetEmailTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCGetEmailTemplate_descriptor_;
}

const CMsgGCGetEmailTemplate& CMsgGCGetEmailTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgGCGetEmailTemplate* CMsgGCGetEmailTemplate::default_instance_ = NULL;

CMsgGCGetEmailTemplate* CMsgGCGetEmailTemplate::New() const {
  return new CMsgGCGetEmailTemplate;
}

void CMsgGCGetEmailTemplate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    email_msg_type_ = 0u;
    email_lang_ = 0;
    email_format_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCGetEmailTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_email_msg_type;
        break;
      }

      // optional uint32 email_msg_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_email_msg_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &email_msg_type_)));
          set_has_email_msg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_email_lang;
        break;
      }

      // optional int32 email_lang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_email_lang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &email_lang_)));
          set_has_email_lang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_email_format;
        break;
      }

      // optional int32 email_format = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_email_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &email_format_)));
          set_has_email_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCGetEmailTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 email_msg_type = 2;
  if (has_email_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->email_msg_type(), output);
  }

  // optional int32 email_lang = 3;
  if (has_email_lang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->email_lang(), output);
  }

  // optional int32 email_format = 4;
  if (has_email_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->email_format(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCGetEmailTemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 email_msg_type = 2;
  if (has_email_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->email_msg_type(), target);
  }

  // optional int32 email_lang = 3;
  if (has_email_lang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->email_lang(), target);
  }

  // optional int32 email_format = 4;
  if (has_email_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->email_format(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCGetEmailTemplate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 email_msg_type = 2;
    if (has_email_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->email_msg_type());
    }

    // optional int32 email_lang = 3;
    if (has_email_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->email_lang());
    }

    // optional int32 email_format = 4;
    if (has_email_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->email_format());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetEmailTemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCGetEmailTemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCGetEmailTemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCGetEmailTemplate::MergeFrom(const CMsgGCGetEmailTemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_email_msg_type()) {
      set_email_msg_type(from.email_msg_type());
    }
    if (from.has_email_lang()) {
      set_email_lang(from.email_lang());
    }
    if (from.has_email_format()) {
      set_email_format(from.email_format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCGetEmailTemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetEmailTemplate::CopyFrom(const CMsgGCGetEmailTemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetEmailTemplate::IsInitialized() const {

  return true;
}

void CMsgGCGetEmailTemplate::Swap(CMsgGCGetEmailTemplate* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(email_msg_type_, other->email_msg_type_);
    std::swap(email_lang_, other->email_lang_);
    std::swap(email_format_, other->email_format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCGetEmailTemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCGetEmailTemplate_descriptor_;
  metadata.reflection = CMsgGCGetEmailTemplate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCGetEmailTemplateResponse::kEresultFieldNumber;
const int CMsgGCGetEmailTemplateResponse::kTemplateExistsFieldNumber;
const int CMsgGCGetEmailTemplateResponse::kTemplateFieldNumber;
#endif  // !_MSC_VER

CMsgGCGetEmailTemplateResponse::CMsgGCGetEmailTemplateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCGetEmailTemplateResponse::InitAsDefaultInstance() {
}

CMsgGCGetEmailTemplateResponse::CMsgGCGetEmailTemplateResponse(const CMsgGCGetEmailTemplateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCGetEmailTemplateResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  template_exists_ = false;
  template__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCGetEmailTemplateResponse::~CMsgGCGetEmailTemplateResponse() {
  SharedDtor();
}

void CMsgGCGetEmailTemplateResponse::SharedDtor() {
  if (template__ != &::google::protobuf::internal::kEmptyString) {
    delete template__;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCGetEmailTemplateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetEmailTemplateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCGetEmailTemplateResponse_descriptor_;
}

const CMsgGCGetEmailTemplateResponse& CMsgGCGetEmailTemplateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgGCGetEmailTemplateResponse* CMsgGCGetEmailTemplateResponse::default_instance_ = NULL;

CMsgGCGetEmailTemplateResponse* CMsgGCGetEmailTemplateResponse::New() const {
  return new CMsgGCGetEmailTemplateResponse;
}

void CMsgGCGetEmailTemplateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    template_exists_ = false;
    if (has_template_()) {
      if (template__ != &::google::protobuf::internal::kEmptyString) {
        template__->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCGetEmailTemplateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_exists;
        break;
      }

      // optional bool template_exists = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_exists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &template_exists_)));
          set_has_template_exists();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_template;
        break;
      }

      // optional string template = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->template_().data(), this->template_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCGetEmailTemplateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional bool template_exists = 2;
  if (has_template_exists()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->template_exists(), output);
  }

  // optional string template = 3;
  if (has_template_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->template_().data(), this->template_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->template_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCGetEmailTemplateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional bool template_exists = 2;
  if (has_template_exists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->template_exists(), target);
  }

  // optional string template = 3;
  if (has_template_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->template_().data(), this->template_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->template_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCGetEmailTemplateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional bool template_exists = 2;
    if (has_template_exists()) {
      total_size += 1 + 1;
    }

    // optional string template = 3;
    if (has_template_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetEmailTemplateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCGetEmailTemplateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCGetEmailTemplateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCGetEmailTemplateResponse::MergeFrom(const CMsgGCGetEmailTemplateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_template_exists()) {
      set_template_exists(from.template_exists());
    }
    if (from.has_template_()) {
      set_template_(from.template_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCGetEmailTemplateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetEmailTemplateResponse::CopyFrom(const CMsgGCGetEmailTemplateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetEmailTemplateResponse::IsInitialized() const {

  return true;
}

void CMsgGCGetEmailTemplateResponse::Swap(CMsgGCGetEmailTemplateResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(template_exists_, other->template_exists_);
    std::swap(template__, other->template__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCGetEmailTemplateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCGetEmailTemplateResponse_descriptor_;
  metadata.reflection = CMsgGCGetEmailTemplateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAMGrantGuestPasses2::kSteamIdFieldNumber;
const int CMsgAMGrantGuestPasses2::kPackageIdFieldNumber;
const int CMsgAMGrantGuestPasses2::kPassesToGrantFieldNumber;
const int CMsgAMGrantGuestPasses2::kDaysToExpirationFieldNumber;
const int CMsgAMGrantGuestPasses2::kActionFieldNumber;
#endif  // !_MSC_VER

CMsgAMGrantGuestPasses2::CMsgAMGrantGuestPasses2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMGrantGuestPasses2::InitAsDefaultInstance() {
}

CMsgAMGrantGuestPasses2::CMsgAMGrantGuestPasses2(const CMsgAMGrantGuestPasses2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMGrantGuestPasses2::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  package_id_ = 0u;
  passes_to_grant_ = 0;
  days_to_expiration_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMGrantGuestPasses2::~CMsgAMGrantGuestPasses2() {
  SharedDtor();
}

void CMsgAMGrantGuestPasses2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAMGrantGuestPasses2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGrantGuestPasses2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMGrantGuestPasses2_descriptor_;
}

const CMsgAMGrantGuestPasses2& CMsgAMGrantGuestPasses2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMGrantGuestPasses2* CMsgAMGrantGuestPasses2::default_instance_ = NULL;

CMsgAMGrantGuestPasses2* CMsgAMGrantGuestPasses2::New() const {
  return new CMsgAMGrantGuestPasses2;
}

void CMsgAMGrantGuestPasses2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    package_id_ = 0u;
    passes_to_grant_ = 0;
    days_to_expiration_ = 0;
    action_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMGrantGuestPasses2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_package_id;
        break;
      }

      // optional uint32 package_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_passes_to_grant;
        break;
      }

      // optional int32 passes_to_grant = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passes_to_grant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passes_to_grant_)));
          set_has_passes_to_grant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_days_to_expiration;
        break;
      }

      // optional int32 days_to_expiration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_days_to_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_to_expiration_)));
          set_has_days_to_expiration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_action;
        break;
      }

      // optional int32 action = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMGrantGuestPasses2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 package_id = 2;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->package_id(), output);
  }

  // optional int32 passes_to_grant = 3;
  if (has_passes_to_grant()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->passes_to_grant(), output);
  }

  // optional int32 days_to_expiration = 4;
  if (has_days_to_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->days_to_expiration(), output);
  }

  // optional int32 action = 5;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMGrantGuestPasses2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 package_id = 2;
  if (has_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->package_id(), target);
  }

  // optional int32 passes_to_grant = 3;
  if (has_passes_to_grant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->passes_to_grant(), target);
  }

  // optional int32 days_to_expiration = 4;
  if (has_days_to_expiration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->days_to_expiration(), target);
  }

  // optional int32 action = 5;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMGrantGuestPasses2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 package_id = 2;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional int32 passes_to_grant = 3;
    if (has_passes_to_grant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passes_to_grant());
    }

    // optional int32 days_to_expiration = 4;
    if (has_days_to_expiration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->days_to_expiration());
    }

    // optional int32 action = 5;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGrantGuestPasses2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMGrantGuestPasses2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMGrantGuestPasses2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMGrantGuestPasses2::MergeFrom(const CMsgAMGrantGuestPasses2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_passes_to_grant()) {
      set_passes_to_grant(from.passes_to_grant());
    }
    if (from.has_days_to_expiration()) {
      set_days_to_expiration(from.days_to_expiration());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMGrantGuestPasses2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGrantGuestPasses2::CopyFrom(const CMsgAMGrantGuestPasses2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGrantGuestPasses2::IsInitialized() const {

  return true;
}

void CMsgAMGrantGuestPasses2::Swap(CMsgAMGrantGuestPasses2* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(package_id_, other->package_id_);
    std::swap(passes_to_grant_, other->passes_to_grant_);
    std::swap(days_to_expiration_, other->days_to_expiration_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMGrantGuestPasses2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMGrantGuestPasses2_descriptor_;
  metadata.reflection = CMsgAMGrantGuestPasses2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAMGrantGuestPasses2Response::kEresultFieldNumber;
const int CMsgAMGrantGuestPasses2Response::kPassesGrantedFieldNumber;
#endif  // !_MSC_VER

CMsgAMGrantGuestPasses2Response::CMsgAMGrantGuestPasses2Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMGrantGuestPasses2Response::InitAsDefaultInstance() {
}

CMsgAMGrantGuestPasses2Response::CMsgAMGrantGuestPasses2Response(const CMsgAMGrantGuestPasses2Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMGrantGuestPasses2Response::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  passes_granted_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMGrantGuestPasses2Response::~CMsgAMGrantGuestPasses2Response() {
  SharedDtor();
}

void CMsgAMGrantGuestPasses2Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAMGrantGuestPasses2Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGrantGuestPasses2Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMGrantGuestPasses2Response_descriptor_;
}

const CMsgAMGrantGuestPasses2Response& CMsgAMGrantGuestPasses2Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgAMGrantGuestPasses2Response* CMsgAMGrantGuestPasses2Response::default_instance_ = NULL;

CMsgAMGrantGuestPasses2Response* CMsgAMGrantGuestPasses2Response::New() const {
  return new CMsgAMGrantGuestPasses2Response;
}

void CMsgAMGrantGuestPasses2Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    passes_granted_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMGrantGuestPasses2Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_passes_granted;
        break;
      }

      // optional int32 passes_granted = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passes_granted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passes_granted_)));
          set_has_passes_granted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMGrantGuestPasses2Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 passes_granted = 2 [default = 0];
  if (has_passes_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->passes_granted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMGrantGuestPasses2Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 passes_granted = 2 [default = 0];
  if (has_passes_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->passes_granted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMGrantGuestPasses2Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 passes_granted = 2 [default = 0];
    if (has_passes_granted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passes_granted());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGrantGuestPasses2Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMGrantGuestPasses2Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMGrantGuestPasses2Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMGrantGuestPasses2Response::MergeFrom(const CMsgAMGrantGuestPasses2Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_passes_granted()) {
      set_passes_granted(from.passes_granted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMGrantGuestPasses2Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGrantGuestPasses2Response::CopyFrom(const CMsgAMGrantGuestPasses2Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGrantGuestPasses2Response::IsInitialized() const {

  return true;
}

void CMsgAMGrantGuestPasses2Response::Swap(CMsgAMGrantGuestPasses2Response* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(passes_granted_, other->passes_granted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMGrantGuestPasses2Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMGrantGuestPasses2Response_descriptor_;
  metadata.reflection = CMsgAMGrantGuestPasses2Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCSystemMsg_GetAccountDetails::kSteamidFieldNumber;
const int CGCSystemMsg_GetAccountDetails::kAppidFieldNumber;
#endif  // !_MSC_VER

CGCSystemMsg_GetAccountDetails::CGCSystemMsg_GetAccountDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCSystemMsg_GetAccountDetails::InitAsDefaultInstance() {
}

CGCSystemMsg_GetAccountDetails::CGCSystemMsg_GetAccountDetails(const CGCSystemMsg_GetAccountDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCSystemMsg_GetAccountDetails::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCSystemMsg_GetAccountDetails::~CGCSystemMsg_GetAccountDetails() {
  SharedDtor();
}

void CGCSystemMsg_GetAccountDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCSystemMsg_GetAccountDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCSystemMsg_GetAccountDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCSystemMsg_GetAccountDetails_descriptor_;
}

const CGCSystemMsg_GetAccountDetails& CGCSystemMsg_GetAccountDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CGCSystemMsg_GetAccountDetails* CGCSystemMsg_GetAccountDetails::default_instance_ = NULL;

CGCSystemMsg_GetAccountDetails* CGCSystemMsg_GetAccountDetails::New() const {
  return new CGCSystemMsg_GetAccountDetails;
}

void CGCSystemMsg_GetAccountDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    appid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCSystemMsg_GetAccountDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCSystemMsg_GetAccountDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCSystemMsg_GetAccountDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCSystemMsg_GetAccountDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCSystemMsg_GetAccountDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCSystemMsg_GetAccountDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCSystemMsg_GetAccountDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCSystemMsg_GetAccountDetails::MergeFrom(const CGCSystemMsg_GetAccountDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCSystemMsg_GetAccountDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCSystemMsg_GetAccountDetails::CopyFrom(const CGCSystemMsg_GetAccountDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetAccountDetails::IsInitialized() const {

  return true;
}

void CGCSystemMsg_GetAccountDetails::Swap(CGCSystemMsg_GetAccountDetails* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCSystemMsg_GetAccountDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCSystemMsg_GetAccountDetails_descriptor_;
  metadata.reflection = CGCSystemMsg_GetAccountDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCSystemMsg_GetAccountDetails_Response::kEresultDeprecatedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kAccountNameFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kPersonaNameFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsProfilePublicFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsInventoryPublicFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsTrustedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsVacBannedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsCyberCafeFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsSchoolAccountFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsLimitedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsSubscribedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kPackageFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsFreeTrialAccountFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kFreeTrialExpirationFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsLowViolenceFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsAccountLockedDownFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsCommunityBannedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsTradeBannedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kTradeBanExpirationFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kAccountidFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kEligibleForCommunityMarketFieldNumber;
#endif  // !_MSC_VER

CGCSystemMsg_GetAccountDetails_Response::CGCSystemMsg_GetAccountDetails_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCSystemMsg_GetAccountDetails_Response::InitAsDefaultInstance() {
}

CGCSystemMsg_GetAccountDetails_Response::CGCSystemMsg_GetAccountDetails_Response(const CGCSystemMsg_GetAccountDetails_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCSystemMsg_GetAccountDetails_Response::SharedCtor() {
  _cached_size_ = 0;
  eresult_deprecated_ = 2u;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_profile_public_ = false;
  is_inventory_public_ = false;
  is_trusted_ = false;
  is_vac_banned_ = false;
  is_cyber_cafe_ = false;
  is_school_account_ = false;
  is_limited_ = false;
  is_subscribed_ = false;
  package_ = 0u;
  is_free_trial_account_ = false;
  free_trial_expiration_ = 0u;
  is_low_violence_ = false;
  is_account_locked_down_ = false;
  is_community_banned_ = false;
  is_trade_banned_ = false;
  trade_ban_expiration_ = 0u;
  accountid_ = 0u;
  eligible_for_community_market_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCSystemMsg_GetAccountDetails_Response::~CGCSystemMsg_GetAccountDetails_Response() {
  SharedDtor();
}

void CGCSystemMsg_GetAccountDetails_Response::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
    delete persona_name_;
  }
  if (this != default_instance_) {
  }
}

void CGCSystemMsg_GetAccountDetails_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCSystemMsg_GetAccountDetails_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCSystemMsg_GetAccountDetails_Response_descriptor_;
}

const CGCSystemMsg_GetAccountDetails_Response& CGCSystemMsg_GetAccountDetails_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CGCSystemMsg_GetAccountDetails_Response* CGCSystemMsg_GetAccountDetails_Response::default_instance_ = NULL;

CGCSystemMsg_GetAccountDetails_Response* CGCSystemMsg_GetAccountDetails_Response::New() const {
  return new CGCSystemMsg_GetAccountDetails_Response;
}

void CGCSystemMsg_GetAccountDetails_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_deprecated_ = 2u;
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    if (has_persona_name()) {
      if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
        persona_name_->clear();
      }
    }
    is_profile_public_ = false;
    is_inventory_public_ = false;
    is_trusted_ = false;
    is_vac_banned_ = false;
    is_cyber_cafe_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_school_account_ = false;
    is_limited_ = false;
    is_subscribed_ = false;
    package_ = 0u;
    is_free_trial_account_ = false;
    free_trial_expiration_ = 0u;
    is_low_violence_ = false;
    is_account_locked_down_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    is_community_banned_ = false;
    is_trade_banned_ = false;
    trade_ban_expiration_ = 0u;
    accountid_ = 0u;
    eligible_for_community_market_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCSystemMsg_GetAccountDetails_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult_deprecated = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_deprecated_)));
          set_has_eresult_deprecated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_name;
        break;
      }

      // optional string account_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_persona_name;
        break;
      }

      // optional string persona_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persona_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_profile_public;
        break;
      }

      // optional bool is_profile_public = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_profile_public:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_profile_public_)));
          set_has_is_profile_public();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_inventory_public;
        break;
      }

      // optional bool is_inventory_public = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_inventory_public:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inventory_public_)));
          set_has_is_inventory_public();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_trusted;
        break;
      }

      // optional bool is_trusted = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_trusted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trusted_)));
          set_has_is_trusted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_vac_banned;
        break;
      }

      // optional bool is_vac_banned = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_vac_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vac_banned_)));
          set_has_is_vac_banned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_cyber_cafe;
        break;
      }

      // optional bool is_cyber_cafe = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_cyber_cafe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_cyber_cafe_)));
          set_has_is_cyber_cafe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_school_account;
        break;
      }

      // optional bool is_school_account = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_school_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_school_account_)));
          set_has_is_school_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_limited;
        break;
      }

      // optional bool is_limited = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_limited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_limited_)));
          set_has_is_limited();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_subscribed;
        break;
      }

      // optional bool is_subscribed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_subscribed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_subscribed_)));
          set_has_is_subscribed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_package;
        break;
      }

      // optional uint32 package = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_)));
          set_has_package();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_free_trial_account;
        break;
      }

      // optional bool is_free_trial_account = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_free_trial_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_free_trial_account_)));
          set_has_is_free_trial_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_free_trial_expiration;
        break;
      }

      // optional uint32 free_trial_expiration = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_trial_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_trial_expiration_)));
          set_has_free_trial_expiration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_is_low_violence;
        break;
      }

      // optional bool is_low_violence = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_low_violence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_low_violence_)));
          set_has_is_low_violence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_is_account_locked_down;
        break;
      }

      // optional bool is_account_locked_down = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_account_locked_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_account_locked_down_)));
          set_has_is_account_locked_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_is_community_banned;
        break;
      }

      // optional bool is_community_banned = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_community_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_community_banned_)));
          set_has_is_community_banned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_is_trade_banned;
        break;
      }

      // optional bool is_trade_banned = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_trade_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trade_banned_)));
          set_has_is_trade_banned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_trade_ban_expiration;
        break;
      }

      // optional uint32 trade_ban_expiration = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trade_ban_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_ban_expiration_)));
          set_has_trade_ban_expiration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_accountid;
        break;
      }

      // optional uint32 accountid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_eligible_for_community_market;
        break;
      }

      // optional bool eligible_for_community_market = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eligible_for_community_market:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eligible_for_community_market_)));
          set_has_eligible_for_community_market();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCSystemMsg_GetAccountDetails_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult_deprecated = 1 [default = 2];
  if (has_eresult_deprecated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult_deprecated(), output);
  }

  // optional string account_name = 2;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account_name(), output);
  }

  // optional string persona_name = 3;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->persona_name(), output);
  }

  // optional bool is_profile_public = 4;
  if (has_is_profile_public()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_profile_public(), output);
  }

  // optional bool is_inventory_public = 5;
  if (has_is_inventory_public()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_inventory_public(), output);
  }

  // optional bool is_trusted = 6;
  if (has_is_trusted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_trusted(), output);
  }

  // optional bool is_vac_banned = 7;
  if (has_is_vac_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_vac_banned(), output);
  }

  // optional bool is_cyber_cafe = 8;
  if (has_is_cyber_cafe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_cyber_cafe(), output);
  }

  // optional bool is_school_account = 9;
  if (has_is_school_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_school_account(), output);
  }

  // optional bool is_limited = 10;
  if (has_is_limited()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_limited(), output);
  }

  // optional bool is_subscribed = 11;
  if (has_is_subscribed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_subscribed(), output);
  }

  // optional uint32 package = 12;
  if (has_package()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->package(), output);
  }

  // optional bool is_free_trial_account = 13;
  if (has_is_free_trial_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_free_trial_account(), output);
  }

  // optional uint32 free_trial_expiration = 14;
  if (has_free_trial_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->free_trial_expiration(), output);
  }

  // optional bool is_low_violence = 15;
  if (has_is_low_violence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_low_violence(), output);
  }

  // optional bool is_account_locked_down = 16;
  if (has_is_account_locked_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_account_locked_down(), output);
  }

  // optional bool is_community_banned = 17;
  if (has_is_community_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_community_banned(), output);
  }

  // optional bool is_trade_banned = 18;
  if (has_is_trade_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_trade_banned(), output);
  }

  // optional uint32 trade_ban_expiration = 19;
  if (has_trade_ban_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->trade_ban_expiration(), output);
  }

  // optional uint32 accountid = 20;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->accountid(), output);
  }

  // optional bool eligible_for_community_market = 21;
  if (has_eligible_for_community_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->eligible_for_community_market(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCSystemMsg_GetAccountDetails_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult_deprecated = 1 [default = 2];
  if (has_eresult_deprecated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult_deprecated(), target);
  }

  // optional string account_name = 2;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account_name(), target);
  }

  // optional string persona_name = 3;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->persona_name(), target);
  }

  // optional bool is_profile_public = 4;
  if (has_is_profile_public()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_profile_public(), target);
  }

  // optional bool is_inventory_public = 5;
  if (has_is_inventory_public()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_inventory_public(), target);
  }

  // optional bool is_trusted = 6;
  if (has_is_trusted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_trusted(), target);
  }

  // optional bool is_vac_banned = 7;
  if (has_is_vac_banned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_vac_banned(), target);
  }

  // optional bool is_cyber_cafe = 8;
  if (has_is_cyber_cafe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_cyber_cafe(), target);
  }

  // optional bool is_school_account = 9;
  if (has_is_school_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_school_account(), target);
  }

  // optional bool is_limited = 10;
  if (has_is_limited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_limited(), target);
  }

  // optional bool is_subscribed = 11;
  if (has_is_subscribed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_subscribed(), target);
  }

  // optional uint32 package = 12;
  if (has_package()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->package(), target);
  }

  // optional bool is_free_trial_account = 13;
  if (has_is_free_trial_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_free_trial_account(), target);
  }

  // optional uint32 free_trial_expiration = 14;
  if (has_free_trial_expiration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->free_trial_expiration(), target);
  }

  // optional bool is_low_violence = 15;
  if (has_is_low_violence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_low_violence(), target);
  }

  // optional bool is_account_locked_down = 16;
  if (has_is_account_locked_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_account_locked_down(), target);
  }

  // optional bool is_community_banned = 17;
  if (has_is_community_banned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_community_banned(), target);
  }

  // optional bool is_trade_banned = 18;
  if (has_is_trade_banned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_trade_banned(), target);
  }

  // optional uint32 trade_ban_expiration = 19;
  if (has_trade_ban_expiration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->trade_ban_expiration(), target);
  }

  // optional uint32 accountid = 20;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->accountid(), target);
  }

  // optional bool eligible_for_community_market = 21;
  if (has_eligible_for_community_market()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->eligible_for_community_market(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCSystemMsg_GetAccountDetails_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult_deprecated = 1 [default = 2];
    if (has_eresult_deprecated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult_deprecated());
    }

    // optional string account_name = 2;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string persona_name = 3;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional bool is_profile_public = 4;
    if (has_is_profile_public()) {
      total_size += 1 + 1;
    }

    // optional bool is_inventory_public = 5;
    if (has_is_inventory_public()) {
      total_size += 1 + 1;
    }

    // optional bool is_trusted = 6;
    if (has_is_trusted()) {
      total_size += 1 + 1;
    }

    // optional bool is_vac_banned = 7;
    if (has_is_vac_banned()) {
      total_size += 1 + 1;
    }

    // optional bool is_cyber_cafe = 8;
    if (has_is_cyber_cafe()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_school_account = 9;
    if (has_is_school_account()) {
      total_size += 1 + 1;
    }

    // optional bool is_limited = 10;
    if (has_is_limited()) {
      total_size += 1 + 1;
    }

    // optional bool is_subscribed = 11;
    if (has_is_subscribed()) {
      total_size += 1 + 1;
    }

    // optional uint32 package = 12;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package());
    }

    // optional bool is_free_trial_account = 13;
    if (has_is_free_trial_account()) {
      total_size += 1 + 1;
    }

    // optional uint32 free_trial_expiration = 14;
    if (has_free_trial_expiration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_trial_expiration());
    }

    // optional bool is_low_violence = 15;
    if (has_is_low_violence()) {
      total_size += 1 + 1;
    }

    // optional bool is_account_locked_down = 16;
    if (has_is_account_locked_down()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool is_community_banned = 17;
    if (has_is_community_banned()) {
      total_size += 2 + 1;
    }

    // optional bool is_trade_banned = 18;
    if (has_is_trade_banned()) {
      total_size += 2 + 1;
    }

    // optional uint32 trade_ban_expiration = 19;
    if (has_trade_ban_expiration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trade_ban_expiration());
    }

    // optional uint32 accountid = 20;
    if (has_accountid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional bool eligible_for_community_market = 21;
    if (has_eligible_for_community_market()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCSystemMsg_GetAccountDetails_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCSystemMsg_GetAccountDetails_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCSystemMsg_GetAccountDetails_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCSystemMsg_GetAccountDetails_Response::MergeFrom(const CGCSystemMsg_GetAccountDetails_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult_deprecated()) {
      set_eresult_deprecated(from.eresult_deprecated());
    }
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_persona_name()) {
      set_persona_name(from.persona_name());
    }
    if (from.has_is_profile_public()) {
      set_is_profile_public(from.is_profile_public());
    }
    if (from.has_is_inventory_public()) {
      set_is_inventory_public(from.is_inventory_public());
    }
    if (from.has_is_trusted()) {
      set_is_trusted(from.is_trusted());
    }
    if (from.has_is_vac_banned()) {
      set_is_vac_banned(from.is_vac_banned());
    }
    if (from.has_is_cyber_cafe()) {
      set_is_cyber_cafe(from.is_cyber_cafe());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_school_account()) {
      set_is_school_account(from.is_school_account());
    }
    if (from.has_is_limited()) {
      set_is_limited(from.is_limited());
    }
    if (from.has_is_subscribed()) {
      set_is_subscribed(from.is_subscribed());
    }
    if (from.has_package()) {
      set_package(from.package());
    }
    if (from.has_is_free_trial_account()) {
      set_is_free_trial_account(from.is_free_trial_account());
    }
    if (from.has_free_trial_expiration()) {
      set_free_trial_expiration(from.free_trial_expiration());
    }
    if (from.has_is_low_violence()) {
      set_is_low_violence(from.is_low_violence());
    }
    if (from.has_is_account_locked_down()) {
      set_is_account_locked_down(from.is_account_locked_down());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_is_community_banned()) {
      set_is_community_banned(from.is_community_banned());
    }
    if (from.has_is_trade_banned()) {
      set_is_trade_banned(from.is_trade_banned());
    }
    if (from.has_trade_ban_expiration()) {
      set_trade_ban_expiration(from.trade_ban_expiration());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_eligible_for_community_market()) {
      set_eligible_for_community_market(from.eligible_for_community_market());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCSystemMsg_GetAccountDetails_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCSystemMsg_GetAccountDetails_Response::CopyFrom(const CGCSystemMsg_GetAccountDetails_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetAccountDetails_Response::IsInitialized() const {

  return true;
}

void CGCSystemMsg_GetAccountDetails_Response::Swap(CGCSystemMsg_GetAccountDetails_Response* other) {
  if (other != this) {
    std::swap(eresult_deprecated_, other->eresult_deprecated_);
    std::swap(account_name_, other->account_name_);
    std::swap(persona_name_, other->persona_name_);
    std::swap(is_profile_public_, other->is_profile_public_);
    std::swap(is_inventory_public_, other->is_inventory_public_);
    std::swap(is_trusted_, other->is_trusted_);
    std::swap(is_vac_banned_, other->is_vac_banned_);
    std::swap(is_cyber_cafe_, other->is_cyber_cafe_);
    std::swap(is_school_account_, other->is_school_account_);
    std::swap(is_limited_, other->is_limited_);
    std::swap(is_subscribed_, other->is_subscribed_);
    std::swap(package_, other->package_);
    std::swap(is_free_trial_account_, other->is_free_trial_account_);
    std::swap(free_trial_expiration_, other->free_trial_expiration_);
    std::swap(is_low_violence_, other->is_low_violence_);
    std::swap(is_account_locked_down_, other->is_account_locked_down_);
    std::swap(is_community_banned_, other->is_community_banned_);
    std::swap(is_trade_banned_, other->is_trade_banned_);
    std::swap(trade_ban_expiration_, other->trade_ban_expiration_);
    std::swap(accountid_, other->accountid_);
    std::swap(eligible_for_community_market_, other->eligible_for_community_market_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCSystemMsg_GetAccountDetails_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCSystemMsg_GetAccountDetails_Response_descriptor_;
  metadata.reflection = CGCSystemMsg_GetAccountDetails_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCGetPersonaNames::kSteamidsFieldNumber;
#endif  // !_MSC_VER

CMsgGCGetPersonaNames::CMsgGCGetPersonaNames()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCGetPersonaNames::InitAsDefaultInstance() {
}

CMsgGCGetPersonaNames::CMsgGCGetPersonaNames(const CMsgGCGetPersonaNames& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCGetPersonaNames::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCGetPersonaNames::~CMsgGCGetPersonaNames() {
  SharedDtor();
}

void CMsgGCGetPersonaNames::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCGetPersonaNames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetPersonaNames::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCGetPersonaNames_descriptor_;
}

const CMsgGCGetPersonaNames& CMsgGCGetPersonaNames::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgGCGetPersonaNames* CMsgGCGetPersonaNames::default_instance_ = NULL;

CMsgGCGetPersonaNames* CMsgGCGetPersonaNames::New() const {
  return new CMsgGCGetPersonaNames;
}

void CMsgGCGetPersonaNames::Clear() {
  steamids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCGetPersonaNames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 steamids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_steamids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_steamids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCGetPersonaNames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 steamids = 1;
  for (int i = 0; i < this->steamids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->steamids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCGetPersonaNames::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 steamids = 1;
  for (int i = 0; i < this->steamids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->steamids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCGetPersonaNames::ByteSize() const {
  int total_size = 0;

  // repeated fixed64 steamids = 1;
  {
    int data_size = 0;
    data_size = 8 * this->steamids_size();
    total_size += 1 * this->steamids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetPersonaNames::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCGetPersonaNames* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCGetPersonaNames*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCGetPersonaNames::MergeFrom(const CMsgGCGetPersonaNames& from) {
  GOOGLE_CHECK_NE(&from, this);
  steamids_.MergeFrom(from.steamids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCGetPersonaNames::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPersonaNames::CopyFrom(const CMsgGCGetPersonaNames& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPersonaNames::IsInitialized() const {

  return true;
}

void CMsgGCGetPersonaNames::Swap(CMsgGCGetPersonaNames* other) {
  if (other != this) {
    steamids_.Swap(&other->steamids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCGetPersonaNames::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCGetPersonaNames_descriptor_;
  metadata.reflection = CMsgGCGetPersonaNames_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCGetPersonaNames_Response_PersonaName::kSteamidFieldNumber;
const int CMsgGCGetPersonaNames_Response_PersonaName::kPersonaNameFieldNumber;
#endif  // !_MSC_VER

CMsgGCGetPersonaNames_Response_PersonaName::CMsgGCGetPersonaNames_Response_PersonaName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCGetPersonaNames_Response_PersonaName::InitAsDefaultInstance() {
}

CMsgGCGetPersonaNames_Response_PersonaName::CMsgGCGetPersonaNames_Response_PersonaName(const CMsgGCGetPersonaNames_Response_PersonaName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCGetPersonaNames_Response_PersonaName::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCGetPersonaNames_Response_PersonaName::~CMsgGCGetPersonaNames_Response_PersonaName() {
  SharedDtor();
}

void CMsgGCGetPersonaNames_Response_PersonaName::SharedDtor() {
  if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
    delete persona_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCGetPersonaNames_Response_PersonaName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetPersonaNames_Response_PersonaName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCGetPersonaNames_Response_PersonaName_descriptor_;
}

const CMsgGCGetPersonaNames_Response_PersonaName& CMsgGCGetPersonaNames_Response_PersonaName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgGCGetPersonaNames_Response_PersonaName* CMsgGCGetPersonaNames_Response_PersonaName::default_instance_ = NULL;

CMsgGCGetPersonaNames_Response_PersonaName* CMsgGCGetPersonaNames_Response_PersonaName::New() const {
  return new CMsgGCGetPersonaNames_Response_PersonaName;
}

void CMsgGCGetPersonaNames_Response_PersonaName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    if (has_persona_name()) {
      if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
        persona_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCGetPersonaNames_Response_PersonaName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_persona_name;
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persona_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCGetPersonaNames_Response_PersonaName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string persona_name = 2;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->persona_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCGetPersonaNames_Response_PersonaName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string persona_name = 2;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCGetPersonaNames_Response_PersonaName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetPersonaNames_Response_PersonaName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCGetPersonaNames_Response_PersonaName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCGetPersonaNames_Response_PersonaName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCGetPersonaNames_Response_PersonaName::MergeFrom(const CMsgGCGetPersonaNames_Response_PersonaName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_persona_name()) {
      set_persona_name(from.persona_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCGetPersonaNames_Response_PersonaName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPersonaNames_Response_PersonaName::CopyFrom(const CMsgGCGetPersonaNames_Response_PersonaName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPersonaNames_Response_PersonaName::IsInitialized() const {

  return true;
}

void CMsgGCGetPersonaNames_Response_PersonaName::Swap(CMsgGCGetPersonaNames_Response_PersonaName* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(persona_name_, other->persona_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCGetPersonaNames_Response_PersonaName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCGetPersonaNames_Response_PersonaName_descriptor_;
  metadata.reflection = CMsgGCGetPersonaNames_Response_PersonaName_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCGetPersonaNames_Response::kSucceededLookupsFieldNumber;
const int CMsgGCGetPersonaNames_Response::kFailedLookupSteamidsFieldNumber;
#endif  // !_MSC_VER

CMsgGCGetPersonaNames_Response::CMsgGCGetPersonaNames_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCGetPersonaNames_Response::InitAsDefaultInstance() {
}

CMsgGCGetPersonaNames_Response::CMsgGCGetPersonaNames_Response(const CMsgGCGetPersonaNames_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCGetPersonaNames_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCGetPersonaNames_Response::~CMsgGCGetPersonaNames_Response() {
  SharedDtor();
}

void CMsgGCGetPersonaNames_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCGetPersonaNames_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetPersonaNames_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCGetPersonaNames_Response_descriptor_;
}

const CMsgGCGetPersonaNames_Response& CMsgGCGetPersonaNames_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CMsgGCGetPersonaNames_Response* CMsgGCGetPersonaNames_Response::default_instance_ = NULL;

CMsgGCGetPersonaNames_Response* CMsgGCGetPersonaNames_Response::New() const {
  return new CMsgGCGetPersonaNames_Response;
}

void CMsgGCGetPersonaNames_Response::Clear() {
  succeeded_lookups_.Clear();
  failed_lookup_steamids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCGetPersonaNames_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_succeeded_lookups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_succeeded_lookups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_succeeded_lookups;
        if (input->ExpectTag(17)) goto parse_failed_lookup_steamids;
        break;
      }

      // repeated fixed64 failed_lookup_steamids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_failed_lookup_steamids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_failed_lookup_steamids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_failed_lookup_steamids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_failed_lookup_steamids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCGetPersonaNames_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
  for (int i = 0; i < this->succeeded_lookups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->succeeded_lookups(i), output);
  }

  // repeated fixed64 failed_lookup_steamids = 2;
  for (int i = 0; i < this->failed_lookup_steamids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->failed_lookup_steamids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCGetPersonaNames_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
  for (int i = 0; i < this->succeeded_lookups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->succeeded_lookups(i), target);
  }

  // repeated fixed64 failed_lookup_steamids = 2;
  for (int i = 0; i < this->failed_lookup_steamids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->failed_lookup_steamids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCGetPersonaNames_Response::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
  total_size += 1 * this->succeeded_lookups_size();
  for (int i = 0; i < this->succeeded_lookups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->succeeded_lookups(i));
  }

  // repeated fixed64 failed_lookup_steamids = 2;
  {
    int data_size = 0;
    data_size = 8 * this->failed_lookup_steamids_size();
    total_size += 1 * this->failed_lookup_steamids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetPersonaNames_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCGetPersonaNames_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCGetPersonaNames_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCGetPersonaNames_Response::MergeFrom(const CMsgGCGetPersonaNames_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  succeeded_lookups_.MergeFrom(from.succeeded_lookups_);
  failed_lookup_steamids_.MergeFrom(from.failed_lookup_steamids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCGetPersonaNames_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPersonaNames_Response::CopyFrom(const CMsgGCGetPersonaNames_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPersonaNames_Response::IsInitialized() const {

  return true;
}

void CMsgGCGetPersonaNames_Response::Swap(CMsgGCGetPersonaNames_Response* other) {
  if (other != this) {
    succeeded_lookups_.Swap(&other->succeeded_lookups_);
    failed_lookup_steamids_.Swap(&other->failed_lookup_steamids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCGetPersonaNames_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCGetPersonaNames_Response_descriptor_;
  metadata.reflection = CMsgGCGetPersonaNames_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCSystemMsg_GetPurchaseTrust_Request::kSteamidFieldNumber;
#endif  // !_MSC_VER

CGCSystemMsg_GetPurchaseTrust_Request::CGCSystemMsg_GetPurchaseTrust_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCSystemMsg_GetPurchaseTrust_Request::InitAsDefaultInstance() {
}

CGCSystemMsg_GetPurchaseTrust_Request::CGCSystemMsg_GetPurchaseTrust_Request(const CGCSystemMsg_GetPurchaseTrust_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCSystemMsg_GetPurchaseTrust_Request::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCSystemMsg_GetPurchaseTrust_Request::~CGCSystemMsg_GetPurchaseTrust_Request() {
  SharedDtor();
}

void CGCSystemMsg_GetPurchaseTrust_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCSystemMsg_GetPurchaseTrust_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCSystemMsg_GetPurchaseTrust_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCSystemMsg_GetPurchaseTrust_Request_descriptor_;
}

const CGCSystemMsg_GetPurchaseTrust_Request& CGCSystemMsg_GetPurchaseTrust_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CGCSystemMsg_GetPurchaseTrust_Request* CGCSystemMsg_GetPurchaseTrust_Request::default_instance_ = NULL;

CGCSystemMsg_GetPurchaseTrust_Request* CGCSystemMsg_GetPurchaseTrust_Request::New() const {
  return new CGCSystemMsg_GetPurchaseTrust_Request;
}

void CGCSystemMsg_GetPurchaseTrust_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCSystemMsg_GetPurchaseTrust_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCSystemMsg_GetPurchaseTrust_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCSystemMsg_GetPurchaseTrust_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCSystemMsg_GetPurchaseTrust_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCSystemMsg_GetPurchaseTrust_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCSystemMsg_GetPurchaseTrust_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCSystemMsg_GetPurchaseTrust_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCSystemMsg_GetPurchaseTrust_Request::MergeFrom(const CGCSystemMsg_GetPurchaseTrust_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCSystemMsg_GetPurchaseTrust_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCSystemMsg_GetPurchaseTrust_Request::CopyFrom(const CGCSystemMsg_GetPurchaseTrust_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetPurchaseTrust_Request::IsInitialized() const {

  return true;
}

void CGCSystemMsg_GetPurchaseTrust_Request::Swap(CGCSystemMsg_GetPurchaseTrust_Request* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCSystemMsg_GetPurchaseTrust_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCSystemMsg_GetPurchaseTrust_Request_descriptor_;
  metadata.reflection = CGCSystemMsg_GetPurchaseTrust_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCSystemMsg_GetPurchaseTrust_Response::kHasPriorPurchaseHistoryFieldNumber;
const int CGCSystemMsg_GetPurchaseTrust_Response::kHasNoRecentPasswordResetsFieldNumber;
const int CGCSystemMsg_GetPurchaseTrust_Response::kIsWalletCashTrustedFieldNumber;
const int CGCSystemMsg_GetPurchaseTrust_Response::kTimeAllTrustedFieldNumber;
#endif  // !_MSC_VER

CGCSystemMsg_GetPurchaseTrust_Response::CGCSystemMsg_GetPurchaseTrust_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCSystemMsg_GetPurchaseTrust_Response::InitAsDefaultInstance() {
}

CGCSystemMsg_GetPurchaseTrust_Response::CGCSystemMsg_GetPurchaseTrust_Response(const CGCSystemMsg_GetPurchaseTrust_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCSystemMsg_GetPurchaseTrust_Response::SharedCtor() {
  _cached_size_ = 0;
  has_prior_purchase_history_ = false;
  has_no_recent_password_resets_ = false;
  is_wallet_cash_trusted_ = false;
  time_all_trusted_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCSystemMsg_GetPurchaseTrust_Response::~CGCSystemMsg_GetPurchaseTrust_Response() {
  SharedDtor();
}

void CGCSystemMsg_GetPurchaseTrust_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCSystemMsg_GetPurchaseTrust_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCSystemMsg_GetPurchaseTrust_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCSystemMsg_GetPurchaseTrust_Response_descriptor_;
}

const CGCSystemMsg_GetPurchaseTrust_Response& CGCSystemMsg_GetPurchaseTrust_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_2eproto();
  return *default_instance_;
}

CGCSystemMsg_GetPurchaseTrust_Response* CGCSystemMsg_GetPurchaseTrust_Response::default_instance_ = NULL;

CGCSystemMsg_GetPurchaseTrust_Response* CGCSystemMsg_GetPurchaseTrust_Response::New() const {
  return new CGCSystemMsg_GetPurchaseTrust_Response;
}

void CGCSystemMsg_GetPurchaseTrust_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    has_prior_purchase_history_ = false;
    has_no_recent_password_resets_ = false;
    is_wallet_cash_trusted_ = false;
    time_all_trusted_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCSystemMsg_GetPurchaseTrust_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_prior_purchase_history = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_prior_purchase_history_)));
          set_has_has_prior_purchase_history();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_has_no_recent_password_resets;
        break;
      }

      // optional bool has_no_recent_password_resets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_no_recent_password_resets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_no_recent_password_resets_)));
          set_has_has_no_recent_password_resets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_wallet_cash_trusted;
        break;
      }

      // optional bool is_wallet_cash_trusted = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_wallet_cash_trusted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wallet_cash_trusted_)));
          set_has_is_wallet_cash_trusted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time_all_trusted;
        break;
      }

      // optional uint32 time_all_trusted = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_all_trusted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_all_trusted_)));
          set_has_time_all_trusted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCSystemMsg_GetPurchaseTrust_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool has_prior_purchase_history = 1;
  if (has_has_prior_purchase_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_prior_purchase_history(), output);
  }

  // optional bool has_no_recent_password_resets = 2;
  if (has_has_no_recent_password_resets()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_no_recent_password_resets(), output);
  }

  // optional bool is_wallet_cash_trusted = 3;
  if (has_is_wallet_cash_trusted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_wallet_cash_trusted(), output);
  }

  // optional uint32 time_all_trusted = 4;
  if (has_time_all_trusted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_all_trusted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCSystemMsg_GetPurchaseTrust_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool has_prior_purchase_history = 1;
  if (has_has_prior_purchase_history()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_prior_purchase_history(), target);
  }

  // optional bool has_no_recent_password_resets = 2;
  if (has_has_no_recent_password_resets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->has_no_recent_password_resets(), target);
  }

  // optional bool is_wallet_cash_trusted = 3;
  if (has_is_wallet_cash_trusted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_wallet_cash_trusted(), target);
  }

  // optional uint32 time_all_trusted = 4;
  if (has_time_all_trusted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_all_trusted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCSystemMsg_GetPurchaseTrust_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool has_prior_purchase_history = 1;
    if (has_has_prior_purchase_history()) {
      total_size += 1 + 1;
    }

    // optional bool has_no_recent_password_resets = 2;
    if (has_has_no_recent_password_resets()) {
      total_size += 1 + 1;
    }

    // optional bool is_wallet_cash_trusted = 3;
    if (has_is_wallet_cash_trusted()) {
      total_size += 1 + 1;
    }

    // optional uint32 time_all_trusted = 4;
    if (has_time_all_trusted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_all_trusted());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCSystemMsg_GetPurchaseTrust_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCSystemMsg_GetPurchaseTrust_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCSystemMsg_GetPurchaseTrust_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCSystemMsg_GetPurchaseTrust_Response::MergeFrom(const CGCSystemMsg_GetPurchaseTrust_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_has_prior_purchase_history()) {
      set_has_prior_purchase_history(from.has_prior_purchase_history());
    }
    if (from.has_has_no_recent_password_resets()) {
      set_has_no_recent_password_resets(from.has_no_recent_password_resets());
    }
    if (from.has_is_wallet_cash_trusted()) {
      set_is_wallet_cash_trusted(from.is_wallet_cash_trusted());
    }
    if (from.has_time_all_trusted()) {
      set_time_all_trusted(from.time_all_trusted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCSystemMsg_GetPurchaseTrust_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCSystemMsg_GetPurchaseTrust_Response::CopyFrom(const CGCSystemMsg_GetPurchaseTrust_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetPurchaseTrust_Response::IsInitialized() const {

  return true;
}

void CGCSystemMsg_GetPurchaseTrust_Response::Swap(CGCSystemMsg_GetPurchaseTrust_Response* other) {
  if (other != this) {
    std::swap(has_prior_purchase_history_, other->has_prior_purchase_history_);
    std::swap(has_no_recent_password_resets_, other->has_no_recent_password_resets_);
    std::swap(is_wallet_cash_trusted_, other->is_wallet_cash_trusted_);
    std::swap(time_all_trusted_, other->time_all_trusted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCSystemMsg_GetPurchaseTrust_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCSystemMsg_GetPurchaseTrust_Response_descriptor_;
  metadata.reflection = CGCSystemMsg_GetPurchaseTrust_Response_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  key_field(kKeyFieldFieldNumber, false);

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
