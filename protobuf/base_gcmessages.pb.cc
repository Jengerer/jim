// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSOPartyInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOPartyInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOLobbyInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOLobbyInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSystemBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSystemBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientHello_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerHello_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientWelcome_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientWelcome_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerWelcome_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerWelcome_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgInviteToParty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgInviteToParty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgInvitationCreated_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgInvitationCreated_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyInviteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyInviteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgKickFromParty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgKickFromParty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLeaveParty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLeaveParty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameServerInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGameServerInfo_ServerType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerAvailable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerAvailable_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconGameAccountClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconGameAccountClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOItemCriteriaCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOItemCriteriaCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOItemCriteria_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOItemCriteria_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOItemRecipe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOItemRecipe_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDevNewItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDevNewItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgIncrementKillCountAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgIncrementKillCountAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconItemAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconItemAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconItemEquipped_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconItemEquipped_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAdjustItemEquippedState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAdjustItemEquippedState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSortItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSortItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconClaimCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconClaimCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgStoreGetUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStoreGetUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgStoreGetUserDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStoreGetUserDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgUpdateItemSchema_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgUpdateItemSchema_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestItemSchemaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestItemSchemaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCError_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestInventoryRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestInventoryRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgConVarValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgConVarValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgReplicateConVars_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgReplicateConVars_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgUseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgUseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgConsumableExhausted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgConsumableExhausted_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_5fgcmessages_2eproto() {
  protobuf_AddDesc_base_5fgcmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base_gcmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CSOPartyInvite_descriptor_ = file->message_type(0);
  static const int CSOPartyInvite_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOPartyInvite, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOPartyInvite, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOPartyInvite, sender_name_),
  };
  CSOPartyInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOPartyInvite_descriptor_,
      CSOPartyInvite::default_instance_,
      CSOPartyInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOPartyInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOPartyInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOPartyInvite));
  CSOLobbyInvite_descriptor_ = file->message_type(1);
  static const int CSOLobbyInvite_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOLobbyInvite, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOLobbyInvite, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOLobbyInvite, sender_name_),
  };
  CSOLobbyInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOLobbyInvite_descriptor_,
      CSOLobbyInvite::default_instance_,
      CSOLobbyInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOLobbyInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOLobbyInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOLobbyInvite));
  CMsgSystemBroadcast_descriptor_ = file->message_type(2);
  static const int CMsgSystemBroadcast_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSystemBroadcast, message_),
  };
  CMsgSystemBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSystemBroadcast_descriptor_,
      CMsgSystemBroadcast::default_instance_,
      CMsgSystemBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSystemBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSystemBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSystemBroadcast));
  CMsgClientHello_descriptor_ = file->message_type(3);
  static const int CMsgClientHello_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, version_),
  };
  CMsgClientHello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientHello_descriptor_,
      CMsgClientHello::default_instance_,
      CMsgClientHello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientHello));
  CMsgServerHello_descriptor_ = file->message_type(4);
  static const int CMsgServerHello_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerHello, version_),
  };
  CMsgServerHello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerHello_descriptor_,
      CMsgServerHello::default_instance_,
      CMsgServerHello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerHello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerHello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerHello));
  CMsgClientWelcome_descriptor_ = file->message_type(5);
  static const int CMsgClientWelcome_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, version_),
  };
  CMsgClientWelcome_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientWelcome_descriptor_,
      CMsgClientWelcome::default_instance_,
      CMsgClientWelcome_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientWelcome));
  CMsgServerWelcome_descriptor_ = file->message_type(6);
  static const int CMsgServerWelcome_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerWelcome, version_),
  };
  CMsgServerWelcome_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerWelcome_descriptor_,
      CMsgServerWelcome::default_instance_,
      CMsgServerWelcome_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerWelcome, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerWelcome, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerWelcome));
  CMsgInviteToParty_descriptor_ = file->message_type(7);
  static const int CMsgInviteToParty_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, steam_id_),
  };
  CMsgInviteToParty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgInviteToParty_descriptor_,
      CMsgInviteToParty::default_instance_,
      CMsgInviteToParty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgInviteToParty));
  CMsgInvitationCreated_descriptor_ = file->message_type(8);
  static const int CMsgInvitationCreated_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInvitationCreated, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInvitationCreated, steam_id_),
  };
  CMsgInvitationCreated_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgInvitationCreated_descriptor_,
      CMsgInvitationCreated::default_instance_,
      CMsgInvitationCreated_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInvitationCreated, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInvitationCreated, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgInvitationCreated));
  CMsgPartyInviteResponse_descriptor_ = file->message_type(9);
  static const int CMsgPartyInviteResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, accept_),
  };
  CMsgPartyInviteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyInviteResponse_descriptor_,
      CMsgPartyInviteResponse::default_instance_,
      CMsgPartyInviteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyInviteResponse));
  CMsgKickFromParty_descriptor_ = file->message_type(10);
  static const int CMsgKickFromParty_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKickFromParty, steam_id_),
  };
  CMsgKickFromParty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgKickFromParty_descriptor_,
      CMsgKickFromParty::default_instance_,
      CMsgKickFromParty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKickFromParty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKickFromParty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgKickFromParty));
  CMsgLeaveParty_descriptor_ = file->message_type(11);
  static const int CMsgLeaveParty_offsets_[1] = {
  };
  CMsgLeaveParty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLeaveParty_descriptor_,
      CMsgLeaveParty::default_instance_,
      CMsgLeaveParty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaveParty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaveParty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLeaveParty));
  CMsgGameServerInfo_descriptor_ = file->message_type(12);
  static const int CMsgGameServerInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_public_ip_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_private_ip_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_tv_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_hibernation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_loadavg_),
  };
  CMsgGameServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameServerInfo_descriptor_,
      CMsgGameServerInfo::default_instance_,
      CMsgGameServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameServerInfo));
  CMsgGameServerInfo_ServerType_descriptor_ = CMsgGameServerInfo_descriptor_->enum_type(0);
  CMsgServerAvailable_descriptor_ = file->message_type(13);
  static const int CMsgServerAvailable_offsets_[1] = {
  };
  CMsgServerAvailable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerAvailable_descriptor_,
      CMsgServerAvailable::default_instance_,
      CMsgServerAvailable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerAvailable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerAvailable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerAvailable));
  CSOEconGameAccountClient_descriptor_ = file->message_type(14);
  static const int CSOEconGameAccountClient_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, additional_backpack_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, trial_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, eligible_for_online_play_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, need_to_choose_most_helpful_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, in_coaches_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, trade_ban_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, duel_ban_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, preview_item_def_),
  };
  CSOEconGameAccountClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconGameAccountClient_descriptor_,
      CSOEconGameAccountClient::default_instance_,
      CSOEconGameAccountClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconGameAccountClient));
  CSOItemCriteriaCondition_descriptor_ = file->message_type(15);
  static const int CSOItemCriteriaCondition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, float_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, string_value_),
  };
  CSOItemCriteriaCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOItemCriteriaCondition_descriptor_,
      CSOItemCriteriaCondition::default_instance_,
      CSOItemCriteriaCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOItemCriteriaCondition));
  CSOItemCriteria_descriptor_ = file->message_type(16);
  static const int CSOItemCriteria_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_level_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_quality_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, initial_inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, initial_quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, forced_quality_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, ignore_enabled_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, conditions_),
  };
  CSOItemCriteria_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOItemCriteria_descriptor_,
      CSOItemCriteria::default_instance_,
      CSOItemCriteria_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOItemCriteria));
  CSOItemRecipe_descriptor_ = file->message_type(17);
  static const int CSOItemRecipe_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, n_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, desc_inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, desc_outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, di_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, di_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, di_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, do_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, do_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, do_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, requires_all_same_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, requires_all_same_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, class_usage_for_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, slot_usage_for_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, set_for_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, input_items_criteria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, output_items_criteria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, input_item_dupe_counts_),
  };
  CSOItemRecipe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOItemRecipe_descriptor_,
      CSOItemRecipe::default_instance_,
      CSOItemRecipe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOItemRecipe));
  CMsgDevNewItemRequest_descriptor_ = file->message_type(18);
  static const int CMsgDevNewItemRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevNewItemRequest, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevNewItemRequest, criteria_),
  };
  CMsgDevNewItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDevNewItemRequest_descriptor_,
      CMsgDevNewItemRequest::default_instance_,
      CMsgDevNewItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevNewItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevNewItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDevNewItemRequest));
  CMsgIncrementKillCountAttribute_descriptor_ = file->message_type(19);
  static const int CMsgIncrementKillCountAttribute_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, killer_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, victim_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, event_type_),
  };
  CMsgIncrementKillCountAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgIncrementKillCountAttribute_descriptor_,
      CMsgIncrementKillCountAttribute::default_instance_,
      CMsgIncrementKillCountAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgIncrementKillCountAttribute));
  CSOEconItemAttribute_descriptor_ = file->message_type(20);
  static const int CSOEconItemAttribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, value_),
  };
  CSOEconItemAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconItemAttribute_descriptor_,
      CSOEconItemAttribute::default_instance_,
      CSOEconItemAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconItemAttribute));
  CSOEconItemEquipped_descriptor_ = file->message_type(21);
  static const int CSOEconItemEquipped_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEquipped, new_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEquipped, new_slot_),
  };
  CSOEconItemEquipped_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconItemEquipped_descriptor_,
      CSOEconItemEquipped::default_instance_,
      CSOEconItemEquipped_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEquipped, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEquipped, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconItemEquipped));
  CSOEconItem_descriptor_ = file->message_type(22);
  static const int CSOEconItem_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, custom_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, custom_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, interior_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, in_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, original_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, contains_equipped_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, equipped_state_),
  };
  CSOEconItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconItem_descriptor_,
      CSOEconItem::default_instance_,
      CSOEconItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconItem));
  CMsgAdjustItemEquippedState_descriptor_ = file->message_type(23);
  static const int CMsgAdjustItemEquippedState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAdjustItemEquippedState, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAdjustItemEquippedState, new_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAdjustItemEquippedState, new_slot_),
  };
  CMsgAdjustItemEquippedState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAdjustItemEquippedState_descriptor_,
      CMsgAdjustItemEquippedState::default_instance_,
      CMsgAdjustItemEquippedState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAdjustItemEquippedState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAdjustItemEquippedState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAdjustItemEquippedState));
  CMsgSortItems_descriptor_ = file->message_type(24);
  static const int CMsgSortItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSortItems, sort_type_),
  };
  CMsgSortItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSortItems_descriptor_,
      CMsgSortItems::default_instance_,
      CMsgSortItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSortItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSortItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSortItems));
  CSOEconClaimCode_descriptor_ = file->message_type(25);
  static const int CSOEconClaimCode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, code_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, time_acquired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, code_),
  };
  CSOEconClaimCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconClaimCode_descriptor_,
      CSOEconClaimCode::default_instance_,
      CSOEconClaimCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconClaimCode));
  CMsgStoreGetUserData_descriptor_ = file->message_type(26);
  static const int CMsgStoreGetUserData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserData, price_sheet_version_),
  };
  CMsgStoreGetUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStoreGetUserData_descriptor_,
      CMsgStoreGetUserData::default_instance_,
      CMsgStoreGetUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStoreGetUserData));
  CMsgStoreGetUserDataResponse_descriptor_ = file->message_type(27);
  static const int CMsgStoreGetUserDataResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, price_sheet_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, experiment_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, featured_item_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, show_hat_descriptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, price_sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, default_item_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, popular_items_),
  };
  CMsgStoreGetUserDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStoreGetUserDataResponse_descriptor_,
      CMsgStoreGetUserDataResponse::default_instance_,
      CMsgStoreGetUserDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStoreGetUserDataResponse));
  CMsgUpdateItemSchema_descriptor_ = file->message_type(28);
  static const int CMsgUpdateItemSchema_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, items_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, item_schema_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, items_game_url_),
  };
  CMsgUpdateItemSchema_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgUpdateItemSchema_descriptor_,
      CMsgUpdateItemSchema::default_instance_,
      CMsgUpdateItemSchema_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgUpdateItemSchema));
  CMsgRequestItemSchemaData_descriptor_ = file->message_type(29);
  static const int CMsgRequestItemSchemaData_offsets_[1] = {
  };
  CMsgRequestItemSchemaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestItemSchemaData_descriptor_,
      CMsgRequestItemSchemaData::default_instance_,
      CMsgRequestItemSchemaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemSchemaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemSchemaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestItemSchemaData));
  CMsgGCError_descriptor_ = file->message_type(30);
  static const int CMsgGCError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCError, error_text_),
  };
  CMsgGCError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCError_descriptor_,
      CMsgGCError::default_instance_,
      CMsgGCError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCError));
  CMsgRequestInventoryRefresh_descriptor_ = file->message_type(31);
  static const int CMsgRequestInventoryRefresh_offsets_[1] = {
  };
  CMsgRequestInventoryRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestInventoryRefresh_descriptor_,
      CMsgRequestInventoryRefresh::default_instance_,
      CMsgRequestInventoryRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestInventoryRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestInventoryRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestInventoryRefresh));
  CMsgConVarValue_descriptor_ = file->message_type(32);
  static const int CMsgConVarValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConVarValue, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConVarValue, value_),
  };
  CMsgConVarValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgConVarValue_descriptor_,
      CMsgConVarValue::default_instance_,
      CMsgConVarValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConVarValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConVarValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgConVarValue));
  CMsgReplicateConVars_descriptor_ = file->message_type(33);
  static const int CMsgReplicateConVars_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplicateConVars, convars_),
  };
  CMsgReplicateConVars_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgReplicateConVars_descriptor_,
      CMsgReplicateConVars::default_instance_,
      CMsgReplicateConVars_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplicateConVars, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplicateConVars, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgReplicateConVars));
  CMsgUseItem_descriptor_ = file->message_type(34);
  static const int CMsgUseItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUseItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUseItem, target_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUseItem, gift__potential_targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUseItem, duel__class_lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUseItem, initiator_steam_id_),
  };
  CMsgUseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgUseItem_descriptor_,
      CMsgUseItem::default_instance_,
      CMsgUseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgUseItem));
  CMsgConsumableExhausted_descriptor_ = file->message_type(35);
  static const int CMsgConsumableExhausted_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConsumableExhausted, item_def_id_),
  };
  CMsgConsumableExhausted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgConsumableExhausted_descriptor_,
      CMsgConsumableExhausted::default_instance_,
      CMsgConsumableExhausted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConsumableExhausted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConsumableExhausted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgConsumableExhausted));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_5fgcmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOPartyInvite_descriptor_, &CSOPartyInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOLobbyInvite_descriptor_, &CSOLobbyInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSystemBroadcast_descriptor_, &CMsgSystemBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientHello_descriptor_, &CMsgClientHello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerHello_descriptor_, &CMsgServerHello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientWelcome_descriptor_, &CMsgClientWelcome::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerWelcome_descriptor_, &CMsgServerWelcome::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgInviteToParty_descriptor_, &CMsgInviteToParty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgInvitationCreated_descriptor_, &CMsgInvitationCreated::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyInviteResponse_descriptor_, &CMsgPartyInviteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgKickFromParty_descriptor_, &CMsgKickFromParty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLeaveParty_descriptor_, &CMsgLeaveParty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameServerInfo_descriptor_, &CMsgGameServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerAvailable_descriptor_, &CMsgServerAvailable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconGameAccountClient_descriptor_, &CSOEconGameAccountClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOItemCriteriaCondition_descriptor_, &CSOItemCriteriaCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOItemCriteria_descriptor_, &CSOItemCriteria::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOItemRecipe_descriptor_, &CSOItemRecipe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDevNewItemRequest_descriptor_, &CMsgDevNewItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgIncrementKillCountAttribute_descriptor_, &CMsgIncrementKillCountAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconItemAttribute_descriptor_, &CSOEconItemAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconItemEquipped_descriptor_, &CSOEconItemEquipped::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconItem_descriptor_, &CSOEconItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAdjustItemEquippedState_descriptor_, &CMsgAdjustItemEquippedState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSortItems_descriptor_, &CMsgSortItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconClaimCode_descriptor_, &CSOEconClaimCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStoreGetUserData_descriptor_, &CMsgStoreGetUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStoreGetUserDataResponse_descriptor_, &CMsgStoreGetUserDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgUpdateItemSchema_descriptor_, &CMsgUpdateItemSchema::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestItemSchemaData_descriptor_, &CMsgRequestItemSchemaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCError_descriptor_, &CMsgGCError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestInventoryRefresh_descriptor_, &CMsgRequestInventoryRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgConVarValue_descriptor_, &CMsgConVarValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgReplicateConVars_descriptor_, &CMsgReplicateConVars::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgUseItem_descriptor_, &CMsgUseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgConsumableExhausted_descriptor_, &CMsgConsumableExhausted::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_5fgcmessages_2eproto() {
  delete CSOPartyInvite::default_instance_;
  delete CSOPartyInvite_reflection_;
  delete CSOLobbyInvite::default_instance_;
  delete CSOLobbyInvite_reflection_;
  delete CMsgSystemBroadcast::default_instance_;
  delete CMsgSystemBroadcast_reflection_;
  delete CMsgClientHello::default_instance_;
  delete CMsgClientHello_reflection_;
  delete CMsgServerHello::default_instance_;
  delete CMsgServerHello_reflection_;
  delete CMsgClientWelcome::default_instance_;
  delete CMsgClientWelcome_reflection_;
  delete CMsgServerWelcome::default_instance_;
  delete CMsgServerWelcome_reflection_;
  delete CMsgInviteToParty::default_instance_;
  delete CMsgInviteToParty_reflection_;
  delete CMsgInvitationCreated::default_instance_;
  delete CMsgInvitationCreated_reflection_;
  delete CMsgPartyInviteResponse::default_instance_;
  delete CMsgPartyInviteResponse_reflection_;
  delete CMsgKickFromParty::default_instance_;
  delete CMsgKickFromParty_reflection_;
  delete CMsgLeaveParty::default_instance_;
  delete CMsgLeaveParty_reflection_;
  delete CMsgGameServerInfo::default_instance_;
  delete CMsgGameServerInfo_reflection_;
  delete CMsgServerAvailable::default_instance_;
  delete CMsgServerAvailable_reflection_;
  delete CSOEconGameAccountClient::default_instance_;
  delete CSOEconGameAccountClient_reflection_;
  delete CSOItemCriteriaCondition::default_instance_;
  delete CSOItemCriteriaCondition_reflection_;
  delete CSOItemCriteria::default_instance_;
  delete CSOItemCriteria_reflection_;
  delete CSOItemRecipe::default_instance_;
  delete CSOItemRecipe_reflection_;
  delete CMsgDevNewItemRequest::default_instance_;
  delete CMsgDevNewItemRequest_reflection_;
  delete CMsgIncrementKillCountAttribute::default_instance_;
  delete CMsgIncrementKillCountAttribute_reflection_;
  delete CSOEconItemAttribute::default_instance_;
  delete CSOEconItemAttribute_reflection_;
  delete CSOEconItemEquipped::default_instance_;
  delete CSOEconItemEquipped_reflection_;
  delete CSOEconItem::default_instance_;
  delete CSOEconItem_reflection_;
  delete CMsgAdjustItemEquippedState::default_instance_;
  delete CMsgAdjustItemEquippedState_reflection_;
  delete CMsgSortItems::default_instance_;
  delete CMsgSortItems_reflection_;
  delete CSOEconClaimCode::default_instance_;
  delete CSOEconClaimCode_reflection_;
  delete CMsgStoreGetUserData::default_instance_;
  delete CMsgStoreGetUserData_reflection_;
  delete CMsgStoreGetUserDataResponse::default_instance_;
  delete CMsgStoreGetUserDataResponse_reflection_;
  delete CMsgUpdateItemSchema::default_instance_;
  delete CMsgUpdateItemSchema_reflection_;
  delete CMsgRequestItemSchemaData::default_instance_;
  delete CMsgRequestItemSchemaData_reflection_;
  delete CMsgGCError::default_instance_;
  delete CMsgGCError_reflection_;
  delete CMsgRequestInventoryRefresh::default_instance_;
  delete CMsgRequestInventoryRefresh_reflection_;
  delete CMsgConVarValue::default_instance_;
  delete CMsgConVarValue_reflection_;
  delete CMsgReplicateConVars::default_instance_;
  delete CMsgReplicateConVars_reflection_;
  delete CMsgUseItem::default_instance_;
  delete CMsgUseItem_reflection_;
  delete CMsgConsumableExhausted::default_instance_;
  delete CMsgConsumableExhausted_reflection_;
}

void protobuf_AddDesc_base_5fgcmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025base_gcmessages.proto\032\023steammessages.p"
    "roto\"J\n\016CSOPartyInvite\022\020\n\010group_id\030\001 \001(\004"
    "\022\021\n\tsender_id\030\002 \001(\006\022\023\n\013sender_name\030\003 \001(\t"
    "\"J\n\016CSOLobbyInvite\022\020\n\010group_id\030\001 \001(\004\022\021\n\t"
    "sender_id\030\002 \001(\006\022\023\n\013sender_name\030\003 \001(\t\"&\n\023"
    "CMsgSystemBroadcast\022\017\n\007message\030\001 \001(\t\"\"\n\017"
    "CMsgClientHello\022\017\n\007version\030\001 \001(\r\"\"\n\017CMsg"
    "ServerHello\022\017\n\007version\030\001 \001(\r\"$\n\021CMsgClie"
    "ntWelcome\022\017\n\007version\030\001 \001(\r\"$\n\021CMsgServer"
    "Welcome\022\017\n\007version\030\001 \001(\r\"%\n\021CMsgInviteTo"
    "Party\022\020\n\010steam_id\030\001 \001(\006\";\n\025CMsgInvitatio"
    "nCreated\022\020\n\010group_id\030\001 \001(\004\022\020\n\010steam_id\030\002"
    " \001(\006\";\n\027CMsgPartyInviteResponse\022\020\n\010party"
    "_id\030\001 \001(\004\022\016\n\006accept\030\002 \001(\010\"%\n\021CMsgKickFro"
    "mParty\022\020\n\010steam_id\030\001 \001(\006\"\020\n\016CMsgLeavePar"
    "ty\"\345\002\n\022CMsgGameServerInfo\022\035\n\025server_publ"
    "ic_ip_addr\030\001 \001(\007\022\036\n\026server_private_ip_ad"
    "dr\030\002 \001(\007\022\023\n\013server_port\030\003 \001(\r\022\026\n\016server_"
    "tv_port\030\004 \001(\r\022\022\n\nserver_key\030\005 \001(\t\022\032\n\022ser"
    "ver_hibernation\030\006 \001(\010\022@\n\013server_type\030\007 \001"
    "(\0162\036.CMsgGameServerInfo.ServerType:\013UNSP"
    "ECIFIED\022\025\n\rserver_region\030\010 \001(\r\022\026\n\016server"
    "_loadavg\030\t \001(\002\"B\n\nServerType\022\017\n\013UNSPECIF"
    "IED\020\000\022\010\n\004GAME\020\001\022\t\n\005PROXY\020\002\022\016\n\nCONTROLLER"
    "\020\003\"\025\n\023CMsgServerAvailable\"\243\002\n\030CSOEconGam"
    "eAccountClient\022$\n\031additional_backpack_sl"
    "ots\030\001 \001(\r:\0010\022\034\n\rtrial_account\030\002 \001(\010:\005fal"
    "se\022&\n\030eligible_for_online_play\030\003 \001(\010:\004tr"
    "ue\022*\n\"need_to_choose_most_helpful_friend"
    "\030\004 \001(\010\022\027\n\017in_coaches_list\030\005 \001(\010\022\034\n\024trade"
    "_ban_expiration\030\006 \001(\007\022\033\n\023duel_ban_expira"
    "tion\030\007 \001(\007\022\033\n\020preview_item_def\030\010 \001(\r:\0010\""
    "r\n\030CSOItemCriteriaCondition\022\n\n\002op\030\001 \001(\005\022"
    "\r\n\005field\030\002 \001(\t\022\020\n\010required\030\003 \001(\010\022\023\n\013floa"
    "t_value\030\004 \001(\002\022\024\n\014string_value\030\005 \001(\t\"\214\002\n\017"
    "CSOItemCriteria\022\022\n\nitem_level\030\001 \001(\r\022\024\n\014i"
    "tem_quality\030\002 \001(\005\022\026\n\016item_level_set\030\003 \001("
    "\010\022\030\n\020item_quality_set\030\004 \001(\010\022\031\n\021initial_i"
    "nventory\030\005 \001(\r\022\030\n\020initial_quantity\030\006 \001(\r"
    "\022\034\n\024forced_quality_match\030\007 \001(\010\022\033\n\023ignore"
    "_enabled_flag\030\010 \001(\010\022-\n\nconditions\030\t \003(\0132"
    "\031.CSOItemCriteriaCondition\"\325\003\n\rCSOItemRe"
    "cipe\022\021\n\tdef_index\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n"
    "\003n_a\030\003 \001(\t\022\023\n\013desc_inputs\030\004 \001(\t\022\024\n\014desc_"
    "outputs\030\005 \001(\t\022\014\n\004di_a\030\006 \001(\t\022\014\n\004di_b\030\007 \001("
    "\t\022\014\n\004di_c\030\010 \001(\t\022\014\n\004do_a\030\t \001(\t\022\014\n\004do_b\030\n "
    "\001(\t\022\014\n\004do_c\030\013 \001(\t\022\037\n\027requires_all_same_c"
    "lass\030\014 \001(\010\022\036\n\026requires_all_same_slot\030\r \001"
    "(\010\022\036\n\026class_usage_for_output\030\016 \001(\005\022\035\n\025sl"
    "ot_usage_for_output\030\017 \001(\005\022\026\n\016set_for_out"
    "put\030\020 \001(\005\022.\n\024input_items_criteria\030\024 \003(\0132"
    "\020.CSOItemCriteria\022/\n\025output_items_criter"
    "ia\030\025 \003(\0132\020.CSOItemCriteria\022\036\n\026input_item"
    "_dupe_counts\030\026 \003(\r\"M\n\025CMsgDevNewItemRequ"
    "est\022\020\n\010receiver\030\001 \001(\006\022\"\n\010criteria\030\002 \001(\0132"
    "\020.CSOItemCriteria\"x\n\037CMsgIncrementKillCo"
    "untAttribute\022\027\n\017killer_steam_id\030\001 \001(\004\022\027\n"
    "\017victim_steam_id\030\002 \001(\004\022\017\n\007item_id\030\003 \001(\004\022"
    "\022\n\nevent_type\030\004 \001(\r\"8\n\024CSOEconItemAttrib"
    "ute\022\021\n\tdef_index\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\":\n"
    "\023CSOEconItemEquipped\022\021\n\tnew_class\030\001 \001(\r\022"
    "\020\n\010new_slot\030\002 \001(\r\"\260\003\n\013CSOEconItem\022\n\n\002id\030"
    "\001 \001(\004\022\022\n\naccount_id\030\002 \001(\r\022\021\n\tinventory\030\003"
    " \001(\r\022\021\n\tdef_index\030\004 \001(\r\022\020\n\010quantity\030\005 \001("
    "\r\022\r\n\005level\030\006 \001(\r\022\017\n\007quality\030\007 \001(\r\022\020\n\005fla"
    "gs\030\010 \001(\r:\0010\022\016\n\006origin\030\t \001(\r\022\023\n\013custom_na"
    "me\030\n \001(\t\022\023\n\013custom_desc\030\013 \001(\t\022(\n\tattribu"
    "te\030\014 \003(\0132\025.CSOEconItemAttribute\022#\n\rinter"
    "ior_item\030\r \001(\0132\014.CSOEconItem\022\025\n\006in_use\030\016"
    " \001(\010:\005false\022\020\n\005style\030\017 \001(\r:\0010\022\026\n\013origina"
    "l_id\030\020 \001(\004:\0010\022\037\n\027contains_equipped_state"
    "\030\021 \001(\010\022,\n\016equipped_state\030\022 \003(\0132\024.CSOEcon"
    "ItemEquipped\"S\n\033CMsgAdjustItemEquippedSt"
    "ate\022\017\n\007item_id\030\001 \001(\004\022\021\n\tnew_class\030\002 \001(\r\022"
    "\020\n\010new_slot\030\003 \001(\r\"\"\n\rCMsgSortItems\022\021\n\tso"
    "rt_type\030\001 \001(\r\"^\n\020CSOEconClaimCode\022\022\n\nacc"
    "ount_id\030\001 \001(\r\022\021\n\tcode_type\030\002 \001(\r\022\025\n\rtime"
    "_acquired\030\003 \001(\r\022\014\n\004code\030\004 \001(\t\"3\n\024CMsgSto"
    "reGetUserData\022\033\n\023price_sheet_version\030\001 \001"
    "(\007\"\224\002\n\034CMsgStoreGetUserDataResponse\022\016\n\006r"
    "esult\030\001 \001(\005\022\020\n\010currency\030\002 \001(\005\022\017\n\007country"
    "\030\003 \001(\t\022\033\n\023price_sheet_version\030\004 \001(\007\022\032\n\017e"
    "xperiment_data\030\005 \001(\004:\0010\022\031\n\021featured_item"
    "_idx\030\006 \001(\005\022#\n\025show_hat_descriptions\030\007 \001("
    "\010:\004true\022\023\n\013price_sheet\030\010 \001(\014\022\034\n\021default_"
    "item_sort\030\t \001(\005:\0010\022\025\n\rpopular_items\030\n \003("
    "\r\"_\n\024CMsgUpdateItemSchema\022\022\n\nitems_game\030"
    "\001 \001(\014\022\033\n\023item_schema_version\030\002 \001(\007\022\026\n\016it"
    "ems_game_url\030\003 \001(\t\"\033\n\031CMsgRequestItemSch"
    "emaData\"!\n\013CMsgGCError\022\022\n\nerror_text\030\001 \001"
    "(\t\"\035\n\033CMsgRequestInventoryRefresh\".\n\017CMs"
    "gConVarValue\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001("
    "\t\"9\n\024CMsgReplicateConVars\022!\n\007convars\030\001 \003"
    "(\0132\020.CMsgConVarValue\"\216\001\n\013CMsgUseItem\022\017\n\007"
    "item_id\030\001 \001(\004\022\027\n\017target_steam_id\030\002 \001(\006\022\037"
    "\n\027gift__potential_targets\030\003 \003(\r\022\030\n\020duel_"
    "_class_lock\030\004 \001(\r\022\032\n\022initiator_steam_id\030"
    "\005 \001(\006\".\n\027CMsgConsumableExhausted\022\023\n\013item"
    "_def_id\030\001 \001(\005B\005H\001\200\001\000", 3940);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base_gcmessages.proto", &protobuf_RegisterTypes);
  CSOPartyInvite::default_instance_ = new CSOPartyInvite();
  CSOLobbyInvite::default_instance_ = new CSOLobbyInvite();
  CMsgSystemBroadcast::default_instance_ = new CMsgSystemBroadcast();
  CMsgClientHello::default_instance_ = new CMsgClientHello();
  CMsgServerHello::default_instance_ = new CMsgServerHello();
  CMsgClientWelcome::default_instance_ = new CMsgClientWelcome();
  CMsgServerWelcome::default_instance_ = new CMsgServerWelcome();
  CMsgInviteToParty::default_instance_ = new CMsgInviteToParty();
  CMsgInvitationCreated::default_instance_ = new CMsgInvitationCreated();
  CMsgPartyInviteResponse::default_instance_ = new CMsgPartyInviteResponse();
  CMsgKickFromParty::default_instance_ = new CMsgKickFromParty();
  CMsgLeaveParty::default_instance_ = new CMsgLeaveParty();
  CMsgGameServerInfo::default_instance_ = new CMsgGameServerInfo();
  CMsgServerAvailable::default_instance_ = new CMsgServerAvailable();
  CSOEconGameAccountClient::default_instance_ = new CSOEconGameAccountClient();
  CSOItemCriteriaCondition::default_instance_ = new CSOItemCriteriaCondition();
  CSOItemCriteria::default_instance_ = new CSOItemCriteria();
  CSOItemRecipe::default_instance_ = new CSOItemRecipe();
  CMsgDevNewItemRequest::default_instance_ = new CMsgDevNewItemRequest();
  CMsgIncrementKillCountAttribute::default_instance_ = new CMsgIncrementKillCountAttribute();
  CSOEconItemAttribute::default_instance_ = new CSOEconItemAttribute();
  CSOEconItemEquipped::default_instance_ = new CSOEconItemEquipped();
  CSOEconItem::default_instance_ = new CSOEconItem();
  CMsgAdjustItemEquippedState::default_instance_ = new CMsgAdjustItemEquippedState();
  CMsgSortItems::default_instance_ = new CMsgSortItems();
  CSOEconClaimCode::default_instance_ = new CSOEconClaimCode();
  CMsgStoreGetUserData::default_instance_ = new CMsgStoreGetUserData();
  CMsgStoreGetUserDataResponse::default_instance_ = new CMsgStoreGetUserDataResponse();
  CMsgUpdateItemSchema::default_instance_ = new CMsgUpdateItemSchema();
  CMsgRequestItemSchemaData::default_instance_ = new CMsgRequestItemSchemaData();
  CMsgGCError::default_instance_ = new CMsgGCError();
  CMsgRequestInventoryRefresh::default_instance_ = new CMsgRequestInventoryRefresh();
  CMsgConVarValue::default_instance_ = new CMsgConVarValue();
  CMsgReplicateConVars::default_instance_ = new CMsgReplicateConVars();
  CMsgUseItem::default_instance_ = new CMsgUseItem();
  CMsgConsumableExhausted::default_instance_ = new CMsgConsumableExhausted();
  CSOPartyInvite::default_instance_->InitAsDefaultInstance();
  CSOLobbyInvite::default_instance_->InitAsDefaultInstance();
  CMsgSystemBroadcast::default_instance_->InitAsDefaultInstance();
  CMsgClientHello::default_instance_->InitAsDefaultInstance();
  CMsgServerHello::default_instance_->InitAsDefaultInstance();
  CMsgClientWelcome::default_instance_->InitAsDefaultInstance();
  CMsgServerWelcome::default_instance_->InitAsDefaultInstance();
  CMsgInviteToParty::default_instance_->InitAsDefaultInstance();
  CMsgInvitationCreated::default_instance_->InitAsDefaultInstance();
  CMsgPartyInviteResponse::default_instance_->InitAsDefaultInstance();
  CMsgKickFromParty::default_instance_->InitAsDefaultInstance();
  CMsgLeaveParty::default_instance_->InitAsDefaultInstance();
  CMsgGameServerInfo::default_instance_->InitAsDefaultInstance();
  CMsgServerAvailable::default_instance_->InitAsDefaultInstance();
  CSOEconGameAccountClient::default_instance_->InitAsDefaultInstance();
  CSOItemCriteriaCondition::default_instance_->InitAsDefaultInstance();
  CSOItemCriteria::default_instance_->InitAsDefaultInstance();
  CSOItemRecipe::default_instance_->InitAsDefaultInstance();
  CMsgDevNewItemRequest::default_instance_->InitAsDefaultInstance();
  CMsgIncrementKillCountAttribute::default_instance_->InitAsDefaultInstance();
  CSOEconItemAttribute::default_instance_->InitAsDefaultInstance();
  CSOEconItemEquipped::default_instance_->InitAsDefaultInstance();
  CSOEconItem::default_instance_->InitAsDefaultInstance();
  CMsgAdjustItemEquippedState::default_instance_->InitAsDefaultInstance();
  CMsgSortItems::default_instance_->InitAsDefaultInstance();
  CSOEconClaimCode::default_instance_->InitAsDefaultInstance();
  CMsgStoreGetUserData::default_instance_->InitAsDefaultInstance();
  CMsgStoreGetUserDataResponse::default_instance_->InitAsDefaultInstance();
  CMsgUpdateItemSchema::default_instance_->InitAsDefaultInstance();
  CMsgRequestItemSchemaData::default_instance_->InitAsDefaultInstance();
  CMsgGCError::default_instance_->InitAsDefaultInstance();
  CMsgRequestInventoryRefresh::default_instance_->InitAsDefaultInstance();
  CMsgConVarValue::default_instance_->InitAsDefaultInstance();
  CMsgReplicateConVars::default_instance_->InitAsDefaultInstance();
  CMsgUseItem::default_instance_->InitAsDefaultInstance();
  CMsgConsumableExhausted::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_5fgcmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_5fgcmessages_2eproto {
  StaticDescriptorInitializer_base_5fgcmessages_2eproto() {
    protobuf_AddDesc_base_5fgcmessages_2eproto();
  }
} static_descriptor_initializer_base_5fgcmessages_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CSOPartyInvite::kGroupIdFieldNumber;
const int CSOPartyInvite::kSenderIdFieldNumber;
const int CSOPartyInvite::kSenderNameFieldNumber;
#endif  // !_MSC_VER

CSOPartyInvite::CSOPartyInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOPartyInvite::InitAsDefaultInstance() {
}

CSOPartyInvite::CSOPartyInvite(const CSOPartyInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOPartyInvite::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  sender_id_ = GOOGLE_ULONGLONG(0);
  sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOPartyInvite::~CSOPartyInvite() {
  SharedDtor();
}

void CSOPartyInvite::SharedDtor() {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_name_;
  }
  if (this != default_instance_) {
  }
}

void CSOPartyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOPartyInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOPartyInvite_descriptor_;
}

const CSOPartyInvite& CSOPartyInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOPartyInvite* CSOPartyInvite::default_instance_ = NULL;

CSOPartyInvite* CSOPartyInvite::New() const {
  return new CSOPartyInvite;
}

void CSOPartyInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = GOOGLE_ULONGLONG(0);
    sender_id_ = GOOGLE_ULONGLONG(0);
    if (has_sender_name()) {
      if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
        sender_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOPartyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sender_id;
        break;
      }
      
      // optional fixed64 sender_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
          set_has_sender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sender_name;
        break;
      }
      
      // optional string sender_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOPartyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }
  
  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }
  
  // optional string sender_name = 3;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sender_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOPartyInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }
  
  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }
  
  // optional string sender_name = 3;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOPartyInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }
    
    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }
    
    // optional string sender_name = 3;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOPartyInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOPartyInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOPartyInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOPartyInvite::MergeFrom(const CSOPartyInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_sender_name()) {
      set_sender_name(from.sender_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOPartyInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOPartyInvite::CopyFrom(const CSOPartyInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOPartyInvite::IsInitialized() const {
  
  return true;
}

void CSOPartyInvite::Swap(CSOPartyInvite* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(sender_name_, other->sender_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOPartyInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOPartyInvite_descriptor_;
  metadata.reflection = CSOPartyInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOLobbyInvite::kGroupIdFieldNumber;
const int CSOLobbyInvite::kSenderIdFieldNumber;
const int CSOLobbyInvite::kSenderNameFieldNumber;
#endif  // !_MSC_VER

CSOLobbyInvite::CSOLobbyInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOLobbyInvite::InitAsDefaultInstance() {
}

CSOLobbyInvite::CSOLobbyInvite(const CSOLobbyInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOLobbyInvite::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  sender_id_ = GOOGLE_ULONGLONG(0);
  sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOLobbyInvite::~CSOLobbyInvite() {
  SharedDtor();
}

void CSOLobbyInvite::SharedDtor() {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_name_;
  }
  if (this != default_instance_) {
  }
}

void CSOLobbyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOLobbyInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOLobbyInvite_descriptor_;
}

const CSOLobbyInvite& CSOLobbyInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOLobbyInvite* CSOLobbyInvite::default_instance_ = NULL;

CSOLobbyInvite* CSOLobbyInvite::New() const {
  return new CSOLobbyInvite;
}

void CSOLobbyInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = GOOGLE_ULONGLONG(0);
    sender_id_ = GOOGLE_ULONGLONG(0);
    if (has_sender_name()) {
      if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
        sender_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOLobbyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sender_id;
        break;
      }
      
      // optional fixed64 sender_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
          set_has_sender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sender_name;
        break;
      }
      
      // optional string sender_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOLobbyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }
  
  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }
  
  // optional string sender_name = 3;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sender_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOLobbyInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }
  
  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }
  
  // optional string sender_name = 3;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOLobbyInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }
    
    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }
    
    // optional string sender_name = 3;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOLobbyInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOLobbyInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOLobbyInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOLobbyInvite::MergeFrom(const CSOLobbyInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_sender_name()) {
      set_sender_name(from.sender_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOLobbyInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOLobbyInvite::CopyFrom(const CSOLobbyInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOLobbyInvite::IsInitialized() const {
  
  return true;
}

void CSOLobbyInvite::Swap(CSOLobbyInvite* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(sender_name_, other->sender_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOLobbyInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOLobbyInvite_descriptor_;
  metadata.reflection = CSOLobbyInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSystemBroadcast::kMessageFieldNumber;
#endif  // !_MSC_VER

CMsgSystemBroadcast::CMsgSystemBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSystemBroadcast::InitAsDefaultInstance() {
}

CMsgSystemBroadcast::CMsgSystemBroadcast(const CMsgSystemBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSystemBroadcast::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSystemBroadcast::~CMsgSystemBroadcast() {
  SharedDtor();
}

void CMsgSystemBroadcast::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSystemBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSystemBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSystemBroadcast_descriptor_;
}

const CMsgSystemBroadcast& CMsgSystemBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSystemBroadcast* CMsgSystemBroadcast::default_instance_ = NULL;

CMsgSystemBroadcast* CMsgSystemBroadcast::New() const {
  return new CMsgSystemBroadcast;
}

void CMsgSystemBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSystemBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSystemBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSystemBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSystemBroadcast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSystemBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSystemBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSystemBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSystemBroadcast::MergeFrom(const CMsgSystemBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSystemBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSystemBroadcast::CopyFrom(const CMsgSystemBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSystemBroadcast::IsInitialized() const {
  
  return true;
}

void CMsgSystemBroadcast::Swap(CMsgSystemBroadcast* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSystemBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSystemBroadcast_descriptor_;
  metadata.reflection = CMsgSystemBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientHello::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgClientHello::CMsgClientHello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientHello::InitAsDefaultInstance() {
}

CMsgClientHello::CMsgClientHello(const CMsgClientHello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientHello::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientHello::~CMsgClientHello() {
  SharedDtor();
}

void CMsgClientHello::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientHello_descriptor_;
}

const CMsgClientHello& CMsgClientHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgClientHello* CMsgClientHello::default_instance_ = NULL;

CMsgClientHello* CMsgClientHello::New() const {
  return new CMsgClientHello;
}

void CMsgClientHello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientHello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientHello::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientHello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientHello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientHello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientHello::MergeFrom(const CMsgClientHello& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientHello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHello::CopyFrom(const CMsgClientHello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHello::IsInitialized() const {
  
  return true;
}

void CMsgClientHello::Swap(CMsgClientHello* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientHello_descriptor_;
  metadata.reflection = CMsgClientHello_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerHello::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgServerHello::CMsgServerHello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgServerHello::InitAsDefaultInstance() {
}

CMsgServerHello::CMsgServerHello(const CMsgServerHello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgServerHello::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerHello::~CMsgServerHello() {
  SharedDtor();
}

void CMsgServerHello::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerHello_descriptor_;
}

const CMsgServerHello& CMsgServerHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgServerHello* CMsgServerHello::default_instance_ = NULL;

CMsgServerHello* CMsgServerHello::New() const {
  return new CMsgServerHello;
}

void CMsgServerHello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgServerHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgServerHello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgServerHello::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerHello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerHello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerHello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerHello::MergeFrom(const CMsgServerHello& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerHello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerHello::CopyFrom(const CMsgServerHello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerHello::IsInitialized() const {
  
  return true;
}

void CMsgServerHello::Swap(CMsgServerHello* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerHello_descriptor_;
  metadata.reflection = CMsgServerHello_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientWelcome::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgClientWelcome::CMsgClientWelcome()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientWelcome::InitAsDefaultInstance() {
}

CMsgClientWelcome::CMsgClientWelcome(const CMsgClientWelcome& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientWelcome::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientWelcome::~CMsgClientWelcome() {
  SharedDtor();
}

void CMsgClientWelcome::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientWelcome::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientWelcome::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientWelcome_descriptor_;
}

const CMsgClientWelcome& CMsgClientWelcome::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgClientWelcome* CMsgClientWelcome::default_instance_ = NULL;

CMsgClientWelcome* CMsgClientWelcome::New() const {
  return new CMsgClientWelcome;
}

void CMsgClientWelcome::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientWelcome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientWelcome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientWelcome::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientWelcome::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientWelcome::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientWelcome* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientWelcome*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientWelcome::MergeFrom(const CMsgClientWelcome& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientWelcome::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWelcome::CopyFrom(const CMsgClientWelcome& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWelcome::IsInitialized() const {
  
  return true;
}

void CMsgClientWelcome::Swap(CMsgClientWelcome* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientWelcome::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientWelcome_descriptor_;
  metadata.reflection = CMsgClientWelcome_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerWelcome::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgServerWelcome::CMsgServerWelcome()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgServerWelcome::InitAsDefaultInstance() {
}

CMsgServerWelcome::CMsgServerWelcome(const CMsgServerWelcome& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgServerWelcome::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerWelcome::~CMsgServerWelcome() {
  SharedDtor();
}

void CMsgServerWelcome::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerWelcome::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerWelcome::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerWelcome_descriptor_;
}

const CMsgServerWelcome& CMsgServerWelcome::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgServerWelcome* CMsgServerWelcome::default_instance_ = NULL;

CMsgServerWelcome* CMsgServerWelcome::New() const {
  return new CMsgServerWelcome;
}

void CMsgServerWelcome::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerWelcome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgServerWelcome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgServerWelcome::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgServerWelcome::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerWelcome::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerWelcome* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerWelcome*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerWelcome::MergeFrom(const CMsgServerWelcome& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerWelcome::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerWelcome::CopyFrom(const CMsgServerWelcome& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerWelcome::IsInitialized() const {
  
  return true;
}

void CMsgServerWelcome::Swap(CMsgServerWelcome* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerWelcome::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerWelcome_descriptor_;
  metadata.reflection = CMsgServerWelcome_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgInviteToParty::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgInviteToParty::CMsgInviteToParty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgInviteToParty::InitAsDefaultInstance() {
}

CMsgInviteToParty::CMsgInviteToParty(const CMsgInviteToParty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgInviteToParty::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgInviteToParty::~CMsgInviteToParty() {
  SharedDtor();
}

void CMsgInviteToParty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgInviteToParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgInviteToParty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgInviteToParty_descriptor_;
}

const CMsgInviteToParty& CMsgInviteToParty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgInviteToParty* CMsgInviteToParty::default_instance_ = NULL;

CMsgInviteToParty* CMsgInviteToParty::New() const {
  return new CMsgInviteToParty;
}

void CMsgInviteToParty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgInviteToParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgInviteToParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgInviteToParty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgInviteToParty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgInviteToParty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgInviteToParty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgInviteToParty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgInviteToParty::MergeFrom(const CMsgInviteToParty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgInviteToParty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInviteToParty::CopyFrom(const CMsgInviteToParty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInviteToParty::IsInitialized() const {
  
  return true;
}

void CMsgInviteToParty::Swap(CMsgInviteToParty* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgInviteToParty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgInviteToParty_descriptor_;
  metadata.reflection = CMsgInviteToParty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgInvitationCreated::kGroupIdFieldNumber;
const int CMsgInvitationCreated::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgInvitationCreated::CMsgInvitationCreated()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgInvitationCreated::InitAsDefaultInstance() {
}

CMsgInvitationCreated::CMsgInvitationCreated(const CMsgInvitationCreated& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgInvitationCreated::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgInvitationCreated::~CMsgInvitationCreated() {
  SharedDtor();
}

void CMsgInvitationCreated::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgInvitationCreated::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgInvitationCreated::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgInvitationCreated_descriptor_;
}

const CMsgInvitationCreated& CMsgInvitationCreated::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgInvitationCreated* CMsgInvitationCreated::default_instance_ = NULL;

CMsgInvitationCreated* CMsgInvitationCreated::New() const {
  return new CMsgInvitationCreated;
}

void CMsgInvitationCreated::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = GOOGLE_ULONGLONG(0);
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgInvitationCreated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id;
        break;
      }
      
      // optional fixed64 steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgInvitationCreated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }
  
  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgInvitationCreated::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }
  
  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgInvitationCreated::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }
    
    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgInvitationCreated::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgInvitationCreated* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgInvitationCreated*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgInvitationCreated::MergeFrom(const CMsgInvitationCreated& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgInvitationCreated::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInvitationCreated::CopyFrom(const CMsgInvitationCreated& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInvitationCreated::IsInitialized() const {
  
  return true;
}

void CMsgInvitationCreated::Swap(CMsgInvitationCreated* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgInvitationCreated::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgInvitationCreated_descriptor_;
  metadata.reflection = CMsgInvitationCreated_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPartyInviteResponse::kPartyIdFieldNumber;
const int CMsgPartyInviteResponse::kAcceptFieldNumber;
#endif  // !_MSC_VER

CMsgPartyInviteResponse::CMsgPartyInviteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyInviteResponse::InitAsDefaultInstance() {
}

CMsgPartyInviteResponse::CMsgPartyInviteResponse(const CMsgPartyInviteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  accept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyInviteResponse::~CMsgPartyInviteResponse() {
  SharedDtor();
}

void CMsgPartyInviteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyInviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyInviteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyInviteResponse_descriptor_;
}

const CMsgPartyInviteResponse& CMsgPartyInviteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyInviteResponse* CMsgPartyInviteResponse::default_instance_ = NULL;

CMsgPartyInviteResponse* CMsgPartyInviteResponse::New() const {
  return new CMsgPartyInviteResponse;
}

void CMsgPartyInviteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_id_ = GOOGLE_ULONGLONG(0);
    accept_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          set_has_party_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accept;
        break;
      }
      
      // optional bool accept = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPartyInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }
  
  // optional bool accept = 2;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyInviteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }
  
  // optional bool accept = 2;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyInviteResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }
    
    // optional bool accept = 2;
    if (has_accept()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyInviteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyInviteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyInviteResponse::MergeFrom(const CMsgPartyInviteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
    if (from.has_accept()) {
      set_accept(from.accept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyInviteResponse::CopyFrom(const CMsgPartyInviteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyInviteResponse::IsInitialized() const {
  
  return true;
}

void CMsgPartyInviteResponse::Swap(CMsgPartyInviteResponse* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(accept_, other->accept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyInviteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyInviteResponse_descriptor_;
  metadata.reflection = CMsgPartyInviteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgKickFromParty::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgKickFromParty::CMsgKickFromParty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgKickFromParty::InitAsDefaultInstance() {
}

CMsgKickFromParty::CMsgKickFromParty(const CMsgKickFromParty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgKickFromParty::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgKickFromParty::~CMsgKickFromParty() {
  SharedDtor();
}

void CMsgKickFromParty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgKickFromParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgKickFromParty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgKickFromParty_descriptor_;
}

const CMsgKickFromParty& CMsgKickFromParty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgKickFromParty* CMsgKickFromParty::default_instance_ = NULL;

CMsgKickFromParty* CMsgKickFromParty::New() const {
  return new CMsgKickFromParty;
}

void CMsgKickFromParty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgKickFromParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgKickFromParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgKickFromParty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgKickFromParty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgKickFromParty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgKickFromParty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgKickFromParty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgKickFromParty::MergeFrom(const CMsgKickFromParty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgKickFromParty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKickFromParty::CopyFrom(const CMsgKickFromParty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKickFromParty::IsInitialized() const {
  
  return true;
}

void CMsgKickFromParty::Swap(CMsgKickFromParty* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgKickFromParty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgKickFromParty_descriptor_;
  metadata.reflection = CMsgKickFromParty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgLeaveParty::CMsgLeaveParty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLeaveParty::InitAsDefaultInstance() {
}

CMsgLeaveParty::CMsgLeaveParty(const CMsgLeaveParty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLeaveParty::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLeaveParty::~CMsgLeaveParty() {
  SharedDtor();
}

void CMsgLeaveParty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLeaveParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaveParty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLeaveParty_descriptor_;
}

const CMsgLeaveParty& CMsgLeaveParty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgLeaveParty* CMsgLeaveParty::default_instance_ = NULL;

CMsgLeaveParty* CMsgLeaveParty::New() const {
  return new CMsgLeaveParty;
}

void CMsgLeaveParty::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLeaveParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgLeaveParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLeaveParty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLeaveParty::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaveParty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLeaveParty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLeaveParty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLeaveParty::MergeFrom(const CMsgLeaveParty& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLeaveParty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaveParty::CopyFrom(const CMsgLeaveParty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaveParty::IsInitialized() const {
  
  return true;
}

void CMsgLeaveParty::Swap(CMsgLeaveParty* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLeaveParty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLeaveParty_descriptor_;
  metadata.reflection = CMsgLeaveParty_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGameServerInfo_ServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerInfo_ServerType_descriptor_;
}
bool CMsgGameServerInfo_ServerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::UNSPECIFIED;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::GAME;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::PROXY;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::CONTROLLER;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MIN;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MAX;
const int CMsgGameServerInfo::ServerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGameServerInfo::kServerPublicIpAddrFieldNumber;
const int CMsgGameServerInfo::kServerPrivateIpAddrFieldNumber;
const int CMsgGameServerInfo::kServerPortFieldNumber;
const int CMsgGameServerInfo::kServerTvPortFieldNumber;
const int CMsgGameServerInfo::kServerKeyFieldNumber;
const int CMsgGameServerInfo::kServerHibernationFieldNumber;
const int CMsgGameServerInfo::kServerTypeFieldNumber;
const int CMsgGameServerInfo::kServerRegionFieldNumber;
const int CMsgGameServerInfo::kServerLoadavgFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerInfo::CMsgGameServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameServerInfo::InitAsDefaultInstance() {
}

CMsgGameServerInfo::CMsgGameServerInfo(const CMsgGameServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerInfo::SharedCtor() {
  _cached_size_ = 0;
  server_public_ip_addr_ = 0u;
  server_private_ip_addr_ = 0u;
  server_port_ = 0u;
  server_tv_port_ = 0u;
  server_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_hibernation_ = false;
  server_type_ = 0;
  server_region_ = 0u;
  server_loadavg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerInfo::~CMsgGameServerInfo() {
  SharedDtor();
}

void CMsgGameServerInfo::SharedDtor() {
  if (server_key_ != &::google::protobuf::internal::kEmptyString) {
    delete server_key_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGameServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerInfo_descriptor_;
}

const CMsgGameServerInfo& CMsgGameServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGameServerInfo* CMsgGameServerInfo::default_instance_ = NULL;

CMsgGameServerInfo* CMsgGameServerInfo::New() const {
  return new CMsgGameServerInfo;
}

void CMsgGameServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_public_ip_addr_ = 0u;
    server_private_ip_addr_ = 0u;
    server_port_ = 0u;
    server_tv_port_ = 0u;
    if (has_server_key()) {
      if (server_key_ != &::google::protobuf::internal::kEmptyString) {
        server_key_->clear();
      }
    }
    server_hibernation_ = false;
    server_type_ = 0;
    server_region_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    server_loadavg_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 server_public_ip_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_public_ip_addr_)));
          set_has_server_public_ip_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_server_private_ip_addr;
        break;
      }
      
      // optional fixed32 server_private_ip_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_private_ip_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_private_ip_addr_)));
          set_has_server_private_ip_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_port;
        break;
      }
      
      // optional uint32 server_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_tv_port;
        break;
      }
      
      // optional uint32 server_tv_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_tv_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_tv_port_)));
          set_has_server_tv_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_server_key;
        break;
      }
      
      // optional string server_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_key().data(), this->server_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_server_hibernation;
        break;
      }
      
      // optional bool server_hibernation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_hibernation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_hibernation_)));
          set_has_server_hibernation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_server_type;
        break;
      }
      
      // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGameServerInfo_ServerType_IsValid(value)) {
            set_server_type(static_cast< ::CMsgGameServerInfo_ServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_server_region;
        break;
      }
      
      // optional uint32 server_region = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
          set_has_server_region();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_server_loadavg;
        break;
      }
      
      // optional float server_loadavg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_loadavg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_loadavg_)));
          set_has_server_loadavg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 server_public_ip_addr = 1;
  if (has_server_public_ip_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->server_public_ip_addr(), output);
  }
  
  // optional fixed32 server_private_ip_addr = 2;
  if (has_server_private_ip_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->server_private_ip_addr(), output);
  }
  
  // optional uint32 server_port = 3;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_port(), output);
  }
  
  // optional uint32 server_tv_port = 4;
  if (has_server_tv_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_tv_port(), output);
  }
  
  // optional string server_key = 5;
  if (has_server_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_key().data(), this->server_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->server_key(), output);
  }
  
  // optional bool server_hibernation = 6;
  if (has_server_hibernation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->server_hibernation(), output);
  }
  
  // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->server_type(), output);
  }
  
  // optional uint32 server_region = 8;
  if (has_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->server_region(), output);
  }
  
  // optional float server_loadavg = 9;
  if (has_server_loadavg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->server_loadavg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 server_public_ip_addr = 1;
  if (has_server_public_ip_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->server_public_ip_addr(), target);
  }
  
  // optional fixed32 server_private_ip_addr = 2;
  if (has_server_private_ip_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->server_private_ip_addr(), target);
  }
  
  // optional uint32 server_port = 3;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_port(), target);
  }
  
  // optional uint32 server_tv_port = 4;
  if (has_server_tv_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_tv_port(), target);
  }
  
  // optional string server_key = 5;
  if (has_server_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_key().data(), this->server_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->server_key(), target);
  }
  
  // optional bool server_hibernation = 6;
  if (has_server_hibernation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->server_hibernation(), target);
  }
  
  // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->server_type(), target);
  }
  
  // optional uint32 server_region = 8;
  if (has_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->server_region(), target);
  }
  
  // optional float server_loadavg = 9;
  if (has_server_loadavg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->server_loadavg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameServerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 server_public_ip_addr = 1;
    if (has_server_public_ip_addr()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 server_private_ip_addr = 2;
    if (has_server_private_ip_addr()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 server_port = 3;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }
    
    // optional uint32 server_tv_port = 4;
    if (has_server_tv_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_tv_port());
    }
    
    // optional string server_key = 5;
    if (has_server_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_key());
    }
    
    // optional bool server_hibernation = 6;
    if (has_server_hibernation()) {
      total_size += 1 + 1;
    }
    
    // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
    }
    
    // optional uint32 server_region = 8;
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float server_loadavg = 9;
    if (has_server_loadavg()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameServerInfo::MergeFrom(const CMsgGameServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_public_ip_addr()) {
      set_server_public_ip_addr(from.server_public_ip_addr());
    }
    if (from.has_server_private_ip_addr()) {
      set_server_private_ip_addr(from.server_private_ip_addr());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_server_tv_port()) {
      set_server_tv_port(from.server_tv_port());
    }
    if (from.has_server_key()) {
      set_server_key(from.server_key());
    }
    if (from.has_server_hibernation()) {
      set_server_hibernation(from.server_hibernation());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_server_region()) {
      set_server_region(from.server_region());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_server_loadavg()) {
      set_server_loadavg(from.server_loadavg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerInfo::CopyFrom(const CMsgGameServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerInfo::IsInitialized() const {
  
  return true;
}

void CMsgGameServerInfo::Swap(CMsgGameServerInfo* other) {
  if (other != this) {
    std::swap(server_public_ip_addr_, other->server_public_ip_addr_);
    std::swap(server_private_ip_addr_, other->server_private_ip_addr_);
    std::swap(server_port_, other->server_port_);
    std::swap(server_tv_port_, other->server_tv_port_);
    std::swap(server_key_, other->server_key_);
    std::swap(server_hibernation_, other->server_hibernation_);
    std::swap(server_type_, other->server_type_);
    std::swap(server_region_, other->server_region_);
    std::swap(server_loadavg_, other->server_loadavg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameServerInfo_descriptor_;
  metadata.reflection = CMsgGameServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgServerAvailable::CMsgServerAvailable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgServerAvailable::InitAsDefaultInstance() {
}

CMsgServerAvailable::CMsgServerAvailable(const CMsgServerAvailable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgServerAvailable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerAvailable::~CMsgServerAvailable() {
  SharedDtor();
}

void CMsgServerAvailable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerAvailable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerAvailable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerAvailable_descriptor_;
}

const CMsgServerAvailable& CMsgServerAvailable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgServerAvailable* CMsgServerAvailable::default_instance_ = NULL;

CMsgServerAvailable* CMsgServerAvailable::New() const {
  return new CMsgServerAvailable;
}

void CMsgServerAvailable::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgServerAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgServerAvailable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgServerAvailable::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerAvailable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerAvailable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerAvailable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerAvailable::MergeFrom(const CMsgServerAvailable& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerAvailable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerAvailable::CopyFrom(const CMsgServerAvailable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerAvailable::IsInitialized() const {
  
  return true;
}

void CMsgServerAvailable::Swap(CMsgServerAvailable* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerAvailable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerAvailable_descriptor_;
  metadata.reflection = CMsgServerAvailable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOEconGameAccountClient::kAdditionalBackpackSlotsFieldNumber;
const int CSOEconGameAccountClient::kTrialAccountFieldNumber;
const int CSOEconGameAccountClient::kEligibleForOnlinePlayFieldNumber;
const int CSOEconGameAccountClient::kNeedToChooseMostHelpfulFriendFieldNumber;
const int CSOEconGameAccountClient::kInCoachesListFieldNumber;
const int CSOEconGameAccountClient::kTradeBanExpirationFieldNumber;
const int CSOEconGameAccountClient::kDuelBanExpirationFieldNumber;
const int CSOEconGameAccountClient::kPreviewItemDefFieldNumber;
#endif  // !_MSC_VER

CSOEconGameAccountClient::CSOEconGameAccountClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconGameAccountClient::InitAsDefaultInstance() {
}

CSOEconGameAccountClient::CSOEconGameAccountClient(const CSOEconGameAccountClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconGameAccountClient::SharedCtor() {
  _cached_size_ = 0;
  additional_backpack_slots_ = 0u;
  trial_account_ = false;
  eligible_for_online_play_ = true;
  need_to_choose_most_helpful_friend_ = false;
  in_coaches_list_ = false;
  trade_ban_expiration_ = 0u;
  duel_ban_expiration_ = 0u;
  preview_item_def_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconGameAccountClient::~CSOEconGameAccountClient() {
  SharedDtor();
}

void CSOEconGameAccountClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOEconGameAccountClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconGameAccountClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconGameAccountClient_descriptor_;
}

const CSOEconGameAccountClient& CSOEconGameAccountClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconGameAccountClient* CSOEconGameAccountClient::default_instance_ = NULL;

CSOEconGameAccountClient* CSOEconGameAccountClient::New() const {
  return new CSOEconGameAccountClient;
}

void CSOEconGameAccountClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    additional_backpack_slots_ = 0u;
    trial_account_ = false;
    eligible_for_online_play_ = true;
    need_to_choose_most_helpful_friend_ = false;
    in_coaches_list_ = false;
    trade_ban_expiration_ = 0u;
    duel_ban_expiration_ = 0u;
    preview_item_def_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconGameAccountClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 additional_backpack_slots = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &additional_backpack_slots_)));
          set_has_additional_backpack_slots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trial_account;
        break;
      }
      
      // optional bool trial_account = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trial_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trial_account_)));
          set_has_trial_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eligible_for_online_play;
        break;
      }
      
      // optional bool eligible_for_online_play = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eligible_for_online_play:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eligible_for_online_play_)));
          set_has_eligible_for_online_play();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_need_to_choose_most_helpful_friend;
        break;
      }
      
      // optional bool need_to_choose_most_helpful_friend = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_to_choose_most_helpful_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_to_choose_most_helpful_friend_)));
          set_has_need_to_choose_most_helpful_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_in_coaches_list;
        break;
      }
      
      // optional bool in_coaches_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_coaches_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_coaches_list_)));
          set_has_in_coaches_list();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_trade_ban_expiration;
        break;
      }
      
      // optional fixed32 trade_ban_expiration = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trade_ban_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &trade_ban_expiration_)));
          set_has_trade_ban_expiration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_duel_ban_expiration;
        break;
      }
      
      // optional fixed32 duel_ban_expiration = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duel_ban_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &duel_ban_expiration_)));
          set_has_duel_ban_expiration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_preview_item_def;
        break;
      }
      
      // optional uint32 preview_item_def = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preview_item_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preview_item_def_)));
          set_has_preview_item_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconGameAccountClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 additional_backpack_slots = 1 [default = 0];
  if (has_additional_backpack_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->additional_backpack_slots(), output);
  }
  
  // optional bool trial_account = 2 [default = false];
  if (has_trial_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trial_account(), output);
  }
  
  // optional bool eligible_for_online_play = 3 [default = true];
  if (has_eligible_for_online_play()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->eligible_for_online_play(), output);
  }
  
  // optional bool need_to_choose_most_helpful_friend = 4;
  if (has_need_to_choose_most_helpful_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->need_to_choose_most_helpful_friend(), output);
  }
  
  // optional bool in_coaches_list = 5;
  if (has_in_coaches_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->in_coaches_list(), output);
  }
  
  // optional fixed32 trade_ban_expiration = 6;
  if (has_trade_ban_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->trade_ban_expiration(), output);
  }
  
  // optional fixed32 duel_ban_expiration = 7;
  if (has_duel_ban_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->duel_ban_expiration(), output);
  }
  
  // optional uint32 preview_item_def = 8 [default = 0];
  if (has_preview_item_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->preview_item_def(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconGameAccountClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 additional_backpack_slots = 1 [default = 0];
  if (has_additional_backpack_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->additional_backpack_slots(), target);
  }
  
  // optional bool trial_account = 2 [default = false];
  if (has_trial_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trial_account(), target);
  }
  
  // optional bool eligible_for_online_play = 3 [default = true];
  if (has_eligible_for_online_play()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->eligible_for_online_play(), target);
  }
  
  // optional bool need_to_choose_most_helpful_friend = 4;
  if (has_need_to_choose_most_helpful_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->need_to_choose_most_helpful_friend(), target);
  }
  
  // optional bool in_coaches_list = 5;
  if (has_in_coaches_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->in_coaches_list(), target);
  }
  
  // optional fixed32 trade_ban_expiration = 6;
  if (has_trade_ban_expiration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->trade_ban_expiration(), target);
  }
  
  // optional fixed32 duel_ban_expiration = 7;
  if (has_duel_ban_expiration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->duel_ban_expiration(), target);
  }
  
  // optional uint32 preview_item_def = 8 [default = 0];
  if (has_preview_item_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->preview_item_def(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconGameAccountClient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 additional_backpack_slots = 1 [default = 0];
    if (has_additional_backpack_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->additional_backpack_slots());
    }
    
    // optional bool trial_account = 2 [default = false];
    if (has_trial_account()) {
      total_size += 1 + 1;
    }
    
    // optional bool eligible_for_online_play = 3 [default = true];
    if (has_eligible_for_online_play()) {
      total_size += 1 + 1;
    }
    
    // optional bool need_to_choose_most_helpful_friend = 4;
    if (has_need_to_choose_most_helpful_friend()) {
      total_size += 1 + 1;
    }
    
    // optional bool in_coaches_list = 5;
    if (has_in_coaches_list()) {
      total_size += 1 + 1;
    }
    
    // optional fixed32 trade_ban_expiration = 6;
    if (has_trade_ban_expiration()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 duel_ban_expiration = 7;
    if (has_duel_ban_expiration()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 preview_item_def = 8 [default = 0];
    if (has_preview_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preview_item_def());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconGameAccountClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconGameAccountClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconGameAccountClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconGameAccountClient::MergeFrom(const CSOEconGameAccountClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_additional_backpack_slots()) {
      set_additional_backpack_slots(from.additional_backpack_slots());
    }
    if (from.has_trial_account()) {
      set_trial_account(from.trial_account());
    }
    if (from.has_eligible_for_online_play()) {
      set_eligible_for_online_play(from.eligible_for_online_play());
    }
    if (from.has_need_to_choose_most_helpful_friend()) {
      set_need_to_choose_most_helpful_friend(from.need_to_choose_most_helpful_friend());
    }
    if (from.has_in_coaches_list()) {
      set_in_coaches_list(from.in_coaches_list());
    }
    if (from.has_trade_ban_expiration()) {
      set_trade_ban_expiration(from.trade_ban_expiration());
    }
    if (from.has_duel_ban_expiration()) {
      set_duel_ban_expiration(from.duel_ban_expiration());
    }
    if (from.has_preview_item_def()) {
      set_preview_item_def(from.preview_item_def());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconGameAccountClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconGameAccountClient::CopyFrom(const CSOEconGameAccountClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconGameAccountClient::IsInitialized() const {
  
  return true;
}

void CSOEconGameAccountClient::Swap(CSOEconGameAccountClient* other) {
  if (other != this) {
    std::swap(additional_backpack_slots_, other->additional_backpack_slots_);
    std::swap(trial_account_, other->trial_account_);
    std::swap(eligible_for_online_play_, other->eligible_for_online_play_);
    std::swap(need_to_choose_most_helpful_friend_, other->need_to_choose_most_helpful_friend_);
    std::swap(in_coaches_list_, other->in_coaches_list_);
    std::swap(trade_ban_expiration_, other->trade_ban_expiration_);
    std::swap(duel_ban_expiration_, other->duel_ban_expiration_);
    std::swap(preview_item_def_, other->preview_item_def_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconGameAccountClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconGameAccountClient_descriptor_;
  metadata.reflection = CSOEconGameAccountClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOItemCriteriaCondition::kOpFieldNumber;
const int CSOItemCriteriaCondition::kFieldFieldNumber;
const int CSOItemCriteriaCondition::kRequiredFieldNumber;
const int CSOItemCriteriaCondition::kFloatValueFieldNumber;
const int CSOItemCriteriaCondition::kStringValueFieldNumber;
#endif  // !_MSC_VER

CSOItemCriteriaCondition::CSOItemCriteriaCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOItemCriteriaCondition::InitAsDefaultInstance() {
}

CSOItemCriteriaCondition::CSOItemCriteriaCondition(const CSOItemCriteriaCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOItemCriteriaCondition::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  required_ = false;
  float_value_ = 0;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOItemCriteriaCondition::~CSOItemCriteriaCondition() {
  SharedDtor();
}

void CSOItemCriteriaCondition::SharedDtor() {
  if (field_ != &::google::protobuf::internal::kEmptyString) {
    delete field_;
  }
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    delete string_value_;
  }
  if (this != default_instance_) {
  }
}

void CSOItemCriteriaCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOItemCriteriaCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOItemCriteriaCondition_descriptor_;
}

const CSOItemCriteriaCondition& CSOItemCriteriaCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOItemCriteriaCondition* CSOItemCriteriaCondition::default_instance_ = NULL;

CSOItemCriteriaCondition* CSOItemCriteriaCondition::New() const {
  return new CSOItemCriteriaCondition;
}

void CSOItemCriteriaCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
    if (has_field()) {
      if (field_ != &::google::protobuf::internal::kEmptyString) {
        field_->clear();
      }
    }
    required_ = false;
    float_value_ = 0;
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::kEmptyString) {
        string_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOItemCriteriaCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field;
        break;
      }
      
      // optional string field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field().data(), this->field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_required;
        break;
      }
      
      // optional bool required = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));
          set_has_required();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_float_value;
        break;
      }
      
      // optional float float_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_float_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
          set_has_float_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_string_value;
        break;
      }
      
      // optional string string_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOItemCriteriaCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }
  
  // optional string field = 2;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->field(), output);
  }
  
  // optional bool required = 3;
  if (has_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->required(), output);
  }
  
  // optional float float_value = 4;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->float_value(), output);
  }
  
  // optional string string_value = 5;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->string_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOItemCriteriaCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }
  
  // optional string field = 2;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }
  
  // optional bool required = 3;
  if (has_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->required(), target);
  }
  
  // optional float float_value = 4;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->float_value(), target);
  }
  
  // optional string string_value = 5;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->string_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOItemCriteriaCondition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }
    
    // optional string field = 2;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field());
    }
    
    // optional bool required = 3;
    if (has_required()) {
      total_size += 1 + 1;
    }
    
    // optional float float_value = 4;
    if (has_float_value()) {
      total_size += 1 + 4;
    }
    
    // optional string string_value = 5;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOItemCriteriaCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOItemCriteriaCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOItemCriteriaCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOItemCriteriaCondition::MergeFrom(const CSOItemCriteriaCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_field()) {
      set_field(from.field());
    }
    if (from.has_required()) {
      set_required(from.required());
    }
    if (from.has_float_value()) {
      set_float_value(from.float_value());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOItemCriteriaCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemCriteriaCondition::CopyFrom(const CSOItemCriteriaCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemCriteriaCondition::IsInitialized() const {
  
  return true;
}

void CSOItemCriteriaCondition::Swap(CSOItemCriteriaCondition* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(field_, other->field_);
    std::swap(required_, other->required_);
    std::swap(float_value_, other->float_value_);
    std::swap(string_value_, other->string_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOItemCriteriaCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOItemCriteriaCondition_descriptor_;
  metadata.reflection = CSOItemCriteriaCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOItemCriteria::kItemLevelFieldNumber;
const int CSOItemCriteria::kItemQualityFieldNumber;
const int CSOItemCriteria::kItemLevelSetFieldNumber;
const int CSOItemCriteria::kItemQualitySetFieldNumber;
const int CSOItemCriteria::kInitialInventoryFieldNumber;
const int CSOItemCriteria::kInitialQuantityFieldNumber;
const int CSOItemCriteria::kForcedQualityMatchFieldNumber;
const int CSOItemCriteria::kIgnoreEnabledFlagFieldNumber;
const int CSOItemCriteria::kConditionsFieldNumber;
#endif  // !_MSC_VER

CSOItemCriteria::CSOItemCriteria()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOItemCriteria::InitAsDefaultInstance() {
}

CSOItemCriteria::CSOItemCriteria(const CSOItemCriteria& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOItemCriteria::SharedCtor() {
  _cached_size_ = 0;
  item_level_ = 0u;
  item_quality_ = 0;
  item_level_set_ = false;
  item_quality_set_ = false;
  initial_inventory_ = 0u;
  initial_quantity_ = 0u;
  forced_quality_match_ = false;
  ignore_enabled_flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOItemCriteria::~CSOItemCriteria() {
  SharedDtor();
}

void CSOItemCriteria::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOItemCriteria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOItemCriteria::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOItemCriteria_descriptor_;
}

const CSOItemCriteria& CSOItemCriteria::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOItemCriteria* CSOItemCriteria::default_instance_ = NULL;

CSOItemCriteria* CSOItemCriteria::New() const {
  return new CSOItemCriteria;
}

void CSOItemCriteria::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_level_ = 0u;
    item_quality_ = 0;
    item_level_set_ = false;
    item_quality_set_ = false;
    initial_inventory_ = 0u;
    initial_quantity_ = 0u;
    forced_quality_match_ = false;
    ignore_enabled_flag_ = false;
  }
  conditions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOItemCriteria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_level_)));
          set_has_item_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_quality;
        break;
      }
      
      // optional int32 item_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_quality_)));
          set_has_item_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_level_set;
        break;
      }
      
      // optional bool item_level_set = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_level_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &item_level_set_)));
          set_has_item_level_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_quality_set;
        break;
      }
      
      // optional bool item_quality_set = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_quality_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &item_quality_set_)));
          set_has_item_quality_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_initial_inventory;
        break;
      }
      
      // optional uint32 initial_inventory = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initial_inventory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_inventory_)));
          set_has_initial_inventory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_initial_quantity;
        break;
      }
      
      // optional uint32 initial_quantity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initial_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_quantity_)));
          set_has_initial_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_forced_quality_match;
        break;
      }
      
      // optional bool forced_quality_match = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forced_quality_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forced_quality_match_)));
          set_has_forced_quality_match();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ignore_enabled_flag;
        break;
      }
      
      // optional bool ignore_enabled_flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignore_enabled_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_enabled_flag_)));
          set_has_ignore_enabled_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_conditions;
        break;
      }
      
      // repeated .CSOItemCriteriaCondition conditions = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conditions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_conditions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOItemCriteria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_level = 1;
  if (has_item_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_level(), output);
  }
  
  // optional int32 item_quality = 2;
  if (has_item_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_quality(), output);
  }
  
  // optional bool item_level_set = 3;
  if (has_item_level_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->item_level_set(), output);
  }
  
  // optional bool item_quality_set = 4;
  if (has_item_quality_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->item_quality_set(), output);
  }
  
  // optional uint32 initial_inventory = 5;
  if (has_initial_inventory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->initial_inventory(), output);
  }
  
  // optional uint32 initial_quantity = 6;
  if (has_initial_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->initial_quantity(), output);
  }
  
  // optional bool forced_quality_match = 7;
  if (has_forced_quality_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->forced_quality_match(), output);
  }
  
  // optional bool ignore_enabled_flag = 8;
  if (has_ignore_enabled_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ignore_enabled_flag(), output);
  }
  
  // repeated .CSOItemCriteriaCondition conditions = 9;
  for (int i = 0; i < this->conditions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->conditions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOItemCriteria::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_level = 1;
  if (has_item_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_level(), target);
  }
  
  // optional int32 item_quality = 2;
  if (has_item_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_quality(), target);
  }
  
  // optional bool item_level_set = 3;
  if (has_item_level_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->item_level_set(), target);
  }
  
  // optional bool item_quality_set = 4;
  if (has_item_quality_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->item_quality_set(), target);
  }
  
  // optional uint32 initial_inventory = 5;
  if (has_initial_inventory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->initial_inventory(), target);
  }
  
  // optional uint32 initial_quantity = 6;
  if (has_initial_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->initial_quantity(), target);
  }
  
  // optional bool forced_quality_match = 7;
  if (has_forced_quality_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->forced_quality_match(), target);
  }
  
  // optional bool ignore_enabled_flag = 8;
  if (has_ignore_enabled_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ignore_enabled_flag(), target);
  }
  
  // repeated .CSOItemCriteriaCondition conditions = 9;
  for (int i = 0; i < this->conditions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->conditions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOItemCriteria::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_level = 1;
    if (has_item_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_level());
    }
    
    // optional int32 item_quality = 2;
    if (has_item_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_quality());
    }
    
    // optional bool item_level_set = 3;
    if (has_item_level_set()) {
      total_size += 1 + 1;
    }
    
    // optional bool item_quality_set = 4;
    if (has_item_quality_set()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 initial_inventory = 5;
    if (has_initial_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_inventory());
    }
    
    // optional uint32 initial_quantity = 6;
    if (has_initial_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_quantity());
    }
    
    // optional bool forced_quality_match = 7;
    if (has_forced_quality_match()) {
      total_size += 1 + 1;
    }
    
    // optional bool ignore_enabled_flag = 8;
    if (has_ignore_enabled_flag()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .CSOItemCriteriaCondition conditions = 9;
  total_size += 1 * this->conditions_size();
  for (int i = 0; i < this->conditions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conditions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOItemCriteria::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOItemCriteria* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOItemCriteria*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOItemCriteria::MergeFrom(const CSOItemCriteria& from) {
  GOOGLE_CHECK_NE(&from, this);
  conditions_.MergeFrom(from.conditions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_level()) {
      set_item_level(from.item_level());
    }
    if (from.has_item_quality()) {
      set_item_quality(from.item_quality());
    }
    if (from.has_item_level_set()) {
      set_item_level_set(from.item_level_set());
    }
    if (from.has_item_quality_set()) {
      set_item_quality_set(from.item_quality_set());
    }
    if (from.has_initial_inventory()) {
      set_initial_inventory(from.initial_inventory());
    }
    if (from.has_initial_quantity()) {
      set_initial_quantity(from.initial_quantity());
    }
    if (from.has_forced_quality_match()) {
      set_forced_quality_match(from.forced_quality_match());
    }
    if (from.has_ignore_enabled_flag()) {
      set_ignore_enabled_flag(from.ignore_enabled_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOItemCriteria::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemCriteria::CopyFrom(const CSOItemCriteria& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemCriteria::IsInitialized() const {
  
  return true;
}

void CSOItemCriteria::Swap(CSOItemCriteria* other) {
  if (other != this) {
    std::swap(item_level_, other->item_level_);
    std::swap(item_quality_, other->item_quality_);
    std::swap(item_level_set_, other->item_level_set_);
    std::swap(item_quality_set_, other->item_quality_set_);
    std::swap(initial_inventory_, other->initial_inventory_);
    std::swap(initial_quantity_, other->initial_quantity_);
    std::swap(forced_quality_match_, other->forced_quality_match_);
    std::swap(ignore_enabled_flag_, other->ignore_enabled_flag_);
    conditions_.Swap(&other->conditions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOItemCriteria::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOItemCriteria_descriptor_;
  metadata.reflection = CSOItemCriteria_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOItemRecipe::kDefIndexFieldNumber;
const int CSOItemRecipe::kNameFieldNumber;
const int CSOItemRecipe::kNAFieldNumber;
const int CSOItemRecipe::kDescInputsFieldNumber;
const int CSOItemRecipe::kDescOutputsFieldNumber;
const int CSOItemRecipe::kDiAFieldNumber;
const int CSOItemRecipe::kDiBFieldNumber;
const int CSOItemRecipe::kDiCFieldNumber;
const int CSOItemRecipe::kDoAFieldNumber;
const int CSOItemRecipe::kDoBFieldNumber;
const int CSOItemRecipe::kDoCFieldNumber;
const int CSOItemRecipe::kRequiresAllSameClassFieldNumber;
const int CSOItemRecipe::kRequiresAllSameSlotFieldNumber;
const int CSOItemRecipe::kClassUsageForOutputFieldNumber;
const int CSOItemRecipe::kSlotUsageForOutputFieldNumber;
const int CSOItemRecipe::kSetForOutputFieldNumber;
const int CSOItemRecipe::kInputItemsCriteriaFieldNumber;
const int CSOItemRecipe::kOutputItemsCriteriaFieldNumber;
const int CSOItemRecipe::kInputItemDupeCountsFieldNumber;
#endif  // !_MSC_VER

CSOItemRecipe::CSOItemRecipe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOItemRecipe::InitAsDefaultInstance() {
}

CSOItemRecipe::CSOItemRecipe(const CSOItemRecipe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOItemRecipe::SharedCtor() {
  _cached_size_ = 0;
  def_index_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  n_a_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_inputs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_outputs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  di_a_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  di_b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  di_c_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  do_a_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  do_b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  do_c_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requires_all_same_class_ = false;
  requires_all_same_slot_ = false;
  class_usage_for_output_ = 0;
  slot_usage_for_output_ = 0;
  set_for_output_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOItemRecipe::~CSOItemRecipe() {
  SharedDtor();
}

void CSOItemRecipe::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (n_a_ != &::google::protobuf::internal::kEmptyString) {
    delete n_a_;
  }
  if (desc_inputs_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_inputs_;
  }
  if (desc_outputs_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_outputs_;
  }
  if (di_a_ != &::google::protobuf::internal::kEmptyString) {
    delete di_a_;
  }
  if (di_b_ != &::google::protobuf::internal::kEmptyString) {
    delete di_b_;
  }
  if (di_c_ != &::google::protobuf::internal::kEmptyString) {
    delete di_c_;
  }
  if (do_a_ != &::google::protobuf::internal::kEmptyString) {
    delete do_a_;
  }
  if (do_b_ != &::google::protobuf::internal::kEmptyString) {
    delete do_b_;
  }
  if (do_c_ != &::google::protobuf::internal::kEmptyString) {
    delete do_c_;
  }
  if (this != default_instance_) {
  }
}

void CSOItemRecipe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOItemRecipe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOItemRecipe_descriptor_;
}

const CSOItemRecipe& CSOItemRecipe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOItemRecipe* CSOItemRecipe::default_instance_ = NULL;

CSOItemRecipe* CSOItemRecipe::New() const {
  return new CSOItemRecipe;
}

void CSOItemRecipe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    def_index_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_n_a()) {
      if (n_a_ != &::google::protobuf::internal::kEmptyString) {
        n_a_->clear();
      }
    }
    if (has_desc_inputs()) {
      if (desc_inputs_ != &::google::protobuf::internal::kEmptyString) {
        desc_inputs_->clear();
      }
    }
    if (has_desc_outputs()) {
      if (desc_outputs_ != &::google::protobuf::internal::kEmptyString) {
        desc_outputs_->clear();
      }
    }
    if (has_di_a()) {
      if (di_a_ != &::google::protobuf::internal::kEmptyString) {
        di_a_->clear();
      }
    }
    if (has_di_b()) {
      if (di_b_ != &::google::protobuf::internal::kEmptyString) {
        di_b_->clear();
      }
    }
    if (has_di_c()) {
      if (di_c_ != &::google::protobuf::internal::kEmptyString) {
        di_c_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_do_a()) {
      if (do_a_ != &::google::protobuf::internal::kEmptyString) {
        do_a_->clear();
      }
    }
    if (has_do_b()) {
      if (do_b_ != &::google::protobuf::internal::kEmptyString) {
        do_b_->clear();
      }
    }
    if (has_do_c()) {
      if (do_c_ != &::google::protobuf::internal::kEmptyString) {
        do_c_->clear();
      }
    }
    requires_all_same_class_ = false;
    requires_all_same_slot_ = false;
    class_usage_for_output_ = 0;
    slot_usage_for_output_ = 0;
    set_for_output_ = 0;
  }
  input_items_criteria_.Clear();
  output_items_criteria_.Clear();
  input_item_dupe_counts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOItemRecipe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          set_has_def_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_n_a;
        break;
      }
      
      // optional string n_a = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_n_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_n_a()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->n_a().data(), this->n_a().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desc_inputs;
        break;
      }
      
      // optional string desc_inputs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_inputs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc_inputs().data(), this->desc_inputs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_desc_outputs;
        break;
      }
      
      // optional string desc_outputs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_outputs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc_outputs().data(), this->desc_outputs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_di_a;
        break;
      }
      
      // optional string di_a = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_di_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_di_a()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->di_a().data(), this->di_a().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_di_b;
        break;
      }
      
      // optional string di_b = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_di_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_di_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->di_b().data(), this->di_b().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_di_c;
        break;
      }
      
      // optional string di_c = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_di_c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_di_c()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->di_c().data(), this->di_c().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_do_a;
        break;
      }
      
      // optional string do_a = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_do_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_a()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->do_a().data(), this->do_a().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_do_b;
        break;
      }
      
      // optional string do_b = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_do_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->do_b().data(), this->do_b().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_do_c;
        break;
      }
      
      // optional string do_c = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_do_c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_c()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->do_c().data(), this->do_c().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_requires_all_same_class;
        break;
      }
      
      // optional bool requires_all_same_class = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requires_all_same_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_all_same_class_)));
          set_has_requires_all_same_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_requires_all_same_slot;
        break;
      }
      
      // optional bool requires_all_same_slot = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requires_all_same_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_all_same_slot_)));
          set_has_requires_all_same_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_class_usage_for_output;
        break;
      }
      
      // optional int32 class_usage_for_output = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_class_usage_for_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_usage_for_output_)));
          set_has_class_usage_for_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_slot_usage_for_output;
        break;
      }
      
      // optional int32 slot_usage_for_output = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_usage_for_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_usage_for_output_)));
          set_has_slot_usage_for_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_set_for_output;
        break;
      }
      
      // optional int32 set_for_output = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_set_for_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_for_output_)));
          set_has_set_for_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_input_items_criteria;
        break;
      }
      
      // repeated .CSOItemCriteria input_items_criteria = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_items_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input_items_criteria()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_input_items_criteria;
        if (input->ExpectTag(170)) goto parse_output_items_criteria;
        break;
      }
      
      // repeated .CSOItemCriteria output_items_criteria = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_items_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output_items_criteria()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_output_items_criteria;
        if (input->ExpectTag(176)) goto parse_input_item_dupe_counts;
        break;
      }
      
      // repeated uint32 input_item_dupe_counts = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_item_dupe_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176, input, this->mutable_input_item_dupe_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_input_item_dupe_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_input_item_dupe_counts;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOItemRecipe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 def_index = 1;
  if (has_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string n_a = 3;
  if (has_n_a()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->n_a().data(), this->n_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->n_a(), output);
  }
  
  // optional string desc_inputs = 4;
  if (has_desc_inputs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_inputs().data(), this->desc_inputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desc_inputs(), output);
  }
  
  // optional string desc_outputs = 5;
  if (has_desc_outputs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_outputs().data(), this->desc_outputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->desc_outputs(), output);
  }
  
  // optional string di_a = 6;
  if (has_di_a()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_a().data(), this->di_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->di_a(), output);
  }
  
  // optional string di_b = 7;
  if (has_di_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_b().data(), this->di_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->di_b(), output);
  }
  
  // optional string di_c = 8;
  if (has_di_c()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_c().data(), this->di_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->di_c(), output);
  }
  
  // optional string do_a = 9;
  if (has_do_a()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_a().data(), this->do_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->do_a(), output);
  }
  
  // optional string do_b = 10;
  if (has_do_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_b().data(), this->do_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->do_b(), output);
  }
  
  // optional string do_c = 11;
  if (has_do_c()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_c().data(), this->do_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->do_c(), output);
  }
  
  // optional bool requires_all_same_class = 12;
  if (has_requires_all_same_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->requires_all_same_class(), output);
  }
  
  // optional bool requires_all_same_slot = 13;
  if (has_requires_all_same_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->requires_all_same_slot(), output);
  }
  
  // optional int32 class_usage_for_output = 14;
  if (has_class_usage_for_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->class_usage_for_output(), output);
  }
  
  // optional int32 slot_usage_for_output = 15;
  if (has_slot_usage_for_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->slot_usage_for_output(), output);
  }
  
  // optional int32 set_for_output = 16;
  if (has_set_for_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->set_for_output(), output);
  }
  
  // repeated .CSOItemCriteria input_items_criteria = 20;
  for (int i = 0; i < this->input_items_criteria_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->input_items_criteria(i), output);
  }
  
  // repeated .CSOItemCriteria output_items_criteria = 21;
  for (int i = 0; i < this->output_items_criteria_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->output_items_criteria(i), output);
  }
  
  // repeated uint32 input_item_dupe_counts = 22;
  for (int i = 0; i < this->input_item_dupe_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->input_item_dupe_counts(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOItemRecipe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 def_index = 1;
  if (has_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string n_a = 3;
  if (has_n_a()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->n_a().data(), this->n_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->n_a(), target);
  }
  
  // optional string desc_inputs = 4;
  if (has_desc_inputs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_inputs().data(), this->desc_inputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc_inputs(), target);
  }
  
  // optional string desc_outputs = 5;
  if (has_desc_outputs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_outputs().data(), this->desc_outputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc_outputs(), target);
  }
  
  // optional string di_a = 6;
  if (has_di_a()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_a().data(), this->di_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->di_a(), target);
  }
  
  // optional string di_b = 7;
  if (has_di_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_b().data(), this->di_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->di_b(), target);
  }
  
  // optional string di_c = 8;
  if (has_di_c()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_c().data(), this->di_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->di_c(), target);
  }
  
  // optional string do_a = 9;
  if (has_do_a()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_a().data(), this->do_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->do_a(), target);
  }
  
  // optional string do_b = 10;
  if (has_do_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_b().data(), this->do_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->do_b(), target);
  }
  
  // optional string do_c = 11;
  if (has_do_c()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_c().data(), this->do_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->do_c(), target);
  }
  
  // optional bool requires_all_same_class = 12;
  if (has_requires_all_same_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->requires_all_same_class(), target);
  }
  
  // optional bool requires_all_same_slot = 13;
  if (has_requires_all_same_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->requires_all_same_slot(), target);
  }
  
  // optional int32 class_usage_for_output = 14;
  if (has_class_usage_for_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->class_usage_for_output(), target);
  }
  
  // optional int32 slot_usage_for_output = 15;
  if (has_slot_usage_for_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->slot_usage_for_output(), target);
  }
  
  // optional int32 set_for_output = 16;
  if (has_set_for_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->set_for_output(), target);
  }
  
  // repeated .CSOItemCriteria input_items_criteria = 20;
  for (int i = 0; i < this->input_items_criteria_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->input_items_criteria(i), target);
  }
  
  // repeated .CSOItemCriteria output_items_criteria = 21;
  for (int i = 0; i < this->output_items_criteria_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->output_items_criteria(i), target);
  }
  
  // repeated uint32 input_item_dupe_counts = 22;
  for (int i = 0; i < this->input_item_dupe_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(22, this->input_item_dupe_counts(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOItemRecipe::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 def_index = 1;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string n_a = 3;
    if (has_n_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->n_a());
    }
    
    // optional string desc_inputs = 4;
    if (has_desc_inputs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc_inputs());
    }
    
    // optional string desc_outputs = 5;
    if (has_desc_outputs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc_outputs());
    }
    
    // optional string di_a = 6;
    if (has_di_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->di_a());
    }
    
    // optional string di_b = 7;
    if (has_di_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->di_b());
    }
    
    // optional string di_c = 8;
    if (has_di_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->di_c());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string do_a = 9;
    if (has_do_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_a());
    }
    
    // optional string do_b = 10;
    if (has_do_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_b());
    }
    
    // optional string do_c = 11;
    if (has_do_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_c());
    }
    
    // optional bool requires_all_same_class = 12;
    if (has_requires_all_same_class()) {
      total_size += 1 + 1;
    }
    
    // optional bool requires_all_same_slot = 13;
    if (has_requires_all_same_slot()) {
      total_size += 1 + 1;
    }
    
    // optional int32 class_usage_for_output = 14;
    if (has_class_usage_for_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_usage_for_output());
    }
    
    // optional int32 slot_usage_for_output = 15;
    if (has_slot_usage_for_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_usage_for_output());
    }
    
    // optional int32 set_for_output = 16;
    if (has_set_for_output()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_for_output());
    }
    
  }
  // repeated .CSOItemCriteria input_items_criteria = 20;
  total_size += 2 * this->input_items_criteria_size();
  for (int i = 0; i < this->input_items_criteria_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input_items_criteria(i));
  }
  
  // repeated .CSOItemCriteria output_items_criteria = 21;
  total_size += 2 * this->output_items_criteria_size();
  for (int i = 0; i < this->output_items_criteria_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output_items_criteria(i));
  }
  
  // repeated uint32 input_item_dupe_counts = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->input_item_dupe_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->input_item_dupe_counts(i));
    }
    total_size += 2 * this->input_item_dupe_counts_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOItemRecipe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOItemRecipe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOItemRecipe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOItemRecipe::MergeFrom(const CSOItemRecipe& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_items_criteria_.MergeFrom(from.input_items_criteria_);
  output_items_criteria_.MergeFrom(from.output_items_criteria_);
  input_item_dupe_counts_.MergeFrom(from.input_item_dupe_counts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_def_index()) {
      set_def_index(from.def_index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_n_a()) {
      set_n_a(from.n_a());
    }
    if (from.has_desc_inputs()) {
      set_desc_inputs(from.desc_inputs());
    }
    if (from.has_desc_outputs()) {
      set_desc_outputs(from.desc_outputs());
    }
    if (from.has_di_a()) {
      set_di_a(from.di_a());
    }
    if (from.has_di_b()) {
      set_di_b(from.di_b());
    }
    if (from.has_di_c()) {
      set_di_c(from.di_c());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_do_a()) {
      set_do_a(from.do_a());
    }
    if (from.has_do_b()) {
      set_do_b(from.do_b());
    }
    if (from.has_do_c()) {
      set_do_c(from.do_c());
    }
    if (from.has_requires_all_same_class()) {
      set_requires_all_same_class(from.requires_all_same_class());
    }
    if (from.has_requires_all_same_slot()) {
      set_requires_all_same_slot(from.requires_all_same_slot());
    }
    if (from.has_class_usage_for_output()) {
      set_class_usage_for_output(from.class_usage_for_output());
    }
    if (from.has_slot_usage_for_output()) {
      set_slot_usage_for_output(from.slot_usage_for_output());
    }
    if (from.has_set_for_output()) {
      set_set_for_output(from.set_for_output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOItemRecipe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemRecipe::CopyFrom(const CSOItemRecipe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemRecipe::IsInitialized() const {
  
  return true;
}

void CSOItemRecipe::Swap(CSOItemRecipe* other) {
  if (other != this) {
    std::swap(def_index_, other->def_index_);
    std::swap(name_, other->name_);
    std::swap(n_a_, other->n_a_);
    std::swap(desc_inputs_, other->desc_inputs_);
    std::swap(desc_outputs_, other->desc_outputs_);
    std::swap(di_a_, other->di_a_);
    std::swap(di_b_, other->di_b_);
    std::swap(di_c_, other->di_c_);
    std::swap(do_a_, other->do_a_);
    std::swap(do_b_, other->do_b_);
    std::swap(do_c_, other->do_c_);
    std::swap(requires_all_same_class_, other->requires_all_same_class_);
    std::swap(requires_all_same_slot_, other->requires_all_same_slot_);
    std::swap(class_usage_for_output_, other->class_usage_for_output_);
    std::swap(slot_usage_for_output_, other->slot_usage_for_output_);
    std::swap(set_for_output_, other->set_for_output_);
    input_items_criteria_.Swap(&other->input_items_criteria_);
    output_items_criteria_.Swap(&other->output_items_criteria_);
    input_item_dupe_counts_.Swap(&other->input_item_dupe_counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOItemRecipe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOItemRecipe_descriptor_;
  metadata.reflection = CSOItemRecipe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDevNewItemRequest::kReceiverFieldNumber;
const int CMsgDevNewItemRequest::kCriteriaFieldNumber;
#endif  // !_MSC_VER

CMsgDevNewItemRequest::CMsgDevNewItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDevNewItemRequest::InitAsDefaultInstance() {
  criteria_ = const_cast< ::CSOItemCriteria*>(&::CSOItemCriteria::default_instance());
}

CMsgDevNewItemRequest::CMsgDevNewItemRequest(const CMsgDevNewItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDevNewItemRequest::SharedCtor() {
  _cached_size_ = 0;
  receiver_ = GOOGLE_ULONGLONG(0);
  criteria_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDevNewItemRequest::~CMsgDevNewItemRequest() {
  SharedDtor();
}

void CMsgDevNewItemRequest::SharedDtor() {
  if (this != default_instance_) {
    delete criteria_;
  }
}

void CMsgDevNewItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDevNewItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDevNewItemRequest_descriptor_;
}

const CMsgDevNewItemRequest& CMsgDevNewItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgDevNewItemRequest* CMsgDevNewItemRequest::default_instance_ = NULL;

CMsgDevNewItemRequest* CMsgDevNewItemRequest::New() const {
  return new CMsgDevNewItemRequest;
}

void CMsgDevNewItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    receiver_ = GOOGLE_ULONGLONG(0);
    if (has_criteria()) {
      if (criteria_ != NULL) criteria_->::CSOItemCriteria::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDevNewItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 receiver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &receiver_)));
          set_has_receiver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_criteria;
        break;
      }
      
      // optional .CSOItemCriteria criteria = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_criteria()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDevNewItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 receiver = 1;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->receiver(), output);
  }
  
  // optional .CSOItemCriteria criteria = 2;
  if (has_criteria()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->criteria(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDevNewItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 receiver = 1;
  if (has_receiver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->receiver(), target);
  }
  
  // optional .CSOItemCriteria criteria = 2;
  if (has_criteria()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->criteria(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDevNewItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 receiver = 1;
    if (has_receiver()) {
      total_size += 1 + 8;
    }
    
    // optional .CSOItemCriteria criteria = 2;
    if (has_criteria()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->criteria());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDevNewItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDevNewItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDevNewItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDevNewItemRequest::MergeFrom(const CMsgDevNewItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receiver()) {
      set_receiver(from.receiver());
    }
    if (from.has_criteria()) {
      mutable_criteria()->::CSOItemCriteria::MergeFrom(from.criteria());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDevNewItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDevNewItemRequest::CopyFrom(const CMsgDevNewItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDevNewItemRequest::IsInitialized() const {
  
  return true;
}

void CMsgDevNewItemRequest::Swap(CMsgDevNewItemRequest* other) {
  if (other != this) {
    std::swap(receiver_, other->receiver_);
    std::swap(criteria_, other->criteria_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDevNewItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDevNewItemRequest_descriptor_;
  metadata.reflection = CMsgDevNewItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgIncrementKillCountAttribute::kKillerSteamIdFieldNumber;
const int CMsgIncrementKillCountAttribute::kVictimSteamIdFieldNumber;
const int CMsgIncrementKillCountAttribute::kItemIdFieldNumber;
const int CMsgIncrementKillCountAttribute::kEventTypeFieldNumber;
#endif  // !_MSC_VER

CMsgIncrementKillCountAttribute::CMsgIncrementKillCountAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgIncrementKillCountAttribute::InitAsDefaultInstance() {
}

CMsgIncrementKillCountAttribute::CMsgIncrementKillCountAttribute(const CMsgIncrementKillCountAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgIncrementKillCountAttribute::SharedCtor() {
  _cached_size_ = 0;
  killer_steam_id_ = GOOGLE_ULONGLONG(0);
  victim_steam_id_ = GOOGLE_ULONGLONG(0);
  item_id_ = GOOGLE_ULONGLONG(0);
  event_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgIncrementKillCountAttribute::~CMsgIncrementKillCountAttribute() {
  SharedDtor();
}

void CMsgIncrementKillCountAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgIncrementKillCountAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgIncrementKillCountAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgIncrementKillCountAttribute_descriptor_;
}

const CMsgIncrementKillCountAttribute& CMsgIncrementKillCountAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgIncrementKillCountAttribute* CMsgIncrementKillCountAttribute::default_instance_ = NULL;

CMsgIncrementKillCountAttribute* CMsgIncrementKillCountAttribute::New() const {
  return new CMsgIncrementKillCountAttribute;
}

void CMsgIncrementKillCountAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killer_steam_id_ = GOOGLE_ULONGLONG(0);
    victim_steam_id_ = GOOGLE_ULONGLONG(0);
    item_id_ = GOOGLE_ULONGLONG(0);
    event_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgIncrementKillCountAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 killer_steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &killer_steam_id_)));
          set_has_killer_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_victim_steam_id;
        break;
      }
      
      // optional uint64 victim_steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victim_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &victim_steam_id_)));
          set_has_victim_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }
      
      // optional uint64 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_event_type;
        break;
      }
      
      // optional uint32 event_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgIncrementKillCountAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 killer_steam_id = 1;
  if (has_killer_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->killer_steam_id(), output);
  }
  
  // optional uint64 victim_steam_id = 2;
  if (has_victim_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->victim_steam_id(), output);
  }
  
  // optional uint64 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_id(), output);
  }
  
  // optional uint32 event_type = 4;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->event_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgIncrementKillCountAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 killer_steam_id = 1;
  if (has_killer_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->killer_steam_id(), target);
  }
  
  // optional uint64 victim_steam_id = 2;
  if (has_victim_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->victim_steam_id(), target);
  }
  
  // optional uint64 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_id(), target);
  }
  
  // optional uint32 event_type = 4;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->event_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgIncrementKillCountAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 killer_steam_id = 1;
    if (has_killer_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->killer_steam_id());
    }
    
    // optional uint64 victim_steam_id = 2;
    if (has_victim_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->victim_steam_id());
    }
    
    // optional uint64 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional uint32 event_type = 4;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgIncrementKillCountAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgIncrementKillCountAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgIncrementKillCountAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgIncrementKillCountAttribute::MergeFrom(const CMsgIncrementKillCountAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killer_steam_id()) {
      set_killer_steam_id(from.killer_steam_id());
    }
    if (from.has_victim_steam_id()) {
      set_victim_steam_id(from.victim_steam_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgIncrementKillCountAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgIncrementKillCountAttribute::CopyFrom(const CMsgIncrementKillCountAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgIncrementKillCountAttribute::IsInitialized() const {
  
  return true;
}

void CMsgIncrementKillCountAttribute::Swap(CMsgIncrementKillCountAttribute* other) {
  if (other != this) {
    std::swap(killer_steam_id_, other->killer_steam_id_);
    std::swap(victim_steam_id_, other->victim_steam_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(event_type_, other->event_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgIncrementKillCountAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgIncrementKillCountAttribute_descriptor_;
  metadata.reflection = CMsgIncrementKillCountAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOEconItemAttribute::kDefIndexFieldNumber;
const int CSOEconItemAttribute::kValueFieldNumber;
#endif  // !_MSC_VER

CSOEconItemAttribute::CSOEconItemAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconItemAttribute::InitAsDefaultInstance() {
}

CSOEconItemAttribute::CSOEconItemAttribute(const CSOEconItemAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconItemAttribute::SharedCtor() {
  _cached_size_ = 0;
  def_index_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconItemAttribute::~CSOEconItemAttribute() {
  SharedDtor();
}

void CSOEconItemAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOEconItemAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItemAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconItemAttribute_descriptor_;
}

const CSOEconItemAttribute& CSOEconItemAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconItemAttribute* CSOEconItemAttribute::default_instance_ = NULL;

CSOEconItemAttribute* CSOEconItemAttribute::New() const {
  return new CSOEconItemAttribute;
}

void CSOEconItemAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    def_index_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconItemAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          set_has_def_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconItemAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 def_index = 1;
  if (has_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }
  
  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconItemAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 def_index = 1;
  if (has_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }
  
  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconItemAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 def_index = 1;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }
    
    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItemAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconItemAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconItemAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconItemAttribute::MergeFrom(const CSOEconItemAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_def_index()) {
      set_def_index(from.def_index());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconItemAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemAttribute::CopyFrom(const CSOEconItemAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemAttribute::IsInitialized() const {
  
  return true;
}

void CSOEconItemAttribute::Swap(CSOEconItemAttribute* other) {
  if (other != this) {
    std::swap(def_index_, other->def_index_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconItemAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconItemAttribute_descriptor_;
  metadata.reflection = CSOEconItemAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOEconItemEquipped::kNewClassFieldNumber;
const int CSOEconItemEquipped::kNewSlotFieldNumber;
#endif  // !_MSC_VER

CSOEconItemEquipped::CSOEconItemEquipped()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconItemEquipped::InitAsDefaultInstance() {
}

CSOEconItemEquipped::CSOEconItemEquipped(const CSOEconItemEquipped& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconItemEquipped::SharedCtor() {
  _cached_size_ = 0;
  new_class_ = 0u;
  new_slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconItemEquipped::~CSOEconItemEquipped() {
  SharedDtor();
}

void CSOEconItemEquipped::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOEconItemEquipped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItemEquipped::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconItemEquipped_descriptor_;
}

const CSOEconItemEquipped& CSOEconItemEquipped::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconItemEquipped* CSOEconItemEquipped::default_instance_ = NULL;

CSOEconItemEquipped* CSOEconItemEquipped::New() const {
  return new CSOEconItemEquipped;
}

void CSOEconItemEquipped::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    new_class_ = 0u;
    new_slot_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconItemEquipped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 new_class = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_class_)));
          set_has_new_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_slot;
        break;
      }
      
      // optional uint32 new_slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_slot_)));
          set_has_new_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconItemEquipped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 new_class = 1;
  if (has_new_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_class(), output);
  }
  
  // optional uint32 new_slot = 2;
  if (has_new_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_slot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconItemEquipped::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 new_class = 1;
  if (has_new_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_class(), target);
  }
  
  // optional uint32 new_slot = 2;
  if (has_new_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_slot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconItemEquipped::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 new_class = 1;
    if (has_new_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_class());
    }
    
    // optional uint32 new_slot = 2;
    if (has_new_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_slot());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItemEquipped::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconItemEquipped* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconItemEquipped*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconItemEquipped::MergeFrom(const CSOEconItemEquipped& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_class()) {
      set_new_class(from.new_class());
    }
    if (from.has_new_slot()) {
      set_new_slot(from.new_slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconItemEquipped::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemEquipped::CopyFrom(const CSOEconItemEquipped& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemEquipped::IsInitialized() const {
  
  return true;
}

void CSOEconItemEquipped::Swap(CSOEconItemEquipped* other) {
  if (other != this) {
    std::swap(new_class_, other->new_class_);
    std::swap(new_slot_, other->new_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconItemEquipped::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconItemEquipped_descriptor_;
  metadata.reflection = CSOEconItemEquipped_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOEconItem::kIdFieldNumber;
const int CSOEconItem::kAccountIdFieldNumber;
const int CSOEconItem::kInventoryFieldNumber;
const int CSOEconItem::kDefIndexFieldNumber;
const int CSOEconItem::kQuantityFieldNumber;
const int CSOEconItem::kLevelFieldNumber;
const int CSOEconItem::kQualityFieldNumber;
const int CSOEconItem::kFlagsFieldNumber;
const int CSOEconItem::kOriginFieldNumber;
const int CSOEconItem::kCustomNameFieldNumber;
const int CSOEconItem::kCustomDescFieldNumber;
const int CSOEconItem::kAttributeFieldNumber;
const int CSOEconItem::kInteriorItemFieldNumber;
const int CSOEconItem::kInUseFieldNumber;
const int CSOEconItem::kStyleFieldNumber;
const int CSOEconItem::kOriginalIdFieldNumber;
const int CSOEconItem::kContainsEquippedStateFieldNumber;
const int CSOEconItem::kEquippedStateFieldNumber;
#endif  // !_MSC_VER

CSOEconItem::CSOEconItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconItem::InitAsDefaultInstance() {
  interior_item_ = const_cast< ::CSOEconItem*>(&::CSOEconItem::default_instance());
}

CSOEconItem::CSOEconItem(const CSOEconItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  account_id_ = 0u;
  inventory_ = 0u;
  def_index_ = 0u;
  quantity_ = 0u;
  level_ = 0u;
  quality_ = 0u;
  flags_ = 0u;
  origin_ = 0u;
  custom_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  custom_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  interior_item_ = NULL;
  in_use_ = false;
  style_ = 0u;
  original_id_ = GOOGLE_ULONGLONG(0);
  contains_equipped_state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconItem::~CSOEconItem() {
  SharedDtor();
}

void CSOEconItem::SharedDtor() {
  if (custom_name_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_name_;
  }
  if (custom_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_desc_;
  }
  if (this != default_instance_) {
    delete interior_item_;
  }
}

void CSOEconItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconItem_descriptor_;
}

const CSOEconItem& CSOEconItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconItem* CSOEconItem::default_instance_ = NULL;

CSOEconItem* CSOEconItem::New() const {
  return new CSOEconItem;
}

void CSOEconItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    account_id_ = 0u;
    inventory_ = 0u;
    def_index_ = 0u;
    quantity_ = 0u;
    level_ = 0u;
    quality_ = 0u;
    flags_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    origin_ = 0u;
    if (has_custom_name()) {
      if (custom_name_ != &::google::protobuf::internal::kEmptyString) {
        custom_name_->clear();
      }
    }
    if (has_custom_desc()) {
      if (custom_desc_ != &::google::protobuf::internal::kEmptyString) {
        custom_desc_->clear();
      }
    }
    if (has_interior_item()) {
      if (interior_item_ != NULL) interior_item_->::CSOEconItem::Clear();
    }
    in_use_ = false;
    style_ = 0u;
    original_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    contains_equipped_state_ = false;
  }
  attribute_.Clear();
  equipped_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }
      
      // optional uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inventory;
        break;
      }
      
      // optional uint32 inventory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inventory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inventory_)));
          set_has_inventory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_def_index;
        break;
      }
      
      // optional uint32 def_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          set_has_def_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quantity;
        break;
      }
      
      // optional uint32 quantity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }
      
      // optional uint32 quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_flags;
        break;
      }
      
      // optional uint32 flags = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_origin;
        break;
      }
      
      // optional uint32 origin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
          set_has_origin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_custom_name;
        break;
      }
      
      // optional string custom_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custom_name().data(), this->custom_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_custom_desc;
        break;
      }
      
      // optional string custom_desc = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custom_desc().data(), this->custom_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_attribute;
        break;
      }
      
      // repeated .CSOEconItemAttribute attribute = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_attribute;
        if (input->ExpectTag(106)) goto parse_interior_item;
        break;
      }
      
      // optional .CSOEconItem interior_item = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interior_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interior_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_in_use;
        break;
      }
      
      // optional bool in_use = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_use_)));
          set_has_in_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_style;
        break;
      }
      
      // optional uint32 style = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_original_id;
        break;
      }
      
      // optional uint64 original_id = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &original_id_)));
          set_has_original_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_contains_equipped_state;
        break;
      }
      
      // optional bool contains_equipped_state = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contains_equipped_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contains_equipped_state_)));
          set_has_contains_equipped_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_equipped_state;
        break;
      }
      
      // repeated .CSOEconItemEquipped equipped_state = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipped_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipped_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_equipped_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // optional uint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }
  
  // optional uint32 inventory = 3;
  if (has_inventory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inventory(), output);
  }
  
  // optional uint32 def_index = 4;
  if (has_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->def_index(), output);
  }
  
  // optional uint32 quantity = 5;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->quantity(), output);
  }
  
  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }
  
  // optional uint32 quality = 7;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->quality(), output);
  }
  
  // optional uint32 flags = 8 [default = 0];
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->flags(), output);
  }
  
  // optional uint32 origin = 9;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->origin(), output);
  }
  
  // optional string custom_name = 10;
  if (has_custom_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_name().data(), this->custom_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->custom_name(), output);
  }
  
  // optional string custom_desc = 11;
  if (has_custom_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_desc().data(), this->custom_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->custom_desc(), output);
  }
  
  // repeated .CSOEconItemAttribute attribute = 12;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->attribute(i), output);
  }
  
  // optional .CSOEconItem interior_item = 13;
  if (has_interior_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->interior_item(), output);
  }
  
  // optional bool in_use = 14 [default = false];
  if (has_in_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->in_use(), output);
  }
  
  // optional uint32 style = 15 [default = 0];
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->style(), output);
  }
  
  // optional uint64 original_id = 16 [default = 0];
  if (has_original_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->original_id(), output);
  }
  
  // optional bool contains_equipped_state = 17;
  if (has_contains_equipped_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->contains_equipped_state(), output);
  }
  
  // repeated .CSOEconItemEquipped equipped_state = 18;
  for (int i = 0; i < this->equipped_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->equipped_state(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // optional uint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }
  
  // optional uint32 inventory = 3;
  if (has_inventory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inventory(), target);
  }
  
  // optional uint32 def_index = 4;
  if (has_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->def_index(), target);
  }
  
  // optional uint32 quantity = 5;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->quantity(), target);
  }
  
  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }
  
  // optional uint32 quality = 7;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->quality(), target);
  }
  
  // optional uint32 flags = 8 [default = 0];
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->flags(), target);
  }
  
  // optional uint32 origin = 9;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->origin(), target);
  }
  
  // optional string custom_name = 10;
  if (has_custom_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_name().data(), this->custom_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->custom_name(), target);
  }
  
  // optional string custom_desc = 11;
  if (has_custom_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_desc().data(), this->custom_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->custom_desc(), target);
  }
  
  // repeated .CSOEconItemAttribute attribute = 12;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->attribute(i), target);
  }
  
  // optional .CSOEconItem interior_item = 13;
  if (has_interior_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->interior_item(), target);
  }
  
  // optional bool in_use = 14 [default = false];
  if (has_in_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->in_use(), target);
  }
  
  // optional uint32 style = 15 [default = 0];
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->style(), target);
  }
  
  // optional uint64 original_id = 16 [default = 0];
  if (has_original_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->original_id(), target);
  }
  
  // optional bool contains_equipped_state = 17;
  if (has_contains_equipped_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->contains_equipped_state(), target);
  }
  
  // repeated .CSOEconItemEquipped equipped_state = 18;
  for (int i = 0; i < this->equipped_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->equipped_state(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 inventory = 3;
    if (has_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inventory());
    }
    
    // optional uint32 def_index = 4;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }
    
    // optional uint32 quantity = 5;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }
    
    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }
    
    // optional uint32 flags = 8 [default = 0];
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 origin = 9;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }
    
    // optional string custom_name = 10;
    if (has_custom_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_name());
    }
    
    // optional string custom_desc = 11;
    if (has_custom_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_desc());
    }
    
    // optional .CSOEconItem interior_item = 13;
    if (has_interior_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->interior_item());
    }
    
    // optional bool in_use = 14 [default = false];
    if (has_in_use()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 style = 15 [default = 0];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style());
    }
    
    // optional uint64 original_id = 16 [default = 0];
    if (has_original_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->original_id());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool contains_equipped_state = 17;
    if (has_contains_equipped_state()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .CSOEconItemAttribute attribute = 12;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  // repeated .CSOEconItemEquipped equipped_state = 18;
  total_size += 2 * this->equipped_state_size();
  for (int i = 0; i < this->equipped_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipped_state(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconItem::MergeFrom(const CSOEconItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  equipped_state_.MergeFrom(from.equipped_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_inventory()) {
      set_inventory(from.inventory());
    }
    if (from.has_def_index()) {
      set_def_index(from.def_index());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_origin()) {
      set_origin(from.origin());
    }
    if (from.has_custom_name()) {
      set_custom_name(from.custom_name());
    }
    if (from.has_custom_desc()) {
      set_custom_desc(from.custom_desc());
    }
    if (from.has_interior_item()) {
      mutable_interior_item()->::CSOEconItem::MergeFrom(from.interior_item());
    }
    if (from.has_in_use()) {
      set_in_use(from.in_use());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_original_id()) {
      set_original_id(from.original_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_contains_equipped_state()) {
      set_contains_equipped_state(from.contains_equipped_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItem::CopyFrom(const CSOEconItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItem::IsInitialized() const {
  
  return true;
}

void CSOEconItem::Swap(CSOEconItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(account_id_, other->account_id_);
    std::swap(inventory_, other->inventory_);
    std::swap(def_index_, other->def_index_);
    std::swap(quantity_, other->quantity_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(flags_, other->flags_);
    std::swap(origin_, other->origin_);
    std::swap(custom_name_, other->custom_name_);
    std::swap(custom_desc_, other->custom_desc_);
    attribute_.Swap(&other->attribute_);
    std::swap(interior_item_, other->interior_item_);
    std::swap(in_use_, other->in_use_);
    std::swap(style_, other->style_);
    std::swap(original_id_, other->original_id_);
    std::swap(contains_equipped_state_, other->contains_equipped_state_);
    equipped_state_.Swap(&other->equipped_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconItem_descriptor_;
  metadata.reflection = CSOEconItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAdjustItemEquippedState::kItemIdFieldNumber;
const int CMsgAdjustItemEquippedState::kNewClassFieldNumber;
const int CMsgAdjustItemEquippedState::kNewSlotFieldNumber;
#endif  // !_MSC_VER

CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAdjustItemEquippedState::InitAsDefaultInstance() {
}

CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState(const CMsgAdjustItemEquippedState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAdjustItemEquippedState::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  new_class_ = 0u;
  new_slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAdjustItemEquippedState::~CMsgAdjustItemEquippedState() {
  SharedDtor();
}

void CMsgAdjustItemEquippedState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAdjustItemEquippedState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAdjustItemEquippedState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAdjustItemEquippedState_descriptor_;
}

const CMsgAdjustItemEquippedState& CMsgAdjustItemEquippedState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgAdjustItemEquippedState* CMsgAdjustItemEquippedState::default_instance_ = NULL;

CMsgAdjustItemEquippedState* CMsgAdjustItemEquippedState::New() const {
  return new CMsgAdjustItemEquippedState;
}

void CMsgAdjustItemEquippedState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    new_class_ = 0u;
    new_slot_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAdjustItemEquippedState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_class;
        break;
      }
      
      // optional uint32 new_class = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_class_)));
          set_has_new_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_slot;
        break;
      }
      
      // optional uint32 new_slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_slot_)));
          set_has_new_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAdjustItemEquippedState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional uint32 new_class = 2;
  if (has_new_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_class(), output);
  }
  
  // optional uint32 new_slot = 3;
  if (has_new_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_slot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAdjustItemEquippedState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional uint32 new_class = 2;
  if (has_new_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_class(), target);
  }
  
  // optional uint32 new_slot = 3;
  if (has_new_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_slot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAdjustItemEquippedState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional uint32 new_class = 2;
    if (has_new_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_class());
    }
    
    // optional uint32 new_slot = 3;
    if (has_new_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_slot());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAdjustItemEquippedState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAdjustItemEquippedState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAdjustItemEquippedState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAdjustItemEquippedState::MergeFrom(const CMsgAdjustItemEquippedState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_new_class()) {
      set_new_class(from.new_class());
    }
    if (from.has_new_slot()) {
      set_new_slot(from.new_slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAdjustItemEquippedState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAdjustItemEquippedState::CopyFrom(const CMsgAdjustItemEquippedState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAdjustItemEquippedState::IsInitialized() const {
  
  return true;
}

void CMsgAdjustItemEquippedState::Swap(CMsgAdjustItemEquippedState* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(new_class_, other->new_class_);
    std::swap(new_slot_, other->new_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAdjustItemEquippedState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAdjustItemEquippedState_descriptor_;
  metadata.reflection = CMsgAdjustItemEquippedState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSortItems::kSortTypeFieldNumber;
#endif  // !_MSC_VER

CMsgSortItems::CMsgSortItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSortItems::InitAsDefaultInstance() {
}

CMsgSortItems::CMsgSortItems(const CMsgSortItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSortItems::SharedCtor() {
  _cached_size_ = 0;
  sort_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSortItems::~CMsgSortItems() {
  SharedDtor();
}

void CMsgSortItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSortItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSortItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSortItems_descriptor_;
}

const CMsgSortItems& CMsgSortItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSortItems* CMsgSortItems::default_instance_ = NULL;

CMsgSortItems* CMsgSortItems::New() const {
  return new CMsgSortItems;
}

void CMsgSortItems::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sort_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSortItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sort_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_type_)));
          set_has_sort_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSortItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sort_type = 1;
  if (has_sort_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sort_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSortItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sort_type = 1;
  if (has_sort_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sort_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSortItems::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sort_type = 1;
    if (has_sort_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sort_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSortItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSortItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSortItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSortItems::MergeFrom(const CMsgSortItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sort_type()) {
      set_sort_type(from.sort_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSortItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSortItems::CopyFrom(const CMsgSortItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSortItems::IsInitialized() const {
  
  return true;
}

void CMsgSortItems::Swap(CMsgSortItems* other) {
  if (other != this) {
    std::swap(sort_type_, other->sort_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSortItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSortItems_descriptor_;
  metadata.reflection = CMsgSortItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOEconClaimCode::kAccountIdFieldNumber;
const int CSOEconClaimCode::kCodeTypeFieldNumber;
const int CSOEconClaimCode::kTimeAcquiredFieldNumber;
const int CSOEconClaimCode::kCodeFieldNumber;
#endif  // !_MSC_VER

CSOEconClaimCode::CSOEconClaimCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconClaimCode::InitAsDefaultInstance() {
}

CSOEconClaimCode::CSOEconClaimCode(const CSOEconClaimCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconClaimCode::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  code_type_ = 0u;
  time_acquired_ = 0u;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconClaimCode::~CSOEconClaimCode() {
  SharedDtor();
}

void CSOEconClaimCode::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void CSOEconClaimCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconClaimCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconClaimCode_descriptor_;
}

const CSOEconClaimCode& CSOEconClaimCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconClaimCode* CSOEconClaimCode::default_instance_ = NULL;

CSOEconClaimCode* CSOEconClaimCode::New() const {
  return new CSOEconClaimCode;
}

void CSOEconClaimCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    code_type_ = 0u;
    time_acquired_ = 0u;
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconClaimCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code_type;
        break;
      }
      
      // optional uint32 code_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_type_)));
          set_has_code_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_acquired;
        break;
      }
      
      // optional uint32 time_acquired = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_acquired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_acquired_)));
          set_has_time_acquired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_code;
        break;
      }
      
      // optional string code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconClaimCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 code_type = 2;
  if (has_code_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code_type(), output);
  }
  
  // optional uint32 time_acquired = 3;
  if (has_time_acquired()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_acquired(), output);
  }
  
  // optional string code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconClaimCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 code_type = 2;
  if (has_code_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code_type(), target);
  }
  
  // optional uint32 time_acquired = 3;
  if (has_time_acquired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_acquired(), target);
  }
  
  // optional string code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconClaimCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 code_type = 2;
    if (has_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code_type());
    }
    
    // optional uint32 time_acquired = 3;
    if (has_time_acquired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_acquired());
    }
    
    // optional string code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconClaimCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconClaimCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconClaimCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconClaimCode::MergeFrom(const CSOEconClaimCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_code_type()) {
      set_code_type(from.code_type());
    }
    if (from.has_time_acquired()) {
      set_time_acquired(from.time_acquired());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconClaimCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconClaimCode::CopyFrom(const CSOEconClaimCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconClaimCode::IsInitialized() const {
  
  return true;
}

void CSOEconClaimCode::Swap(CSOEconClaimCode* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(code_type_, other->code_type_);
    std::swap(time_acquired_, other->time_acquired_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconClaimCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconClaimCode_descriptor_;
  metadata.reflection = CSOEconClaimCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgStoreGetUserData::kPriceSheetVersionFieldNumber;
#endif  // !_MSC_VER

CMsgStoreGetUserData::CMsgStoreGetUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgStoreGetUserData::InitAsDefaultInstance() {
}

CMsgStoreGetUserData::CMsgStoreGetUserData(const CMsgStoreGetUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgStoreGetUserData::SharedCtor() {
  _cached_size_ = 0;
  price_sheet_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStoreGetUserData::~CMsgStoreGetUserData() {
  SharedDtor();
}

void CMsgStoreGetUserData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgStoreGetUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStoreGetUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStoreGetUserData_descriptor_;
}

const CMsgStoreGetUserData& CMsgStoreGetUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgStoreGetUserData* CMsgStoreGetUserData::default_instance_ = NULL;

CMsgStoreGetUserData* CMsgStoreGetUserData::New() const {
  return new CMsgStoreGetUserData;
}

void CMsgStoreGetUserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    price_sheet_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStoreGetUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 price_sheet_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &price_sheet_version_)));
          set_has_price_sheet_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgStoreGetUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 price_sheet_version = 1;
  if (has_price_sheet_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->price_sheet_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgStoreGetUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 price_sheet_version = 1;
  if (has_price_sheet_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->price_sheet_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgStoreGetUserData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 price_sheet_version = 1;
    if (has_price_sheet_version()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStoreGetUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStoreGetUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStoreGetUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStoreGetUserData::MergeFrom(const CMsgStoreGetUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price_sheet_version()) {
      set_price_sheet_version(from.price_sheet_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStoreGetUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStoreGetUserData::CopyFrom(const CMsgStoreGetUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStoreGetUserData::IsInitialized() const {
  
  return true;
}

void CMsgStoreGetUserData::Swap(CMsgStoreGetUserData* other) {
  if (other != this) {
    std::swap(price_sheet_version_, other->price_sheet_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStoreGetUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStoreGetUserData_descriptor_;
  metadata.reflection = CMsgStoreGetUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgStoreGetUserDataResponse::kResultFieldNumber;
const int CMsgStoreGetUserDataResponse::kCurrencyFieldNumber;
const int CMsgStoreGetUserDataResponse::kCountryFieldNumber;
const int CMsgStoreGetUserDataResponse::kPriceSheetVersionFieldNumber;
const int CMsgStoreGetUserDataResponse::kExperimentDataFieldNumber;
const int CMsgStoreGetUserDataResponse::kFeaturedItemIdxFieldNumber;
const int CMsgStoreGetUserDataResponse::kShowHatDescriptionsFieldNumber;
const int CMsgStoreGetUserDataResponse::kPriceSheetFieldNumber;
const int CMsgStoreGetUserDataResponse::kDefaultItemSortFieldNumber;
const int CMsgStoreGetUserDataResponse::kPopularItemsFieldNumber;
#endif  // !_MSC_VER

CMsgStoreGetUserDataResponse::CMsgStoreGetUserDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgStoreGetUserDataResponse::InitAsDefaultInstance() {
}

CMsgStoreGetUserDataResponse::CMsgStoreGetUserDataResponse(const CMsgStoreGetUserDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgStoreGetUserDataResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  currency_ = 0;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_sheet_version_ = 0u;
  experiment_data_ = GOOGLE_ULONGLONG(0);
  featured_item_idx_ = 0;
  show_hat_descriptions_ = true;
  price_sheet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  default_item_sort_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStoreGetUserDataResponse::~CMsgStoreGetUserDataResponse() {
  SharedDtor();
}

void CMsgStoreGetUserDataResponse::SharedDtor() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (price_sheet_ != &::google::protobuf::internal::kEmptyString) {
    delete price_sheet_;
  }
  if (this != default_instance_) {
  }
}

void CMsgStoreGetUserDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStoreGetUserDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStoreGetUserDataResponse_descriptor_;
}

const CMsgStoreGetUserDataResponse& CMsgStoreGetUserDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgStoreGetUserDataResponse* CMsgStoreGetUserDataResponse::default_instance_ = NULL;

CMsgStoreGetUserDataResponse* CMsgStoreGetUserDataResponse::New() const {
  return new CMsgStoreGetUserDataResponse;
}

void CMsgStoreGetUserDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    currency_ = 0;
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    price_sheet_version_ = 0u;
    experiment_data_ = GOOGLE_ULONGLONG(0);
    featured_item_idx_ = 0;
    show_hat_descriptions_ = true;
    if (has_price_sheet()) {
      if (price_sheet_ != &::google::protobuf::internal::kEmptyString) {
        price_sheet_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    default_item_sort_ = 0;
  }
  popular_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStoreGetUserDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currency;
        break;
      }
      
      // optional int32 currency = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_country;
        break;
      }
      
      // optional string country = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_price_sheet_version;
        break;
      }
      
      // optional fixed32 price_sheet_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_price_sheet_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &price_sheet_version_)));
          set_has_price_sheet_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_experiment_data;
        break;
      }
      
      // optional uint64 experiment_data = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experiment_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &experiment_data_)));
          set_has_experiment_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_featured_item_idx;
        break;
      }
      
      // optional int32 featured_item_idx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featured_item_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &featured_item_idx_)));
          set_has_featured_item_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_show_hat_descriptions;
        break;
      }
      
      // optional bool show_hat_descriptions = 7 [default = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_hat_descriptions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_hat_descriptions_)));
          set_has_show_hat_descriptions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_price_sheet;
        break;
      }
      
      // optional bytes price_sheet = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_price_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_price_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_default_item_sort;
        break;
      }
      
      // optional int32 default_item_sort = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_item_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_item_sort_)));
          set_has_default_item_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_popular_items;
        break;
      }
      
      // repeated uint32 popular_items = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_popular_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_popular_items())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_popular_items())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_popular_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgStoreGetUserDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional int32 currency = 2;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currency(), output);
  }
  
  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->country(), output);
  }
  
  // optional fixed32 price_sheet_version = 4;
  if (has_price_sheet_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->price_sheet_version(), output);
  }
  
  // optional uint64 experiment_data = 5 [default = 0];
  if (has_experiment_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->experiment_data(), output);
  }
  
  // optional int32 featured_item_idx = 6;
  if (has_featured_item_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->featured_item_idx(), output);
  }
  
  // optional bool show_hat_descriptions = 7 [default = true];
  if (has_show_hat_descriptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->show_hat_descriptions(), output);
  }
  
  // optional bytes price_sheet = 8;
  if (has_price_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->price_sheet(), output);
  }
  
  // optional int32 default_item_sort = 9 [default = 0];
  if (has_default_item_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->default_item_sort(), output);
  }
  
  // repeated uint32 popular_items = 10;
  for (int i = 0; i < this->popular_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->popular_items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgStoreGetUserDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional int32 currency = 2;
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currency(), target);
  }
  
  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country(), target);
  }
  
  // optional fixed32 price_sheet_version = 4;
  if (has_price_sheet_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->price_sheet_version(), target);
  }
  
  // optional uint64 experiment_data = 5 [default = 0];
  if (has_experiment_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->experiment_data(), target);
  }
  
  // optional int32 featured_item_idx = 6;
  if (has_featured_item_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->featured_item_idx(), target);
  }
  
  // optional bool show_hat_descriptions = 7 [default = true];
  if (has_show_hat_descriptions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->show_hat_descriptions(), target);
  }
  
  // optional bytes price_sheet = 8;
  if (has_price_sheet()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->price_sheet(), target);
  }
  
  // optional int32 default_item_sort = 9 [default = 0];
  if (has_default_item_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->default_item_sort(), target);
  }
  
  // repeated uint32 popular_items = 10;
  for (int i = 0; i < this->popular_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->popular_items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgStoreGetUserDataResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional int32 currency = 2;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }
    
    // optional string country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }
    
    // optional fixed32 price_sheet_version = 4;
    if (has_price_sheet_version()) {
      total_size += 1 + 4;
    }
    
    // optional uint64 experiment_data = 5 [default = 0];
    if (has_experiment_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->experiment_data());
    }
    
    // optional int32 featured_item_idx = 6;
    if (has_featured_item_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->featured_item_idx());
    }
    
    // optional bool show_hat_descriptions = 7 [default = true];
    if (has_show_hat_descriptions()) {
      total_size += 1 + 1;
    }
    
    // optional bytes price_sheet = 8;
    if (has_price_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->price_sheet());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 default_item_sort = 9 [default = 0];
    if (has_default_item_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_item_sort());
    }
    
  }
  // repeated uint32 popular_items = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->popular_items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->popular_items(i));
    }
    total_size += 1 * this->popular_items_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStoreGetUserDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStoreGetUserDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStoreGetUserDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStoreGetUserDataResponse::MergeFrom(const CMsgStoreGetUserDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  popular_items_.MergeFrom(from.popular_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_price_sheet_version()) {
      set_price_sheet_version(from.price_sheet_version());
    }
    if (from.has_experiment_data()) {
      set_experiment_data(from.experiment_data());
    }
    if (from.has_featured_item_idx()) {
      set_featured_item_idx(from.featured_item_idx());
    }
    if (from.has_show_hat_descriptions()) {
      set_show_hat_descriptions(from.show_hat_descriptions());
    }
    if (from.has_price_sheet()) {
      set_price_sheet(from.price_sheet());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_default_item_sort()) {
      set_default_item_sort(from.default_item_sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStoreGetUserDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStoreGetUserDataResponse::CopyFrom(const CMsgStoreGetUserDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStoreGetUserDataResponse::IsInitialized() const {
  
  return true;
}

void CMsgStoreGetUserDataResponse::Swap(CMsgStoreGetUserDataResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(currency_, other->currency_);
    std::swap(country_, other->country_);
    std::swap(price_sheet_version_, other->price_sheet_version_);
    std::swap(experiment_data_, other->experiment_data_);
    std::swap(featured_item_idx_, other->featured_item_idx_);
    std::swap(show_hat_descriptions_, other->show_hat_descriptions_);
    std::swap(price_sheet_, other->price_sheet_);
    std::swap(default_item_sort_, other->default_item_sort_);
    popular_items_.Swap(&other->popular_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStoreGetUserDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStoreGetUserDataResponse_descriptor_;
  metadata.reflection = CMsgStoreGetUserDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgUpdateItemSchema::kItemsGameFieldNumber;
const int CMsgUpdateItemSchema::kItemSchemaVersionFieldNumber;
const int CMsgUpdateItemSchema::kItemsGameUrlFieldNumber;
#endif  // !_MSC_VER

CMsgUpdateItemSchema::CMsgUpdateItemSchema()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgUpdateItemSchema::InitAsDefaultInstance() {
}

CMsgUpdateItemSchema::CMsgUpdateItemSchema(const CMsgUpdateItemSchema& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgUpdateItemSchema::SharedCtor() {
  _cached_size_ = 0;
  items_game_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_schema_version_ = 0u;
  items_game_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgUpdateItemSchema::~CMsgUpdateItemSchema() {
  SharedDtor();
}

void CMsgUpdateItemSchema::SharedDtor() {
  if (items_game_ != &::google::protobuf::internal::kEmptyString) {
    delete items_game_;
  }
  if (items_game_url_ != &::google::protobuf::internal::kEmptyString) {
    delete items_game_url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgUpdateItemSchema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUpdateItemSchema::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgUpdateItemSchema_descriptor_;
}

const CMsgUpdateItemSchema& CMsgUpdateItemSchema::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgUpdateItemSchema* CMsgUpdateItemSchema::default_instance_ = NULL;

CMsgUpdateItemSchema* CMsgUpdateItemSchema::New() const {
  return new CMsgUpdateItemSchema;
}

void CMsgUpdateItemSchema::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_items_game()) {
      if (items_game_ != &::google::protobuf::internal::kEmptyString) {
        items_game_->clear();
      }
    }
    item_schema_version_ = 0u;
    if (has_items_game_url()) {
      if (items_game_url_ != &::google::protobuf::internal::kEmptyString) {
        items_game_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgUpdateItemSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes items_game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_items_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_item_schema_version;
        break;
      }
      
      // optional fixed32 item_schema_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_item_schema_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &item_schema_version_)));
          set_has_item_schema_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items_game_url;
        break;
      }
      
      // optional string items_game_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items_game_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items_game_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->items_game_url().data(), this->items_game_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgUpdateItemSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes items_game = 1;
  if (has_items_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->items_game(), output);
  }
  
  // optional fixed32 item_schema_version = 2;
  if (has_item_schema_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->item_schema_version(), output);
  }
  
  // optional string items_game_url = 3;
  if (has_items_game_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items_game_url().data(), this->items_game_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->items_game_url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgUpdateItemSchema::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes items_game = 1;
  if (has_items_game()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->items_game(), target);
  }
  
  // optional fixed32 item_schema_version = 2;
  if (has_item_schema_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->item_schema_version(), target);
  }
  
  // optional string items_game_url = 3;
  if (has_items_game_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items_game_url().data(), this->items_game_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->items_game_url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgUpdateItemSchema::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes items_game = 1;
    if (has_items_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->items_game());
    }
    
    // optional fixed32 item_schema_version = 2;
    if (has_item_schema_version()) {
      total_size += 1 + 4;
    }
    
    // optional string items_game_url = 3;
    if (has_items_game_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items_game_url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUpdateItemSchema::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgUpdateItemSchema* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgUpdateItemSchema*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgUpdateItemSchema::MergeFrom(const CMsgUpdateItemSchema& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_items_game()) {
      set_items_game(from.items_game());
    }
    if (from.has_item_schema_version()) {
      set_item_schema_version(from.item_schema_version());
    }
    if (from.has_items_game_url()) {
      set_items_game_url(from.items_game_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgUpdateItemSchema::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateItemSchema::CopyFrom(const CMsgUpdateItemSchema& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateItemSchema::IsInitialized() const {
  
  return true;
}

void CMsgUpdateItemSchema::Swap(CMsgUpdateItemSchema* other) {
  if (other != this) {
    std::swap(items_game_, other->items_game_);
    std::swap(item_schema_version_, other->item_schema_version_);
    std::swap(items_game_url_, other->items_game_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgUpdateItemSchema::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgUpdateItemSchema_descriptor_;
  metadata.reflection = CMsgUpdateItemSchema_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgRequestItemSchemaData::CMsgRequestItemSchemaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestItemSchemaData::InitAsDefaultInstance() {
}

CMsgRequestItemSchemaData::CMsgRequestItemSchemaData(const CMsgRequestItemSchemaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestItemSchemaData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestItemSchemaData::~CMsgRequestItemSchemaData() {
  SharedDtor();
}

void CMsgRequestItemSchemaData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestItemSchemaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestItemSchemaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestItemSchemaData_descriptor_;
}

const CMsgRequestItemSchemaData& CMsgRequestItemSchemaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgRequestItemSchemaData* CMsgRequestItemSchemaData::default_instance_ = NULL;

CMsgRequestItemSchemaData* CMsgRequestItemSchemaData::New() const {
  return new CMsgRequestItemSchemaData;
}

void CMsgRequestItemSchemaData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestItemSchemaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgRequestItemSchemaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestItemSchemaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestItemSchemaData::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestItemSchemaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestItemSchemaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestItemSchemaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestItemSchemaData::MergeFrom(const CMsgRequestItemSchemaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestItemSchemaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestItemSchemaData::CopyFrom(const CMsgRequestItemSchemaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestItemSchemaData::IsInitialized() const {
  
  return true;
}

void CMsgRequestItemSchemaData::Swap(CMsgRequestItemSchemaData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestItemSchemaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestItemSchemaData_descriptor_;
  metadata.reflection = CMsgRequestItemSchemaData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCError::kErrorTextFieldNumber;
#endif  // !_MSC_VER

CMsgGCError::CMsgGCError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCError::InitAsDefaultInstance() {
}

CMsgGCError::CMsgGCError(const CMsgGCError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCError::SharedCtor() {
  _cached_size_ = 0;
  error_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCError::~CMsgGCError() {
  SharedDtor();
}

void CMsgGCError::SharedDtor() {
  if (error_text_ != &::google::protobuf::internal::kEmptyString) {
    delete error_text_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCError_descriptor_;
}

const CMsgGCError& CMsgGCError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCError* CMsgGCError::default_instance_ = NULL;

CMsgGCError* CMsgGCError::New() const {
  return new CMsgGCError;
}

void CMsgGCError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error_text()) {
      if (error_text_ != &::google::protobuf::internal::kEmptyString) {
        error_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error_text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_text().data(), this->error_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string error_text = 1;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->error_text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string error_text = 1;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error_text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCError::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string error_text = 1;
    if (has_error_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCError::MergeFrom(const CMsgGCError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_text()) {
      set_error_text(from.error_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCError::CopyFrom(const CMsgGCError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCError::IsInitialized() const {
  
  return true;
}

void CMsgGCError::Swap(CMsgGCError* other) {
  if (other != this) {
    std::swap(error_text_, other->error_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCError_descriptor_;
  metadata.reflection = CMsgGCError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgRequestInventoryRefresh::CMsgRequestInventoryRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestInventoryRefresh::InitAsDefaultInstance() {
}

CMsgRequestInventoryRefresh::CMsgRequestInventoryRefresh(const CMsgRequestInventoryRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestInventoryRefresh::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestInventoryRefresh::~CMsgRequestInventoryRefresh() {
  SharedDtor();
}

void CMsgRequestInventoryRefresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestInventoryRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestInventoryRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestInventoryRefresh_descriptor_;
}

const CMsgRequestInventoryRefresh& CMsgRequestInventoryRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgRequestInventoryRefresh* CMsgRequestInventoryRefresh::default_instance_ = NULL;

CMsgRequestInventoryRefresh* CMsgRequestInventoryRefresh::New() const {
  return new CMsgRequestInventoryRefresh;
}

void CMsgRequestInventoryRefresh::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestInventoryRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgRequestInventoryRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestInventoryRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestInventoryRefresh::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestInventoryRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestInventoryRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestInventoryRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestInventoryRefresh::MergeFrom(const CMsgRequestInventoryRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestInventoryRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestInventoryRefresh::CopyFrom(const CMsgRequestInventoryRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestInventoryRefresh::IsInitialized() const {
  
  return true;
}

void CMsgRequestInventoryRefresh::Swap(CMsgRequestInventoryRefresh* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestInventoryRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestInventoryRefresh_descriptor_;
  metadata.reflection = CMsgRequestInventoryRefresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgConVarValue::kNameFieldNumber;
const int CMsgConVarValue::kValueFieldNumber;
#endif  // !_MSC_VER

CMsgConVarValue::CMsgConVarValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgConVarValue::InitAsDefaultInstance() {
}

CMsgConVarValue::CMsgConVarValue(const CMsgConVarValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgConVarValue::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgConVarValue::~CMsgConVarValue() {
  SharedDtor();
}

void CMsgConVarValue::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CMsgConVarValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConVarValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgConVarValue_descriptor_;
}

const CMsgConVarValue& CMsgConVarValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgConVarValue* CMsgConVarValue::default_instance_ = NULL;

CMsgConVarValue* CMsgConVarValue::New() const {
  return new CMsgConVarValue;
}

void CMsgConVarValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgConVarValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgConVarValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgConVarValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgConVarValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConVarValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgConVarValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgConVarValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgConVarValue::MergeFrom(const CMsgConVarValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgConVarValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConVarValue::CopyFrom(const CMsgConVarValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConVarValue::IsInitialized() const {
  
  return true;
}

void CMsgConVarValue::Swap(CMsgConVarValue* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgConVarValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgConVarValue_descriptor_;
  metadata.reflection = CMsgConVarValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgReplicateConVars::kConvarsFieldNumber;
#endif  // !_MSC_VER

CMsgReplicateConVars::CMsgReplicateConVars()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgReplicateConVars::InitAsDefaultInstance() {
}

CMsgReplicateConVars::CMsgReplicateConVars(const CMsgReplicateConVars& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgReplicateConVars::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgReplicateConVars::~CMsgReplicateConVars() {
  SharedDtor();
}

void CMsgReplicateConVars::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgReplicateConVars::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReplicateConVars::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgReplicateConVars_descriptor_;
}

const CMsgReplicateConVars& CMsgReplicateConVars::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgReplicateConVars* CMsgReplicateConVars::default_instance_ = NULL;

CMsgReplicateConVars* CMsgReplicateConVars::New() const {
  return new CMsgReplicateConVars;
}

void CMsgReplicateConVars::Clear() {
  convars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgReplicateConVars::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgConVarValue convars = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_convars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_convars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_convars;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgReplicateConVars::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgConVarValue convars = 1;
  for (int i = 0; i < this->convars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->convars(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgReplicateConVars::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgConVarValue convars = 1;
  for (int i = 0; i < this->convars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->convars(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgReplicateConVars::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgConVarValue convars = 1;
  total_size += 1 * this->convars_size();
  for (int i = 0; i < this->convars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->convars(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReplicateConVars::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgReplicateConVars* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgReplicateConVars*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgReplicateConVars::MergeFrom(const CMsgReplicateConVars& from) {
  GOOGLE_CHECK_NE(&from, this);
  convars_.MergeFrom(from.convars_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgReplicateConVars::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReplicateConVars::CopyFrom(const CMsgReplicateConVars& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplicateConVars::IsInitialized() const {
  
  return true;
}

void CMsgReplicateConVars::Swap(CMsgReplicateConVars* other) {
  if (other != this) {
    convars_.Swap(&other->convars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgReplicateConVars::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgReplicateConVars_descriptor_;
  metadata.reflection = CMsgReplicateConVars_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgUseItem::kItemIdFieldNumber;
const int CMsgUseItem::kTargetSteamIdFieldNumber;
const int CMsgUseItem::kGiftPotentialTargetsFieldNumber;
const int CMsgUseItem::kDuelClassLockFieldNumber;
const int CMsgUseItem::kInitiatorSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgUseItem::CMsgUseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgUseItem::InitAsDefaultInstance() {
}

CMsgUseItem::CMsgUseItem(const CMsgUseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgUseItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  target_steam_id_ = GOOGLE_ULONGLONG(0);
  duel__class_lock_ = 0u;
  initiator_steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgUseItem::~CMsgUseItem() {
  SharedDtor();
}

void CMsgUseItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgUseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgUseItem_descriptor_;
}

const CMsgUseItem& CMsgUseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgUseItem* CMsgUseItem::default_instance_ = NULL;

CMsgUseItem* CMsgUseItem::New() const {
  return new CMsgUseItem;
}

void CMsgUseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    target_steam_id_ = GOOGLE_ULONGLONG(0);
    duel__class_lock_ = 0u;
    initiator_steam_id_ = GOOGLE_ULONGLONG(0);
  }
  gift__potential_targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgUseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_steam_id;
        break;
      }
      
      // optional fixed64 target_steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_steam_id_)));
          set_has_target_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gift__potential_targets;
        break;
      }
      
      // repeated uint32 gift__potential_targets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift__potential_targets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_gift__potential_targets())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gift__potential_targets())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gift__potential_targets;
        if (input->ExpectTag(32)) goto parse_duel__class_lock;
        break;
      }
      
      // optional uint32 duel__class_lock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duel__class_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duel__class_lock_)));
          set_has_duel__class_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_initiator_steam_id;
        break;
      }
      
      // optional fixed64 initiator_steam_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_initiator_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &initiator_steam_id_)));
          set_has_initiator_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgUseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional fixed64 target_steam_id = 2;
  if (has_target_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->target_steam_id(), output);
  }
  
  // repeated uint32 gift__potential_targets = 3;
  for (int i = 0; i < this->gift__potential_targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->gift__potential_targets(i), output);
  }
  
  // optional uint32 duel__class_lock = 4;
  if (has_duel__class_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->duel__class_lock(), output);
  }
  
  // optional fixed64 initiator_steam_id = 5;
  if (has_initiator_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->initiator_steam_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgUseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional fixed64 target_steam_id = 2;
  if (has_target_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->target_steam_id(), target);
  }
  
  // repeated uint32 gift__potential_targets = 3;
  for (int i = 0; i < this->gift__potential_targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->gift__potential_targets(i), target);
  }
  
  // optional uint32 duel__class_lock = 4;
  if (has_duel__class_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->duel__class_lock(), target);
  }
  
  // optional fixed64 initiator_steam_id = 5;
  if (has_initiator_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->initiator_steam_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgUseItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional fixed64 target_steam_id = 2;
    if (has_target_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 duel__class_lock = 4;
    if (has_duel__class_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duel__class_lock());
    }
    
    // optional fixed64 initiator_steam_id = 5;
    if (has_initiator_steam_id()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated uint32 gift__potential_targets = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->gift__potential_targets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gift__potential_targets(i));
    }
    total_size += 1 * this->gift__potential_targets_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgUseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgUseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgUseItem::MergeFrom(const CMsgUseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  gift__potential_targets_.MergeFrom(from.gift__potential_targets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_target_steam_id()) {
      set_target_steam_id(from.target_steam_id());
    }
    if (from.has_duel__class_lock()) {
      set_duel__class_lock(from.duel__class_lock());
    }
    if (from.has_initiator_steam_id()) {
      set_initiator_steam_id(from.initiator_steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgUseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUseItem::CopyFrom(const CMsgUseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUseItem::IsInitialized() const {
  
  return true;
}

void CMsgUseItem::Swap(CMsgUseItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(target_steam_id_, other->target_steam_id_);
    gift__potential_targets_.Swap(&other->gift__potential_targets_);
    std::swap(duel__class_lock_, other->duel__class_lock_);
    std::swap(initiator_steam_id_, other->initiator_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgUseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgUseItem_descriptor_;
  metadata.reflection = CMsgUseItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgConsumableExhausted::kItemDefIdFieldNumber;
#endif  // !_MSC_VER

CMsgConsumableExhausted::CMsgConsumableExhausted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgConsumableExhausted::InitAsDefaultInstance() {
}

CMsgConsumableExhausted::CMsgConsumableExhausted(const CMsgConsumableExhausted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgConsumableExhausted::SharedCtor() {
  _cached_size_ = 0;
  item_def_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgConsumableExhausted::~CMsgConsumableExhausted() {
  SharedDtor();
}

void CMsgConsumableExhausted::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgConsumableExhausted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConsumableExhausted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgConsumableExhausted_descriptor_;
}

const CMsgConsumableExhausted& CMsgConsumableExhausted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgConsumableExhausted* CMsgConsumableExhausted::default_instance_ = NULL;

CMsgConsumableExhausted* CMsgConsumableExhausted::New() const {
  return new CMsgConsumableExhausted;
}

void CMsgConsumableExhausted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_def_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgConsumableExhausted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_def_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_def_id_)));
          set_has_item_def_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgConsumableExhausted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_def_id = 1;
  if (has_item_def_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_def_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgConsumableExhausted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_def_id = 1;
  if (has_item_def_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_def_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgConsumableExhausted::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_def_id = 1;
    if (has_item_def_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_def_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConsumableExhausted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgConsumableExhausted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgConsumableExhausted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgConsumableExhausted::MergeFrom(const CMsgConsumableExhausted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_def_id()) {
      set_item_def_id(from.item_def_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgConsumableExhausted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConsumableExhausted::CopyFrom(const CMsgConsumableExhausted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConsumableExhausted::IsInitialized() const {
  
  return true;
}

void CMsgConsumableExhausted::Swap(CMsgConsumableExhausted* other) {
  if (other != this) {
    std::swap(item_def_id_, other->item_def_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgConsumableExhausted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgConsumableExhausted_descriptor_;
  metadata.reflection = CMsgConsumableExhausted_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
