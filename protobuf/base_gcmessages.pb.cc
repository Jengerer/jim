// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgSystemBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSystemBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconGameAccountClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconGameAccountClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOItemCriteriaCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOItemCriteriaCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOItemCriteria_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOItemCriteria_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOItemRecipe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOItemRecipe_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDevNewItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDevNewItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgIncrementKillCountAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgIncrementKillCountAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconItemAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconItemAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSortItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSortItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconClaimCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconClaimCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgStoreGetUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStoreGetUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgStoreGetUserDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStoreGetUserDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgStartupCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStartupCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgStartupCheckResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStartupCheckResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgUpdateItemSchema_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgUpdateItemSchema_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_5fgcmessages_2eproto() {
  protobuf_AddDesc_base_5fgcmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base_gcmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgSystemBroadcast_descriptor_ = file->message_type(0);
  static const int CMsgSystemBroadcast_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSystemBroadcast, message_),
  };
  CMsgSystemBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSystemBroadcast_descriptor_,
      CMsgSystemBroadcast::default_instance_,
      CMsgSystemBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSystemBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSystemBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSystemBroadcast));
  CSOEconGameAccountClient_descriptor_ = file->message_type(1);
  static const int CSOEconGameAccountClient_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, additional_backpack_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, trial_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, eligible_for_online_play_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, need_to_choose_most_helpful_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, in_coaches_list_),
  };
  CSOEconGameAccountClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconGameAccountClient_descriptor_,
      CSOEconGameAccountClient::default_instance_,
      CSOEconGameAccountClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconGameAccountClient));
  CSOItemCriteriaCondition_descriptor_ = file->message_type(2);
  static const int CSOItemCriteriaCondition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, float_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, string_value_),
  };
  CSOItemCriteriaCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOItemCriteriaCondition_descriptor_,
      CSOItemCriteriaCondition::default_instance_,
      CSOItemCriteriaCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOItemCriteriaCondition));
  CSOItemCriteria_descriptor_ = file->message_type(3);
  static const int CSOItemCriteria_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_level_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_quality_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, initial_inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, initial_quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, forced_quality_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, ignore_enabled_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, conditions_),
  };
  CSOItemCriteria_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOItemCriteria_descriptor_,
      CSOItemCriteria::default_instance_,
      CSOItemCriteria_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOItemCriteria));
  CSOItemRecipe_descriptor_ = file->message_type(4);
  static const int CSOItemRecipe_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, n_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, desc_inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, desc_outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, di_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, di_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, di_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, do_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, do_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, do_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, requires_all_same_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, requires_all_same_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, class_usage_for_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, slot_usage_for_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, set_for_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, input_items_criteria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, output_items_criteria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, input_item_dupe_counts_),
  };
  CSOItemRecipe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOItemRecipe_descriptor_,
      CSOItemRecipe::default_instance_,
      CSOItemRecipe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOItemRecipe));
  CMsgDevNewItemRequest_descriptor_ = file->message_type(5);
  static const int CMsgDevNewItemRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevNewItemRequest, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevNewItemRequest, criteria_),
  };
  CMsgDevNewItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDevNewItemRequest_descriptor_,
      CMsgDevNewItemRequest::default_instance_,
      CMsgDevNewItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevNewItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevNewItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDevNewItemRequest));
  CMsgIncrementKillCountAttribute_descriptor_ = file->message_type(6);
  static const int CMsgIncrementKillCountAttribute_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, killer_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, victim_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, item_id_),
  };
  CMsgIncrementKillCountAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgIncrementKillCountAttribute_descriptor_,
      CMsgIncrementKillCountAttribute::default_instance_,
      CMsgIncrementKillCountAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgIncrementKillCountAttribute));
  CSOEconItemAttribute_descriptor_ = file->message_type(7);
  static const int CSOEconItemAttribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, value_),
  };
  CSOEconItemAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconItemAttribute_descriptor_,
      CSOEconItemAttribute::default_instance_,
      CSOEconItemAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconItemAttribute));
  CSOEconItem_descriptor_ = file->message_type(8);
  static const int CSOEconItem_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, custom_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, custom_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, interior_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, in_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, original_id_),
  };
  CSOEconItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconItem_descriptor_,
      CSOEconItem::default_instance_,
      CSOEconItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconItem));
  CMsgSortItems_descriptor_ = file->message_type(9);
  static const int CMsgSortItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSortItems, sort_type_),
  };
  CMsgSortItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSortItems_descriptor_,
      CMsgSortItems::default_instance_,
      CMsgSortItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSortItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSortItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSortItems));
  CSOEconClaimCode_descriptor_ = file->message_type(10);
  static const int CSOEconClaimCode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, code_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, time_acquired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, code_),
  };
  CSOEconClaimCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconClaimCode_descriptor_,
      CSOEconClaimCode::default_instance_,
      CSOEconClaimCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconClaimCode));
  CMsgStoreGetUserData_descriptor_ = file->message_type(11);
  static const int CMsgStoreGetUserData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserData, price_sheet_version_),
  };
  CMsgStoreGetUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStoreGetUserData_descriptor_,
      CMsgStoreGetUserData::default_instance_,
      CMsgStoreGetUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStoreGetUserData));
  CMsgStoreGetUserDataResponse_descriptor_ = file->message_type(12);
  static const int CMsgStoreGetUserDataResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, price_sheet_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, experiment_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, featured_item_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, show_hat_descriptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, price_sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, default_item_sort_),
  };
  CMsgStoreGetUserDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStoreGetUserDataResponse_descriptor_,
      CMsgStoreGetUserDataResponse::default_instance_,
      CMsgStoreGetUserDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStoreGetUserDataResponse));
  CMsgStartupCheck_descriptor_ = file->message_type(13);
  static const int CMsgStartupCheck_offsets_[1] = {
  };
  CMsgStartupCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStartupCheck_descriptor_,
      CMsgStartupCheck::default_instance_,
      CMsgStartupCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartupCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartupCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStartupCheck));
  CMsgStartupCheckResponse_descriptor_ = file->message_type(14);
  static const int CMsgStartupCheckResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartupCheckResponse, item_schema_version_),
  };
  CMsgStartupCheckResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStartupCheckResponse_descriptor_,
      CMsgStartupCheckResponse::default_instance_,
      CMsgStartupCheckResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartupCheckResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartupCheckResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStartupCheckResponse));
  CMsgUpdateItemSchema_descriptor_ = file->message_type(15);
  static const int CMsgUpdateItemSchema_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, items_game_),
  };
  CMsgUpdateItemSchema_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgUpdateItemSchema_descriptor_,
      CMsgUpdateItemSchema::default_instance_,
      CMsgUpdateItemSchema_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgUpdateItemSchema));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_5fgcmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSystemBroadcast_descriptor_, &CMsgSystemBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconGameAccountClient_descriptor_, &CSOEconGameAccountClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOItemCriteriaCondition_descriptor_, &CSOItemCriteriaCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOItemCriteria_descriptor_, &CSOItemCriteria::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOItemRecipe_descriptor_, &CSOItemRecipe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDevNewItemRequest_descriptor_, &CMsgDevNewItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgIncrementKillCountAttribute_descriptor_, &CMsgIncrementKillCountAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconItemAttribute_descriptor_, &CSOEconItemAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconItem_descriptor_, &CSOEconItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSortItems_descriptor_, &CMsgSortItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconClaimCode_descriptor_, &CSOEconClaimCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStoreGetUserData_descriptor_, &CMsgStoreGetUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStoreGetUserDataResponse_descriptor_, &CMsgStoreGetUserDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStartupCheck_descriptor_, &CMsgStartupCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStartupCheckResponse_descriptor_, &CMsgStartupCheckResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgUpdateItemSchema_descriptor_, &CMsgUpdateItemSchema::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_5fgcmessages_2eproto() {
  delete CMsgSystemBroadcast::default_instance_;
  delete CMsgSystemBroadcast_reflection_;
  delete CSOEconGameAccountClient::default_instance_;
  delete CSOEconGameAccountClient_reflection_;
  delete CSOItemCriteriaCondition::default_instance_;
  delete CSOItemCriteriaCondition_reflection_;
  delete CSOItemCriteria::default_instance_;
  delete CSOItemCriteria_reflection_;
  delete CSOItemRecipe::default_instance_;
  delete CSOItemRecipe_reflection_;
  delete CMsgDevNewItemRequest::default_instance_;
  delete CMsgDevNewItemRequest_reflection_;
  delete CMsgIncrementKillCountAttribute::default_instance_;
  delete CMsgIncrementKillCountAttribute_reflection_;
  delete CSOEconItemAttribute::default_instance_;
  delete CSOEconItemAttribute_reflection_;
  delete CSOEconItem::default_instance_;
  delete CSOEconItem_reflection_;
  delete CMsgSortItems::default_instance_;
  delete CMsgSortItems_reflection_;
  delete CSOEconClaimCode::default_instance_;
  delete CSOEconClaimCode_reflection_;
  delete CMsgStoreGetUserData::default_instance_;
  delete CMsgStoreGetUserData_reflection_;
  delete CMsgStoreGetUserDataResponse::default_instance_;
  delete CMsgStoreGetUserDataResponse_reflection_;
  delete CMsgStartupCheck::default_instance_;
  delete CMsgStartupCheck_reflection_;
  delete CMsgStartupCheckResponse::default_instance_;
  delete CMsgStartupCheckResponse_reflection_;
  delete CMsgUpdateItemSchema::default_instance_;
  delete CMsgUpdateItemSchema_reflection_;
}

void protobuf_AddDesc_base_5fgcmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025base_gcmessages.proto\"&\n\023CMsgSystemBro"
    "adcast\022\017\n\007message\030\001 \001(\t\"\313\001\n\030CSOEconGameA"
    "ccountClient\022$\n\031additional_backpack_slot"
    "s\030\001 \001(\r:\0010\022\034\n\rtrial_account\030\002 \001(\010:\005false"
    "\022&\n\030eligible_for_online_play\030\003 \001(\010:\004true"
    "\022*\n\"need_to_choose_most_helpful_friend\030\004"
    " \001(\010\022\027\n\017in_coaches_list\030\005 \001(\010\"r\n\030CSOItem"
    "CriteriaCondition\022\n\n\002op\030\001 \001(\005\022\r\n\005field\030\002"
    " \001(\t\022\020\n\010required\030\003 \001(\010\022\023\n\013float_value\030\004 "
    "\001(\002\022\024\n\014string_value\030\005 \001(\t\"\214\002\n\017CSOItemCri"
    "teria\022\022\n\nitem_level\030\001 \001(\r\022\024\n\014item_qualit"
    "y\030\002 \001(\005\022\026\n\016item_level_set\030\003 \001(\010\022\030\n\020item_"
    "quality_set\030\004 \001(\010\022\031\n\021initial_inventory\030\005"
    " \001(\r\022\030\n\020initial_quantity\030\006 \001(\r\022\034\n\024forced"
    "_quality_match\030\007 \001(\010\022\033\n\023ignore_enabled_f"
    "lag\030\010 \001(\010\022-\n\nconditions\030\t \003(\0132\031.CSOItemC"
    "riteriaCondition\"\325\003\n\rCSOItemRecipe\022\021\n\tde"
    "f_index\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003n_a\030\003 \001(\t"
    "\022\023\n\013desc_inputs\030\004 \001(\t\022\024\n\014desc_outputs\030\005 "
    "\001(\t\022\014\n\004di_a\030\006 \001(\t\022\014\n\004di_b\030\007 \001(\t\022\014\n\004di_c\030"
    "\010 \001(\t\022\014\n\004do_a\030\t \001(\t\022\014\n\004do_b\030\n \001(\t\022\014\n\004do_"
    "c\030\013 \001(\t\022\037\n\027requires_all_same_class\030\014 \001(\010"
    "\022\036\n\026requires_all_same_slot\030\r \001(\010\022\036\n\026clas"
    "s_usage_for_output\030\016 \001(\005\022\035\n\025slot_usage_f"
    "or_output\030\017 \001(\005\022\026\n\016set_for_output\030\020 \001(\005\022"
    ".\n\024input_items_criteria\030\024 \003(\0132\020.CSOItemC"
    "riteria\022/\n\025output_items_criteria\030\025 \003(\0132\020"
    ".CSOItemCriteria\022\036\n\026input_item_dupe_coun"
    "ts\030\026 \003(\r\"M\n\025CMsgDevNewItemRequest\022\020\n\010rec"
    "eiver\030\001 \001(\006\022\"\n\010criteria\030\002 \001(\0132\020.CSOItemC"
    "riteria\"d\n\037CMsgIncrementKillCountAttribu"
    "te\022\027\n\017killer_steam_id\030\001 \001(\004\022\027\n\017victim_st"
    "eam_id\030\002 \001(\004\022\017\n\007item_id\030\003 \001(\004\"8\n\024CSOEcon"
    "ItemAttribute\022\021\n\tdef_index\030\001 \001(\r\022\r\n\005valu"
    "e\030\002 \001(\r\"\341\002\n\013CSOEconItem\022\n\n\002id\030\001 \001(\004\022\022\n\na"
    "ccount_id\030\002 \001(\r\022\021\n\tinventory\030\003 \001(\r\022\021\n\tde"
    "f_index\030\004 \001(\r\022\020\n\010quantity\030\005 \001(\r\022\r\n\005level"
    "\030\006 \001(\r\022\017\n\007quality\030\007 \001(\r\022\020\n\005flags\030\010 \001(\r:\001"
    "0\022\016\n\006origin\030\t \001(\r\022\023\n\013custom_name\030\n \001(\t\022\023"
    "\n\013custom_desc\030\013 \001(\t\022(\n\tattribute\030\014 \003(\0132\025"
    ".CSOEconItemAttribute\022#\n\rinterior_item\030\r"
    " \001(\0132\014.CSOEconItem\022\025\n\006in_use\030\016 \001(\010:\005fals"
    "e\022\020\n\005style\030\017 \001(\r:\0010\022\026\n\013original_id\030\020 \001(\004"
    ":\0010\"\"\n\rCMsgSortItems\022\021\n\tsort_type\030\001 \001(\r\""
    "^\n\020CSOEconClaimCode\022\022\n\naccount_id\030\001 \001(\r\022"
    "\021\n\tcode_type\030\002 \001(\r\022\025\n\rtime_acquired\030\003 \001("
    "\r\022\014\n\004code\030\004 \001(\t\"3\n\024CMsgStoreGetUserData\022"
    "\033\n\023price_sheet_version\030\001 \001(\007\"\375\001\n\034CMsgSto"
    "reGetUserDataResponse\022\016\n\006result\030\001 \001(\005\022\020\n"
    "\010currency\030\002 \001(\005\022\017\n\007country\030\003 \001(\t\022\033\n\023pric"
    "e_sheet_version\030\004 \001(\007\022\032\n\017experiment_data"
    "\030\005 \001(\004:\0010\022\031\n\021featured_item_idx\030\006 \001(\005\022#\n\025"
    "show_hat_descriptions\030\007 \001(\010:\004true\022\023\n\013pri"
    "ce_sheet\030\010 \001(\014\022\034\n\021default_item_sort\030\t \001("
    "\005:\0010\"\022\n\020CMsgStartupCheck\"7\n\030CMsgStartupC"
    "heckResponse\022\033\n\023item_schema_version\030\001 \001("
    "\007\"*\n\024CMsgUpdateItemSchema\022\022\n\nitems_game\030"
    "\001 \001(\014", 2285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base_gcmessages.proto", &protobuf_RegisterTypes);
  CMsgSystemBroadcast::default_instance_ = new CMsgSystemBroadcast();
  CSOEconGameAccountClient::default_instance_ = new CSOEconGameAccountClient();
  CSOItemCriteriaCondition::default_instance_ = new CSOItemCriteriaCondition();
  CSOItemCriteria::default_instance_ = new CSOItemCriteria();
  CSOItemRecipe::default_instance_ = new CSOItemRecipe();
  CMsgDevNewItemRequest::default_instance_ = new CMsgDevNewItemRequest();
  CMsgIncrementKillCountAttribute::default_instance_ = new CMsgIncrementKillCountAttribute();
  CSOEconItemAttribute::default_instance_ = new CSOEconItemAttribute();
  CSOEconItem::default_instance_ = new CSOEconItem();
  CMsgSortItems::default_instance_ = new CMsgSortItems();
  CSOEconClaimCode::default_instance_ = new CSOEconClaimCode();
  CMsgStoreGetUserData::default_instance_ = new CMsgStoreGetUserData();
  CMsgStoreGetUserDataResponse::default_instance_ = new CMsgStoreGetUserDataResponse();
  CMsgStartupCheck::default_instance_ = new CMsgStartupCheck();
  CMsgStartupCheckResponse::default_instance_ = new CMsgStartupCheckResponse();
  CMsgUpdateItemSchema::default_instance_ = new CMsgUpdateItemSchema();
  CMsgSystemBroadcast::default_instance_->InitAsDefaultInstance();
  CSOEconGameAccountClient::default_instance_->InitAsDefaultInstance();
  CSOItemCriteriaCondition::default_instance_->InitAsDefaultInstance();
  CSOItemCriteria::default_instance_->InitAsDefaultInstance();
  CSOItemRecipe::default_instance_->InitAsDefaultInstance();
  CMsgDevNewItemRequest::default_instance_->InitAsDefaultInstance();
  CMsgIncrementKillCountAttribute::default_instance_->InitAsDefaultInstance();
  CSOEconItemAttribute::default_instance_->InitAsDefaultInstance();
  CSOEconItem::default_instance_->InitAsDefaultInstance();
  CMsgSortItems::default_instance_->InitAsDefaultInstance();
  CSOEconClaimCode::default_instance_->InitAsDefaultInstance();
  CMsgStoreGetUserData::default_instance_->InitAsDefaultInstance();
  CMsgStoreGetUserDataResponse::default_instance_->InitAsDefaultInstance();
  CMsgStartupCheck::default_instance_->InitAsDefaultInstance();
  CMsgStartupCheckResponse::default_instance_->InitAsDefaultInstance();
  CMsgUpdateItemSchema::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_5fgcmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_5fgcmessages_2eproto {
  StaticDescriptorInitializer_base_5fgcmessages_2eproto() {
    protobuf_AddDesc_base_5fgcmessages_2eproto();
  }
} static_descriptor_initializer_base_5fgcmessages_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CMsgSystemBroadcast::kMessageFieldNumber;
#endif  // !_MSC_VER

CMsgSystemBroadcast::CMsgSystemBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSystemBroadcast::InitAsDefaultInstance() {
}

CMsgSystemBroadcast::CMsgSystemBroadcast(const CMsgSystemBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSystemBroadcast::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSystemBroadcast::~CMsgSystemBroadcast() {
  SharedDtor();
}

void CMsgSystemBroadcast::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSystemBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSystemBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSystemBroadcast_descriptor_;
}

const CMsgSystemBroadcast& CMsgSystemBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSystemBroadcast* CMsgSystemBroadcast::default_instance_ = NULL;

CMsgSystemBroadcast* CMsgSystemBroadcast::New() const {
  return new CMsgSystemBroadcast;
}

void CMsgSystemBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSystemBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSystemBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSystemBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSystemBroadcast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSystemBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSystemBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSystemBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSystemBroadcast::MergeFrom(const CMsgSystemBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSystemBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSystemBroadcast::CopyFrom(const CMsgSystemBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSystemBroadcast::IsInitialized() const {
  
  return true;
}

void CMsgSystemBroadcast::Swap(CMsgSystemBroadcast* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSystemBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSystemBroadcast_descriptor_;
  metadata.reflection = CMsgSystemBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOEconGameAccountClient::kAdditionalBackpackSlotsFieldNumber;
const int CSOEconGameAccountClient::kTrialAccountFieldNumber;
const int CSOEconGameAccountClient::kEligibleForOnlinePlayFieldNumber;
const int CSOEconGameAccountClient::kNeedToChooseMostHelpfulFriendFieldNumber;
const int CSOEconGameAccountClient::kInCoachesListFieldNumber;
#endif  // !_MSC_VER

CSOEconGameAccountClient::CSOEconGameAccountClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconGameAccountClient::InitAsDefaultInstance() {
}

CSOEconGameAccountClient::CSOEconGameAccountClient(const CSOEconGameAccountClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconGameAccountClient::SharedCtor() {
  _cached_size_ = 0;
  additional_backpack_slots_ = 0u;
  trial_account_ = false;
  eligible_for_online_play_ = true;
  need_to_choose_most_helpful_friend_ = false;
  in_coaches_list_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconGameAccountClient::~CSOEconGameAccountClient() {
  SharedDtor();
}

void CSOEconGameAccountClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOEconGameAccountClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconGameAccountClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconGameAccountClient_descriptor_;
}

const CSOEconGameAccountClient& CSOEconGameAccountClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconGameAccountClient* CSOEconGameAccountClient::default_instance_ = NULL;

CSOEconGameAccountClient* CSOEconGameAccountClient::New() const {
  return new CSOEconGameAccountClient;
}

void CSOEconGameAccountClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    additional_backpack_slots_ = 0u;
    trial_account_ = false;
    eligible_for_online_play_ = true;
    need_to_choose_most_helpful_friend_ = false;
    in_coaches_list_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconGameAccountClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 additional_backpack_slots = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &additional_backpack_slots_)));
          set_has_additional_backpack_slots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trial_account;
        break;
      }
      
      // optional bool trial_account = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trial_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trial_account_)));
          set_has_trial_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eligible_for_online_play;
        break;
      }
      
      // optional bool eligible_for_online_play = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eligible_for_online_play:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eligible_for_online_play_)));
          set_has_eligible_for_online_play();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_need_to_choose_most_helpful_friend;
        break;
      }
      
      // optional bool need_to_choose_most_helpful_friend = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_to_choose_most_helpful_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_to_choose_most_helpful_friend_)));
          set_has_need_to_choose_most_helpful_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_in_coaches_list;
        break;
      }
      
      // optional bool in_coaches_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_coaches_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_coaches_list_)));
          set_has_in_coaches_list();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconGameAccountClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 additional_backpack_slots = 1 [default = 0];
  if (has_additional_backpack_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->additional_backpack_slots(), output);
  }
  
  // optional bool trial_account = 2 [default = false];
  if (has_trial_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trial_account(), output);
  }
  
  // optional bool eligible_for_online_play = 3 [default = true];
  if (has_eligible_for_online_play()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->eligible_for_online_play(), output);
  }
  
  // optional bool need_to_choose_most_helpful_friend = 4;
  if (has_need_to_choose_most_helpful_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->need_to_choose_most_helpful_friend(), output);
  }
  
  // optional bool in_coaches_list = 5;
  if (has_in_coaches_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->in_coaches_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconGameAccountClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 additional_backpack_slots = 1 [default = 0];
  if (has_additional_backpack_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->additional_backpack_slots(), target);
  }
  
  // optional bool trial_account = 2 [default = false];
  if (has_trial_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trial_account(), target);
  }
  
  // optional bool eligible_for_online_play = 3 [default = true];
  if (has_eligible_for_online_play()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->eligible_for_online_play(), target);
  }
  
  // optional bool need_to_choose_most_helpful_friend = 4;
  if (has_need_to_choose_most_helpful_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->need_to_choose_most_helpful_friend(), target);
  }
  
  // optional bool in_coaches_list = 5;
  if (has_in_coaches_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->in_coaches_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconGameAccountClient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 additional_backpack_slots = 1 [default = 0];
    if (has_additional_backpack_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->additional_backpack_slots());
    }
    
    // optional bool trial_account = 2 [default = false];
    if (has_trial_account()) {
      total_size += 1 + 1;
    }
    
    // optional bool eligible_for_online_play = 3 [default = true];
    if (has_eligible_for_online_play()) {
      total_size += 1 + 1;
    }
    
    // optional bool need_to_choose_most_helpful_friend = 4;
    if (has_need_to_choose_most_helpful_friend()) {
      total_size += 1 + 1;
    }
    
    // optional bool in_coaches_list = 5;
    if (has_in_coaches_list()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconGameAccountClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconGameAccountClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconGameAccountClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconGameAccountClient::MergeFrom(const CSOEconGameAccountClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_additional_backpack_slots()) {
      set_additional_backpack_slots(from.additional_backpack_slots());
    }
    if (from.has_trial_account()) {
      set_trial_account(from.trial_account());
    }
    if (from.has_eligible_for_online_play()) {
      set_eligible_for_online_play(from.eligible_for_online_play());
    }
    if (from.has_need_to_choose_most_helpful_friend()) {
      set_need_to_choose_most_helpful_friend(from.need_to_choose_most_helpful_friend());
    }
    if (from.has_in_coaches_list()) {
      set_in_coaches_list(from.in_coaches_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconGameAccountClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconGameAccountClient::CopyFrom(const CSOEconGameAccountClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconGameAccountClient::IsInitialized() const {
  
  return true;
}

void CSOEconGameAccountClient::Swap(CSOEconGameAccountClient* other) {
  if (other != this) {
    std::swap(additional_backpack_slots_, other->additional_backpack_slots_);
    std::swap(trial_account_, other->trial_account_);
    std::swap(eligible_for_online_play_, other->eligible_for_online_play_);
    std::swap(need_to_choose_most_helpful_friend_, other->need_to_choose_most_helpful_friend_);
    std::swap(in_coaches_list_, other->in_coaches_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconGameAccountClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconGameAccountClient_descriptor_;
  metadata.reflection = CSOEconGameAccountClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOItemCriteriaCondition::kOpFieldNumber;
const int CSOItemCriteriaCondition::kFieldFieldNumber;
const int CSOItemCriteriaCondition::kRequiredFieldNumber;
const int CSOItemCriteriaCondition::kFloatValueFieldNumber;
const int CSOItemCriteriaCondition::kStringValueFieldNumber;
#endif  // !_MSC_VER

CSOItemCriteriaCondition::CSOItemCriteriaCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOItemCriteriaCondition::InitAsDefaultInstance() {
}

CSOItemCriteriaCondition::CSOItemCriteriaCondition(const CSOItemCriteriaCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOItemCriteriaCondition::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  required_ = false;
  float_value_ = 0;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOItemCriteriaCondition::~CSOItemCriteriaCondition() {
  SharedDtor();
}

void CSOItemCriteriaCondition::SharedDtor() {
  if (field_ != &::google::protobuf::internal::kEmptyString) {
    delete field_;
  }
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    delete string_value_;
  }
  if (this != default_instance_) {
  }
}

void CSOItemCriteriaCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOItemCriteriaCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOItemCriteriaCondition_descriptor_;
}

const CSOItemCriteriaCondition& CSOItemCriteriaCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOItemCriteriaCondition* CSOItemCriteriaCondition::default_instance_ = NULL;

CSOItemCriteriaCondition* CSOItemCriteriaCondition::New() const {
  return new CSOItemCriteriaCondition;
}

void CSOItemCriteriaCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
    if (has_field()) {
      if (field_ != &::google::protobuf::internal::kEmptyString) {
        field_->clear();
      }
    }
    required_ = false;
    float_value_ = 0;
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::kEmptyString) {
        string_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOItemCriteriaCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field;
        break;
      }
      
      // optional string field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field().data(), this->field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_required;
        break;
      }
      
      // optional bool required = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));
          set_has_required();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_float_value;
        break;
      }
      
      // optional float float_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_float_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
          set_has_float_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_string_value;
        break;
      }
      
      // optional string string_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOItemCriteriaCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }
  
  // optional string field = 2;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->field(), output);
  }
  
  // optional bool required = 3;
  if (has_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->required(), output);
  }
  
  // optional float float_value = 4;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->float_value(), output);
  }
  
  // optional string string_value = 5;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->string_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOItemCriteriaCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }
  
  // optional string field = 2;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }
  
  // optional bool required = 3;
  if (has_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->required(), target);
  }
  
  // optional float float_value = 4;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->float_value(), target);
  }
  
  // optional string string_value = 5;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->string_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOItemCriteriaCondition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }
    
    // optional string field = 2;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field());
    }
    
    // optional bool required = 3;
    if (has_required()) {
      total_size += 1 + 1;
    }
    
    // optional float float_value = 4;
    if (has_float_value()) {
      total_size += 1 + 4;
    }
    
    // optional string string_value = 5;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOItemCriteriaCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOItemCriteriaCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOItemCriteriaCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOItemCriteriaCondition::MergeFrom(const CSOItemCriteriaCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_field()) {
      set_field(from.field());
    }
    if (from.has_required()) {
      set_required(from.required());
    }
    if (from.has_float_value()) {
      set_float_value(from.float_value());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOItemCriteriaCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemCriteriaCondition::CopyFrom(const CSOItemCriteriaCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemCriteriaCondition::IsInitialized() const {
  
  return true;
}

void CSOItemCriteriaCondition::Swap(CSOItemCriteriaCondition* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(field_, other->field_);
    std::swap(required_, other->required_);
    std::swap(float_value_, other->float_value_);
    std::swap(string_value_, other->string_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOItemCriteriaCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOItemCriteriaCondition_descriptor_;
  metadata.reflection = CSOItemCriteriaCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOItemCriteria::kItemLevelFieldNumber;
const int CSOItemCriteria::kItemQualityFieldNumber;
const int CSOItemCriteria::kItemLevelSetFieldNumber;
const int CSOItemCriteria::kItemQualitySetFieldNumber;
const int CSOItemCriteria::kInitialInventoryFieldNumber;
const int CSOItemCriteria::kInitialQuantityFieldNumber;
const int CSOItemCriteria::kForcedQualityMatchFieldNumber;
const int CSOItemCriteria::kIgnoreEnabledFlagFieldNumber;
const int CSOItemCriteria::kConditionsFieldNumber;
#endif  // !_MSC_VER

CSOItemCriteria::CSOItemCriteria()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOItemCriteria::InitAsDefaultInstance() {
}

CSOItemCriteria::CSOItemCriteria(const CSOItemCriteria& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOItemCriteria::SharedCtor() {
  _cached_size_ = 0;
  item_level_ = 0u;
  item_quality_ = 0;
  item_level_set_ = false;
  item_quality_set_ = false;
  initial_inventory_ = 0u;
  initial_quantity_ = 0u;
  forced_quality_match_ = false;
  ignore_enabled_flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOItemCriteria::~CSOItemCriteria() {
  SharedDtor();
}

void CSOItemCriteria::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOItemCriteria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOItemCriteria::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOItemCriteria_descriptor_;
}

const CSOItemCriteria& CSOItemCriteria::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOItemCriteria* CSOItemCriteria::default_instance_ = NULL;

CSOItemCriteria* CSOItemCriteria::New() const {
  return new CSOItemCriteria;
}

void CSOItemCriteria::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_level_ = 0u;
    item_quality_ = 0;
    item_level_set_ = false;
    item_quality_set_ = false;
    initial_inventory_ = 0u;
    initial_quantity_ = 0u;
    forced_quality_match_ = false;
    ignore_enabled_flag_ = false;
  }
  conditions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOItemCriteria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_level_)));
          set_has_item_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_quality;
        break;
      }
      
      // optional int32 item_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_quality_)));
          set_has_item_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_level_set;
        break;
      }
      
      // optional bool item_level_set = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_level_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &item_level_set_)));
          set_has_item_level_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_quality_set;
        break;
      }
      
      // optional bool item_quality_set = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_quality_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &item_quality_set_)));
          set_has_item_quality_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_initial_inventory;
        break;
      }
      
      // optional uint32 initial_inventory = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initial_inventory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_inventory_)));
          set_has_initial_inventory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_initial_quantity;
        break;
      }
      
      // optional uint32 initial_quantity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initial_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_quantity_)));
          set_has_initial_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_forced_quality_match;
        break;
      }
      
      // optional bool forced_quality_match = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forced_quality_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forced_quality_match_)));
          set_has_forced_quality_match();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ignore_enabled_flag;
        break;
      }
      
      // optional bool ignore_enabled_flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignore_enabled_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_enabled_flag_)));
          set_has_ignore_enabled_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_conditions;
        break;
      }
      
      // repeated .CSOItemCriteriaCondition conditions = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conditions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_conditions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOItemCriteria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_level = 1;
  if (has_item_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_level(), output);
  }
  
  // optional int32 item_quality = 2;
  if (has_item_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_quality(), output);
  }
  
  // optional bool item_level_set = 3;
  if (has_item_level_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->item_level_set(), output);
  }
  
  // optional bool item_quality_set = 4;
  if (has_item_quality_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->item_quality_set(), output);
  }
  
  // optional uint32 initial_inventory = 5;
  if (has_initial_inventory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->initial_inventory(), output);
  }
  
  // optional uint32 initial_quantity = 6;
  if (has_initial_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->initial_quantity(), output);
  }
  
  // optional bool forced_quality_match = 7;
  if (has_forced_quality_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->forced_quality_match(), output);
  }
  
  // optional bool ignore_enabled_flag = 8;
  if (has_ignore_enabled_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ignore_enabled_flag(), output);
  }
  
  // repeated .CSOItemCriteriaCondition conditions = 9;
  for (int i = 0; i < this->conditions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->conditions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOItemCriteria::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_level = 1;
  if (has_item_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_level(), target);
  }
  
  // optional int32 item_quality = 2;
  if (has_item_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_quality(), target);
  }
  
  // optional bool item_level_set = 3;
  if (has_item_level_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->item_level_set(), target);
  }
  
  // optional bool item_quality_set = 4;
  if (has_item_quality_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->item_quality_set(), target);
  }
  
  // optional uint32 initial_inventory = 5;
  if (has_initial_inventory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->initial_inventory(), target);
  }
  
  // optional uint32 initial_quantity = 6;
  if (has_initial_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->initial_quantity(), target);
  }
  
  // optional bool forced_quality_match = 7;
  if (has_forced_quality_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->forced_quality_match(), target);
  }
  
  // optional bool ignore_enabled_flag = 8;
  if (has_ignore_enabled_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ignore_enabled_flag(), target);
  }
  
  // repeated .CSOItemCriteriaCondition conditions = 9;
  for (int i = 0; i < this->conditions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->conditions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOItemCriteria::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_level = 1;
    if (has_item_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_level());
    }
    
    // optional int32 item_quality = 2;
    if (has_item_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_quality());
    }
    
    // optional bool item_level_set = 3;
    if (has_item_level_set()) {
      total_size += 1 + 1;
    }
    
    // optional bool item_quality_set = 4;
    if (has_item_quality_set()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 initial_inventory = 5;
    if (has_initial_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_inventory());
    }
    
    // optional uint32 initial_quantity = 6;
    if (has_initial_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_quantity());
    }
    
    // optional bool forced_quality_match = 7;
    if (has_forced_quality_match()) {
      total_size += 1 + 1;
    }
    
    // optional bool ignore_enabled_flag = 8;
    if (has_ignore_enabled_flag()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .CSOItemCriteriaCondition conditions = 9;
  total_size += 1 * this->conditions_size();
  for (int i = 0; i < this->conditions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conditions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOItemCriteria::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOItemCriteria* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOItemCriteria*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOItemCriteria::MergeFrom(const CSOItemCriteria& from) {
  GOOGLE_CHECK_NE(&from, this);
  conditions_.MergeFrom(from.conditions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_level()) {
      set_item_level(from.item_level());
    }
    if (from.has_item_quality()) {
      set_item_quality(from.item_quality());
    }
    if (from.has_item_level_set()) {
      set_item_level_set(from.item_level_set());
    }
    if (from.has_item_quality_set()) {
      set_item_quality_set(from.item_quality_set());
    }
    if (from.has_initial_inventory()) {
      set_initial_inventory(from.initial_inventory());
    }
    if (from.has_initial_quantity()) {
      set_initial_quantity(from.initial_quantity());
    }
    if (from.has_forced_quality_match()) {
      set_forced_quality_match(from.forced_quality_match());
    }
    if (from.has_ignore_enabled_flag()) {
      set_ignore_enabled_flag(from.ignore_enabled_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOItemCriteria::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemCriteria::CopyFrom(const CSOItemCriteria& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemCriteria::IsInitialized() const {
  
  return true;
}

void CSOItemCriteria::Swap(CSOItemCriteria* other) {
  if (other != this) {
    std::swap(item_level_, other->item_level_);
    std::swap(item_quality_, other->item_quality_);
    std::swap(item_level_set_, other->item_level_set_);
    std::swap(item_quality_set_, other->item_quality_set_);
    std::swap(initial_inventory_, other->initial_inventory_);
    std::swap(initial_quantity_, other->initial_quantity_);
    std::swap(forced_quality_match_, other->forced_quality_match_);
    std::swap(ignore_enabled_flag_, other->ignore_enabled_flag_);
    conditions_.Swap(&other->conditions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOItemCriteria::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOItemCriteria_descriptor_;
  metadata.reflection = CSOItemCriteria_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOItemRecipe::kDefIndexFieldNumber;
const int CSOItemRecipe::kNameFieldNumber;
const int CSOItemRecipe::kNAFieldNumber;
const int CSOItemRecipe::kDescInputsFieldNumber;
const int CSOItemRecipe::kDescOutputsFieldNumber;
const int CSOItemRecipe::kDiAFieldNumber;
const int CSOItemRecipe::kDiBFieldNumber;
const int CSOItemRecipe::kDiCFieldNumber;
const int CSOItemRecipe::kDoAFieldNumber;
const int CSOItemRecipe::kDoBFieldNumber;
const int CSOItemRecipe::kDoCFieldNumber;
const int CSOItemRecipe::kRequiresAllSameClassFieldNumber;
const int CSOItemRecipe::kRequiresAllSameSlotFieldNumber;
const int CSOItemRecipe::kClassUsageForOutputFieldNumber;
const int CSOItemRecipe::kSlotUsageForOutputFieldNumber;
const int CSOItemRecipe::kSetForOutputFieldNumber;
const int CSOItemRecipe::kInputItemsCriteriaFieldNumber;
const int CSOItemRecipe::kOutputItemsCriteriaFieldNumber;
const int CSOItemRecipe::kInputItemDupeCountsFieldNumber;
#endif  // !_MSC_VER

CSOItemRecipe::CSOItemRecipe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOItemRecipe::InitAsDefaultInstance() {
}

CSOItemRecipe::CSOItemRecipe(const CSOItemRecipe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOItemRecipe::SharedCtor() {
  _cached_size_ = 0;
  def_index_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  n_a_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_inputs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_outputs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  di_a_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  di_b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  di_c_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  do_a_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  do_b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  do_c_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requires_all_same_class_ = false;
  requires_all_same_slot_ = false;
  class_usage_for_output_ = 0;
  slot_usage_for_output_ = 0;
  set_for_output_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOItemRecipe::~CSOItemRecipe() {
  SharedDtor();
}

void CSOItemRecipe::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (n_a_ != &::google::protobuf::internal::kEmptyString) {
    delete n_a_;
  }
  if (desc_inputs_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_inputs_;
  }
  if (desc_outputs_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_outputs_;
  }
  if (di_a_ != &::google::protobuf::internal::kEmptyString) {
    delete di_a_;
  }
  if (di_b_ != &::google::protobuf::internal::kEmptyString) {
    delete di_b_;
  }
  if (di_c_ != &::google::protobuf::internal::kEmptyString) {
    delete di_c_;
  }
  if (do_a_ != &::google::protobuf::internal::kEmptyString) {
    delete do_a_;
  }
  if (do_b_ != &::google::protobuf::internal::kEmptyString) {
    delete do_b_;
  }
  if (do_c_ != &::google::protobuf::internal::kEmptyString) {
    delete do_c_;
  }
  if (this != default_instance_) {
  }
}

void CSOItemRecipe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOItemRecipe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOItemRecipe_descriptor_;
}

const CSOItemRecipe& CSOItemRecipe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOItemRecipe* CSOItemRecipe::default_instance_ = NULL;

CSOItemRecipe* CSOItemRecipe::New() const {
  return new CSOItemRecipe;
}

void CSOItemRecipe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    def_index_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_n_a()) {
      if (n_a_ != &::google::protobuf::internal::kEmptyString) {
        n_a_->clear();
      }
    }
    if (has_desc_inputs()) {
      if (desc_inputs_ != &::google::protobuf::internal::kEmptyString) {
        desc_inputs_->clear();
      }
    }
    if (has_desc_outputs()) {
      if (desc_outputs_ != &::google::protobuf::internal::kEmptyString) {
        desc_outputs_->clear();
      }
    }
    if (has_di_a()) {
      if (di_a_ != &::google::protobuf::internal::kEmptyString) {
        di_a_->clear();
      }
    }
    if (has_di_b()) {
      if (di_b_ != &::google::protobuf::internal::kEmptyString) {
        di_b_->clear();
      }
    }
    if (has_di_c()) {
      if (di_c_ != &::google::protobuf::internal::kEmptyString) {
        di_c_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_do_a()) {
      if (do_a_ != &::google::protobuf::internal::kEmptyString) {
        do_a_->clear();
      }
    }
    if (has_do_b()) {
      if (do_b_ != &::google::protobuf::internal::kEmptyString) {
        do_b_->clear();
      }
    }
    if (has_do_c()) {
      if (do_c_ != &::google::protobuf::internal::kEmptyString) {
        do_c_->clear();
      }
    }
    requires_all_same_class_ = false;
    requires_all_same_slot_ = false;
    class_usage_for_output_ = 0;
    slot_usage_for_output_ = 0;
    set_for_output_ = 0;
  }
  input_items_criteria_.Clear();
  output_items_criteria_.Clear();
  input_item_dupe_counts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOItemRecipe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          set_has_def_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_n_a;
        break;
      }
      
      // optional string n_a = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_n_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_n_a()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->n_a().data(), this->n_a().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desc_inputs;
        break;
      }
      
      // optional string desc_inputs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_inputs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc_inputs().data(), this->desc_inputs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_desc_outputs;
        break;
      }
      
      // optional string desc_outputs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_outputs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc_outputs().data(), this->desc_outputs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_di_a;
        break;
      }
      
      // optional string di_a = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_di_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_di_a()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->di_a().data(), this->di_a().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_di_b;
        break;
      }
      
      // optional string di_b = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_di_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_di_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->di_b().data(), this->di_b().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_di_c;
        break;
      }
      
      // optional string di_c = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_di_c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_di_c()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->di_c().data(), this->di_c().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_do_a;
        break;
      }
      
      // optional string do_a = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_do_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_a()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->do_a().data(), this->do_a().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_do_b;
        break;
      }
      
      // optional string do_b = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_do_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->do_b().data(), this->do_b().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_do_c;
        break;
      }
      
      // optional string do_c = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_do_c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_c()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->do_c().data(), this->do_c().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_requires_all_same_class;
        break;
      }
      
      // optional bool requires_all_same_class = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requires_all_same_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_all_same_class_)));
          set_has_requires_all_same_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_requires_all_same_slot;
        break;
      }
      
      // optional bool requires_all_same_slot = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requires_all_same_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_all_same_slot_)));
          set_has_requires_all_same_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_class_usage_for_output;
        break;
      }
      
      // optional int32 class_usage_for_output = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_class_usage_for_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_usage_for_output_)));
          set_has_class_usage_for_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_slot_usage_for_output;
        break;
      }
      
      // optional int32 slot_usage_for_output = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_usage_for_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_usage_for_output_)));
          set_has_slot_usage_for_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_set_for_output;
        break;
      }
      
      // optional int32 set_for_output = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_set_for_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_for_output_)));
          set_has_set_for_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_input_items_criteria;
        break;
      }
      
      // repeated .CSOItemCriteria input_items_criteria = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_items_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input_items_criteria()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_input_items_criteria;
        if (input->ExpectTag(170)) goto parse_output_items_criteria;
        break;
      }
      
      // repeated .CSOItemCriteria output_items_criteria = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_items_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output_items_criteria()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_output_items_criteria;
        if (input->ExpectTag(176)) goto parse_input_item_dupe_counts;
        break;
      }
      
      // repeated uint32 input_item_dupe_counts = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_item_dupe_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176, input, this->mutable_input_item_dupe_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_input_item_dupe_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_input_item_dupe_counts;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOItemRecipe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 def_index = 1;
  if (has_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string n_a = 3;
  if (has_n_a()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->n_a().data(), this->n_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->n_a(), output);
  }
  
  // optional string desc_inputs = 4;
  if (has_desc_inputs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_inputs().data(), this->desc_inputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desc_inputs(), output);
  }
  
  // optional string desc_outputs = 5;
  if (has_desc_outputs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_outputs().data(), this->desc_outputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->desc_outputs(), output);
  }
  
  // optional string di_a = 6;
  if (has_di_a()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_a().data(), this->di_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->di_a(), output);
  }
  
  // optional string di_b = 7;
  if (has_di_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_b().data(), this->di_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->di_b(), output);
  }
  
  // optional string di_c = 8;
  if (has_di_c()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_c().data(), this->di_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->di_c(), output);
  }
  
  // optional string do_a = 9;
  if (has_do_a()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_a().data(), this->do_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->do_a(), output);
  }
  
  // optional string do_b = 10;
  if (has_do_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_b().data(), this->do_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->do_b(), output);
  }
  
  // optional string do_c = 11;
  if (has_do_c()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_c().data(), this->do_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->do_c(), output);
  }
  
  // optional bool requires_all_same_class = 12;
  if (has_requires_all_same_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->requires_all_same_class(), output);
  }
  
  // optional bool requires_all_same_slot = 13;
  if (has_requires_all_same_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->requires_all_same_slot(), output);
  }
  
  // optional int32 class_usage_for_output = 14;
  if (has_class_usage_for_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->class_usage_for_output(), output);
  }
  
  // optional int32 slot_usage_for_output = 15;
  if (has_slot_usage_for_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->slot_usage_for_output(), output);
  }
  
  // optional int32 set_for_output = 16;
  if (has_set_for_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->set_for_output(), output);
  }
  
  // repeated .CSOItemCriteria input_items_criteria = 20;
  for (int i = 0; i < this->input_items_criteria_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->input_items_criteria(i), output);
  }
  
  // repeated .CSOItemCriteria output_items_criteria = 21;
  for (int i = 0; i < this->output_items_criteria_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->output_items_criteria(i), output);
  }
  
  // repeated uint32 input_item_dupe_counts = 22;
  for (int i = 0; i < this->input_item_dupe_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->input_item_dupe_counts(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOItemRecipe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 def_index = 1;
  if (has_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string n_a = 3;
  if (has_n_a()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->n_a().data(), this->n_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->n_a(), target);
  }
  
  // optional string desc_inputs = 4;
  if (has_desc_inputs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_inputs().data(), this->desc_inputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc_inputs(), target);
  }
  
  // optional string desc_outputs = 5;
  if (has_desc_outputs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_outputs().data(), this->desc_outputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc_outputs(), target);
  }
  
  // optional string di_a = 6;
  if (has_di_a()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_a().data(), this->di_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->di_a(), target);
  }
  
  // optional string di_b = 7;
  if (has_di_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_b().data(), this->di_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->di_b(), target);
  }
  
  // optional string di_c = 8;
  if (has_di_c()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_c().data(), this->di_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->di_c(), target);
  }
  
  // optional string do_a = 9;
  if (has_do_a()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_a().data(), this->do_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->do_a(), target);
  }
  
  // optional string do_b = 10;
  if (has_do_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_b().data(), this->do_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->do_b(), target);
  }
  
  // optional string do_c = 11;
  if (has_do_c()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_c().data(), this->do_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->do_c(), target);
  }
  
  // optional bool requires_all_same_class = 12;
  if (has_requires_all_same_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->requires_all_same_class(), target);
  }
  
  // optional bool requires_all_same_slot = 13;
  if (has_requires_all_same_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->requires_all_same_slot(), target);
  }
  
  // optional int32 class_usage_for_output = 14;
  if (has_class_usage_for_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->class_usage_for_output(), target);
  }
  
  // optional int32 slot_usage_for_output = 15;
  if (has_slot_usage_for_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->slot_usage_for_output(), target);
  }
  
  // optional int32 set_for_output = 16;
  if (has_set_for_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->set_for_output(), target);
  }
  
  // repeated .CSOItemCriteria input_items_criteria = 20;
  for (int i = 0; i < this->input_items_criteria_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->input_items_criteria(i), target);
  }
  
  // repeated .CSOItemCriteria output_items_criteria = 21;
  for (int i = 0; i < this->output_items_criteria_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->output_items_criteria(i), target);
  }
  
  // repeated uint32 input_item_dupe_counts = 22;
  for (int i = 0; i < this->input_item_dupe_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(22, this->input_item_dupe_counts(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOItemRecipe::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 def_index = 1;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string n_a = 3;
    if (has_n_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->n_a());
    }
    
    // optional string desc_inputs = 4;
    if (has_desc_inputs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc_inputs());
    }
    
    // optional string desc_outputs = 5;
    if (has_desc_outputs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc_outputs());
    }
    
    // optional string di_a = 6;
    if (has_di_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->di_a());
    }
    
    // optional string di_b = 7;
    if (has_di_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->di_b());
    }
    
    // optional string di_c = 8;
    if (has_di_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->di_c());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string do_a = 9;
    if (has_do_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_a());
    }
    
    // optional string do_b = 10;
    if (has_do_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_b());
    }
    
    // optional string do_c = 11;
    if (has_do_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_c());
    }
    
    // optional bool requires_all_same_class = 12;
    if (has_requires_all_same_class()) {
      total_size += 1 + 1;
    }
    
    // optional bool requires_all_same_slot = 13;
    if (has_requires_all_same_slot()) {
      total_size += 1 + 1;
    }
    
    // optional int32 class_usage_for_output = 14;
    if (has_class_usage_for_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_usage_for_output());
    }
    
    // optional int32 slot_usage_for_output = 15;
    if (has_slot_usage_for_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_usage_for_output());
    }
    
    // optional int32 set_for_output = 16;
    if (has_set_for_output()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_for_output());
    }
    
  }
  // repeated .CSOItemCriteria input_items_criteria = 20;
  total_size += 2 * this->input_items_criteria_size();
  for (int i = 0; i < this->input_items_criteria_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input_items_criteria(i));
  }
  
  // repeated .CSOItemCriteria output_items_criteria = 21;
  total_size += 2 * this->output_items_criteria_size();
  for (int i = 0; i < this->output_items_criteria_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output_items_criteria(i));
  }
  
  // repeated uint32 input_item_dupe_counts = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->input_item_dupe_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->input_item_dupe_counts(i));
    }
    total_size += 2 * this->input_item_dupe_counts_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOItemRecipe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOItemRecipe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOItemRecipe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOItemRecipe::MergeFrom(const CSOItemRecipe& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_items_criteria_.MergeFrom(from.input_items_criteria_);
  output_items_criteria_.MergeFrom(from.output_items_criteria_);
  input_item_dupe_counts_.MergeFrom(from.input_item_dupe_counts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_def_index()) {
      set_def_index(from.def_index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_n_a()) {
      set_n_a(from.n_a());
    }
    if (from.has_desc_inputs()) {
      set_desc_inputs(from.desc_inputs());
    }
    if (from.has_desc_outputs()) {
      set_desc_outputs(from.desc_outputs());
    }
    if (from.has_di_a()) {
      set_di_a(from.di_a());
    }
    if (from.has_di_b()) {
      set_di_b(from.di_b());
    }
    if (from.has_di_c()) {
      set_di_c(from.di_c());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_do_a()) {
      set_do_a(from.do_a());
    }
    if (from.has_do_b()) {
      set_do_b(from.do_b());
    }
    if (from.has_do_c()) {
      set_do_c(from.do_c());
    }
    if (from.has_requires_all_same_class()) {
      set_requires_all_same_class(from.requires_all_same_class());
    }
    if (from.has_requires_all_same_slot()) {
      set_requires_all_same_slot(from.requires_all_same_slot());
    }
    if (from.has_class_usage_for_output()) {
      set_class_usage_for_output(from.class_usage_for_output());
    }
    if (from.has_slot_usage_for_output()) {
      set_slot_usage_for_output(from.slot_usage_for_output());
    }
    if (from.has_set_for_output()) {
      set_set_for_output(from.set_for_output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOItemRecipe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemRecipe::CopyFrom(const CSOItemRecipe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemRecipe::IsInitialized() const {
  
  return true;
}

void CSOItemRecipe::Swap(CSOItemRecipe* other) {
  if (other != this) {
    std::swap(def_index_, other->def_index_);
    std::swap(name_, other->name_);
    std::swap(n_a_, other->n_a_);
    std::swap(desc_inputs_, other->desc_inputs_);
    std::swap(desc_outputs_, other->desc_outputs_);
    std::swap(di_a_, other->di_a_);
    std::swap(di_b_, other->di_b_);
    std::swap(di_c_, other->di_c_);
    std::swap(do_a_, other->do_a_);
    std::swap(do_b_, other->do_b_);
    std::swap(do_c_, other->do_c_);
    std::swap(requires_all_same_class_, other->requires_all_same_class_);
    std::swap(requires_all_same_slot_, other->requires_all_same_slot_);
    std::swap(class_usage_for_output_, other->class_usage_for_output_);
    std::swap(slot_usage_for_output_, other->slot_usage_for_output_);
    std::swap(set_for_output_, other->set_for_output_);
    input_items_criteria_.Swap(&other->input_items_criteria_);
    output_items_criteria_.Swap(&other->output_items_criteria_);
    input_item_dupe_counts_.Swap(&other->input_item_dupe_counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOItemRecipe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOItemRecipe_descriptor_;
  metadata.reflection = CSOItemRecipe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDevNewItemRequest::kReceiverFieldNumber;
const int CMsgDevNewItemRequest::kCriteriaFieldNumber;
#endif  // !_MSC_VER

CMsgDevNewItemRequest::CMsgDevNewItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDevNewItemRequest::InitAsDefaultInstance() {
  criteria_ = const_cast< ::CSOItemCriteria*>(&::CSOItemCriteria::default_instance());
}

CMsgDevNewItemRequest::CMsgDevNewItemRequest(const CMsgDevNewItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDevNewItemRequest::SharedCtor() {
  _cached_size_ = 0;
  receiver_ = GOOGLE_ULONGLONG(0);
  criteria_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDevNewItemRequest::~CMsgDevNewItemRequest() {
  SharedDtor();
}

void CMsgDevNewItemRequest::SharedDtor() {
  if (this != default_instance_) {
    delete criteria_;
  }
}

void CMsgDevNewItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDevNewItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDevNewItemRequest_descriptor_;
}

const CMsgDevNewItemRequest& CMsgDevNewItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgDevNewItemRequest* CMsgDevNewItemRequest::default_instance_ = NULL;

CMsgDevNewItemRequest* CMsgDevNewItemRequest::New() const {
  return new CMsgDevNewItemRequest;
}

void CMsgDevNewItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    receiver_ = GOOGLE_ULONGLONG(0);
    if (has_criteria()) {
      if (criteria_ != NULL) criteria_->::CSOItemCriteria::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDevNewItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 receiver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &receiver_)));
          set_has_receiver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_criteria;
        break;
      }
      
      // optional .CSOItemCriteria criteria = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_criteria()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDevNewItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 receiver = 1;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->receiver(), output);
  }
  
  // optional .CSOItemCriteria criteria = 2;
  if (has_criteria()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->criteria(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDevNewItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 receiver = 1;
  if (has_receiver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->receiver(), target);
  }
  
  // optional .CSOItemCriteria criteria = 2;
  if (has_criteria()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->criteria(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDevNewItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 receiver = 1;
    if (has_receiver()) {
      total_size += 1 + 8;
    }
    
    // optional .CSOItemCriteria criteria = 2;
    if (has_criteria()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->criteria());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDevNewItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDevNewItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDevNewItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDevNewItemRequest::MergeFrom(const CMsgDevNewItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receiver()) {
      set_receiver(from.receiver());
    }
    if (from.has_criteria()) {
      mutable_criteria()->::CSOItemCriteria::MergeFrom(from.criteria());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDevNewItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDevNewItemRequest::CopyFrom(const CMsgDevNewItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDevNewItemRequest::IsInitialized() const {
  
  return true;
}

void CMsgDevNewItemRequest::Swap(CMsgDevNewItemRequest* other) {
  if (other != this) {
    std::swap(receiver_, other->receiver_);
    std::swap(criteria_, other->criteria_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDevNewItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDevNewItemRequest_descriptor_;
  metadata.reflection = CMsgDevNewItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgIncrementKillCountAttribute::kKillerSteamIdFieldNumber;
const int CMsgIncrementKillCountAttribute::kVictimSteamIdFieldNumber;
const int CMsgIncrementKillCountAttribute::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgIncrementKillCountAttribute::CMsgIncrementKillCountAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgIncrementKillCountAttribute::InitAsDefaultInstance() {
}

CMsgIncrementKillCountAttribute::CMsgIncrementKillCountAttribute(const CMsgIncrementKillCountAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgIncrementKillCountAttribute::SharedCtor() {
  _cached_size_ = 0;
  killer_steam_id_ = GOOGLE_ULONGLONG(0);
  victim_steam_id_ = GOOGLE_ULONGLONG(0);
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgIncrementKillCountAttribute::~CMsgIncrementKillCountAttribute() {
  SharedDtor();
}

void CMsgIncrementKillCountAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgIncrementKillCountAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgIncrementKillCountAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgIncrementKillCountAttribute_descriptor_;
}

const CMsgIncrementKillCountAttribute& CMsgIncrementKillCountAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgIncrementKillCountAttribute* CMsgIncrementKillCountAttribute::default_instance_ = NULL;

CMsgIncrementKillCountAttribute* CMsgIncrementKillCountAttribute::New() const {
  return new CMsgIncrementKillCountAttribute;
}

void CMsgIncrementKillCountAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killer_steam_id_ = GOOGLE_ULONGLONG(0);
    victim_steam_id_ = GOOGLE_ULONGLONG(0);
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgIncrementKillCountAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 killer_steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &killer_steam_id_)));
          set_has_killer_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_victim_steam_id;
        break;
      }
      
      // optional uint64 victim_steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victim_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &victim_steam_id_)));
          set_has_victim_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }
      
      // optional uint64 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgIncrementKillCountAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 killer_steam_id = 1;
  if (has_killer_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->killer_steam_id(), output);
  }
  
  // optional uint64 victim_steam_id = 2;
  if (has_victim_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->victim_steam_id(), output);
  }
  
  // optional uint64 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgIncrementKillCountAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 killer_steam_id = 1;
  if (has_killer_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->killer_steam_id(), target);
  }
  
  // optional uint64 victim_steam_id = 2;
  if (has_victim_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->victim_steam_id(), target);
  }
  
  // optional uint64 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgIncrementKillCountAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 killer_steam_id = 1;
    if (has_killer_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->killer_steam_id());
    }
    
    // optional uint64 victim_steam_id = 2;
    if (has_victim_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->victim_steam_id());
    }
    
    // optional uint64 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgIncrementKillCountAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgIncrementKillCountAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgIncrementKillCountAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgIncrementKillCountAttribute::MergeFrom(const CMsgIncrementKillCountAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killer_steam_id()) {
      set_killer_steam_id(from.killer_steam_id());
    }
    if (from.has_victim_steam_id()) {
      set_victim_steam_id(from.victim_steam_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgIncrementKillCountAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgIncrementKillCountAttribute::CopyFrom(const CMsgIncrementKillCountAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgIncrementKillCountAttribute::IsInitialized() const {
  
  return true;
}

void CMsgIncrementKillCountAttribute::Swap(CMsgIncrementKillCountAttribute* other) {
  if (other != this) {
    std::swap(killer_steam_id_, other->killer_steam_id_);
    std::swap(victim_steam_id_, other->victim_steam_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgIncrementKillCountAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgIncrementKillCountAttribute_descriptor_;
  metadata.reflection = CMsgIncrementKillCountAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOEconItemAttribute::kDefIndexFieldNumber;
const int CSOEconItemAttribute::kValueFieldNumber;
#endif  // !_MSC_VER

CSOEconItemAttribute::CSOEconItemAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconItemAttribute::InitAsDefaultInstance() {
}

CSOEconItemAttribute::CSOEconItemAttribute(const CSOEconItemAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconItemAttribute::SharedCtor() {
  _cached_size_ = 0;
  def_index_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconItemAttribute::~CSOEconItemAttribute() {
  SharedDtor();
}

void CSOEconItemAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOEconItemAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItemAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconItemAttribute_descriptor_;
}

const CSOEconItemAttribute& CSOEconItemAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconItemAttribute* CSOEconItemAttribute::default_instance_ = NULL;

CSOEconItemAttribute* CSOEconItemAttribute::New() const {
  return new CSOEconItemAttribute;
}

void CSOEconItemAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    def_index_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconItemAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          set_has_def_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconItemAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 def_index = 1;
  if (has_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }
  
  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconItemAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 def_index = 1;
  if (has_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }
  
  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconItemAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 def_index = 1;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }
    
    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItemAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconItemAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconItemAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconItemAttribute::MergeFrom(const CSOEconItemAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_def_index()) {
      set_def_index(from.def_index());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconItemAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemAttribute::CopyFrom(const CSOEconItemAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemAttribute::IsInitialized() const {
  
  return true;
}

void CSOEconItemAttribute::Swap(CSOEconItemAttribute* other) {
  if (other != this) {
    std::swap(def_index_, other->def_index_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconItemAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconItemAttribute_descriptor_;
  metadata.reflection = CSOEconItemAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOEconItem::kIdFieldNumber;
const int CSOEconItem::kAccountIdFieldNumber;
const int CSOEconItem::kInventoryFieldNumber;
const int CSOEconItem::kDefIndexFieldNumber;
const int CSOEconItem::kQuantityFieldNumber;
const int CSOEconItem::kLevelFieldNumber;
const int CSOEconItem::kQualityFieldNumber;
const int CSOEconItem::kFlagsFieldNumber;
const int CSOEconItem::kOriginFieldNumber;
const int CSOEconItem::kCustomNameFieldNumber;
const int CSOEconItem::kCustomDescFieldNumber;
const int CSOEconItem::kAttributeFieldNumber;
const int CSOEconItem::kInteriorItemFieldNumber;
const int CSOEconItem::kInUseFieldNumber;
const int CSOEconItem::kStyleFieldNumber;
const int CSOEconItem::kOriginalIdFieldNumber;
#endif  // !_MSC_VER

CSOEconItem::CSOEconItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconItem::InitAsDefaultInstance() {
  interior_item_ = const_cast< ::CSOEconItem*>(&::CSOEconItem::default_instance());
}

CSOEconItem::CSOEconItem(const CSOEconItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  account_id_ = 0u;
  inventory_ = 0u;
  def_index_ = 0u;
  quantity_ = 0u;
  level_ = 0u;
  quality_ = 0u;
  flags_ = 0u;
  origin_ = 0u;
  custom_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  custom_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  interior_item_ = NULL;
  in_use_ = false;
  style_ = 0u;
  original_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconItem::~CSOEconItem() {
  SharedDtor();
}

void CSOEconItem::SharedDtor() {
  if (custom_name_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_name_;
  }
  if (custom_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_desc_;
  }
  if (this != default_instance_) {
    delete interior_item_;
  }
}

void CSOEconItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconItem_descriptor_;
}

const CSOEconItem& CSOEconItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconItem* CSOEconItem::default_instance_ = NULL;

CSOEconItem* CSOEconItem::New() const {
  return new CSOEconItem;
}

void CSOEconItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    account_id_ = 0u;
    inventory_ = 0u;
    def_index_ = 0u;
    quantity_ = 0u;
    level_ = 0u;
    quality_ = 0u;
    flags_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    origin_ = 0u;
    if (has_custom_name()) {
      if (custom_name_ != &::google::protobuf::internal::kEmptyString) {
        custom_name_->clear();
      }
    }
    if (has_custom_desc()) {
      if (custom_desc_ != &::google::protobuf::internal::kEmptyString) {
        custom_desc_->clear();
      }
    }
    if (has_interior_item()) {
      if (interior_item_ != NULL) interior_item_->::CSOEconItem::Clear();
    }
    in_use_ = false;
    style_ = 0u;
    original_id_ = GOOGLE_ULONGLONG(0);
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }
      
      // optional uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inventory;
        break;
      }
      
      // optional uint32 inventory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inventory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inventory_)));
          set_has_inventory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_def_index;
        break;
      }
      
      // optional uint32 def_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          set_has_def_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quantity;
        break;
      }
      
      // optional uint32 quantity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }
      
      // optional uint32 quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_flags;
        break;
      }
      
      // optional uint32 flags = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_origin;
        break;
      }
      
      // optional uint32 origin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
          set_has_origin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_custom_name;
        break;
      }
      
      // optional string custom_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custom_name().data(), this->custom_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_custom_desc;
        break;
      }
      
      // optional string custom_desc = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custom_desc().data(), this->custom_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_attribute;
        break;
      }
      
      // repeated .CSOEconItemAttribute attribute = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_attribute;
        if (input->ExpectTag(106)) goto parse_interior_item;
        break;
      }
      
      // optional .CSOEconItem interior_item = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interior_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interior_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_in_use;
        break;
      }
      
      // optional bool in_use = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_use_)));
          set_has_in_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_style;
        break;
      }
      
      // optional uint32 style = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_original_id;
        break;
      }
      
      // optional uint64 original_id = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &original_id_)));
          set_has_original_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // optional uint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }
  
  // optional uint32 inventory = 3;
  if (has_inventory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inventory(), output);
  }
  
  // optional uint32 def_index = 4;
  if (has_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->def_index(), output);
  }
  
  // optional uint32 quantity = 5;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->quantity(), output);
  }
  
  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }
  
  // optional uint32 quality = 7;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->quality(), output);
  }
  
  // optional uint32 flags = 8 [default = 0];
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->flags(), output);
  }
  
  // optional uint32 origin = 9;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->origin(), output);
  }
  
  // optional string custom_name = 10;
  if (has_custom_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_name().data(), this->custom_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->custom_name(), output);
  }
  
  // optional string custom_desc = 11;
  if (has_custom_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_desc().data(), this->custom_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->custom_desc(), output);
  }
  
  // repeated .CSOEconItemAttribute attribute = 12;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->attribute(i), output);
  }
  
  // optional .CSOEconItem interior_item = 13;
  if (has_interior_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->interior_item(), output);
  }
  
  // optional bool in_use = 14 [default = false];
  if (has_in_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->in_use(), output);
  }
  
  // optional uint32 style = 15 [default = 0];
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->style(), output);
  }
  
  // optional uint64 original_id = 16 [default = 0];
  if (has_original_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->original_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // optional uint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }
  
  // optional uint32 inventory = 3;
  if (has_inventory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inventory(), target);
  }
  
  // optional uint32 def_index = 4;
  if (has_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->def_index(), target);
  }
  
  // optional uint32 quantity = 5;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->quantity(), target);
  }
  
  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }
  
  // optional uint32 quality = 7;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->quality(), target);
  }
  
  // optional uint32 flags = 8 [default = 0];
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->flags(), target);
  }
  
  // optional uint32 origin = 9;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->origin(), target);
  }
  
  // optional string custom_name = 10;
  if (has_custom_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_name().data(), this->custom_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->custom_name(), target);
  }
  
  // optional string custom_desc = 11;
  if (has_custom_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_desc().data(), this->custom_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->custom_desc(), target);
  }
  
  // repeated .CSOEconItemAttribute attribute = 12;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->attribute(i), target);
  }
  
  // optional .CSOEconItem interior_item = 13;
  if (has_interior_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->interior_item(), target);
  }
  
  // optional bool in_use = 14 [default = false];
  if (has_in_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->in_use(), target);
  }
  
  // optional uint32 style = 15 [default = 0];
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->style(), target);
  }
  
  // optional uint64 original_id = 16 [default = 0];
  if (has_original_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->original_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 inventory = 3;
    if (has_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inventory());
    }
    
    // optional uint32 def_index = 4;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }
    
    // optional uint32 quantity = 5;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }
    
    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }
    
    // optional uint32 flags = 8 [default = 0];
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 origin = 9;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }
    
    // optional string custom_name = 10;
    if (has_custom_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_name());
    }
    
    // optional string custom_desc = 11;
    if (has_custom_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_desc());
    }
    
    // optional .CSOEconItem interior_item = 13;
    if (has_interior_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->interior_item());
    }
    
    // optional bool in_use = 14 [default = false];
    if (has_in_use()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 style = 15 [default = 0];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style());
    }
    
    // optional uint64 original_id = 16 [default = 0];
    if (has_original_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->original_id());
    }
    
  }
  // repeated .CSOEconItemAttribute attribute = 12;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconItem::MergeFrom(const CSOEconItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_inventory()) {
      set_inventory(from.inventory());
    }
    if (from.has_def_index()) {
      set_def_index(from.def_index());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_origin()) {
      set_origin(from.origin());
    }
    if (from.has_custom_name()) {
      set_custom_name(from.custom_name());
    }
    if (from.has_custom_desc()) {
      set_custom_desc(from.custom_desc());
    }
    if (from.has_interior_item()) {
      mutable_interior_item()->::CSOEconItem::MergeFrom(from.interior_item());
    }
    if (from.has_in_use()) {
      set_in_use(from.in_use());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_original_id()) {
      set_original_id(from.original_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItem::CopyFrom(const CSOEconItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItem::IsInitialized() const {
  
  return true;
}

void CSOEconItem::Swap(CSOEconItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(account_id_, other->account_id_);
    std::swap(inventory_, other->inventory_);
    std::swap(def_index_, other->def_index_);
    std::swap(quantity_, other->quantity_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(flags_, other->flags_);
    std::swap(origin_, other->origin_);
    std::swap(custom_name_, other->custom_name_);
    std::swap(custom_desc_, other->custom_desc_);
    attribute_.Swap(&other->attribute_);
    std::swap(interior_item_, other->interior_item_);
    std::swap(in_use_, other->in_use_);
    std::swap(style_, other->style_);
    std::swap(original_id_, other->original_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconItem_descriptor_;
  metadata.reflection = CSOEconItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSortItems::kSortTypeFieldNumber;
#endif  // !_MSC_VER

CMsgSortItems::CMsgSortItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSortItems::InitAsDefaultInstance() {
}

CMsgSortItems::CMsgSortItems(const CMsgSortItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSortItems::SharedCtor() {
  _cached_size_ = 0;
  sort_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSortItems::~CMsgSortItems() {
  SharedDtor();
}

void CMsgSortItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSortItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSortItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSortItems_descriptor_;
}

const CMsgSortItems& CMsgSortItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSortItems* CMsgSortItems::default_instance_ = NULL;

CMsgSortItems* CMsgSortItems::New() const {
  return new CMsgSortItems;
}

void CMsgSortItems::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sort_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSortItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sort_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_type_)));
          set_has_sort_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSortItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sort_type = 1;
  if (has_sort_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sort_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSortItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sort_type = 1;
  if (has_sort_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sort_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSortItems::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sort_type = 1;
    if (has_sort_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sort_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSortItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSortItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSortItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSortItems::MergeFrom(const CMsgSortItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sort_type()) {
      set_sort_type(from.sort_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSortItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSortItems::CopyFrom(const CMsgSortItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSortItems::IsInitialized() const {
  
  return true;
}

void CMsgSortItems::Swap(CMsgSortItems* other) {
  if (other != this) {
    std::swap(sort_type_, other->sort_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSortItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSortItems_descriptor_;
  metadata.reflection = CMsgSortItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOEconClaimCode::kAccountIdFieldNumber;
const int CSOEconClaimCode::kCodeTypeFieldNumber;
const int CSOEconClaimCode::kTimeAcquiredFieldNumber;
const int CSOEconClaimCode::kCodeFieldNumber;
#endif  // !_MSC_VER

CSOEconClaimCode::CSOEconClaimCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconClaimCode::InitAsDefaultInstance() {
}

CSOEconClaimCode::CSOEconClaimCode(const CSOEconClaimCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconClaimCode::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  code_type_ = 0u;
  time_acquired_ = 0u;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconClaimCode::~CSOEconClaimCode() {
  SharedDtor();
}

void CSOEconClaimCode::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void CSOEconClaimCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconClaimCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconClaimCode_descriptor_;
}

const CSOEconClaimCode& CSOEconClaimCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconClaimCode* CSOEconClaimCode::default_instance_ = NULL;

CSOEconClaimCode* CSOEconClaimCode::New() const {
  return new CSOEconClaimCode;
}

void CSOEconClaimCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    code_type_ = 0u;
    time_acquired_ = 0u;
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconClaimCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code_type;
        break;
      }
      
      // optional uint32 code_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_type_)));
          set_has_code_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_acquired;
        break;
      }
      
      // optional uint32 time_acquired = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_acquired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_acquired_)));
          set_has_time_acquired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_code;
        break;
      }
      
      // optional string code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconClaimCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 code_type = 2;
  if (has_code_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code_type(), output);
  }
  
  // optional uint32 time_acquired = 3;
  if (has_time_acquired()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_acquired(), output);
  }
  
  // optional string code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconClaimCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 code_type = 2;
  if (has_code_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code_type(), target);
  }
  
  // optional uint32 time_acquired = 3;
  if (has_time_acquired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_acquired(), target);
  }
  
  // optional string code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconClaimCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 code_type = 2;
    if (has_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code_type());
    }
    
    // optional uint32 time_acquired = 3;
    if (has_time_acquired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_acquired());
    }
    
    // optional string code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconClaimCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconClaimCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconClaimCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconClaimCode::MergeFrom(const CSOEconClaimCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_code_type()) {
      set_code_type(from.code_type());
    }
    if (from.has_time_acquired()) {
      set_time_acquired(from.time_acquired());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconClaimCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconClaimCode::CopyFrom(const CSOEconClaimCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconClaimCode::IsInitialized() const {
  
  return true;
}

void CSOEconClaimCode::Swap(CSOEconClaimCode* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(code_type_, other->code_type_);
    std::swap(time_acquired_, other->time_acquired_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconClaimCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconClaimCode_descriptor_;
  metadata.reflection = CSOEconClaimCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgStoreGetUserData::kPriceSheetVersionFieldNumber;
#endif  // !_MSC_VER

CMsgStoreGetUserData::CMsgStoreGetUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgStoreGetUserData::InitAsDefaultInstance() {
}

CMsgStoreGetUserData::CMsgStoreGetUserData(const CMsgStoreGetUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgStoreGetUserData::SharedCtor() {
  _cached_size_ = 0;
  price_sheet_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStoreGetUserData::~CMsgStoreGetUserData() {
  SharedDtor();
}

void CMsgStoreGetUserData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgStoreGetUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStoreGetUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStoreGetUserData_descriptor_;
}

const CMsgStoreGetUserData& CMsgStoreGetUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgStoreGetUserData* CMsgStoreGetUserData::default_instance_ = NULL;

CMsgStoreGetUserData* CMsgStoreGetUserData::New() const {
  return new CMsgStoreGetUserData;
}

void CMsgStoreGetUserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    price_sheet_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStoreGetUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 price_sheet_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &price_sheet_version_)));
          set_has_price_sheet_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgStoreGetUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 price_sheet_version = 1;
  if (has_price_sheet_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->price_sheet_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgStoreGetUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 price_sheet_version = 1;
  if (has_price_sheet_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->price_sheet_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgStoreGetUserData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 price_sheet_version = 1;
    if (has_price_sheet_version()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStoreGetUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStoreGetUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStoreGetUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStoreGetUserData::MergeFrom(const CMsgStoreGetUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price_sheet_version()) {
      set_price_sheet_version(from.price_sheet_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStoreGetUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStoreGetUserData::CopyFrom(const CMsgStoreGetUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStoreGetUserData::IsInitialized() const {
  
  return true;
}

void CMsgStoreGetUserData::Swap(CMsgStoreGetUserData* other) {
  if (other != this) {
    std::swap(price_sheet_version_, other->price_sheet_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStoreGetUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStoreGetUserData_descriptor_;
  metadata.reflection = CMsgStoreGetUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgStoreGetUserDataResponse::kResultFieldNumber;
const int CMsgStoreGetUserDataResponse::kCurrencyFieldNumber;
const int CMsgStoreGetUserDataResponse::kCountryFieldNumber;
const int CMsgStoreGetUserDataResponse::kPriceSheetVersionFieldNumber;
const int CMsgStoreGetUserDataResponse::kExperimentDataFieldNumber;
const int CMsgStoreGetUserDataResponse::kFeaturedItemIdxFieldNumber;
const int CMsgStoreGetUserDataResponse::kShowHatDescriptionsFieldNumber;
const int CMsgStoreGetUserDataResponse::kPriceSheetFieldNumber;
const int CMsgStoreGetUserDataResponse::kDefaultItemSortFieldNumber;
#endif  // !_MSC_VER

CMsgStoreGetUserDataResponse::CMsgStoreGetUserDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgStoreGetUserDataResponse::InitAsDefaultInstance() {
}

CMsgStoreGetUserDataResponse::CMsgStoreGetUserDataResponse(const CMsgStoreGetUserDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgStoreGetUserDataResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  currency_ = 0;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_sheet_version_ = 0u;
  experiment_data_ = GOOGLE_ULONGLONG(0);
  featured_item_idx_ = 0;
  show_hat_descriptions_ = true;
  price_sheet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  default_item_sort_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStoreGetUserDataResponse::~CMsgStoreGetUserDataResponse() {
  SharedDtor();
}

void CMsgStoreGetUserDataResponse::SharedDtor() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (price_sheet_ != &::google::protobuf::internal::kEmptyString) {
    delete price_sheet_;
  }
  if (this != default_instance_) {
  }
}

void CMsgStoreGetUserDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStoreGetUserDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStoreGetUserDataResponse_descriptor_;
}

const CMsgStoreGetUserDataResponse& CMsgStoreGetUserDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgStoreGetUserDataResponse* CMsgStoreGetUserDataResponse::default_instance_ = NULL;

CMsgStoreGetUserDataResponse* CMsgStoreGetUserDataResponse::New() const {
  return new CMsgStoreGetUserDataResponse;
}

void CMsgStoreGetUserDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    currency_ = 0;
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    price_sheet_version_ = 0u;
    experiment_data_ = GOOGLE_ULONGLONG(0);
    featured_item_idx_ = 0;
    show_hat_descriptions_ = true;
    if (has_price_sheet()) {
      if (price_sheet_ != &::google::protobuf::internal::kEmptyString) {
        price_sheet_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    default_item_sort_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStoreGetUserDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currency;
        break;
      }
      
      // optional int32 currency = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_country;
        break;
      }
      
      // optional string country = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_price_sheet_version;
        break;
      }
      
      // optional fixed32 price_sheet_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_price_sheet_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &price_sheet_version_)));
          set_has_price_sheet_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_experiment_data;
        break;
      }
      
      // optional uint64 experiment_data = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experiment_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &experiment_data_)));
          set_has_experiment_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_featured_item_idx;
        break;
      }
      
      // optional int32 featured_item_idx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featured_item_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &featured_item_idx_)));
          set_has_featured_item_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_show_hat_descriptions;
        break;
      }
      
      // optional bool show_hat_descriptions = 7 [default = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_hat_descriptions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_hat_descriptions_)));
          set_has_show_hat_descriptions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_price_sheet;
        break;
      }
      
      // optional bytes price_sheet = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_price_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_price_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_default_item_sort;
        break;
      }
      
      // optional int32 default_item_sort = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_item_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_item_sort_)));
          set_has_default_item_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgStoreGetUserDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional int32 currency = 2;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currency(), output);
  }
  
  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->country(), output);
  }
  
  // optional fixed32 price_sheet_version = 4;
  if (has_price_sheet_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->price_sheet_version(), output);
  }
  
  // optional uint64 experiment_data = 5 [default = 0];
  if (has_experiment_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->experiment_data(), output);
  }
  
  // optional int32 featured_item_idx = 6;
  if (has_featured_item_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->featured_item_idx(), output);
  }
  
  // optional bool show_hat_descriptions = 7 [default = true];
  if (has_show_hat_descriptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->show_hat_descriptions(), output);
  }
  
  // optional bytes price_sheet = 8;
  if (has_price_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->price_sheet(), output);
  }
  
  // optional int32 default_item_sort = 9 [default = 0];
  if (has_default_item_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->default_item_sort(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgStoreGetUserDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional int32 currency = 2;
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currency(), target);
  }
  
  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country(), target);
  }
  
  // optional fixed32 price_sheet_version = 4;
  if (has_price_sheet_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->price_sheet_version(), target);
  }
  
  // optional uint64 experiment_data = 5 [default = 0];
  if (has_experiment_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->experiment_data(), target);
  }
  
  // optional int32 featured_item_idx = 6;
  if (has_featured_item_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->featured_item_idx(), target);
  }
  
  // optional bool show_hat_descriptions = 7 [default = true];
  if (has_show_hat_descriptions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->show_hat_descriptions(), target);
  }
  
  // optional bytes price_sheet = 8;
  if (has_price_sheet()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->price_sheet(), target);
  }
  
  // optional int32 default_item_sort = 9 [default = 0];
  if (has_default_item_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->default_item_sort(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgStoreGetUserDataResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional int32 currency = 2;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }
    
    // optional string country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }
    
    // optional fixed32 price_sheet_version = 4;
    if (has_price_sheet_version()) {
      total_size += 1 + 4;
    }
    
    // optional uint64 experiment_data = 5 [default = 0];
    if (has_experiment_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->experiment_data());
    }
    
    // optional int32 featured_item_idx = 6;
    if (has_featured_item_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->featured_item_idx());
    }
    
    // optional bool show_hat_descriptions = 7 [default = true];
    if (has_show_hat_descriptions()) {
      total_size += 1 + 1;
    }
    
    // optional bytes price_sheet = 8;
    if (has_price_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->price_sheet());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 default_item_sort = 9 [default = 0];
    if (has_default_item_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_item_sort());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStoreGetUserDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStoreGetUserDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStoreGetUserDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStoreGetUserDataResponse::MergeFrom(const CMsgStoreGetUserDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_price_sheet_version()) {
      set_price_sheet_version(from.price_sheet_version());
    }
    if (from.has_experiment_data()) {
      set_experiment_data(from.experiment_data());
    }
    if (from.has_featured_item_idx()) {
      set_featured_item_idx(from.featured_item_idx());
    }
    if (from.has_show_hat_descriptions()) {
      set_show_hat_descriptions(from.show_hat_descriptions());
    }
    if (from.has_price_sheet()) {
      set_price_sheet(from.price_sheet());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_default_item_sort()) {
      set_default_item_sort(from.default_item_sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStoreGetUserDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStoreGetUserDataResponse::CopyFrom(const CMsgStoreGetUserDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStoreGetUserDataResponse::IsInitialized() const {
  
  return true;
}

void CMsgStoreGetUserDataResponse::Swap(CMsgStoreGetUserDataResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(currency_, other->currency_);
    std::swap(country_, other->country_);
    std::swap(price_sheet_version_, other->price_sheet_version_);
    std::swap(experiment_data_, other->experiment_data_);
    std::swap(featured_item_idx_, other->featured_item_idx_);
    std::swap(show_hat_descriptions_, other->show_hat_descriptions_);
    std::swap(price_sheet_, other->price_sheet_);
    std::swap(default_item_sort_, other->default_item_sort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStoreGetUserDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStoreGetUserDataResponse_descriptor_;
  metadata.reflection = CMsgStoreGetUserDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgStartupCheck::CMsgStartupCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgStartupCheck::InitAsDefaultInstance() {
}

CMsgStartupCheck::CMsgStartupCheck(const CMsgStartupCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgStartupCheck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStartupCheck::~CMsgStartupCheck() {
  SharedDtor();
}

void CMsgStartupCheck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgStartupCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStartupCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStartupCheck_descriptor_;
}

const CMsgStartupCheck& CMsgStartupCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgStartupCheck* CMsgStartupCheck::default_instance_ = NULL;

CMsgStartupCheck* CMsgStartupCheck::New() const {
  return new CMsgStartupCheck;
}

void CMsgStartupCheck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStartupCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgStartupCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgStartupCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgStartupCheck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStartupCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStartupCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStartupCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStartupCheck::MergeFrom(const CMsgStartupCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStartupCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartupCheck::CopyFrom(const CMsgStartupCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartupCheck::IsInitialized() const {
  
  return true;
}

void CMsgStartupCheck::Swap(CMsgStartupCheck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStartupCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStartupCheck_descriptor_;
  metadata.reflection = CMsgStartupCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgStartupCheckResponse::kItemSchemaVersionFieldNumber;
#endif  // !_MSC_VER

CMsgStartupCheckResponse::CMsgStartupCheckResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgStartupCheckResponse::InitAsDefaultInstance() {
}

CMsgStartupCheckResponse::CMsgStartupCheckResponse(const CMsgStartupCheckResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgStartupCheckResponse::SharedCtor() {
  _cached_size_ = 0;
  item_schema_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStartupCheckResponse::~CMsgStartupCheckResponse() {
  SharedDtor();
}

void CMsgStartupCheckResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgStartupCheckResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStartupCheckResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStartupCheckResponse_descriptor_;
}

const CMsgStartupCheckResponse& CMsgStartupCheckResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgStartupCheckResponse* CMsgStartupCheckResponse::default_instance_ = NULL;

CMsgStartupCheckResponse* CMsgStartupCheckResponse::New() const {
  return new CMsgStartupCheckResponse;
}

void CMsgStartupCheckResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_schema_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStartupCheckResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 item_schema_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &item_schema_version_)));
          set_has_item_schema_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgStartupCheckResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 item_schema_version = 1;
  if (has_item_schema_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->item_schema_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgStartupCheckResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 item_schema_version = 1;
  if (has_item_schema_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->item_schema_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgStartupCheckResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 item_schema_version = 1;
    if (has_item_schema_version()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStartupCheckResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStartupCheckResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStartupCheckResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStartupCheckResponse::MergeFrom(const CMsgStartupCheckResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_schema_version()) {
      set_item_schema_version(from.item_schema_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStartupCheckResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartupCheckResponse::CopyFrom(const CMsgStartupCheckResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartupCheckResponse::IsInitialized() const {
  
  return true;
}

void CMsgStartupCheckResponse::Swap(CMsgStartupCheckResponse* other) {
  if (other != this) {
    std::swap(item_schema_version_, other->item_schema_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStartupCheckResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStartupCheckResponse_descriptor_;
  metadata.reflection = CMsgStartupCheckResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgUpdateItemSchema::kItemsGameFieldNumber;
#endif  // !_MSC_VER

CMsgUpdateItemSchema::CMsgUpdateItemSchema()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgUpdateItemSchema::InitAsDefaultInstance() {
}

CMsgUpdateItemSchema::CMsgUpdateItemSchema(const CMsgUpdateItemSchema& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgUpdateItemSchema::SharedCtor() {
  _cached_size_ = 0;
  items_game_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgUpdateItemSchema::~CMsgUpdateItemSchema() {
  SharedDtor();
}

void CMsgUpdateItemSchema::SharedDtor() {
  if (items_game_ != &::google::protobuf::internal::kEmptyString) {
    delete items_game_;
  }
  if (this != default_instance_) {
  }
}

void CMsgUpdateItemSchema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUpdateItemSchema::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgUpdateItemSchema_descriptor_;
}

const CMsgUpdateItemSchema& CMsgUpdateItemSchema::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgUpdateItemSchema* CMsgUpdateItemSchema::default_instance_ = NULL;

CMsgUpdateItemSchema* CMsgUpdateItemSchema::New() const {
  return new CMsgUpdateItemSchema;
}

void CMsgUpdateItemSchema::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_items_game()) {
      if (items_game_ != &::google::protobuf::internal::kEmptyString) {
        items_game_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgUpdateItemSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes items_game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_items_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgUpdateItemSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes items_game = 1;
  if (has_items_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->items_game(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgUpdateItemSchema::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes items_game = 1;
  if (has_items_game()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->items_game(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgUpdateItemSchema::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes items_game = 1;
    if (has_items_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->items_game());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUpdateItemSchema::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgUpdateItemSchema* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgUpdateItemSchema*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgUpdateItemSchema::MergeFrom(const CMsgUpdateItemSchema& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_items_game()) {
      set_items_game(from.items_game());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgUpdateItemSchema::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateItemSchema::CopyFrom(const CMsgUpdateItemSchema& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateItemSchema::IsInitialized() const {
  
  return true;
}

void CMsgUpdateItemSchema::Swap(CMsgUpdateItemSchema* other) {
  if (other != this) {
    std::swap(items_game_, other->items_game_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgUpdateItemSchema::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgUpdateItemSchema_descriptor_;
  metadata.reflection = CMsgUpdateItemSchema_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
